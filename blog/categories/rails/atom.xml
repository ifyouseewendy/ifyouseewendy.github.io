<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Wendi's Notes]]></title>
  <link href="http://ifyouseewendy.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://ifyouseewendy.github.io/"/>
  <updated>2014-08-18T17:09:34+08:00</updated>
  <id>http://ifyouseewendy.github.io/</id>
  <author>
    <name><![CDATA[Wendi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Inside ActiveSupport Notifications]]></title>
    <link href="http://ifyouseewendy.github.io/blog/2014/06/03/inside-activesupport-notifications/"/>
    <updated>2014-06-03T00:45:35+08:00</updated>
    <id>http://ifyouseewendy.github.io/blog/2014/06/03/inside-activesupport-notifications</id>
    <content type="html"><![CDATA[<ul>
<li>Read API doc first, <a href="ActiveSupport::Notifications">ActiveSupport::Notifications</a>.</li>
<li>About hooks inside Rails for instrumentation, check the edge doc on <a href="http://edgeguides.rubyonrails.org/active_support_instrumentation.html">Active Support Instrumentation</a>.</li>
</ul>

<p>Then let&#39;s read through the <strong>ActiveSupport::Notifications</strong> source code.</p>

<h2>ActiveSupport::Notifications</h2>

<h3>File name</h3>

<p><a href="https://github.com/rails/rails/blob/master/activesupport%2Flib%2Factive_support%2Fnotifications.rb">activesupport/lib/active_support/notifications.rb</a></p>

<h3>Dependency</h3>

<ul>
<li><code>active_support/notifications/instrumenter</code></li>
<li><code>active_support/notifications/fanout</code></li>
<li><code>active_support/per_thread_registry</code></li>
</ul>

<h3>Brief</h3>

<ol>
<li>A class attribute accessor <code>notifier</code>, which is initialized by <code>Fanout.new</code>.</li>
<li>Several class methods as the interfaces exposed, which encapsulate <code>notifer</code> to do the real work.</li>
<li>A class named <strong>InstrumentationRegistry</strong>.</li>
</ol>

<h3>Specification</h3>

<h4>Class Variables</h4>

<p><code>self.notifier = Fanout.new</code></p>

<h4>Class Methods</h4>

<ul>
<li><p><code>subscribe</code>, <code>unsubscribe</code> and <code>publish</code> all delegate to <code>notifier</code>, like</p>
<div class="highlight"><pre><code class="ruby"><span class="k">def</span> <span class="nf">subscribe</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
  <span class="n">notifier</span><span class="o">.</span><span class="n">subscribe</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></li>
<li><p><code>subscribed(callback, *args, &amp;block)</code>, <code>subscribe</code> while <code>block</code> is running, and <code>unsubscribe</code> while running is over.</p>
<div class="highlight"><pre><code class="ruby"><span class="k">def</span> <span class="nf">subscribed</span><span class="p">(</span><span class="n">callback</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
  <span class="n">subscriber</span> <span class="o">=</span> <span class="n">subscribe</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">callback</span><span class="p">)</span>
  <span class="k">yield</span>
<span class="k">ensure</span>
  <span class="n">unsubscribe</span><span class="p">(</span><span class="n">subscriber</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div></li>
<li><p><code>instrument(name, payload = {})</code></p>
<div class="highlight"><pre><code class="ruby"><span class="k">def</span> <span class="nf">instrument</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">payload</span> <span class="o">=</span> <span class="p">{})</span>
  <span class="k">if</span> <span class="n">notifier</span><span class="o">.</span><span class="n">listening?</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
    <span class="n">instrumenter</span><span class="o">.</span><span class="n">instrument</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">payload</span><span class="p">)</span> <span class="p">{</span> <span class="k">yield</span> <span class="n">payload</span> <span class="k">if</span> <span class="nb">block_given?</span> <span class="p">}</span>
  <span class="k">else</span>
    <span class="k">yield</span> <span class="n">payload</span> <span class="k">if</span> <span class="nb">block_given?</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></li>
</ul>

<p><code>notifier.listening?(name)</code> is checking if there are subscribers listening on the event name.</p>

<p><strong><em>And what&#39;s an instrumenter?</em></strong></p>

<p>Check out the <strong>ActiveSupport::Notifications::Instrumenter</strong> below or skip this part temporally.</p>

<p>Let&#39;s talk about <strong>InstrumentationRegistry</strong> first, it is a sub-class defined in <strong>ActiveSupport::Notifications</strong>. It extends <strong>ActiveSupport::PerThreadRegistry</strong> to keep thread safe, and defines <code>#instrumenter_for</code> used for recording <strong>Instrumenter</strong> instance for specific <code>notifier</code>.</p>
<div class="highlight"><pre><code class="ruby"><span class="c1"># This class is a registry which holds all of the +Instrumenter+ objects</span>
<span class="c1"># in a particular thread local. To access the +Instrumenter+ object for a</span>
<span class="c1"># particular +notifier+, you can call the following method:</span>
<span class="c1">#</span>
<span class="c1">#   InstrumentationRegistry.instrumenter_for(notifier)</span>
<span class="c1">#</span>
<span class="c1"># The instrumenters for multiple notifiers are held in a single instance of</span>
<span class="c1"># this class.</span>
<span class="k">class</span> <span class="nc">InstrumentationRegistry</span> <span class="c1"># :nodoc:</span>
  <span class="kp">extend</span> <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:PerThreadRegistry</span>

  <span class="k">def</span> <span class="nf">initialize</span>
    <span class="vi">@registry</span> <span class="o">=</span> <span class="p">{}</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">instrumenter_for</span><span class="p">(</span><span class="n">notifier</span><span class="p">)</span>
    <span class="vi">@registry</span><span class="o">[</span><span class="n">notifier</span><span class="o">]</span> <span class="o">||=</span> <span class="no">Instrumenter</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">notifier</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>Then look back in <strong>ActiveSupport::Notifications</strong> for its usage:</p>
<div class="highlight"><pre><code class="ruby"><span class="k">def</span> <span class="nf">instrumenter</span>
  <span class="no">InstrumentationRegistry</span><span class="o">.</span><span class="n">instance</span><span class="o">.</span><span class="n">instrumenter_for</span><span class="p">(</span><span class="n">notifier</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div>
<p>Extending <strong>ActiveSupport::PerThreadRegistry</strong> gives <strong>InstrumentationRegistry</strong> the <code>instance</code> class methods, returns a thread local <strong>InstrumentationRegistry</strong> instance. Check the <strong>ActiveSupport::PerThreadRegistry</strong> <a href="http://api.rubyonrails.org/classes/ActiveSupport/PerThreadRegistry.html">api</a> for details.</p>

<h2>ActiveSupport::Notifications::Fanout</h2>

<h3>File name</h3>

<p><a href="https://github.com/rails/rails/blob/master/activesupport%2Flib%2Factive_support%2Fnotifications%2Ffanout.rb">activesupport/lib/active_support/notifications/fanout.rb</a></p>

<h3>Dependency</h3>

<ul>
<li><code>mutex_m</code>, a Ruby Std-lib module. <a href="http://www.ruby-doc.org/stdlib-2.1.2//libdoc/mutex_m/rdoc/Mutex_m.html">api</a></li>
<li><code>thread_safe</code>, a collection of thread-safe versions of common core Ruby classes. <a href="https://github.com/headius/thread_safe">api</a></li>
</ul>

<h3>Brief</h3>

<p>This is a default queue implementation that ships with Notifications. It just pushes events to all registered log subscribers.</p>

<p>This class is thread safe. All methods are reentrant.</p>

<h3>Specification</h3>

<h4>Instance Variables</h4>

<p><code>@subscribers</code>, an array, records the subscribers.</p>

<p><code>@listeners_for</code>, a reverse map(hash). It maps the event name to the subscribers. Initialized by <code>ThreadSafe::Cache.new</code>, <a href="https://github.com/headius/thread_safe">thread_safe</a> gem says:</p>

<blockquote>
<p><code>ThreadSafe::Cache</code> also exists, as a hash-like object, and should have
much better performance characteristics esp. under high concurrency than
<code>ThreadSafe::Hash</code>. However, <code>ThreadSafe::Cache</code> is not strictly semantically
equivalent to a ruby <code>Hash</code> -- for instance, it does not necessarily retain
ordering by insertion time as <code>Hash</code> does. For most uses it should do fine
though, and we recommend you consider <code>ThreadSafe::Cache</code> instead of
<code>ThreadSafe::Hash</code> for your concurrency-safe hash needs. It understands some
options when created (depending on your ruby platform) that control some of the
internals.</p>
</blockquote>

<h4>Instance Methods</h4>

<ul>
<li><p><code>subscribe(pattern = nil, block = Proc.new)</code></p>

<p><code>ActiveSupport::Notifications.subscribe</code> use this method on <code>notifier</code> to subscribe event name based on <code>pattern</code> and a <code>block</code> to do the instrumentation callback.</p>

<p>It initialize a <em>subscriber</em> with <code>Subscribers.new pattern, block</code>, use <code>synchronize</code>(for thread safe) to record <em>subscriber</em> into <code>@subscribers</code>, and clear the <code>@listeners_for</code>, then returns the <em>subscriber</em>.</p>
<div class="highlight"><pre><code class="ruby"><span class="k">def</span> <span class="nf">subscribe</span><span class="p">(</span><span class="n">pattern</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">,</span> <span class="n">block</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
  <span class="n">subscriber</span> <span class="o">=</span> <span class="no">Subscribers</span><span class="o">.</span><span class="n">new</span> <span class="n">pattern</span><span class="p">,</span> <span class="n">block</span>
  <span class="n">synchronize</span> <span class="k">do</span>
    <span class="vi">@subscribers</span> <span class="o">&lt;&lt;</span> <span class="n">subscriber</span>
    <span class="vi">@listeners_for</span><span class="o">.</span><span class="n">clear</span>
  <span class="k">end</span>
  <span class="n">subscriber</span>
<span class="k">end</span>
</code></pre></div></li>
<li><p><code>unsubscribe(subscriber)</code></p>
<div class="highlight"><pre><code class="ruby"><span class="n">synchronize</span> <span class="k">do</span>
  <span class="vi">@subscribers</span><span class="o">.</span><span class="n">reject!</span> <span class="p">{</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">s</span><span class="o">.</span><span class="n">matches?</span><span class="p">(</span><span class="n">subscriber</span><span class="p">)</span> <span class="p">}</span>
    <span class="vi">@listeners_for</span><span class="o">.</span><span class="n">clear</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>Note the <code>matches?</code> method on subscriber. Every subscriber object defines this method, <strong>Subscribers::Evented</strong> and <strong>Subscribers::Timed</strong> defines it like this:</p>
<div class="highlight"><pre><code class="ruby"><span class="k">def</span> <span class="nf">matches?</span><span class="p">(</span><span class="n">subscriber_or_name</span><span class="p">)</span>
  <span class="nb">self</span> <span class="o">===</span> <span class="n">subscriber_or_name</span> <span class="o">||</span>
    <span class="vi">@pattern</span> <span class="o">&amp;&amp;</span> <span class="vi">@pattern</span> <span class="o">===</span> <span class="n">subscriber_or_name</span>
<span class="k">end</span>
</code></pre></div>
<p>Unsubscribe a subscriber object or unsubscribe based on the <code>@pattern</code> matching.</p>

<p><strong>Subscribers::AllMessages</strong> alias <code>matches?</code> to <code>===</code>, just do the type matching.</p></li>
<li><p><code>start</code>, <code>finish</code>, <code>publish(name, id, payload)</code></p>

<p>just delegates to subscribers based on the event name.</p>
<div class="highlight"><pre><code class="ruby"><span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="nb">id</span><span class="p">,</span> <span class="n">payload</span><span class="p">)</span>
  <span class="n">listeners_for</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">s</span><span class="o">.</span><span class="n">start</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="nb">id</span><span class="p">,</span> <span class="n">payload</span><span class="p">)</span> <span class="p">}</span>
<span class="k">end</span>
</code></pre></div></li>
<li><p><code>listeners_for(name)</code></p>

<p>a helper method, equals fetch or set on <code>@listeners_for</code>, returns the subscribers based on the event name.</p>
<div class="highlight"><pre><code class="ruby"><span class="k">def</span> <span class="nf">listeners_for</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="c1"># this is correctly done double-checked locking (ThreadSafe::Cache&#39;s lookups have volatile semantics)</span>
  <span class="vi">@listeners_for</span><span class="o">[</span><span class="nb">name</span><span class="o">]</span> <span class="o">||</span> <span class="n">synchronize</span> <span class="k">do</span>
    <span class="c1"># use synchronisation when accessing @subscribers</span>
    <span class="vi">@listeners_for</span><span class="o">[</span><span class="nb">name</span><span class="o">]</span> <span class="o">||=</span> <span class="vi">@subscribers</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">s</span><span class="o">.</span><span class="n">subscribed_to?</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></li>
<li><p><code>listening?(name)</code></p></li>
</ul>

<p>a helper method, checks if <code>listeners_for(name).any?</code>.</p>

<ul>
<li><code>wait</code></li>
</ul>

<p>as this is a sync queue, this method is left blank.</p>

<h4>Modules</h4>

<ul>
<li><p><strong>Subscribers</strong></p>

<p><strong>Subscribers</strong> defines a class method <code>new</code> and three sub-classes: <strong>Evented</strong>, <strong>Timed</strong>, and <strong>AllMessages</strong>. <strong>Timed</strong> inheritates <strong>Evented</strong>, and <strong>AllMessages</strong> encapsulates an <strong>Evented</strong> object.</p>

<p>About <code>self.new(pattern, listener)</code>, remember where does <code>Subscribers.new</code> get called?</p>

<p>It&#39;s in <code>Fanout#subscribe(pattern = nil, block = Proc.new)</code>. If the <code>block</code> can duck-typing <code>:start</code> and <code>:finish</code>, it&#39;ll initialize a subscriber by <strong>Evented</strong> with <code>pattern</code> and <code>block</code> recorded, otherwise by <strong>Timed</strong>. And if <code>pattern</code> is nil, which means calling <code>ActiveSupport::Notifications.subscribe</code> without event name, <code>Subscribers.new</code> returns an <strong>AllMessages</strong> object which initialized with a subscriber defined above. Otherwise(if <code>pattern</code> presents) returns a subscriber directly.</p>

<p>Normally we use <code>ActiveSupport::Notifications.subscribe</code> in two ways:</p>

<ul>
<li>subscribe all events, which means no <code>pattern</code> passed, and a <strong>Subscribers::AllMessages</strong> instance saved.</li>
<li>the <code>block</code> we pass to <code>ActiveSupport::Notifications.subscribe</code> won&#39;t respond to <code>start</code> and <code>finish</code>, which means a <strong>Subscribers::Timed</strong> instance saved.</li>
</ul>

<p>These two ways have no conflicts: if passing a nil pattern and a block, it just returns an <strong>Subscribers::AllMessages</strong> instance which has a <strong>Subscribers::Timed</strong> instance wrapped.</p>

<p>So let&#39;s check it out what does a <strong>Subscribers::Timed</strong> instance respond?</p>
<div class="highlight"><pre><code class="ruby"><span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="nb">id</span><span class="p">,</span> <span class="n">payload</span><span class="p">)</span>
  <span class="n">timestack</span> <span class="o">=</span> <span class="no">Thread</span><span class="o">.</span><span class="n">current</span><span class="o">[</span><span class="ss">:_timestack</span><span class="o">]</span> <span class="o">||=</span> <span class="o">[]</span>
  <span class="n">timestack</span><span class="o">.</span><span class="n">push</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">finish</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="nb">id</span><span class="p">,</span> <span class="n">payload</span><span class="p">)</span>
  <span class="n">timestack</span> <span class="o">=</span> <span class="no">Thread</span><span class="o">.</span><span class="n">current</span><span class="o">[</span><span class="ss">:_timestack</span><span class="o">]</span>
  <span class="n">started</span> <span class="o">=</span> <span class="n">timestack</span><span class="o">.</span><span class="n">pop</span>
  <span class="vi">@delegate</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">started</span><span class="p">,</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="p">,</span> <span class="nb">id</span><span class="p">,</span> <span class="n">payload</span><span class="p">)</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">publish</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
  <span class="vi">@delegate</span><span class="o">.</span><span class="n">call</span> <span class="nb">name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">subscribed_to?</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="vi">@pattern</span> <span class="o">===</span> <span class="nb">name</span><span class="o">.</span><span class="n">to_s</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">matches?</span><span class="p">(</span><span class="n">subscriber_or_name</span><span class="p">)</span>
  <span class="nb">self</span> <span class="o">===</span> <span class="n">subscriber_or_name</span> <span class="o">||</span>
    <span class="vi">@pattern</span> <span class="o">&amp;&amp;</span> <span class="vi">@pattern</span> <span class="o">===</span> <span class="n">subscriber_or_name</span>
<span class="k">end</span>
</code></pre></div></li>
</ul>

<h2>ActiveSupport::Notifications::Instrumenter</h2>

<h3>File name</h3>

<p><a href="https://github.com/rails/rails/blob/master/activesupport%2Flib%2Factive_support%2Fnotifications%2Finstrumenter.rb">activesupport/lib/active_support/notifications/instrumenter.rb</a></p>

<h3>Dependency</h3>

<p><code>securerandom</code>, <a href="http://ruby-doc.org/stdlib-2.1.0/libdoc/securerandom/rdoc/SecureRandom.html">api</a></p>

<h3>Brief</h3>

<h3>Specification</h3>

<h4>Instance Variables</h4>

<p><code>@id</code>, with an <code>attr_reader</code>, generated by <code>SecureRandom.hex(10)</code>.</p>

<p><code>@notifier</code>, records the <strong>Fanout</strong> instance.</p>

<h4>Instance Methods</h4>

<ul>
<li><p><code>start(name, payload)</code>, <code>finish(name, payload)</code></p>
<div class="highlight"><pre><code class="ruby"><span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">payload</span><span class="p">)</span>
  <span class="vi">@notifier</span><span class="o">.</span><span class="n">start</span> <span class="nb">name</span><span class="p">,</span> <span class="vi">@id</span><span class="p">,</span> <span class="n">payload</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">finish</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">payload</span><span class="p">)</span>
  <span class="vi">@notifier</span><span class="o">.</span><span class="n">finish</span> <span class="nb">name</span><span class="p">,</span> <span class="vi">@id</span><span class="p">,</span> <span class="n">payload</span>
<span class="k">end</span>
</code></pre></div></li>
<li><p><code>instrument(name, payload={})</code></p>
<div class="highlight"><pre><code class="ruby"><span class="k">def</span> <span class="nf">instrument</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">payload</span><span class="o">=</span><span class="p">{})</span>
  <span class="n">start</span> <span class="nb">name</span><span class="p">,</span> <span class="n">payload</span>
  <span class="k">begin</span>
    <span class="k">yield</span> <span class="n">payload</span>
  <span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">e</span>
    <span class="n">payload</span><span class="o">[</span><span class="ss">:exception</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="n">e</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">e</span><span class="o">.</span><span class="n">message</span><span class="o">]</span>
    <span class="k">raise</span> <span class="n">e</span>
  <span class="k">ensure</span>
    <span class="n">finish</span> <span class="nb">name</span><span class="p">,</span> <span class="n">payload</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>Where does this method get called? in <code>ActiveSupport::Notifications.instrument</code>:</p>
<div class="highlight"><pre><code class="ruby"><span class="n">instrumenter</span><span class="o">.</span><span class="n">instrument</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">payload</span><span class="p">)</span> <span class="p">{</span> <span class="k">yield</span> <span class="n">payload</span> <span class="k">if</span> <span class="nb">block_given?</span> <span class="p">}</span>
</code></pre></div>
<p>The processing begins with <code>start</code>, ends with <code>finish</code>, instrumenter delegates it to <code>@notifier</code>, and <code>notifier</code> turns to <code>@subscribers</code> which are listening for the event name. And what does <code>@subscribers</code> do with <code>start</code> and <code>finish</code>? Normally we use subscriber objects defined by <code>Subscribers::Timed</code>, which use <code>start</code> to save a beginning timestamp, and <code>finish</code> to save an ending timestamp, and calling the block user passed.</p>

<p>Attention on the control flow, the events get sent even if an error occurs in the passed-in block.</p></li>
</ul>

<h2>ActiveSupport::Notifications::Event</h2>

<h3>File name</h3>

<p><a href="https://github.com/rails/rails/blob/master/activesupport%2Flib%2Factive_support%2Fnotifications%2Finstrumenter.rb">activesupport/lib/active_support/notifications/instrumenter.rb</a></p>

<h3>Dependency</h3>

<h3>Specification</h3>

<p>Note that this class has a <code>@children</code> instance variable recording associations between events, and these two methods:</p>
<div class="highlight"><pre><code class="ruby"><span class="k">def</span> <span class="nf">&lt;&lt;</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>
  <span class="vi">@children</span> <span class="o">&lt;&lt;</span> <span class="n">event</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">parent_of?</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>
  <span class="vi">@children</span><span class="o">.</span><span class="n">include?</span> <span class="n">event</span>
<span class="k">end</span>
</code></pre></div>
<h2>Main Working Flow</h2>

<h3>ActiveSupport::Notifications.subscribe</h3>

<ol>
<li><code>ActiveSupport::Notifications.subscribe(name) {|*args| }</code>.</li>
<li>in <strong>Notficiations.subscribe</strong>, <code>notifier.subscribe(*args, &amp;block)</code>.</li>
<li>in <strong>Fanout#subscribe</strong>, <code>subscriber = Subscribers.new pattern, block</code>, then records subscriber into <code>@subscribers</code>.</li>
</ol>

<h3>ActiveSupport::Notifications.instrument</h3>

<ol>
<li><code>ActiveSupport::Notifications.instrument(name, payload) { }</code>.</li>
<li>in <strong>Notficiations.instrument</strong>, <code>instrumenter.instrument(name, payload) { yield payload if block_given? }</code>.</li>
<li>in <strong>Instrumenter#instrument</strong>, <code>@notifier.start</code>, <code>yield payload</code> and then <code>@notifier.finish</code>.</li>
<li>in <strong>Fanout::Subscribers::Timed#start</strong>, records beginning time.</li>
<li>in <strong>Fanout::Subscribers::Timed#finish</strong>, records ending time, and passing <code>name, start_time, end_time, id, payload</code> to the subscribers callbacks.</li>
</ol>

<h2>MISC</h2>

<p><strong><em>How does ActiveSupport::Notifications keep thread safe?</em></strong></p>

<p><code>extend</code> <strong>ActiveSupport::PerThreadRegistry</strong> in <strong>InstrumentationRegistry</strong>.</p>

<h2>Reference</h2>

<p>Unit test:</p>

<ul>
<li><a href="https://github.com/rails/rails/blob/master/activesupport%2Ftest%2Fnotifications_test.rb">activesupport/test/notifications_test.rb</a></li>
<li><a href="https://github.com/rails/rails/blob/master/activesupport%2Ftest%2Fnotifications%2Fevented_notification_test.rb">activesupport/test/notifications/evented<em>notification</em>test.rb</a></li>
<li><a href="https://github.com/rails/rails/blob/master/activesupport%2Ftest%2Fnotifications%2Finstrumenter_test.rb">activesupport/test/notifications/instrumenter_test.rb</a></li>
</ul>

<p><a href="http://www.paperplanes.de/2012/3/14/on-notifications-logsubscribers-and-bringing-sanity-to-rails-logging.html">On Notifications, Log Subscribers, and Bringing Sanity to Rails&#39; Logging</a><br>
<a href="http://railscasts.com/episodes/249-notifications-in-rails-3">#249 Notifications in Rails 3</a><br>
<a href="https://speakerdeck.com/nextmat/digging-deep-with-activesupportnotifications">Digging Deep with ActiveSupport::Notifications</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails - includes vs. joins]]></title>
    <link href="http://ifyouseewendy.github.io/blog/2014/06/03/rails-includes-vs-joins/"/>
    <updated>2014-06-03T00:32:18+08:00</updated>
    <id>http://ifyouseewendy.github.io/blog/2014/06/03/rails-includes-vs-joins</id>
    <content type="html"><![CDATA[<p><code>includes</code></p>

<p>Eager load the included associations into memory. Fire two queries:</p>

<p>SELECT &quot;products&quot;.* FROM &quot;products&quot; ORDER BY name
    SELECT &quot;categories&quot;.* FROM &quot;categories&quot; WHERE &quot;categories&quot;.&quot;id&quot; IN (2, 1, 5, 4, 3)</p>

<p><code>joins</code></p>

<p>Sometimes,<code>includes</code> will load many redundant fields in association table, <code>joins</code> help to control what columns after <code>SELECT</code>.</p>

<h4>Reference</h4>

<ul>
<li><a href="http://stackoverflow.com/questions/1208636/rails-include-vs-joins/10129946">ruby - Rails :include vs. :joins - Stack Overflow</a></li>
<li><a href="http://railscasts.com/episodes/181-include-vs-joins?language=zh&amp;view=asciicast">#181 Include vs Joins - RailsCasts</a></li>
<li><a href="https://gist.github.com/ifyouseewendy/6d0feb90d76fb894814a">N+1 Benchmark Gist - IBM Developer Works</a></li>
</ul>

<hr>

<p><strong>Does query with <code>includes</code> and <code>joins</code> return the same count?</strong></p>

<p>```ruby activerecord-includes-joins-query-count  https://gist.github.com/ifyouseewendy/429544e5b8f49a347e95
class Post &lt; ActiveRecord::Base
  has_many :comments
end</p>

<p>class Comment &lt; ActiveRecord::Base
  belongs_to :post
end</p>

<p>class BugTest &lt; Minitest::Test
  def test<em>association</em>stuff
    post1 = Post.create!
    post2 = Post.create!</p>
<div class="highlight"><pre><code class="text">post1.comments &lt;&lt; Comment.create!
post1.comments &lt;&lt; Comment.create!
post2.comments &lt;&lt; Comment.create!
post2.comments &lt;&lt; Comment.create!
post2.comments &lt;&lt; Comment.create!

assert_equal 2, Post.includes(:comments).find(post1.id, post2.id).count
# =&gt; SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE &quot;posts&quot;.&quot;id&quot; IN (1, 2)
# =&gt; SELECT &quot;comments&quot;.* FROM &quot;comments&quot; WHERE &quot;comments&quot;.&quot;post_id&quot; IN (1, 2)

assert_equal 5, Post.joins(:comments).where(id: [post1.id, post2.id]).count
# =&gt; SELECT COUNT(*) FROM &quot;posts&quot; INNER JOIN &quot;comments&quot; ON &quot;comments&quot;.&quot;post_id&quot; = &quot;posts&quot;.&quot;id&quot; WHERE &quot;posts&quot;.&quot;id&quot; IN (1, 2)
</code></pre></div>
<p>end
end</p>
<div class="highlight"><pre><code class="text">**Does `includes` work with Mongoid?** 

Check list:

+ [N+1 problem in mongoid - Stack Overflow](http://stackoverflow.com/questions/3912706/n1-problem-in-mongoid)
+ [Eager Loading - Mongoid Doc](http://mongoid.org/en/mongoid/docs/querying.html#queries)

By now ( *2014-05-08* ) the latest version *4.0.0.beta1* behaves much better than last stable version *3.1.6*, check the [gist](https://gist.github.com/ifyouseewendy/0069c0498274d2dd5a6d).

![rails-includes_vs_joins](https://dl.dropboxusercontent.com/s/ol5lajw9z9hwaca/rails-includes_vs_joins_selected.png?dl=1&amp;token_hash=AAE9IXia0UGrhtp5vqQRQHLWGOydmyjeTXuuek6Kg-CtOA&amp;expiry=1399564547)
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails4Way - Environments and Configurations]]></title>
    <link href="http://ifyouseewendy.github.io/blog/2014/05/18/rails4way-environments-and-configurations/"/>
    <updated>2014-05-18T16:10:42+08:00</updated>
    <id>http://ifyouseewendy.github.io/blog/2014/05/18/rails4way-environments-and-configurations</id>
    <content type="html"><![CDATA[<h2>Bundler <a href="http://bundler.io">ref</a></h2>

<p>Bundler does gem dependency resolution based on Gemfile.</p>

<h4><code>~&gt;</code> operator</h4>

<p>The specifier <strong>~&gt;</strong> has a special meaning, best shown by example. <code>~&gt; 2.0.3</code> is identical to <code>&gt;= 2.0.3</code> and <code>&lt; 2.1</code>. <code>~&gt; 2.1</code> is identical to <code>&gt;= 2.1</code> and <code>&lt; 3.0</code>. <code>~&gt; 2.2.beta</code> will match prerelease versions like <code>2.2.beta.12</code>.</p>

<p><code>ruby hello linenos:false
gem &#39;thin&#39;,  &#39;~&gt;1.1&#39;
</code></p>

<h4><code>require</code></h4>

<p>Occasionally, the name of the gem that should be used in a require statement is
different than the name of that gem in the repository. In those cases, the <strong>:require</strong>
option solves this simply and declaratively right in the Gemfile.</p>
<div class="highlight"><pre><code class="ruby"><span class="n">gem</span> <span class="s1">&#39;sqlite3-ruby&#39;</span><span class="p">,</span> <span class="ss">:require</span> <span class="o">=&gt;</span> <span class="s1">&#39;sqlite3&#39;</span>
</code></pre></div>
<h4>group</h4>
<div class="highlight"><pre><code class="ruby"><span class="n">gem</span> <span class="s1">&#39;wirble&#39;</span><span class="p">,</span> <span class="ss">:group</span> <span class="o">=&gt;</span> <span class="ss">:development</span>
<span class="n">gem</span> <span class="s1">&#39;ruby-debug&#39;</span><span class="p">,</span> <span class="ss">:group</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:development</span><span class="p">,</span> <span class="ss">:test</span><span class="o">]</span>

<span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s1">&#39;rspec&#39;</span>
<span class="k">end</span>
</code></pre></div>
<h4>bundle install/update</h4>
<div class="highlight"><pre><code class="ruby"><span class="o">-&gt;</span> <span class="n">calculate</span> <span class="n">a</span> <span class="n">dependency</span> <span class="n">tree</span> <span class="o">-&gt;</span> <span class="n">generate</span> <span class="no">Gemfile</span><span class="o">.</span><span class="n">lock</span>
</code></pre></div>
<h4>bundle package</h4>

<blockquote>
<p>it will package up all your gems in <strong>vendor/cache</strong> directory. Running <strong>bundle install</strong> will use the gems in package and skip connecting to rubygems.org. use this to avoid external dependencies at deploy time, or if you depend on private gems that you are not available in any public repository.</p>
</blockquote>

<h4>bundle exec</h4>

<p>Non-Rails scripts must be executed with this to get a properly initialized RubyGems environment.</p>

<h4>bundle install --path vender/bundle --binstubs</h4>

<p>The default location for gems installed by bundler is directory named <strong>.bundle</strong> in your user directory.</p>

<p>This command will generate <strong>.bundle/config</strong> file:</p>

<h2>```ruby .bundle/config</h2>

<p>BUNDLE<em>BIN: bundler</em>stubs
BUNDLE<em>PATH: vendor/bundle
BUNDLE</em>DISABLE<em>SHARED</em>GEMS: &quot;1&quot;
```</p>

<p>gems in <strong>verdor/cache</strong>, and installed in <strong>vendor/bundle</strong>.</p>

<h4>bundle install vendor --disable-shared-gems</h4>

<blockquote>
<p>This command tells Bundler to install gems even if they are already installed in the system. Normally Bunlder avoids that symlinks to already downloaded gems that exists in your system. This option is useful when you are trying to package up an application that all dependencies unpacked.</p>
</blockquote>

<h2>Startup and Application Settings</h2>

<p><code>boot.rb</code></p>

<ul>
<li>sets up Bundler and load paths</li>
</ul>

<p><code>application.rb</code></p>

<ul>
<li>require &#39;boot&#39;</li>
<li>load rails gems, gems for the specified Rail.env, and configures the application ( <strong>define Application class</strong> ).</li>
</ul>

<p><code>environment.rb</code></p>

<ul>
<li>require &#39;application&#39;</li>
<li>runs all initializers ( <code>Application.initialize!</code> )</li>
</ul>

<p><code>environments/development.rb | test.rb | production.rb</code></p>

<ul>
<li>makes environmental configuraions.</li>
<li>application.rb makes unenvironmental configurations, like time-zone, autoload_paths, encoding.</li>
</ul>

<h2>Configurations</h2>

<h4>Wrap Parameters</h4>

<p>Introduced in Rails 3.1, the <code>wrap_parameters.rb</code> initializer configures your application to work with JavaScript MVC frameworks.</p>

<p>When submitting JSON parameters to a controller, Rails will wrap the parameters into a nested hash, with the controller’s name being set as the key. To illustrate, consider the following JSON:</p>
<div class="highlight"><pre><code class="ruby"><span class="p">{</span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="s2">&quot;TheRails4Way&quot;</span><span class="p">}</span>
</code></pre></div>
<p>If a client submitted the above JSON to a controller named ArticlesController, Rails would nest the params hash under the key “article”. This ensures the setting of model attributes from request parameters is consistent with the convention used when submitting from Rails form helpers.</p>
<div class="highlight"><pre><code class="ruby"><span class="p">{</span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="s2">&quot;TheRails4Way&quot;</span><span class="p">,</span> <span class="s2">&quot;article&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="s2">&quot;TheRails4Way&quot;</span><span class="p">}}</span>
</code></pre></div>
<h4>Schema Dumper</h4>
<div class="highlight"><pre><code class="ruby"><span class="n">config</span><span class="o">.</span><span class="n">active_record</span><span class="o">.</span><span class="n">schema_format</span> <span class="o">=</span> <span class="ss">:sql</span>
</code></pre></div>
<p>Every time you run tests, Rails dumps the schema of your development database and copies it to the test database using an auto generated <code>schema.rb</code> script. It looks very similar to an Active Record migration script; in fact, it uses the same API.</p>

<h4>Automatic Class Reloading</h4>
<div class="highlight"><pre><code class="ruby"><span class="n">config</span><span class="o">.</span><span class="n">cache_classes</span> <span class="o">=</span> <span class="kp">false</span>
</code></pre></div>
<p>Without getting into too much nitty-gritty detail, when the config.cache_classes setting is true,Rails willuse Ruby’s <code>require</code> statement to do its class loading, and when it is false, it will use <code>load</code> instead.</p>

<p>When you require a Ruby file, the interpreter executes and caches it. If the file is required again (as in subsequent requests), the interpreter ignores the require statement and moves on. When you load a Ruby file, the interpreter executes the file again, no matter how many times it has been loaded before.</p>

<h4>Auto-Loading Code</h4>

<p>By following the naming convention, Rails will search <code>$LOAD_PATH</code> to find the undefined constant. So when using Rails console, <strong>you never have to explicitly <code>require</code> anything!</strong></p>

<p>Rails takes advantage of the fact that Ruby provides a callback mechanism for missing constants. When Rails encounters an undefined constant in the code, it uses a class loader routine based on file-naming conventions to find and require the needed Ruby script.</p>

<h4>Eager Load</h4>
<div class="highlight"><pre><code class="ruby"><span class="n">config</span><span class="o">.</span><span class="n">eager_load</span> <span class="o">=</span> <span class="kp">false</span>
</code></pre></div>
<p>In your production environment, you will want this set to true, as it copies most of your application in memory. This provides a performance increase to web servers that copy on write, such as Unicorn.</p>

<h4>Explain for Slow Queries</h4>
<div class="highlight"><pre><code class="ruby"><span class="n">config</span><span class="o">.</span><span class="n">active_record</span><span class="o">.</span><span class="n">auto_explain_threshold_in_seconds</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span>
</code></pre></div>
<p>Introduced in Rails 3.2, Active Record now monitors the threshold of SQL queries being made. If any query takes longer than the specified threshold, the query plan is logged with a warning.</p>

<h4>Assets</h4>
<div class="highlight"><pre><code class="ruby"><span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">debug</span> <span class="o">=</span> <span class="kp">true</span>
</code></pre></div>
<p>Setting config.assets.debug to false, would result in Sprockets concatenating and running preprocessors on all assets.</p>
<div class="highlight"><pre><code class="ruby"><span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">compile</span> <span class="o">=</span> <span class="kp">true</span>
</code></pre></div>
<p>If an asset is requested that does not exist in the public/assets folder, Rails will throw an exception. To enable live asset compilation fallback on production, set config.assets.compile to true.</p>
<div class="highlight"><pre><code class="ruby"><span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">enable</span> <span class="o">=</span> <span class="kp">false</span>
</code></pre></div>
<p>Like most features in Rails, the usage of the Asset Pipeline is completely optional. To include assets in your project as it was done in Rails 3.0, set config.assets.enabled to false.</p>

<h4>Tagged Logging <a href="http://arun.im/2011/x-request-id-tracking-taggedlogging-rails">ref</a></h4>
<div class="highlight"><pre><code class="ruby"><span class="n">config</span><span class="o">.</span><span class="n">log_tags</span> <span class="o">=</span> <span class="o">[</span> <span class="ss">:subdomain</span><span class="p">,</span> <span class="ss">:uuid</span> <span class="o">]</span>
</code></pre></div>
<p>Rails 3.2 introduced the ability to tag your log messages. <code>:subdomain</code> example by <em>www</em>, <code>:uuid</code> is a string to identify request, try <code>request.uuid</code>.</p>
]]></content>
  </entry>
  
</feed>
