<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Books | Wendi's Blog]]></title>
  <link href="http://blog.ifyouseewendy.com/blog/categories/books/atom.xml" rel="self"/>
  <link href="http://blog.ifyouseewendy.com/"/>
  <updated>2015-02-27T12:53:58+08:00</updated>
  <id>http://blog.ifyouseewendy.com/</id>
  <author>
    <name><![CDATA[wendi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Review] Guidance from POODR]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2015/01/29/guidance-from-poodr/"/>
    <updated>2015-01-29T15:20:13+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2015/01/29/guidance-from-poodr</id>
    <content type="html"><![CDATA[<table class="custom">
  <tbody>
    <tr>
      <td><strong>Book</strong></td>
      <td>Practical Object Oriented Design in Ruby</td>
    </tr>
    <tr>
      <td><strong>Author</strong></td>
      <td>Sandi Metz</td>
    </tr>
    <tr>
      <td><strong>Link</strong></td>
      <td><a href="http://www.poodr.com/">www.poodr.com</a></td>
    </tr>
  </tbody>
</table>

<ul id="markdown-toc">
  <li><a href="#object-oriented-design">Object-Oriented Design</a>    <ul>
      <li><a href="#the-tools-of-design">The Tools of Design</a>        <ul>
          <li><a href="#design-principles">Design Principles</a></li>
          <li><a href="#design-patterns">Design Patterns</a></li>
        </ul>
      </li>
      <li><a href="#the-act-of-design">The Act of Design</a>        <ul>
          <li><a href="#how-design-fails">How Design Fails</a></li>
          <li><a href="#when-to-design">When to Design</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#guidance">Guidance</a>    <ul>
      <li><a href="#designing-classes-with-a-single-responsibility">Designing Classes with a Single Responsibility</a>        <ul>
          <li><a href="#depend-on-behavior-not-data">Depend on Behavior, Not Data</a></li>
          <li><a href="#enforce-single-responsibility-everywhere">Enforce Single Responsibility Everywhere</a></li>
        </ul>
      </li>
      <li><a href="#manage-dependencies">Manage Dependencies</a>        <ul>
          <li><a href="#inject-dependencies">Inject Dependencies</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#after">after</a>    <ul>
      <li><a href="#isolate-dependencies">Isolate Dependencies</a></li>
      <li><a href="#remove-argument-order-dependencies">Remove Argument-Order Dependencies</a></li>
      <li><a href="#managing-dependency-direction">Managing Dependency Direction</a></li>
      <li><a href="#creating-flexible-interfaces">Creating Flexible Interfaces</a>        <ul>
          <li><a href="#finding-the-public-interface">Finding the Public Interface</a>            <ul>
              <li><a href="#focus-messages-between-domain-objects">Focus Messages between Domain Objects</a></li>
              <li><a href="#use-sequence-diagrams">Use Sequence Diagrams</a></li>
              <li><a href="#asking-for-what-instead-of-telling-how">Asking for “What” Instead of Telling “How”</a></li>
              <li><a href="#seeking-contect-independence">Seeking Contect Independence</a></li>
            </ul>
          </li>
          <li><a href="#the-law-of-demeter">The Law of Demeter</a></li>
        </ul>
      </li>
      <li><a href="#reductin-costs-with-duck-typing">Reductin Costs with Duck Typing</a>        <ul>
          <li><a href="#polymorphism">Polymorphism</a></li>
          <li><a href="#recognizing-hidden-ducks">Recognizing Hidden Ducks</a></li>
          <li><a href="#guidance-1">Guidance</a></li>
        </ul>
      </li>
      <li><a href="#acquiring-behavior-through-inheritance">Acquiring Behavior Through Inheritance</a>        <ul>
          <li><a href="#inheritance">Inheritance</a></li>
          <li><a href="#recognizing-where-to-use-inheritance">Recognizing Where to Use Inheritance</a>            <ul>
              <li><a href="#finding-the-abstraction">Finding the Abstraction</a></li>
            </ul>
          </li>
          <li><a href="#using-templage-methods">Using Templage Methods</a>            <ul>
              <li><a href="#template-method">Template Method</a></li>
              <li><a href="#implementing-every-template-method">Implementing Every Template Method</a></li>
            </ul>
          </li>
          <li><a href="#manging-coupling">Manging Coupling</a>            <ul>
              <li><a href="#decoupling-subclasses-using-hook-messages">Decoupling Subclasses Using Hook Messages</a></li>
            </ul>
          </li>
        </ul>
      </li>
      <li><a href="#sharing-role-behavior-with-modules">Sharing Role Behavior with Modules</a>        <ul>
          <li><a href="#understanding-roles">Understanding Roles</a></li>
          <li><a href="#writing-inheritable-code">Writing Inheritable Code</a>            <ul>
              <li><a href="#recognize-the-antipatterns">Recognize the Antipatterns</a></li>
              <li><a href="#insist-on-the-abstraction">Insist on the Abstraction</a></li>
              <li><a href="#honor-the-contract">Honor the Contract</a></li>
              <li><a href="#use-the-template-method-pattern">Use the Template Method Pattern</a></li>
              <li><a href="#preemptively-decouple-classes">Preemptively Decouple Classes</a></li>
              <li><a href="#create-shallow-hierarchies">Create Shallow Hierarchies</a></li>
            </ul>
          </li>
        </ul>
      </li>
      <li><a href="#combining-objects-with-composition">Combining Objects with Composition</a>        <ul>
          <li><a href="#aggregation-a-special-kind-of-composition">Aggregation: A Special Kind of Composition</a></li>
          <li><a href="#deciding-between-inheritance-and-composition">Deciding Between Inheritance and Composition</a>            <ul>
              <li><a href="#inheritance-1">Inheritance</a></li>
              <li><a href="#composition">Composition</a></li>
            </ul>
          </li>
          <li><a href="#guidance-2">Guidance</a></li>
        </ul>
      </li>
      <li><a href="#designing-cost-effective-tests">Designing Cost-Effective Tests</a>        <ul>
          <li><a href="#intentional-testing">Intentional Testing</a>            <ul>
              <li><a href="#knowing-your-intentions">Knowing Your Intentions</a></li>
              <li><a href="#knowing-what-to-test">Knowing What to Test</a>                <ul>
                  <li><a href="#remove-the-duplicate">Remove the Duplicate</a></li>
                  <li><a href="#message-model">Message Model</a></li>
                </ul>
              </li>
              <li><a href="#knowing-when-to-test">Knowing When to Test</a></li>
              <li><a href="#knowing-how-to-test">Knowing How to Test</a></li>
            </ul>
          </li>
          <li><a href="#testing-incoming-messages">Testing Incoming Messages</a></li>
          <li><a href="#testing-private-methods">Testing Private Methods</a></li>
          <li><a href="#testing-outgoing-messages">Testing Outgoing Messages</a></li>
          <li><a href="#testing-duck-types">Testing Duck Types</a></li>
          <li><a href="#testing-inherited-code">Testing Inherited Code</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h1 id="object-oriented-design">Object-Oriented Design</h1>

<p>Object-oriented design (OOD) requires that you shift from thinking of the world as a collection of predefined procedures to modeling the world as a series of messages that pass between objects.</p>

<p>Object-oriented applications are made up of parts that interact to produce the behavior of the whole. The parts are <em>objects</em>; interactions are embodied in the <em>messages</em> that pass between them.</p>

<p>Object-oriented design is about managing dependencies. In the absence of design, unmanaged dependencies wreak havoc because objects know too much about one another.</p>

<p>Design is thus an art, the art of arranging code, and design is more the art of preserving changeability than it is the act of achieving perfection. You must not only write code for the feature you plan to deliver today, you must also create code that is amenable to being changed later. It doesn’t guess the future; it preserves your options for accommodating the future. It doesn’t choose; it leaves you room to move.</p>

<p>The trick to getting the most bang for your design buck is to acquire an understanding of the theories of design and to apply these theories appropriately, at the right time, and in the right amounts. </p>

<p>Well-designed applications are constructed of reusable code. Small, trustworthy self- contained objects with minimal context, clear interfaces, and injected dependencies are inherently reusable.</p>

<h2 id="the-tools-of-design">The Tools of Design</h2>

<h3 id="design-principles">Design Principles</h3>

<ul>
  <li>
    <p><strong>SOLID</strong></p>

    <ul>
      <li>Single Responsibility</li>
      <li>Open-Closed</li>
      <li>Liskov Substitution</li>
      <li>Interface Segregation</li>
      <li>Dependency Inversion</li>
    </ul>
  </li>
  <li><strong>DRY</strong>, Don’t Repeat Yourself</li>
  <li><strong>LoD</strong>, Law of Demeter</li>
</ul>

<h3 id="design-patterns">Design Patterns</h3>

<p>by Gof</p>

<h2 id="the-act-of-design">The Act of Design</h2>

<h3 id="how-design-fails">How Design Fails</h3>

<ul>
  <li>Lack of it. Successful but undesigned applications carry the seeds of their own destruction; they are easy to write but gradually become impossible to change. “Yes, I can add that feature, but it will break everything.”</li>
  <li>Overdesign. Aware of OO design techniques but do not yet understand how to apply them. “No, I can’t add that feature; it wasn’t designed to do that.”</li>
  <li>Seperated from the act of programming. Design is a process of progressive discovery that relies on a feedback loop. The iterative techniques of the Agile software movement are thus perfectly suited to the creation of well-designed OO applications. The iterative nature of Agile development allows design to adjust regularly and to evolve naturally. </li>
</ul>

<h3 id="when-to-design">When to Design</h3>

<blockquote>
  <p>Agile believes that your customers can’t define the software they want before seeing it, so it’s best to show them sooner rather than later. If this premise is true, then it logically follows that you should build software in tiny increments, gradually iterating your way into an application that meets the customer’s true need. The Agile experience is that this collaboration produces software that differs from what was initially imagined; the resulting software could not have been anticipated by any other means. </p>
</blockquote>

<p>If Agile is correct, then</p>

<ol>
  <li>there is absolutely no point in doing a Big Up Front Design (BUFD) (because it cannot possibly be correct)</li>
  <li>no one can predict when the application will be done (because you don’t know in advance what it will eventually do)</li>
</ol>

<p>Agile processes guarantee change and your ability to make these changes depends on your application’s design. If you cannot write well-designed code you’ll have to rewrite your application during every iteration.</p>

<h1 id="guidance">Guidance</h1>

<p>Focus on object,</p>

<ul>
  <li>Single <strong>Responsibility</strong></li>
  <li>Manage <strong>Dependencies</strong></li>
</ul>

<p>Focus on message,</p>

<ul>
  <li><strong>Interface</strong>, creating flexible interfaces</li>
  <li><strong>Duck Typing</strong>, reducing costs with Duck Typing</li>
  <li><strong>Inheritance</strong>, acquiring behavior through inheritance</li>
  <li><strong>Module</strong>, sharing <strong>role</strong> behavior with modules</li>
  <li><strong>Composition</strong>, combining objects with composition</li>
  <li><strong>Tests</strong>, designing cost-effective tests</li>
</ul>

<h2 id="designing-classes-with-a-single-responsibility">Designing Classes with a Single Responsibility</h2>

<p>SRP requires that a class be <strong>cohesive</strong>, that everything in a class is related to its central purpose, the class is said to be highly cohesive or to have a single responsibility.</p>

<h3 id="depend-on-behavior-not-data">Depend on Behavior, Not Data</h3>

<p>“Don’t Repeat Yourself” (DRY) is a shortcut for this idea.</p>

<ul>
  <li>Hide instance variables</li>
  <li>Hide data structures</li>
</ul>

<h3 id="enforce-single-responsibility-everywhere">Enforce Single Responsibility Everywhere</h3>

<ul>
  <li>
    <p>Extract extra responsibilities from methods</p>

    <p>Methods, like classes, should have a single responsibility. All of the same reasons apply; having just one responsibility makes them easy to change and easy to reuse.</p>
  </li>
  <li>
    <p>Isolate extra responsibilities in classes</p>

    <p>Postponing decisions until you are absolutely forced to make them. Any decision you make in advance of an explicit requirement is just a guess. Don’t decide; preserve your ability to make a decision later.</p>
  </li>
</ul>

<h2 id="manage-dependencies">Manage Dependencies</h2>

<p>To collaborate, an object must know something know about others. <em>Knowing</em> creates a dependency, or <em>coupling</em> creates a dependency.</p>

<p>Dependency management is core to creating future-proof applications.</p>

<p>An object has a dependency when it knows</p>

<ul>
  <li>The name of another class.</li>
  <li>The name of a message that it intends to send to someone other than self.</li>
  <li>The arguments that a message requires.</li>
  <li>The order of those arguments.</li>
  <li>Knowing the name of a message you plan to send to someone other than self.</li>
  <li>Tests on code.</li>
</ul>

<h3 id="inject-dependencies">Inject Dependencies</h3>

<p>```ruby
# before
class Gear
  …</p>

<p>def gear_inches
    ratio * Wheel.new(rim, tire).diameter
  end
end</p>

<h1 id="after">after</h1>
<p>class Gear
  attr_reader :chainring, :cog, :wheel
  def initialize(chainring, cog, wheel)
    @chainring = chainring
    @cog       = cog
    @wheel     = wheel
  end</p>

<p>def gear_inches
    ratio * wheel.diameter
  end
end
``` </p>

<p>Gear previously had explicit dependencies on the Wheel class and on the type and order of its initialization arguments, but through injection these dependencies have been reduced to a single dependency on the diameter method.</p>

<h3 id="isolate-dependencies">Isolate Dependencies</h3>

<p><strong>Isolate Instance Creation</strong></p>

<p>If you are so constrained that you cannot change the code to inject a Wheel into a Gear, you should isolate the creation of a new Wheel inside the Gear class.</p>

<p>```ruby
class Gear
  …</p>

<p>def gear_inches
    ratio * wheel.diameter
  end</p>

<p>def wheel
    @wheel ||= Wheel.new(rim, tire)
  end
```</p>

<ul>
  <li>Isolate Vulnerable External Messages</li>
</ul>

<p>External messages, that is, messages that are “sent to someone other than self.”</p>

<p>```ruby
class Gear
  …</p>

<p>def gear_inches
    ratio * diameter
  end</p>

<p>def diameter
    wheel.diameter
  end
```</p>

<h3 id="remove-argument-order-dependencies">Remove Argument-Order Dependencies</h3>

<ul>
  <li>Use Hashes for Initialization Arguments</li>
  <li>Explicitly Define Defaults</li>
  <li>Isolate Multiparameter Initialization, use a wrapper.</li>
</ul>

<h3 id="managing-dependency-direction">Managing Dependency Direction</h3>

<p>Depend on things that change less often than you do.</p>

<ul>
  <li>Some classes are more likely than others to have changes in requirements.</li>
  <li>Concrete classes are more likely to change than abstract classes.</li>
  <li>Changing a class that has many dependents will result in widespread consequences.</li>
</ul>

<p>Depend on abstractions.</p>

<h2 id="creating-flexible-interfaces">Creating Flexible Interfaces</h2>

<blockquote>
  <p>Interface within a class, make up its public interface.</p>
</blockquote>

<p>Public Interfaces</p>

<ul>
  <li>Reveal its primary responsibility</li>
  <li>Are expected to be invoked by others</li>
  <li>Will not change on a whim</li>
  <li>Are safe for others to depend on</li>
  <li>Are thoroughly documented in the tests</li>
</ul>

<p>Private Interfaces</p>

<ul>
  <li>Handle implementation details</li>
  <li>Are not expected to be sent by other objects</li>
  <li>Can change for any reason whatsoever</li>
  <li>Are unsafe for others to depend on</li>
  <li>May not even be referenced in the tests</li>
</ul>

<p>Well-defined public interfaces consist of stable methods that expose the responsibilities of their underlying classes (public methods should read like a description of responsibilities).</p>

<h3 id="finding-the-public-interface">Finding the Public Interface</h3>

<h4 id="focus-messages-between-domain-objects">Focus Messages between Domain Objects</h4>

<p>Nouns in the application that have both data and behavior are called domain objects. Domain objects are easy to find but they are not at the design center of your application. Design experts notice domain objects without concentrating on them; they focus not on these objects but on the messages that pass between them.</p>

<h4 id="use-sequence-diagrams">Use Sequence Diagrams</h4>

<p>They explicitly specify the messages that pass between objects, and because objects should only communicate using public interfaces, sequence diagrams are a vehicle for exposing, experimenting with, and ultimately defining those interfaces.</p>

<h4 id="asking-for-what-instead-of-telling-how">Asking for “What” Instead of Telling “How”</h4>

<h4 id="seeking-contect-independence">Seeking Contect Independence</h4>

<p>The best possible situation is for an object to be completely independent of its context. An object that could collaborate with others without knowing who they are or what they do could be reused in novel and unanticipated ways.</p>

<p>The technique for collaborating with others without knowing who they are—dependency injection. </p>

<h3 id="the-law-of-demeter">The Law of Demeter</h3>

<p>It prohibits routing a message to a third object via a second object of a different type. “Only talk to your immediate neighbors” or “use only one dot.”</p>

<p>Delegation is tempting as a solution to the Demeter problem because it removes the visible evidence of violations.</p>

<p>Listening to Demeter means paying attention to your point of view. If you shift to a message-based perspective, the messages you find will become public interfaces in the objects they lead you to discover. However, if you are bound by the shackles of existing domain objects, you’ll end up assembling their existing public interfaces into long message chains and thus will miss the opportunity to find and construct flexible public interfaces.</p>

<h2 id="reductin-costs-with-duck-typing">Reductin Costs with Duck Typing</h2>

<blockquote>
  <p>Interface, across classes and is independent of any single class. The interface represents a set of messages where the messages themselves define the interface. It’s almost as if the interface defines a virtual class; that is, any class that implements the required methods can act like the interface kind of thing.</p>
</blockquote>

<p><strong>Duck types</strong> are public interfaces that are not tied to any specific class. These across-class interfaces add enormous flexibility to your application by replacing costly dependencies on class with more forgiving dependencies on messages.</p>

<h3 id="polymorphism">Polymorphism</h3>

<p><strong>Polymorphism</strong> in OOP refers to the ability of many different objects to respond to the same message. Senders of the message need not care about the class of the receiver; receivers supply their own specific version of the behavior. Polymorphic methods honor an implicit bargain; they agree to be inter- changeable from the sender’s point of view.</p>

<p>A single message thus has many (poly) forms (morphs).</p>

<p>There are a number of ways to achieve polymorphism:</p>

<ul>
  <li>Duck Typing</li>
  <li>Inheritance</li>
  <li>Behavior Sharing (module)</li>
</ul>

<h3 id="recognizing-hidden-ducks">Recognizing Hidden Ducks</h3>

<ul>
  <li>Case statements that switch on class</li>
  <li><code>kind_of?</code> and <code>is_a?</code></li>
  <li><code>responds_to?</code></li>
</ul>

<h3 id="guidance-1">Guidance</h3>

<p>When you create duck types you must both document and test their public inter- faces. Fortunately, good tests are the best documentation.</p>

<p>The decision to create a new duck type relies on judgment. The purpose of design is to lower costs; bring this measuring stick to every situation. If creating a duck type would reduce unstable dependencies, do so. Use your best judgment.</p>

<h2 id="acquiring-behavior-through-inheritance">Acquiring Behavior Through Inheritance</h2>

<h3 id="inheritance">Inheritance</h3>

<p>Inheritance is, at its core, a mechanism for <strong>automatic message delegation</strong>. It defines a forwarding path for not-understood messages. It creates relationships such that, if one object cannot respond to a received message, it delegates that message to another. You don’t have to write code to explicitly delegate the message, instead you define an inheritance relationship between two objects and the forwarding happens automatically.</p>

<p>When your problem is one of needing numerous specializations of a stable, common abstraction, inheritance can be an extremely low-cost solution.</p>

<h3 id="recognizing-where-to-use-inheritance">Recognizing Where to Use Inheritance</h3>

<p>The inheritance exactly solves: that of highly related types that share common behavior but differ along some dimension.  </p>

<p>Inheritance provides a way to define two objects as having a relationship such that when the first receives a message that it does not understand, it automatically forwards, or delegates, the message to the second. It’s as simple as that.  </p>

<p>Duck types cut across classes, they do not use classical inheritance to share common behavior. Duck types share code via Ruby modules.</p>

<h4 id="finding-the-abstraction">Finding the Abstraction</h4>

<p>It almost never makes sense to create an abstract superclass with only one sub-class.  </p>

<p>Creating a hierarchy has costs; the best way to minimize these costs is to maximize your chance of getting the abstraction right before allowing subclasses to depend on it. While the two bikes you know about supply a fair amount of information about the common abstraction, three bikes would supply a great deal more. If you could put this decision off until FastFeet asked for a third kind of bike, your odds of finding the right abstraction would improve dramatically.</p>

<p>When deciding between refactoring strategies, indeed, when deciding between design strategies in general, it’s useful to ask the question: “What will happen if I’m wrong?”</p>

<h3 id="using-templage-methods">Using Templage Methods</h3>

<h4 id="template-method">Template Method</h4>

<p>This technique of defining a basic structure in the superclass and sending messages to acquire subclass-specific contributions is known as the template method pattern.</p>

<h4 id="implementing-every-template-method">Implementing Every Template Method</h4>

<p>Any class that uses the template method pattern must supply an implementation for every message it sends, and creating code that fails with reasonable error messages takes minor effort in the present but provides value forever.</p>

<p><code>ruby
class Bicycle
  #...
  def default_tire_size
    raise NotImplementedError, "This #{self.class} cannot respond to:"
  end 
end
</code></p>

<h3 id="manging-coupling">Manging Coupling</h3>

<p>When a subclass sends <code>super</code> it’s effectively declaring that it knows the algorithm; it depends on this knowledge. If the algorithm changes, then the subclasses may break even if their own specializations are not otherwise affected.</p>

<h4 id="decoupling-subclasses-using-hook-messages">Decoupling Subclasses Using Hook Messages</h4>

<p>Instead of allowing subclasses to know the algorithm and requiring that they send <code>super</code>, superclasses can instead send <code>hook</code> messages, ones that exist solely to provide subclasses a place to contribute information by implementing matching methods. This strategy removes knowledge of the algorithm from the subclass and returns control to the superclass.</p>

<p>```ruby
class Bicycle
  def initialize(args={})
    @size = args[:size]
    @chain = args[:chain] || default_chain
    @tire_size = args[:tire_size] || default_tire_size</p>

<pre><code>post_initialize(args)   # Bicycle both sends   end
</code></pre>

<p>def post_initialize(args) # and implements this 
    nil
  end
  # …
end</p>

<p>class RoadBike &lt; Bicycle</p>

<p>def post_initialize(args)         # RoadBike can 
    @tape_color = args[:tape_color] # optionally
  end                               # override it
  # …
end
```</p>

<p>This change allows RoadBike to know less about Bicycle, reducing the coupling between them and making each more flexible in the face of an uncertain future. New subclasses need only implement the <code>hook</code> methods.</p>

<h2 id="sharing-role-behavior-with-modules">Sharing Role Behavior with Modules</h2>

<h3 id="understanding-roles">Understanding Roles</h3>

<p>Modules thus provide a perfect way to allow objects of different classes to play a common role using a single set of code.</p>

<p>The rules for modules are the same as for classical inheritance. If a module sends a message it must provide an implementation, even if that implementation merely raises an error indicating that users of the module must implement the method.</p>

<p>This is-a versus behaves-like-a difference definitely matters, each choice has distinct consequences.</p>

<h3 id="writing-inheritable-code">Writing Inheritable Code</h3>

<p>The usefulness and maintainability of inheritance hierarchies and modules is in direct proportion to the quality of the code. </p>

<h4 id="recognize-the-antipatterns">Recognize the Antipatterns</h4>

<p>There are two antipatterns that indicate that your code might benefit from inheritance.</p>

<ul>
  <li>An object that uses a variable with a name like <code>type</code> or <code>category</code> to determine what message to send to <code>self</code> contains two highly related but slightly different types.</li>
  <li>When a sending object checks the class of a receiving object to determine what message to send, you have overlooked a duck type. In addition to sharing an interface, duck types might also share behavior. When they do, place the shared code in a module and include that module in each class or object that plays the role.</li>
</ul>

<h4 id="insist-on-the-abstraction">Insist on the Abstraction</h4>

<p>Superclasses should not contain code that applies to some, but not all, subclasses. This restriction also applies to modules: the code in a module must apply to all who use it.</p>

<p>Subclasses that override a method to raise an exception like “does not implement” are a symptom of this problem. When subclasses override a method to declare that they <em>do not do that thing</em> they come perilously close to declaring that they <em>are not that thing</em>.</p>

<h4 id="honor-the-contract">Honor the Contract</h4>

<p>Subclasses agree to a contract; they promise to be substitutable for their superclasses.</p>

<p>Subclasses that fail to honor their contract are difficult to use. They’re “special” and cannot be freely substituted for their superclasses. These subclasses are declaring that they are not really a kind-of their superclass </p>

<p><strong>Liskov Substitution Principle (LSP)</strong>, which in mathematical terms says that a subtype should be substitutable for its supertype. Named after Barbara Liskov.</p>

<h4 id="use-the-template-method-pattern">Use the Template Method Pattern</h4>

<p>The abstract code defines the algorithms and the concrete inheritors of that abstraction contribute specializations by overriding these template methods.</p>

<p>Modules, therefore, should use the template method pattern to invite those that include them to supply specializations, and should implement hook methods to avoid forcing includers to send <code>super</code>.</p>

<h4 id="preemptively-decouple-classes">Preemptively Decouple Classes</h4>

<p>Avoid writing code that requires its inheritors to send <code>super</code>; instead use hook messages to allow subclasses to participate while absolving them of responsibility for knowing the abstract algorithm. Writing code that requires subclasses to send <code>super</code> adds an additional dependency; avoid this if you can.</p>

<p>Hook methods solve the problem of sending <code>super</code>, but, unfortunately, only for adjacent levels of the hierarchy.</p>

<h4 id="create-shallow-hierarchies">Create Shallow Hierarchies</h4>

<p>The limitations of hook methods are just one of the many reasons to create shallow hierarchies.</p>

<p>Because objects depend on everything above them, a deep hierarchy has a large set of built-in dependencies, each of which might someday change.</p>

<p>Another problem with deep hierarchies is that programmers tend to be familiar with just the classes at their tops and bottoms; that is, they tend to understand only the behavior implemented at the boundaries of the search path.</p>

<h2 id="combining-objects-with-composition">Combining Objects with Composition</h2>

<p>Composition is the act of combining distinct parts into a complex whole such that the whole becomes more than the sum of its parts.</p>

<h3 id="aggregation-a-special-kind-of-composition">Aggregation: A Special Kind of Composition</h3>

<p>Delegation creates dependencies; the receiving object must recognize the message and know where to send it. Composition often involves delegation but the term means something more. A composed object is made up of parts with which it expects to interact via well-defined interfaces.</p>

<p>Composition indicates a <em>has-a</em> relationship where the contained object has no life inde- pendent of its container.</p>

<p>Aggregation is exactly like composition except that the contained object has an independent life.</p>

<h3 id="deciding-between-inheritance-and-composition">Deciding Between Inheritance and Composition</h3>

<ul>
  <li>Remember that classical inheritance is a code arrangement technique. For the cost of arranging objects in a hierarchy, you get message delegation for free. </li>
  <li>Composition is an alternative that reverses these costs and benefits. Composition allows objects to have structural independence, but at the cost of explicit message delegation.</li>
</ul>

<p>The general rule is that, faced with a problem that composition can solve, you should be biased towards doing so. If you cannot explicitly defend inheritance as a better solution, use composition.</p>

<h4 id="inheritance-1">Inheritance</h4>

<p><strong>Benefits</strong></p>

<p>Inheritance is a better solution when its use provides high rewards for low risk.</p>

<p>Use of inheritance results in code that can be described as open–closed; hierarchies are open for extension while remaining closed for modification. </p>

<p>You need look no farther than the source of object-oriented languages themselves to see the value of organizing code using inheritance.</p>

<p><strong>Costs</strong></p>

<p>You might be fooled into choosing inheritance to solve the wrong kind of problem. If you make this mistake a day will come when you need to add behavior but find there’s no easy way do so.</p>

<p>Even when inheritance makes sense for the problem, you might be writing code that will be used by others for purposes you did not anticipate.</p>

<p>The very high cost of making changes near the top of an incorrectly modeled hierarchy. In this case, the leveraging effect works to your disadvantage; small changes break everything.</p>

<p>The impossibility of adding behavior when new subclasses represent a mixture of types.</p>

<p>Inheritance, therefore, is a place where the question “<em>What will happen when I’m wrong?</em>” assumes special importance. Inheritance by definition comes with a deeply embedded set of dependencies. Subclasses depend on the methods defined in their superclasses and on the automatic delegation of messages to those superclasses. This is classical inheritance’s greatest strength and biggest weakness.</p>

<p><strong>Guidance</strong></p>

<p>Your consideration of the use of inheritance should be tempered by your <em>expectations about the population who will use your code</em>. If you are writing code for an in-house application in a domain with which you are intimately familiar, you may be able to predict the future well enough to be confident that your design problem is one for which inheritance is a cost-effective solution.</p>

<p>Avoid writing frameworks that require users of your code to subclass your objects in order to gain your behavior. Their application’s objects may already be arranged in a hierarchy; inheriting from your framework may not be possible.</p>

<h4 id="composition">Composition</h4>

<p>Composed objects do not depend on the structure of the class hierarchy, and they delegate their own messages.</p>

<p><strong>Benefits</strong></p>

<p>When using composition, the natural tendency is to create many small objects that con- tain straightforward responsibilities that are accessible through clearly defined interfaces. These small objects have a single responsibility and specify their own behavior. They are transparent.</p>

<p>By their very nature, objects that participate in composition are small, structurally independent, and have well-defined interfaces. This allows their seamless transition into pluggable, interchangeable components.</p>

<p><strong>Costs</strong></p>

<p>The composed object must explicitly know which messages to delegate and to whom. Identical delegation code may be needed by many different objects. Composition provides no way to share this code.</p>

<p>Composition is excellent at prescribing rules for assembling an object made of parts but doesn’t provide as much help for the problem of arranging code for a collection of parts that are very nearly identical.</p>

<h3 id="guidance-2">Guidance</h3>

<p>Composition, classical inheritance, and behavior sharing via modules are competing techniques for arranging code.</p>

<ul>
  <li>Use inheritance for <em>is-a</em> Relationships.</li>
  <li>Use Duck Types for <em>behaves-like-a</em> Relationships</li>
  <li>Use Composition for <em>has-a</em> Relationships</li>
</ul>

<h2 id="designing-cost-effective-tests">Designing Cost-Effective Tests</h2>

<p>An understanding of object-oriented design, good refactoring skills, and the ability to write efficient tests form a <strong>three-legged stool</strong> upon which changeable code rests.</p>

<p>Your overall goal is to create well-designed applications that have acceptable test coverage. </p>

<h3 id="intentional-testing">Intentional Testing</h3>

<h4 id="knowing-your-intentions">Knowing Your Intentions</h4>

<p>The true purpose of testing, just like the true purpose of design, is to reduce costs.</p>

<p>It is common for programmers who are new to testing to find themselves in the unhappy state where the tests they write do cost more than the value those tests provide, and who therefore want to argue about the worth of tests. The solution to the problem of costly tests, however, is not to stop testing but instead to get better at it.</p>

<ol>
  <li>Finding Bugs</li>
  <li>Supplying Documentation</li>
  <li>Deferring Design Decisions</li>
  <li>Supporting Abstractions</li>
  <li>Exposing Design Flaws. When the design is bad, testing is hard. The best way to achieve this goal is to write loosely coupled tests about only the things that matter.</li>
</ol>

<h4 id="knowing-what-to-test">Knowing What to Test</h4>

<h5 id="remove-the-duplicate">Remove the Duplicate</h5>

<p>One simple way to get better value from tests is to write fewer of them. The safest way to accomplish this is to test everything just once and in the proper place.</p>

<p>Removing duplication from testing lowers the cost of changing tests in reaction to application changes, and putting tests in the right place guarantees they’ll be forced to change only when absolutely necessary.</p>

<h5 id="message-model">Message Model</h5>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/origins_of_messages.png" alt="origins_of_messages" /></p>

<p>Think of an object-oriented application as a series of messages passing between a set of black boxes. Tests should concentrate on the incoming or outgoing messages that cross an object’s boundaries.</p>

<ul>
  <li>
    <p>Incoming Message</p>

    <p>Objects should make assertions about <em>state</em> only for messages in their own public interfaces.</p>
  </li>
  <li>
    <p>Outgoing Message</p>

    <ul>
      <li><em>query</em>, outgoing messages have no side effects and thus matter only to their senders.</li>
      <li><em>command</em>, outgoing messages do have side effects (a file gets written, a database record is saved, an action is taken by an observer). It is the responsibility of the sending object to prove that they are properly sent. Proving that a message gets sent is a test of behavior, not state.</li>
    </ul>
  </li>
</ul>

<p><strong>Conclusion</strong></p>

<p>Incoming messages should be tested for the state they return. Outgoing command messages should be tested to ensure they get sent. Outgoing query messages should not be tested.</p>

<h4 id="knowing-when-to-test">Knowing When to Test</h4>

<p>You should write tests first, whenever it makes sense to do so.</p>

<p>Done at the correct time and in the right amounts, testing, and writing code test-first, will lower your overall costs. Gaining these benefits requires applying object-oriented design principles everywhere, both to the code of your application and to the code in your tests.</p>

<p><em>What novices do?</em></p>

<p>Novices often write code that is far too coupled; they combine unrelated responsibilities and bind many dependencies into every object. </p>

<p>It is an unfortunate truth that the most complex code is usually written by the least qualified person.</p>

<p>Novice programmers don’t yet have the skills to write simple code.</p>

<h4 id="knowing-how-to-test">Knowing How to Test</h4>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/bdd_and_tdd.png" alt="bdd_and_tdd" /></p>

<ul>
  <li><strong>BDD</strong> takes an outside-in approach, creating objects at the boundary of an application and working its way inward, mock-ing as necessary to supply as-yet-unwritten objects.</li>
  <li><strong>TDD</strong> takes an inside-out approach, usually starting with tests of domain objects and then reusing these newly created domain objects in the tests of adjacent layers of code.</li>
</ul>

<p><strong>Testing point-of-view</strong></p>

<p>Your tests could stand completely inside of the object under test, with effective access to all of its internals. This is a bad idea.</p>

<p>It’s better for tests to assume a viewpoint that sights along the edges of the object under test, where they can know only about messages that come and go.</p>

<h3 id="testing-incoming-messages">Testing Incoming Messages</h3>

<ul>
  <li>
    <p>Deleting Unused Interfaces</p>

    <p>Do not test an incoming message that has no dependents; delete it. </p>
  </li>
  <li>
    <p>Proving the Public Interface</p>
  </li>
  <li>
    <p>Isolating the Object Under Test</p>
  </li>
  <li>
    <p>Injecting Dependencies as Roles</p>

    <p>Object-oriented design tells you to inject dependencies because it believes that specific concrete classes will vary more than these roles, or conversely, roles will be more stable than the classes from which they were abstracted.</p>

    <ul>
      <li>Creating Test Doubles</li>
      <li>Using Tests to Document Roles</li>
    </ul>
  </li>
</ul>

<h3 id="testing-private-methods">Testing Private Methods</h3>

<p>Dealing with private methods requires judgment and flexibility.</p>

<p>The rules-of-thumb for testing private methods are thus: Never write them, and if you do, never ever test them, unless of course it makes sense to do so.</p>

<h3 id="testing-outgoing-messages">Testing Outgoing Messages</h3>

<ul>
  <li>Ignoring Query Messages</li>
  <li>
    <p>Proving Command Messages</p>

    <p>The responsibility for testing a message’s return value lies with its receiver. <strong>Mocks</strong> are tests of behavior, as opposed to tests of state. Instead of making assertions about what a message returns, mocks define an expectation that a message will get sent. </p>
  </li>
</ul>

<h3 id="testing-duck-types">Testing Duck Types</h3>

<p>The desire to test duck types creates a need for shareable tests for roles, and once you acquire this role-based perspective you can use it to your advantage in many situations. From the point of view of the object under test, every other object is a role and dealing with objects as if they are representatives of the roles they play loosens coupling and increases flexibility, both in your application and in your tests.</p>

<ul>
  <li>Testing Roles. Extract a module, test it and include in every role.</li>
  <li>Using Role Tests to Validate Doubles.</li>
</ul>

<h3 id="testing-inherited-code">Testing Inherited Code</h3>

<ul>
  <li>
    <p>Specifying the Inherited Interface</p>

    <p>Write a shared test for the common contract and include this test in every object.</p>
  </li>
  <li>
    <p>Specifying Subclass Responsibilities</p>

    <ul>
      <li>Confirming Subclass Behavior. The <em>BicycleInterfaceTest</em> and the <em>BicycleSubclassTest</em>, combined, take all of the pain out of testing the common behavior of subclasses. These tests give you confidence that subclasses aren’t drifting away from the standard.</li>
      <li>Confirming Superclass Enforcement. Test the template method.</li>
    </ul>
  </li>
  <li>
    <p>Testing Unique Behavior</p>

    <ul>
      <li>Testing Concrete Subclass Behavior. It’s important to test these specializations without embedding knowledge of the superclass into the test.</li>
      <li>Testing Abstract Superclass Behavior. Because Bicycle used tem- plate methods to acquire concrete specializations you can stub the behavior that would normally be supplied by subclasses. Even better, because you understand the Liskov Substitution Principle, you can easily manufacture a testable instance of Bicycle by creating a new subclass for use solely by this test.</li>
    </ul>
  </li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Review] Practicing Rails]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2014/11/26/practicing-rails/"/>
    <updated>2014-11-26T11:32:14+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2014/11/26/practicing-rails</id>
    <content type="html"><![CDATA[<table class="custom">
  <tbody>
    <tr>
      <td><strong>Book</strong></td>
      <td>Practicing Rails</td>
    </tr>
    <tr>
      <td><strong>Author</strong></td>
      <td>Justin Weiss</td>
    </tr>
    <tr>
      <td><strong>Link</strong></td>
      <td><a href="https://www.justinweiss.com/book/">www.justinweiss.com/book</a></td>
    </tr>
  </tbody>
</table>

<ul id="markdown-toc">
  <li><a href="#meta-principles">Meta Principles</a></li>
  <li><a href="#tiny-apps">Tiny Apps</a>    <ul>
      <li><a href="#build-a-tiny-app">Build a tiny App</a></li>
      <li><a href="#owning-the-things-you-learn">Owning the things you learn</a></li>
    </ul>
  </li>
  <li><a href="#build-your-own-app">Build Your Own App</a>    <ul>
      <li><a href="#where-to-start">Where to start?</a>        <ul>
          <li><a href="#build-from-ui-down">Build from UI Down</a></li>
          <li><a href="#thinking-in-resources">Thinking in resources</a></li>
          <li><a href="#t-shaped-development">T-Shaped development</a></li>
          <li><a href="#just-in-time-learning">Just-in-time learning</a></li>
        </ul>
      </li>
      <li><a href="#which-feature-do-you-build-next">Which feature do you build next?</a></li>
    </ul>
  </li>
  <li><a href="#test-your-code-efficiently">Test Your Code Efficiently</a>    <ul>
      <li><a href="#feature-development-process-with-testing">Feature development process with testing</a></li>
      <li><a href="#organizing-and-structuring-your-tests">Organizing and structuring your tests</a>        <ul>
          <li><a href="#use-object-oriented-design-to-make-your-tests-better">Use object-oriented design to make your tests better</a></li>
          <li><a href="#refacoring">Refacoring</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#learning-skill">Learning Skill</a>    <ul>
      <li><a href="#learning-stage">Learning Stage</a></li>
      <li><a href="#a-to-dont-list">A to-don’t list</a></li>
      <li><a href="#guidance">Guidance</a></li>
      <li><a href="#google-and-stackoverflow-may-not-be-the-answer">Google and StackOverflow may not be the answer</a></li>
      <li><a href="#dig-into-code-to-understand-it-better">Dig into code to understand it better</a></li>
      <li><a href="#avoiding-the-temptation-of-the-new">Avoiding the temptation of the new</a></li>
      <li><a href="#building-a-good-mental-filter">Building a good mental filter</a></li>
      <li><a href="#push-vs-pull">Push vs. Pull</a></li>
      <li><a href="#system-learning">System learning</a></li>
      <li><a href="#when-to-give-new-tech-a-chance">When to give new tech a chance</a></li>
      <li><a href="#catch-up-with-changes">Catch up with changes</a></li>
    </ul>
  </li>
  <li><a href="#form-a-habit">Form a habit</a>    <ul>
      <li><a href="#why">Why?</a></li>
      <li><a href="#how-to-keep-consistent">How to keep consistent?</a>        <ul>
          <li><a href="#morning-or-evening">Morning or Evening?</a></li>
        </ul>
      </li>
      <li><a href="#how-to-keep-motivated">How to keep motivated?</a>        <ul>
          <li><a href="#pre-prepare">Pre-prepare</a></li>
          <li><a href="#processes">Processes</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="meta-principles">Meta Principles</h2>

<ul>
  <li>
    <p><strong>As soon as you want to learn something, try it out.</strong></p>
  </li>
  <li>
    <p><strong>When you feel yourself procrastinating or stressed about something, break it apart.</strong></p>

    <p>Large, fuzzy tasks are killer. If the next thing you want to do is tiny, and you can start on it in the next five minutes, you probably will. If it’s big and vague, you’ll put it off until you know how to start it. Which will probably be never.</p>
  </li>
  <li>
    <p><strong>Start backwards.</strong></p>

    <p>When you write an app, start from the UI down. Allow your vision of the feature to guide your development. It’s easy to know if you’re building the right thing when you start from the end and trace back to the beginning. And UI sketches and HTML views are a lot easier to think about than abstract data models.</p>
  </li>
  <li>
    <p><strong>Keep it simple, and add complexity later.</strong></p>

    <p>The most frustrating struggles come from running into problems you don’t know how to solve. You can skip these problems by avoiding new things until you understand the old things. This goes for everything from gems and libraries to patterns and object-oriented design principles.</p>
  </li>
  <li>
    <p><strong>Systems, not motivation.</strong></p>

    <p>You can’t rely on motivation every day. Instead, set up systems and habits, so you don’t have to motivate yourself to work.</p>
  </li>
  <li>
    <p><strong>Struggling should tell you that you’re on the brink of learning something really valuable. Keep it up.</strong></p>
  </li>
</ul>

<h2 id="tiny-apps">Tiny Apps</h2>

<p>When you read something interesting, tweak it with a tiny app.</p>

<ul>
  <li>UI related, with a <code>rails server</code></li>
  <li>Functional, with a <code>rails console</code>. If setting it up in the console gets annoying, write a test case for it.</li>
</ul>

<h3 id="build-a-tiny-app">Build a tiny App</h3>

<blockquote>
  <p>I care about getting the most knowledge in the least amount of time, and scaffolds and other Rails code generators are a great way to do just that.</p>
</blockquote>

<p><code>ruby
rails new test_polymorphic_association
cd test_polymorphic_association
bin/rails generate scaffold bug title:string description:text
bin/rake db:migrate
</code></p>

<p><strong>Some tips for investigating ideas through the Rails console</strong></p>

<p>You can use a lot of Rails features through the <code>app</code> object. app is a special object that has some useful methods for experimenting with your Rails app.</p>

<p><code>ruby
irb(main):002:0&gt; app.bug_path bug
irb(main):003:0&gt; app.get "/bugs/1"
irb(main):003:0&gt; puts app.response.body.first(200)
</code></p>

<p>The <code>helper</code> object provides all of your app’s view and helper methods in the Rails console:</p>

<p><code>ruby
irb(main):005:0&gt; helper.content_tag :h1, "Hey there" =&gt; "&lt;h1&gt;Hey there&lt;/h1&gt;"
</code></p>

<h3 id="owning-the-things-you-learn">Owning the things you learn</h3>

<p>Explore the boundaries of that concept until you feel like you really get it.</p>

<ol>
  <li>test the boundaries</li>
  <li>break and dig it, brainstorm some questions about the idea you’re exploring.</li>
</ol>

<h2 id="build-your-own-app">Build Your Own App</h2>

<ul>
  <li><strong>Core Paths</strong>, focus on building an important path through your app as your first feature.</li>
  <li><strong>Build from UI down</strong>.</li>
  <li><strong>Avoid large, fuzzy tasks</strong>. At every stage, you should be trying to break large tasks apart into smaller ones.</li>
</ul>

<h3 id="where-to-start">Where to start?</h3>

<p>Take a few minutes and think what you’re trying to build. Write down every feature that comes to mind. Think of the different paths a user could take through your application, the different things they could do. Describe them in a single sentence.</p>

<p>Then, narrow them down to paths where, if you didn’t have them, your app couldn’t exist. <strong>Core paths</strong>.</p>

<p>In general, less code is better code. And <strong>starting from the view and building toward the model</strong> from there is the best way I know to consistently write less code.</p>

<ul>
  <li>Finding Core Path</li>
  <li>View toward Model</li>
</ul>

<h4 id="build-from-ui-down">Build from UI Down</h4>

<blockquote>
  <p>Feature development process</p>
</blockquote>

<ol>
  <li>Take the small feature from earlier.</li>
  <li>Think of one simple thing someone could do with that feature.</li>
  <li>Draw just enough screens for that user to be able to do that thing.</li>
  <li>Describe the path through that action, as if you were telling someone what you were going to do.</li>
  <li>As you describe that path, write out the objects, properties of those objects, and other actions you think you need to develop that path.</li>
</ol>

<h4 id="thinking-in-resources">Thinking in resources</h4>

<p>Rails works well with “resources.” (You can think of a resource as an ActiveRecord model and a controller that has seven actions: <code>index</code>, <code>new</code>, <code>create</code>, <code>show</code>, <code>edit</code>, <code>update</code>, and <code>destroy</code>).</p>

<h4 id="t-shaped-development">T-Shaped development</h4>

<p>When you build something, try to get something rough up as quickly as possible. As long as the core of the feature you want to build is there, it’s fine.</p>

<h4 id="just-in-time-learning">Just-in-time learning</h4>

<p>It means you’re not trying to learn everything at the beginning. That’s the most common way to procrastinate starting something that you’re too nervous to do.</p>

<h3 id="which-feature-do-you-build-next">Which feature do you build next?</h3>

<p>Keeping these tasks as small as possible is the key. And try to follow the questions below.</p>

<ol>
  <li>Ask some questions: What is the app missing? What did you postpone to get that first feature done?</li>
  <li>Try using what you have so far. What would make your life easier if it was built? What annoys you while you’re using your app?</li>
  <li>Ifyou’rebuildingthisappforsomeoneelse,watchhowtheyusetheproject. Where are they struggling? What do they complain about?</li>
</ol>

<h2 id="test-your-code-efficiently">Test Your Code Efficiently</h2>

<h3 id="feature-development-process-with-testing">Feature development process with testing</h3>

<ol>
  <li>Take your small feature.</li>
  <li>Think of one simple thing someone could do with that feature.</li>
  <li>Draw just enough screens for that user to be able to do that thing.</li>
  <li>Translate that sketch into a failing integration test.</li>
  <li>Get the first part of that test to pass:</li>
  <li>Write a failing controller test.</li>
  <li>Write some failing unit tests.</li>
  <li>Write enough code to get the unit and controller tests to pass.</li>
  <li>Repeat until the next part of your integration test passes.</li>
</ol>

<p><strong><em>What do you test?</em></strong></p>

<ul>
  <li>Happy path tests.</li>
  <li>Sad path tests.</li>
  <li>What-if tests, must be documented.</li>
</ul>

<p><strong><em>How do you test?</em></strong></p>

<ol>
  <li>Arrange</li>
  <li>Act</li>
  <li>Assert</li>
</ol>

<p><strong><em>When aren’t you testing enough?</em></strong></p>

<p>Bugs imply that you missed a test somewhere. If you run into a bug in your app that your tests didn’t catch, you’re probably missing a test.</p>

<ol>
  <li>Write a test that fails while the bug exists.</li>
  <li>Fix the bug.</li>
  <li>Make sure the test passes now.</li>
  <li>Check in both your test and fix, so you don’t run into the problem again.</li>
</ol>

<p><strong><em>How to keep TDD?</em></strong></p>

<p>Translate that sketch into a failing <strong>integration test</strong>(Capybara).</p>

<ol>
  <li>Write a failing controller test.</li>
  <li>Write some failing unit tests.</li>
  <li>Write enough code to get the unit and controller tests to pass.</li>
  <li>Repeat until the next part of your integration test passes.</li>
</ol>

<h3 id="organizing-and-structuring-your-tests">Organizing and structuring your tests</h3>

<h4 id="use-object-oriented-design-to-make-your-tests-better">Use object-oriented design to make your tests better</h4>

<p>With minitest, all of your test suites are just classes, tests are methods. That means you can use your object oriented design skills to reorganize your tests.</p>

<p>Guides to follow:</p>

<ol>
  <li><strong>For tests, clarity is better than cleverness.</strong> You don’t have anything testing your tests, so you have to be careful not to make things too abstract. Hard-coding values, copy and pasted code, all that kind of stuff is usually OK in tests, if they make the test easier to understand.</li>
  <li>Organizing your tests is easiest if your test organization matches your code organization. </li>
  <li>Wait until you feel real pain before refactoring your tests.</li>
</ol>

<h4 id="refacoring">Refacoring</h4>

<ul>
  <li>Using Extract Method to write custom assertions.</li>
  <li>Using Extract Method to make mocks easier to write.</li>
  <li>Using modules to share tests between test suites.</li>
</ul>

<h2 id="learning-skill">Learning Skill</h2>

<blockquote>
  <p>The skill of learning.</p>
</blockquote>

<h3 id="learning-stage">Learning Stage</h3>

<ol>
  <li>First stage. Baseline knowledge, bootstrapping your learning process.</li>
  <li>Second stage. You’re past the basics but not an expert, still require conscious thought.</li>
  <li>Thrid stage. Skills in the third stage are mastered. They don’t require thought, you use instinct and intuition when you use them.</li>
</ol>

<p>If all of their skills were at an intermediate level, they’d not only have to think about how to use each of those skills, but how they interacted in this one specific situation, and what kinds of tradeoffs they’ll have to make.</p>

<p>1 + 3 &gt; 2 + 2</p>

<p>So you’ll be much more productive if you have 5 skills in the third stage and 5 skills in the first stage than if you have ten skills in the second stage.</p>

<h3 id="a-to-dont-list">A to-don’t list</h3>

<p>It might seem like you need to master JavaScript before you can write a Rails app. You will, someday. But you won’t get anywhere without starting an app you can get excited about, and you don’t need JavaScript for that first stage. So cross JavaScript off the list. For now.</p>

<p><strong>For now</strong> is powerful. You’re giving yourself permission to set other things aside, so you can focus on something else.</p>

<h3 id="guidance">Guidance</h3>

<p>Search for the things that really resonate with you, the things you get lost in, the things you just want to do for hours.</p>

<p>Take a look at what you know and what you don’t. What you want to learn, and what your app needs you to learn. Set aside some things that seem less important, and turn them into a “Not Right Now” list. Eventually you’ll have a few things you just can’t set aside – learn those thoroughly. And keep moving forward.</p>

<p>Intermediate Rails isn’t about learning all the stuff you learned as a beginner in a little more depth. It’s about the stem of the “T” in T-Shaped Learning. It’s about gaining deep knowledge in a few different areas, one thing at a time. And it’s about using that knowledge to build your own apps, the way you imagined.</p>

<h3 id="google-and-stackoverflow-may-not-be-the-answer">Google and StackOverflow may not be the answer</h3>

<p>This can be the fastest way to get your problem solved, and is much easier than investigating it yourself. But you lose the opportunity to go through the investigation, and you miss the chance to build experience debugging and solving your own problems. This robs you of a chance to get to know your code, the language, and the framework better.</p>

<p>Every problem you run into is an opportunity to learn.</p>

<p>But if you use them to solve a problem, make sure you read the answer, follow references, and immerse yourself in the knowledge the solution brings you. </p>

<p>When you use someone else’s solution to solve your problems, your app will become a mess of inconsistent code that probably only works coincidentally.</p>

<h3 id="dig-into-code-to-understand-it-better">Dig into code to understand it better</h3>

<p>Great developers know how to read and understand code. When you read code, you’ll understand much more than what the documentation tells you. Sometimes, after spending time with the code, you’ll know as much about it as the author does!</p>

<p><strong>Reading code is a skill you’ll have to build like any other, and it’s not like reading a book.</strong></p>

<p>Practice reading code. Learning to read and explore code will teach you things you won’t learn anywhere else. And when you get good enough at reading code, you’ll be able to solve problems you might have thought were impossible before.</p>

<p>Remember, reading code isn’t like reading anything else. It’s about debugging and exploration. <strong>You have to run it.</strong></p>

<h3 id="avoiding-the-temptation-of-the-new">Avoiding the temptation of the new</h3>

<p>You have to separate the things that are interesting because they’re new, from the things that are interesting because they’ll help you get work done.</p>

<h3 id="building-a-good-mental-filter">Building a good mental filter</h3>

<p>Two questions to ask.</p>

<ol>
  <li>Is this something I need to know right now?</li>
  <li>If I knew this a year ago, would it have made my life easier today?</li>
</ol>

<h3 id="push-vs-pull">Push vs. Pull</h3>

<p>Hitting these sites is the “pull” model of receiving tech news. You’re the one digging it up. But these days, I’ve been using the “push” model more and more. I’ve been getting email newsletters, podcasts, things that get delivered to you instead of you looking for them.</p>

<h3 id="system-learning">System learning</h3>

<p>If you find a few good sources, keep a steady learning and practice schedule, and learn things as they become important to you, you’ll make much more progress than those who constantly chase the news sites.</p>

<h3 id="when-to-give-new-tech-a-chance">When to give new tech a chance</h3>

<p>Try it out on a new small project. Then, take the technique as far as it’ll go.</p>

<p>But unfortunately, a lot of the techniques won’t have as much of a benefit in smaller projects. So create a new branch for your experiments, so you don’t wreck your code if you don’t like the technique. And</p>

<ol>
  <li>Make the change.</li>
  <li>Look at the old code next to the new.</li>
  <li>Ask yourself, which code do you prefer?</li>
  <li>Ask a few other people, which code do they prefer?</li>
  <li>If the new way is an improvement, go forward with that.</li>
</ol>

<p><strong>A technique only has value if it improves your code, so a direct comparison is the best way to judge.</strong></p>

<h3 id="catch-up-with-changes">Catch up with changes</h3>

<p>The best way to keep up with changes to your gems is to track down the project’s <em>CHANGELOG</em> file.</p>

<p>These will help you catch up on the big changes from version to version. Usually, they’re just a short summary of each major change.</p>

<h2 id="form-a-habit">Form a habit</h2>

<blockquote>
  <p>Keep your schedule consistent</p>
</blockquote>

<h3 id="why">Why?</h3>

<p><strong>Whenever you try to build a new skill, consistency is much more important than the amount of time you spend.</strong></p>

<p>When you first try to keep a schedule, it’ll feel weird. To me, it feels like I’m just pretending, like I’m just copying what someone else told me to do, instead of actually getting anything done. That feeling starts to hit me around the fourth or fifth day in a row, and it goes away after about three weeks. It’s totally normal, but it can be dangerous.</p>

<p>Anytime you change a routine, you’ll face some internal resistance. Our daily routines seem normal to us, that’s what makes them routines. So building the momentum to change those routines takes a lot of effort, since you’re breaking habits that have taken years to form, in just a few weeks.</p>

<p>You might be tempted to spend 6 hours learning one day and take the rest of the week off. But that doesn’t solve the core problem.</p>

<p><strong>Habits are built off of repetition, not total time.</strong> If you try to jam everything all into a single day, you’ll have less repetition. It’ll be easier to skip. And if your schedule is really so packed that you can’t find time every day to work on this stuff, how will you find a big chunk of time one day a week?</p>

<p><strong>Once you’re consistent enough to form a habit, motivation won’t be as much of an issue. It’s just become something I do, so I do it.</strong></p>

<h3 id="how-to-keep-consistent">How to keep consistent?</h3>

<p>By “consistency,” I don’t mean that you have to spend hours every single night on this stuff. When you first build your schedule, go shorter rather than longer. <strong>Aim for 40 minutes a day to start.</strong></p>

<p>If you can’t find the time anywhere else, staying up 40 minutes later at night usually won’t be too painful. Same thing with waking up a little earlier each day.</p>

<p>But 40 minutes is also short enough that it’ll surprise you when it’s over. You’ll start the next task and leave it unfinished.</p>

<p>When you <strong>leave something unfinished</strong>, it’ll stay in the back of your mind. When this happens, you’ll unconsciously be looking for closure, so you’ll be more receptive to related ideas that just pop into your head. You’ll really want to finish it.</p>

<h4 id="morning-or-evening">Morning or Evening?</h4>

<p>Cons on <strong>evening</strong>:</p>

<ol>
  <li>You don’t really have a set deadline (except sleep), so you can let your motivation carry you beyond the time you set aside.</li>
  <li>You might also be drained. If you’re tired, it’s easy to convince yourself to skip it, “just this once.” And after a frustrating day at work, you’ll start to tell yourself that you’ve had a rough day, you deserve to just get a good night’s sleep. You’ll catch up tomorrow, right?</li>
  <li>It’s also easy to push until later. “If I watch one more episode, I’ll start as soon as it’s done. It’ll only be 10 minutes late.” But before you know it, you’re an hour late, you’ve destroyed your sleeping schedule and you’ll pay for it tomorrow, when you’re drained again and you’ll skip again.</li>
</ol>

<p>While <strong>morning</strong>:</p>

<blockquote>
  <p>You might feel brain-dead and uncreative in the morning, which can be killer if you’re learning and practicing creative work like learning Rails. And it’s hard to wake up early until you get used to it.  </p>

  <p>I heard a lot of people I trust and respect suggest trying waking up a little earlier for a week or so. I did, and it was hard, and I felt totally unproductive.  </p>

  <p>But somehow, once I measured my actual productivity, I found out I was twice as pro- ductive in the mornings as the evenings. This is crazy, because it felt like the exact opposite!</p>
</blockquote>

<p>I really need to give it a shot.</p>

<h3 id="how-to-keep-motivated">How to keep motivated?</h3>

<p>Of course, to form a habit is the best way. But before that, try these.</p>

<h4 id="pre-prepare">Pre-prepare</h4>

<ol>
  <li>Separating the decision about where to start from the decision about what to do.</li>
  <li>It creates an unfinished loop in your mind, they’re just as powerful here.</li>
</ol>

<h4 id="processes">Processes</h4>

<p>Seinfeld method:</p>

<blockquote>
  <p>[Jerry Seinfeld] told me to get a big wall calendar that has a whole year on one page and hang it on a prominent wall. The next step was to get a big red magic marker.</p>

  <p>He said for each day that I do my task of writing, I get to put a big red X over that day. “After a few days you’ll have a chain. Just keep at it and the chain will grow longer every day. You’ll like seeing that chain, especially when you get a few weeks under your belt. Your only job next is to not break the chain.”</p>

  <p>“Don’t break the chain,” he said again for emphasis.</p>
</blockquote>

<p>When you miss a habit and break a chain, you lose all your motivation to keep the streak going. And you lose it at the exact time you need extra motivation to build that streak back up.</p>

<p>So keep consistent with a habit tracker, calendar, or Beeminder.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Review] Design Patterns in Ruby]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2014/10/17/design-patterns-in-ruby/"/>
    <updated>2014-10-17T17:40:01+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2014/10/17/design-patterns-in-ruby</id>
    <content type="html"><![CDATA[<table class="custom">
  <tbody>
    <tr>
      <td><strong>Book</strong></td>
      <td>Design Patterns in Ruby</td>
    </tr>
    <tr>
      <td><strong>Author</strong></td>
      <td>Russ Olsen</td>
    </tr>
    <tr>
      <td><strong>Link</strong></td>
      <td><a href="http://designpatternsinruby.com/">designpatternsinruby.com</a></td>
    </tr>
  </tbody>
</table>

<ul id="markdown-toc">
  <li><a href="#meta-design-pattern">Meta Design Pattern</a></li>
  <li><a href="#about-design-pattern">About Design Pattern</a></li>
  <li><a href="#design-pattern-classification">Design Pattern Classification</a></li>
  <li><a href="#the-template-method">The Template Method</a>    <ul>
      <li><a href="#description">Description</a></li>
      <li><a href="#using-and-abusing">Using and Abusing</a></li>
      <li><a href="#in-the-wild">In the Wild</a></li>
    </ul>
  </li>
  <li><a href="#the-strategy">The Strategy</a>    <ul>
      <li><a href="#description-1">Description</a></li>
      <li><a href="#comparing-to-the-template-method">Comparing to the Template Method</a></li>
      <li><a href="#sharing-data-between-the-context-and-strategy">Sharing Data between the Context and Strategy</a></li>
      <li><a href="#using-and-abusing-1">Using and Abusing</a></li>
      <li><a href="#in-the-wild-1">In the Wild</a></li>
    </ul>
  </li>
  <li><a href="#the-observer">The Observer</a>    <ul>
      <li><a href="#description-2">Description</a></li>
      <li><a href="#code-usage">Code Usage</a></li>
      <li><a href="#interfaces-pull-or-push">Interfaces. Pull or Push?</a></li>
      <li><a href="#using-and-abusing-2">Using and Abusing</a></li>
    </ul>
  </li>
  <li><a href="#dont-inform-the-observers-just-yet">Don’t inform the observers just yet</a></li>
  <li><a href="#now-inform-the-observers">Now inform the observers!</a>    <ul>
      <li><a href="#in-the-wild-2">In the Wild</a></li>
      <li><a href="#composite">Composite</a>        <ul>
          <li><a href="#description-3">Description</a></li>
          <li><a href="#code-usage-1">Code Usage</a></li>
          <li><a href="#concerns">Concerns</a></li>
          <li><a href="#using-and-abusing-3">Using and Abusing</a></li>
          <li><a href="#in-the-wild-3">In the Wild</a></li>
        </ul>
      </li>
      <li><a href="#the-iterator">The Iterator</a>        <ul>
          <li><a href="#description-4">Description</a></li>
          <li><a href="#internal-iterators-vs-external-iterators">Internal Iterators vs. External Iterators</a></li>
          <li><a href="#the-inimitable-enumerable">The Inimitable Enumerable</a></li>
          <li><a href="#using-and-abusing-4">Using and Abusing</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#red">red</a>    <ul>
      <li><a href="#in-the-wild-4">In the Wild</a></li>
    </ul>
  </li>
  <li><a href="#if-you-supply-the-argument-eachobject-will-iterate-over-only">If you supply the argument, each_object will iterate over only</a>    <ul>
      <li><a href="#the-command">The Command</a>        <ul>
          <li><a href="#description-5">Description</a></li>
          <li><a href="#keep-track-of-what-you-have-done">Keep Track of What You Have Done</a></li>
          <li><a href="#undo-or-redo">Undo or Redo</a></li>
          <li><a href="#queuing-up-commands">Queuing Up Commands</a></li>
          <li><a href="#using-and-abusing-5">Using and Abusing</a></li>
          <li><a href="#in-the-wild-5">In the Wild</a></li>
        </ul>
      </li>
      <li><a href="#the-adapter">The Adapter</a>        <ul>
          <li><a href="#description-6">Description</a></li>
          <li><a href="#adapt-or-modify">Adapt or Modify?</a></li>
          <li><a href="#using-and-abusing-6">Using and Abusing</a></li>
          <li><a href="#in-the-wild-6">In the Wild</a></li>
        </ul>
      </li>
      <li><a href="#the-proxy">The Proxy</a>        <ul>
          <li><a href="#description-7">Description</a></li>
          <li><a href="#the-protection-proxy">The Protection Proxy</a></li>
          <li><a href="#the-remove-proxy">The Remove Proxy</a></li>
          <li><a href="#the-virtual-proxy">The Virtual Proxy</a></li>
          <li><a href="#using-and-abusing-7">Using and Abusing</a></li>
          <li><a href="#in-the-wild-7">In the Wild</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#client">client</a></li>
  <li><a href="#the-client-side-mathservice-is-actually-a-remote-proxy-to-the-real">the client-side math_service is actually a remote proxy to the real</a>    <ul>
      <li><a href="#the-decorator">The Decorator</a>        <ul>
          <li><a href="#description-8">Description</a></li>
          <li><a href="#why-not-the-template-method">Why Not The Template Method?</a></li>
          <li><a href="#code-usage-2">Code Usage</a></li>
          <li><a href="#using-and-abusing-8">Using and Abusing</a></li>
          <li><a href="#in-the-wild-8">In the Wild</a></li>
          <li><a href="#adapter-proxy-or-decorator">Adapter, Proxy or Decorator</a></li>
        </ul>
      </li>
      <li><a href="#singleton">Singleton</a>        <ul>
          <li><a href="#code-usage-3">Code Usage</a></li>
          <li><a href="#alternatives">Alternatives</a></li>
          <li><a href="#using-and-abusing-9">Using and Abusing</a></li>
          <li><a href="#in-the-wild-9">In the Wild</a></li>
        </ul>
      </li>
      <li><a href="#factory">Factory</a>        <ul>
          <li><a href="#description-9">Description</a></li>
          <li><a href="#abstract-factory">Abstract Factory</a></li>
          <li><a href="#factory--abstract-factory">Factory &amp;&amp; Abstract Factory</a></li>
          <li><a href="#using-and-abusing-10">Using and Abusing</a></li>
          <li><a href="#in-the-wild-10">In the Wild</a></li>
        </ul>
      </li>
      <li><a href="#builder">Builder</a>        <ul>
          <li><a href="#description-10">Description</a></li>
          <li><a href="#code-usage-4">Code Usage</a></li>
          <li><a href="#builders-can-ensure-sane-objects">Builders Can Ensure Sane Objects</a></li>
          <li><a href="#resuable-buidlers">Resuable Buidlers</a></li>
          <li><a href="#better-builders-with-magic-methods">Better Builders with Magic Methods</a></li>
          <li><a href="#using-and-abusing-11">Using and Abusing</a></li>
          <li><a href="#in-the-wild-11">In the Wild</a></li>
        </ul>
      </li>
      <li><a href="#interpreter">Interpreter</a>        <ul>
          <li><a href="#description-11">Description</a></li>
          <li><a href="#with-a-parser">With a Parser</a></li>
          <li><a href="#without-a-parser">Without a Parser</a></li>
          <li><a href="#using-and-abusing-12">Using and Abusing</a></li>
          <li><a href="#in-the-wild-12">In the Wild</a></li>
        </ul>
      </li>
      <li><a href="#domain-specific-languages">Domain-Specific Languages</a>        <ul>
          <li><a href="#description-12">Description</a></li>
          <li><a href="#using-and-abusing-13">Using and Abusing</a></li>
          <li><a href="#in-the-wild-13">In the Wild</a></li>
        </ul>
      </li>
      <li><a href="#custom-objects">Custom Objects</a>        <ul>
          <li><a href="#custom-tailoring-technique">Custom-Tailoring Technique</a></li>
          <li><a href="#reflections">Reflections</a></li>
          <li><a href="#using-and-abusing-14">Using and Abusing</a></li>
        </ul>
      </li>
      <li><a href="#convention-over-configuration">Convention Over Configuration</a>        <ul>
          <li><a href="#description-13">Description</a></li>
          <li><a href="#using-and-abusing-15">Using and Abusing</a></li>
        </ul>
      </li>
      <li><a href="#reference">Reference</a></li>
    </ul>
  </li>
</ul>

<h2 id="meta-design-pattern">Meta Design Pattern</h2>

<ul>
  <li>Seperate out the things that change from thos that stay the same.</li>
  <li>Program to an interface, not an implementation.</li>
  <li>Prefer composition over inheritance.</li>
  <li>Delegate, delegate, delegate.</li>
</ul>

<p>Others:</p>

<ul>
  <li>YAGNI, You ain’t gonna need it.</li>
  <li>A pattern is not just about code: Intent is critical.</li>
</ul>

<p><strong>Seperate out the things that change from thos that stay the same.</strong></p>

<p>A key goal of software engineering is to build systems that allow us to contain the damage. In an ideal system, all changes are local.</p>

<p>You get there by separating the things that are likely to change from the things that are likely to stay the same. If you can identify which aspects of your system design are likely to change, you can isolate those bits from the more stable parts.</p>

<p>But how do you keep the changing parts from infecting the stable parts? <em>Program to an interface, not an implementation.</em></p>

<p><strong>Program to an interface, not an implementation.</strong></p>

<p>A good start is to write code that is less tightly coupled to itself in the first place.</p>

<p>The idea here is to program to the most general type you can.</p>

<p><strong>Prefer composition over inheritance.</strong></p>

<p>The trouble is that inheritance comes with some unhappy strings attached. When you create a subclass of an existing class, you are not really creating two separate entities: Instead, you are making two classes that are bound together by a common implementation core. Inheritance, by its very nature, tends to marry the subclass to the superclass.</p>

<p>If our goal is to build systems that are not tightly coupled together, to build systems where a single change does not ripple through the code like a sonic boom, breaking the glassware as it goes, then probably we should not rely on inheritance as much as we do.</p>

<p>We can assemble the behaviors we need through composition. In short, we try to avoid saying that an object is <em>a kind of</em> something and instead say that it <em>has</em> something.</p>

<p><strong>Delegate, delegate, delegate.</strong></p>

<p>The combination of composition and delegation is a powerful and flexible alternative to inheritance. We get most of the benefits of inheritance, much more flexibility, and none of the unpleasant side effects. Of course, nothing comes for free. Delegation requires an extra method call, as the delegating object passes the buck along. This extra method call will have some performance cost—but in most cases, it will be very minor.</p>

<p>Another cost of delegation is the boilerplate code you need to write.</p>

<p><strong>YAGNI, You ain’t gonna need it.</strong></p>

<p>You Ain’t Gonna Need It (YAGNI for short). The YAGNI principle says simply that you should not implement features, or design in flexibility, that you don’t need right now.</p>

<p>A well-designed system is one that will flex gracefully in the face of bug fixes, changing requirements, the ongoing march of technology, and inevitable redesigns. The YAGNI principle says that you should focus on the things that you need right now, building in only the flexibility that you know you need.</p>

<p>The use of design patterns has somehow become associated with a particularly virulent strain of over-engineering, with code that tries to be infinitely flexible at the cost of being understandable, and maybe even at the cost of just plain working. The proper use of design patterns is the art of making your system just flexible enough to deal with the problems you have today, but no more.</p>

<p>Your system will not work better because you used all 23 of the GoF design patterns in every possible combination. Your code will work better only if it focuses on the job it needs to do right now.</p>

<h2 id="about-design-pattern">About Design Pattern</h2>

<p>Background</p>

<blockquote>
  <p>In 1995, Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides set out to redirect all the effort going into building redundant software wheels into some- thing more useful. That year, building on the work of Christopher Alexander, Kent Beck, and others, they published Design Patterns: Elements of Reusable Object-Oriented Software. The book was an instant hit, with the authors rapidly becoming famous (at least in software engineering circles) as the Gang of Four (GoF).</p>
</blockquote>

<p>Focus on some key questions:</p>

<ul>
  <li>How do objects like the ones you tend to find in most systems relate to one another?</li>
  <li>How should they be coupled together?</li>
  <li>What should they know about each other?</li>
  <li>How can we swap out parts that are likely to change frequently?</li>
</ul>

<p>It’s commonly agreed that the most useful thing about patterns is the way in which they form a vocabulary for articulating design decisions during the normal course of development conversations among programmers.</p>

<p>Design patterns are little spring-loaded solutions to common programming problems. And a reckless use of every design pattern on the menu to solve nonexistent problems gives design patterns a bad name in some circles.</p>

<p><strong>With Ruby</strong></p>

<p>With Ruby, we no longer need to pull out relatively heavyweight design patterns to solve tiny problems. Instead, Ruby allows you to do simple things simply. </p>

<ul>
  <li>
    <p>Like a Command object in the GoF sense is essentially a wrapper around some code that knows how to do one specific thing, to run a particular bit of code at some time. Of course, that is also a fairly accurate description of a Ruby code block object or a <code>Proc</code>.</p>
  </li>
  <li>
    <p>Internal Domain Specific Languages. I believe that his treatment of the subject, as an evolution of the Interpreter pattern, is the first significant reference work in publication on the topic.</p>
  </li>
</ul>

<p>The Ruby programming language makes implementing patterns so easy that sometimes they fade into the background.</p>

<ul>
  <li>Ruby is dynamically typed.</li>
  <li>Ruby has code closures.</li>
  <li>Ruby classes are real objects.</li>
  <li>Ruby has an elegant system of code reuse.</li>
</ul>

<p>The traditional implementations of many design patterns work, but they make you work, too. Ruby allows you to concentrate on the real problems that you are trying to solve instead of the plumbing.</p>

<p>The increasing industry recognition of the value of dynamic and flexible languages such as Ruby has plunged us into yet another wisdom gap.</p>

<blockquote>
  <p>Design Patterns was published is the need for wisdom. </p>

  <p>Bruce Tate is fond of pointing out1 that when a new programming technique or language pops up, there is frequently a wisdom gap. The industry needs time to come to grips with the new technique, to figure out the best way to apply it. How many years had to elapse between the first realization that object- oriented programming was the way to go and the time when we really began to use object-oriented technology effectively? Those years were the object-oriented wisdom gap.</p>
</blockquote>

<h2 id="design-pattern-classification">Design Pattern Classification</h2>

<p><strong>Creational</strong> (5)</p>

<ul>
  <li>Factory Method</li>
  <li>Abstract Factory</li>
  <li>Builder</li>
  <li>Prototype</li>
  <li>Singleton</li>
</ul>

<p><strong>Structural</strong> (7)</p>

<ul>
  <li>Facade</li>
  <li>Adapter</li>
  <li>Proxy</li>
  <li>Decorator</li>
  <li>Bridge</li>
  <li>Composite</li>
  <li>Flyweight</li>
</ul>

<p><strong>Behavioural</strong> (11)</p>

<ul>
  <li>Template Method</li>
  <li>Observer</li>
  <li>State</li>
  <li>Strategy</li>
  <li>Chain of Responsibility</li>
  <li>Command</li>
  <li>Visitor</li>
  <li>Mediator</li>
  <li>Memento</li>
  <li>Iterator</li>
  <li>Interpreter</li>
</ul>

<h2 id="the-template-method">The Template Method</h2>

<p>Basic idea is <em>Seperate out the things that change from thos that stay the same.</em> </p>

<h3 id="description">Description</h3>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/template-method.png" alt="template-method" /></p>

<ol>
  <li>Extract the common part into an abstract base class</li>
  <li>Create some hook methods as the interface</li>
  <li>Let the subclass to implement it</li>
</ol>

<p>The Template Method pattern is simply a fancy way of saying that if you want to vary an algorithm, one way to do so is to code the invariant part in a base class and to encapsulate the variable parts in methods that are defined by a number of subclasses.</p>

<p>The abstract base class controls the higher-level processing through the template method; the sub-classes simply fill in the details.</p>

<p>Non-abstract methods that can be overridden in the concrete classes of the Template Method pattern are called <strong>hook methods</strong>.</p>

<p>Duck typing is a trade-off: You give up the compile-time safety of static typing, and in return you get back a lot of code clarity and programming flexibility.</p>

<h3 id="using-and-abusing">Using and Abusing</h3>

<p>The Template Method pattern is at its best when it is at its leanest—that is, when every abstract method and hook is there for a reason. Try to avoid creating a template class that requires each subclass to override a huge number of obscure methods just to cover every conceivable possibility. You also do not want to create a template class that is encrusted with a multitude of hook methods that no one will ever override.</p>

<h3 id="in-the-wild">In the Wild</h3>

<p>There is another very common example of the Template Method pattern that is perhaps so pervasive that it is hard to see. Think about the <code>initialize</code> method that we use to set up our objects. All we know about <code>initialize</code> is that it is called sometime toward the end of the process of creating a new object instance and that it is a method that we can override in our class to do any specific initialization. Sounds like a hook method to me.</p>

<p><code>Class#new</code> calls <code>allocate</code> first, then <code>initialise</code>. Every class inherits the <code>new</code> method, and defines its own concrete <code>initialise</code> method. So, we can treat <code>Class#new</code> as a template method, and <code>initialise</code> as a hook method.</p>

<h2 id="the-strategy">The Strategy</h2>

<p>Basic idea is <em>Delegate, delegate, delegate</em> and <em>Prefer composition over inheritance</em>.</p>

<h3 id="description-1">Description</h3>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/strategy.png" alt="strategy" /></p>

<ol>
  <li>Pull the algorithm out into a seperate “strategy” object.</li>
  <li>All of the startegy objects support the same interface. </li>
  <li>Let the context choose.</li>
</ol>

<p>Given that all of the strategy objects look alike from the outside, the user of the strategy—called the <strong>context</strong> class by the GoF—can treat the strategies like interchangeable parts.</p>

<h3 id="comparing-to-the-template-method">Comparing to the Template Method</h3>

<p>The Template Method pattern is built around inheritance.</p>

<p>No matter how carefully you design your code, your subclasses are tangled up with their superclass: It is in the nature of the relationship. On top of this, inheritance-based techniques such as the Template Method pattern limit our runtime flexibility. Once we have selected a particular variation of the algorithm—in our example, once we have created an instance of HTMLReport—changing our mind is hard.</p>

<p><code>ruby
# The Template Method
report = HTMLReport.new
report.output_report
report = PlainTextReport.new
report.output_report
</code></p>

<p>Because the Strategy pattern is based on composition and delegation, rather than on inheritance, it is easy to switch strategies at runtime.</p>

<p><code>ruby
# The Strategy
report = Report.new(HTMLFormatter.new)
report.output_report
report.formatter = PlainTextFormatter.new
report.output_report
</code></p>

<h3 id="sharing-data-between-the-context-and-strategy">Sharing Data between the Context and Strategy</h3>

<ol>
  <li><em>Pass in everything that the strategy needs as arguments when the context calls the methods on the strategy object.</em> The downside of doing things this way is that if there is a lot of complex data to pass between the context and the strategy, then, well, you are going to be passing a lot of complex data around without any guarantee that it will get used.</li>
  <li>Having the context object pass a reference to itself to the strategy object.</li>
</ol>

<h3 id="using-and-abusing-1">Using and Abusing</h3>

<p>Particular attention to the details of the interface between the context and the strategy as well as to the coupling between them. Remember, the Strategy pattern will do you little good if you couple the con- text and your first strategy so tightly together that you cannot wedge a second or a third strategy into the design.</p>

<h3 id="in-the-wild-1">In the Wild</h3>

<p>Ruby code blocks, which are essentially code wrapped up in an instant object (the Proc object), are wonderfully useful for creating quick, albeit simple, strategy objects.  </p>

<p>Use Proc as the lightweight strategy object. </p>

<p>```ruby
class Report
  attr_reader :title, :text
  attr_accessor :formatter</p>

<p>def initialize(&amp;formatter)
    @title = ‘Monthly Report’
    @text = [ ‘Things are going’, ‘really, really well.’ ]
    @formatter = formatter
  end</p>

<p>def output_report
    @formatter.call( self )
  end
end
```</p>

<h2 id="the-observer">The Observer</h2>

<h3 id="description-2">Description</h3>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/observer.png" alt="observer" /></p>

<p>The aiming is to build a system that is highly integrated—that is, a system where every part is aware of the state of the whole.</p>

<p>The GoF called this idea of building a clean interface between the source of the news that some object has changed and the consumers of that news the Observer pattern. The class with the news is the <strong>subject</strong>, and the objects which are interested in getting the news are the <strong>observor</strong>.</p>

<blockquote>
  <p>It has always seemed to me that the Observer pattern is somewhat misnamed. While the observer object gets top billing—in fact, the only billing—it is actually the subject that does most of the work. It is the subject that is responsible for keeping track of the observers. It is also the subject that needs to inform the observers that a change has come down the pike.</p>
</blockquote>

<h3 id="code-usage">Code Usage</h3>

<p>```ruby
module Subject
  def initialize
    @observers=[]
  end</p>

<p>def add_observer(observer)
    @observers « observer
  end</p>

<p>def delete_observer(observer)
    @observers.delete(observer)
  end</p>

<p>def notify_observers
    @observers.each do |observer|
      observer.update(self)
    end
  end
end</p>

<p>class Employee
  include Subject</p>

<p>attr_reader :name, :address
  attr_reader :salary</p>

<p>def initialize( name, title, salary)
   super()
   @name = name
   @title = title
   @salary = salary
  end</p>

<p>def salary=(new_salary)
    @salary = new_salary
    notify_observers
  end
end
```</p>

<p>The Ruby standard library comes with a fine, prebuilt <a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/observer/rdoc/Observable.html">Observable</a> module that provides all of the support you need to make your object, well, observable.</p>

<p>With the observable module, the observable object must:</p>

<ol>
  <li>assert that it has <code>#changed</code></li>
  <li>call <code>#notify_observers</code></li>
</ol>

<p>```ruby
require ‘observer’
class Employee
  include Observable</p>

<p>attr_reader :name, :address
  attr_reader :salary</p>

<p>def initialize( name, title, salary)
   @name = name
   @title = title
   @salary = salary
  end</p>

<p>def salary=(new_salary)
    @salary = new_salary
    changed
    notify_observers(self)
  end
end
```</p>

<h3 id="interfaces-pull-or-push">Interfaces. Pull or Push?</h3>

<p>The key decisions that you need to make when implementing the Observer pattern all center on the interface between the subject and the observer.</p>

<p>Just have a single method in the observer whose only argument is the subject. The GoF term for this strategy is the <strong>pull</strong> method, because the observers have to pull whatever details about the change that they need out of the subject.</p>

<p>The other possibility—logically enough termed the <strong>push</strong> method—has the subject send the observers a lot of details about the change:</p>

<p><code>ruby
observer.update_salary(self, old_salary, new_salary)
observer.update_title(self, old_title, new_title)
</code></p>

<p>The advantage in providing more details is that the observers do not have to work quite as hard to keep track of what is going on. The disadvantage of the push model is that if all of the observers are not interested in all of the details, then the work of passing the data around goes for naught.</p>

<h3 id="using-and-abusing-2">Using and Abusing</h3>

<p><em>The frequency and timing of the updates.</em> The subject class can help with all of this by avoiding broadcasting redundant updates. Just because some- one updates an object, it does not mean that anything really changed.</p>

<p><code>ruby
def salary=(new_salary)
  old_salary = @salary
  @salary = new_salary
  if old_salary != new_salary
    changed
    notify_observers(self)
  end
end
</code></p>

<p><em>The consistency of the subject as it informs its observers of changes.</em></p>

<p>```ruby
fred = Employee.new(“Fred”, “Crane Operator”, 30000)</p>

<p>fred.salary = 1000000
# Warning! Inconsistent state here!
fred.title = ‘Vice President of Sales’</p>

<h1 id="dont-inform-the-observers-just-yet">Don’t inform the observers just yet</h1>
<p>fred.salary = 1000000
fred.title = ‘Vice President of Sales’</p>

<h1 id="now-inform-the-observers">Now inform the observers!</h1>
<p>fred.changes_complete
```</p>

<p><em>Badly behaved observers.</em> Like responds by raising an exception?</p>

<h3 id="in-the-wild-2">In the Wild</h3>

<p>Use Proc as Observers. Just use <code>call</code> as the interface when notifying observers.</p>

<p><code>ruby
module Subject
  def notify_observers
    @observers.each do |observer|
      observer.call(self)
    end
  end
end
</code></p>

<p>ActiveRecord::Observer has been deprecated from Rails 4.0, but we can still get the feature by the extracted gem. <a href="https://github.com/rails/rails-observers">rails-observers</a></p>

<h2 id="composite">Composite</h2>

<h3 id="description-3">Description</h3>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/composite.png" alt="composite" /></p>

<ol>
  <li><strong>component</strong>, a common interface or base class for all of your objects.</li>
  <li><strong>leaf</strong>, the class doing simple, indivisible building blocks of process.</li>
  <li><strong>composite</strong>, a component, also a higher-level object that is build from subcomponents.</li>
</ol>

<p>The GoF called the design pattern for our “<em>the sum acts like one of the parts</em>” situa- tion the Composite pattern. You will know that you need to use the Composite pattern when you are trying to build a hierarchy or tree of objects, and you do not want the code that uses the tree to constantly have to worry about whether it is dealing with a single object or a whole bushy branch of the tree. Once you grasp its <em>recursive nature</em>, the Composite pattern is really quite simple.</p>

<h3 id="code-usage-1">Code Usage</h3>

<p>```ruby
class CompositeTask &lt; Task
  def initialize(name)
    super(name)
    @sub_tasks = []
  end</p>

<p>def add_sub_task(task)
    @sub_tasks « task
  end</p>

<p>def remove_sub_task(task)
    @sub_tasks.delete(task)
  end</p>

<p>def get_time_required
    time=0.0
    @sub_tasks.each {|task| time += task.get_time_required}
    time
  end
end</p>

<p>class MakeBatterTask &lt; CompositeTask
  def initialize
    super(‘Make batter’)
    add_sub_task( AddDryIngredientsTask.new )
    add_sub_task( AddLiquidsTask.new )
    add_sub_task( MixTask.new )
  end
end
```</p>

<h3 id="concerns">Concerns</h3>

<p><strong><em>How to handle the difference between a composite and a leaf?</em></strong></p>

<p>The goal of the Composite pattern is to make the leaf objects <em>more or less</em> indistinguishable from the composite objects. But there is one unavoidable difference between a composite and a leaf: The composite has to manage its children, which probably means that it needs to have a method to get at the children and possibly methods to add and remove child objects. The leaf classes, of course, really do not have any children to manage; that is the nature of leafyness.</p>

<p>As I say, how you handle this decision is mostly a matter of taste: Make the leaf and composite classes different, or burden the leaf classes with embarrassing methods that they do not know how to handle. My own instinct is to leave the methods off of the leaf classes. Leaf objects cannot handle child objects, and we may as well admit it.</p>

<p><strong><em>How to traverse the tree structrue which the composite pattern make?</em></strong></p>

<p>Each composite object holds references to its subcomponents but the child compo- nents do not know a thing about their parents, it is easy to traverse the tree from the root to the leaves but hard to go the other way.</p>

<p>Add a parent reference in the component class.</p>

<p>```ruby
class Task
  attr_accessor :name, :parent</p>

<p>def initialize(name)
    @name = name
    @parent = nil
  end
end</p>

<p>class CompositeTask &lt; Task
  def initialize(name)
    super(name)
    @sub_tasks = []
  end</p>

<p>def add_sub_task(task)
    @sub_tasks « task
    task.parent = self
  end</p>

<p>def remove_sub_task(task)
    @sub_tasks.delete(task)
    task.parent = nil
  end
end
```</p>

<h3 id="using-and-abusing-3">Using and Abusing</h3>

<p>The error that crops up so frequently with the Composite pattern is assuming that the tree is only one level deep—that is, assuming that all of the child components of a composite object are, in fact, leaf objects and not other composites.</p>

<p>Remember, the power of the Composite pattern is that it allows us to build arbi- trarily deep trees.</p>

<h3 id="in-the-wild-3">In the Wild</h3>

<h2 id="the-iterator">The Iterator</h2>

<h3 id="description-4">Description</h3>

<p>Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation.</p>

<p>Iterators in Ruby are a great example of what is right with the language. Instead of providing special-purpose external iterator objects for each aggregate class, Ruby relies on the very flexible idea of Proc objects and code blocks to build internal iterators.</p>

<p><strong>external iterator</strong>, the iterator is a separate object from the aggregate.</p>

<p><code>java
# in java
ArrayList list = new ArrayList();
list.add("red");
list.add("green");
list.add("blue");
for( Iterator i = list.iterator(); i.hasNext();) {
        System.out.println( "item: " + i.next());
}
</code></p>

<p><strong>internal iterator</strong>, the code block-based iterators, all of the iterating action occurs inside the aggregate object.</p>

<p>```ruby
# in ruby
def for_each_element(array)
  i= 0
  while i &lt; array.length
    yield(array[i])
    i += 1
  end
end</p>

<p>a = [10, 20, 30]
for_each_element(a) {|element| puts(“The element is #{element}”)}
```</p>

<h3 id="internal-iterators-vs-external-iterators">Internal Iterators vs. External Iterators</h3>

<p>With Internal Iterator, the main advantage is simplicity and code clarity.</p>

<p>With External Iterator</p>

<ol>
  <li>
    <p>You have more flexibility on iteration control. With an external iterator, you won’t call <code>next</code> until you are good and ready for the next element. With an internal iterator, by contrast, the aggregate relentlessly pushes the code block to accept item after item.</p>

    <p><em>If you are trying to merge the contents of two sorted arrays into a single array that was itself sorte?</em></p>

    <p>the merge is actually fairly easy with an external iterator, simply create an iterator for the two input arrays and then merge the arrays by repeatedly pushing the smallest value from either of the iterators onto the output array.</p>
  </li>
  <li>
    <p>A second advantage of external iterators is that, because they are external, you can share them—you can pass them around to other methods and objects. Of course, this is a bit of a double-edged sword: You get the flexibility but you also have to know what you are doing. In particular, beware of multiple threads getting hold of a non-thread-safe external iterator.</p>
  </li>
</ol>

<h3 id="the-inimitable-enumerable">The Inimitable Enumerable</h3>

<p>To mix in <code>Enumerable</code>, you need only make sure that your internal iterator method is named <code>each</code> and that the individual elements that you are going to iterate over have a reasonable implementation of the <code>&lt;=&gt;</code> comparison operator. </p>

<p>```ruby
class Account
  attr_accessor :name, :balance</p>

<p>def initialize(name, balance)
    @name = name
    @balance = balance
  end</p>

<p>def &lt;=&gt;(other)
    balance &lt;=&gt; other.balance
  end
end</p>

<p>class Portfolio
  include Enumerable</p>

<p>def initialize
    @accounts = []
  end</p>

<p>def each(&amp;block)
    @accounts.each(&amp;block)
  end</p>

<p>def add_account(account)
    @accounts « account
  end
end</p>

<p>my_portfolio.any? {|account| account.balance &gt; 2000}
my_portfolio.all? {|account| account.balance &gt; = 10}
```</p>

<h3 id="using-and-abusing-4">Using and Abusing</h3>

<p>The main danger is this: What happens if the aggregate object changes while you are iterating through it?</p>

<p>You may use a shallow copy when initializing.</p>

<p><code>ruby
class ChangeResistantArrayIterator
  def initialize(array)
    @array = Array.new(array)
    @index = 0
  end
  ...
</code></p>

<p>A Ruby trick example.</p>

<p>```ruby
array=[‘red’, ‘green’, ‘blue’, ‘purple’]</p>

<p>array.each do | color |
  puts(color)
  if color == ‘green’
    array.delete(color)
  end
end</p>

<h1 id="red">red</h1>
<p># green
# purple
```</p>

<p><em>Finally, a multithreaded program is a particularly dangerous home for iterators.</em> You need to take all of the usual care to ensure that one thread does not rip the aggregate rug out from under your iterator.</p>

<h3 id="in-the-wild-4">In the Wild</h3>

<p><strong>IO</strong></p>

<p>The neat thing about the IO object is that it is amphibious—it does both internal and external iterators.</p>

<p>```ruby
f = File.open(‘names.txt’)
while not f.eof?
  puts(f.readline)
end
f.close</p>

<p>f = File.open(‘names.txt’)
f.each {|line| puts(line)}
f.close
```</p>

<p><strong>Pathname</strong> <a href="http://ruby-doc.org/stdlib-2.1.0/libdoc/pathname/rdoc/Pathname.html">API</a></p>

<p>Pathname tries to offer one-stop shopping for all your directory and path manipulation needs.</p>

<p>```ruby
pn.each_filename {|file| puts(“File: #{file}”)}
# File: usr
# File: local
# File: lib
# File: ruby
# File: 1.8</p>

<p>pn.each_entry {|entry| puts(“Entry: #{entry}”)}
# Entry: .
# Entry: ..
# Entry: i686-linux
# Entry: shellwords.rb
# Entry: mailread.rb
# …
```</p>

<p><strong>ObjectSpace</strong> <a href="http://www.ruby-doc.org/core-2.1.3/ObjectSpace.html">API</a></p>

<p>ObjectSpace provides a window into the complete universe of objects that exist within your Ruby interpreter. The fundamental iterator supplied by ObjectSpace is the <code>each_object</code> method. It iterates across all of the Ruby objects—everything that is loaded into your Ruby interpreter:</p>

<p>```ruby
ObjectSpace.each_object {|object| puts(“Object: #{object}”)}</p>

<h1 id="if-you-supply-the-argument-eachobject-will-iterate-over-only">If you supply the argument, each_object will iterate over only</h1>
<p># the instances of that class or module.
ObjectSpace.each_object(Numeric) {|n| puts(“The number is #{n}”)}
```</p>

<p>Try this execellent <code>subclasses_of</code> method:</p>

<p>```ruby
def subclasses_of(superclass)
  subclasses = []</p>

<p>ObjectSpace.each_object(Class) do |k|
    next if !k.ancestors.include?(superclass) || superclass == k || k.to_s.include?(‘::’) || subclasses.include?(k.to_s)
    subclasses « k.to_s
  end</p>

<p>subclasses
end</p>

<p>subclasses_of(Numeric)
# =&gt; [“Complex”, “Rational”, “Bignum”, “Float”, “Fixnum”, “Integer”]
```</p>

<h2 id="the-command">The Command</h2>

<h3 id="description-5">Description</h3>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/command.png" alt="command" /></p>

<p>The idea of factoring out the action code into its own object is the essence of the Command pattern.</p>

<p>The key thing about the Command pattern is that it separates the thought from the deed. When you use this pattern, you are no longer simply saying, “Do this”; instead, you are saying, “Remember how to do this,” and, sometime later, “Do that thing that I told you to remember.”</p>

<p>Command pattern can be useful in</p>

<ol>
  <li>Keeping track of what you need to do, or what you have already done</li>
  <li>Undo or redo</li>
  <li>Queuing up comands</li>
</ol>

<h3 id="keep-track-of-what-you-have-done">Keep Track of What You Have Done</h3>

<p>```ruby
class Command
  attr_reader :description</p>

<p>def initialize(description)
    @description = description
  end</p>

<p>def execute
  end
end</p>

<p>class CreateFile &lt; Command
  def initialize(path, contents)
    super(“Create file: #{path}”)
    @path = path
    @contents = contents
  end</p>

<p>def execute
    f = File.open(@path, “w”)
    f.write(@contents)
    f.close
  end
end
```</p>

<p><strong>Use Composite</strong></p>

<p>When we are trying to keep track of what we are about to do—or have done—we will need a class to collect all of our commands. Hmm, a class that acts like a command, but really is just a front for a number of subcommands. Sounds like a composite:</p>

<p>```ruby
class CompositeCommand &lt; Command
  def initialize
    @commands = []
  end</p>

<p>def add_command(cmd)
    @commands « cmd
  end</p>

<p>def execute
    @commands.each {|cmd| cmd.execute}
  end</p>

<p>def description
    description = ‘’
    @commands.each {|cmd| description += cmd.description + “\n”}
    description
  end
end</p>

<p>cmds = CompositeCommand.new
cmds.add_command(CreateFile.new(‘file1.txt’, “hello world\n”))
cmds.add_command(CopyFile.new(‘file1.txt’, ‘file2.txt’))
cmds.add_command(DeleteFile.new(‘file1.txt’))</p>

<p>cmds.execute
```</p>

<h3 id="undo-or-redo">Undo or Redo</h3>

<p>Every undoable command that we create has two methods. Along with the usual <code>execute</code> method, which does the thing, we add an <code>unexecute</code> method, which undoes the same thing.</p>

<p>As delete a file maybe destructive, so we need to save the contents of the original file.</p>

<p>```ruby
class DeleteFile &lt; Command
  def initialize(path)
    super “Delete file: #{path}”
    @path = path
  end</p>

<p>def execute
    if File.exists?(@path)
      @contents = File.read(@path)
    end
    f = File.delete(@path)
  end</p>

<p>def unexecute
    if @contents
      f = File.open(@path,”w”)
      f.write(@contents)
      f.close
    end
  end
end<br />
```</p>

<p>Creating a file with CreateFile could be destructive, too: The file that we are trying to create might already exist and be overwritten as we create the new file. In a real system, we would need to deal with this possibility as well as with a host of issues related to file permissions and ownership. </p>

<p>```ruby
class CreateFile &lt; Command
  def initialize(path, contents)
    super “Create file: #{path}”
    @path = path
    @contents = contents
  end</p>

<p>def execute
    f = File.open(@path, “w”)
    f.write(@contents)
    f.close
  end
  def unexecute
    File.delete(@path)
  end
end
```</p>

<p>Finnaly, add an <code>unexecute</code> method to the <code>CompositeCommad</code> class.</p>

<p>```ruby
class CompositeCommand &lt; Command
  # …</p>

<p>def unexecute
    @commands.reverse.each { |cmd| cmd.unexecute }
  end</p>

<p># …
end
```</p>

<h3 id="queuing-up-commands">Queuing Up Commands</h3>

<blockquote>
  <p>For example, it frequently takes a minor computer-time eternity to connect to a database. If you need to perform a number of database operations over time, you sometimes face the unpleasant choice of (1) leaving the connection open for the whole time, thereby wasting a scarce resource, or (2) wasting the time it takes to open and close the connection for each operation.</p>
</blockquote>

<p>The Command pattern offers one way out of this kind of bind. Instead of performing each operation as a stand-alone task, you accumulate all of these commands in a list. Periodically, you can open a connection to the database, execute all of your commands, and flush out this list.</p>

<h3 id="using-and-abusing-5">Using and Abusing</h3>

<p>The key thing about the Command pattern is that it separates the thought from the deed. When you use this pattern, you are no longer simply saying, “Do this”; instead, you are saying, “Remember how to do this,” and, sometime later, “Do that thing that I told you to remember.” Make sure that you really need that complexity before you pull the Command pattern out of your bag of tricks.</p>

<p><strong>Creation Time versus Execution Time</strong></p>

<p>Assuming you really do need the Command pattern, to make it work you have to be sure that the initial thought is complete. You have to carefully think through the circumstances in which the command object will find itself when it is executed versus when it was created. Yes, this key file was open, and that vital object was initialized when I cre- ated the command. Will it all still be there for me when the command is executed?</p>

<h3 id="in-the-wild-5">In the Wild</h3>

<p><strong>ActiveRecord::Migration</strong></p>

<p>```ruby
class CreateBookTable &lt; ActiveRecord::Migration
  # execute
  def self.up
    create_table :books do |t|
      t.column :title, :string
      t.column :author, :string
    end
  end</p>

<p># unexecute
  def self.down
    drop_table :books
  end
end
```</p>

<p><strong>Madeleine</strong></p>

<p><a href="https://github.com/ghostganz/madeleine">repo</a></p>

<blockquote>
  <p>Imagine how slow your system would be if you had to write out a whole airport’s worth of seat assignments every time someone changed his or her mind and wanted that aisle seat after all.</p>
</blockquote>

<p>Madeleine is a transactional, high-performance, object persistence framework that does not need any object relational mapping for the simple reason that it does not use a relational database—or any other kind of database, for that matter. Instead, Madeleine relies on the Ruby Marshal package, a facility for converting live Ruby objects into bytes and for turning those bytes back into objects. Unfortunately, being able to marshal your objects to a file is not by itself a complete solution to application persistence.</p>

<p><a href="https://gist.github.com/ifyouseewendy/c0a3ec5da222779885f0">Example gist using Madeleine</a></p>

<h2 id="the-adapter">The Adapter</h2>

<h3 id="description-6">Description</h3>

<p>An adapter is an object that crosses the chasm between the interface that you have and the interface that you need.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/adapter.png" alt="the adapter" /></p>

<p>The client expects the target to have a certain interface. But unknown to the client, the target object is really an adapter, and buried inside of the adapter is a reference to a second object, the adaptee, which actually per- forms the work.</p>

<h3 id="adapt-or-modify">Adapt or Modify?</h3>

<p>The choice of using an adapter or modifying the object really comes down to how well you understand the class in question and the issue of encapsulation.</p>

<p>Lean toward modifying the class in the following circumstances:</p>

<ul>
  <li>The modifications are simple and clear.</li>
  <li>You understand the class you are modifying and the way in which it is used.</li>
</ul>

<p>Lean toward an adapter solution in the following situations:</p>

<ul>
  <li>The interface mismatch is extensive and complex. </li>
  <li>You have no idea how this class works.</li>
</ul>

<p>Engineering is all about trade-offs. Adapters preserve encapsulation at the cost of some complexity. Modifying a class may buy you some simplification, but at the cost of tinkering with the plumbing.</p>

<h3 id="using-and-abusing-6">Using and Abusing</h3>

<p>One of the advantages that Ruby’s duck typing gives to adapter writers is that it allows us to create adapters that support only that part of the target interface that the client will actually use. Partially implemented adapters are something of a double-edged sword: On the one hand, it is very convenient to implement only what you absolutely need; on the other hand, your program can come to grief if the client decides to call a method that you didn’t think you needed.</p>

<h3 id="in-the-wild-6">In the Wild</h3>

<p><code>ActiveRecord</code> deals with all of these differences by defining a standardized interface, encapsulated in a class called <code>AbstractAdapter</code>. The <code>AbstractAdapter</code> class defines the interface to a database that is used throughout <code>ActiveRecord</code>. </p>

<p><code>AbstractAdapter</code> defines a standard method to execute a SQL select statement and return the results, called <code>select_all</code>. Each individual adapter implements the <code>select_all</code> method in terms of the API of the underlying database system.</p>

<h2 id="the-proxy">The Proxy</h2>

<h3 id="description-7">Description</h3>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/proxy.png" alt="the proxy" /></p>

<p>The Proxy pattern is essentially built around a little white lie. The counterfeit object, called the <strong>proxy</strong> by the GoF, has a reference to the real object, the <strong>subject</strong>, hidden inside. Whenever the client code calls a method on the proxy, the proxy simply forwards the request to the real object.</p>

<p>Inside the proxy is hidden a reference to the other, real object—an object that the GoF referred to as the subject.</p>

<p>Once we have a proxy, we have a place to stand squarely between the client and the real object. The proxy provides the ideal pinch point to exert control.</p>

<p>The proxy serves as a pinch point between the client and the subject:</p>

<ul>
  <li>“Is this operation authorized?” asks the protection proxy.</li>
  <li>“Does the subject actually live on this other machine?” asks the remote proxy. </li>
  <li>“Have I actually created the subject yet?” asks the virtual proxy. </li>
</ul>

<p>In short, the proxy controls access to the subject.</p>

<h3 id="the-protection-proxy">The Protection Proxy</h3>

<p>A proxy that controls access to the subject.</p>

<p>```ruby
require ‘etc’</p>

<p>class AccountProtectionProxy
  def initialize(real_account, owner_name)
    @subject = real_account
    @owner_name = owner_name
  end</p>

<p>def deposit(amount)
    check_access
    return @subject.deposit(amount)
  end</p>

<p>def withdraw(amount)
    check_access
    return @subject.withdraw(amount)
  end</p>

<p>def check_access
    if Etc.getlogin != @owner_name
      raise “Illegal access: #{Etc.getlogin} cannot access account.”
    end
  end
end
```</p>

<p>The advantage of using a proxy for protection is that it gives us a nice separation of concerns: The proxy worries about who is or is not allowed to do what. The only thing that the real bank account object need be concerned with is, well, the bank account.</p>

<p>By splitting the protection cleanly off from the workings of the real object, we can minimize the chance that any important information will inadvertently leak out through our protective shield.</p>

<h3 id="the-remove-proxy">The Remove Proxy</h3>

<p>You could hide the complexity behind a remote proxy, an object that lives on the client machine and looks, to the client code, just like the real BankAccount object. When a request comes in, the remote proxy goes through all the horror of pack- aging up the request, sending it over the network, waiting for a response, unpacking the response, and returning the answer to the unsuspecting client.</p>

<p>From the client’s point of view, it called a method on what it thought was the real BankAccount object and sometime later—perhaps an unusually long time later—the answer came back. This is how virtually all remote procedure call (RPC) systems work.</p>

<p>```ruby
require ‘soap/wsdlDriver’</p>

<p>wsdl_url = ‘http://www.webservicex.net/WeatherForecast.asmx?WSDL’</p>

<p>proxy = SOAP::WSDLDriverFactory.new( wsdl_url ).create_rpc_driver
weather_info = proxy.GetWeatherByZipCode(‘ZipCode’=&gt;’19128’)
```</p>

<p>Once the proxy object is set up, the client code no longer has to worry about the fact that the service actually lives at www.webservicex.net. Instead, it simply calls GetWeatherByZipCode and leaves all of the network details to the proxy.</p>

<h3 id="the-virtual-proxy">The Virtual Proxy</h3>

<p>In a sense, the virtual proxy is the biggest liar of the bunch. It pretends to be the real object, but it does not even have a reference to the real object until the client code calls a method. Only when the client actually calls a method does the virtual proxy scurry off and create or otherwise get access to the real object.</p>

<p>```ruby
class VirtualAccountProxy</p>

<p>def initialize(starting_balance=0)
    @starting_balance=starting_balance
  end</p>

<p>def deposit(amount)
    s = subject
    return s.deposit(amount)
  end</p>

<p>def withdraw(amount)
    s = subject
    return s.withdraw(amount)
  end</p>

<p>def balance
    s = subject
    return s.balance
  end</p>

<p>def subject
    @subject || (@subject = BankAccount.new(@starting_balance))
  end
end<br />
```</p>

<p>That approach tangles the proxy and the subject up a little more than we might like. We can improve on this strategy by applying a little of that Ruby code block magic:</p>

<p>```ruby
class VirtualAccountProxy
  def initialize(&amp;creation_block)
    @creation_block = creation_block
  end</p>

<p># Other methods omitted …</p>

<p>def subject
    @subject || (@subject = @creation_block.call)
  end
end
```</p>

<p><strong>Leverage Ruby</strong></p>

<p>Use ghost method <code>method_missing</code> and dynamic dispatch <code>send</code>.</p>

<p>```ruby
class VirtualProxy
  def initialize(&amp;creation_block)
    @creation_block = creation_block
  end</p>

<p>def method_missing(name, *args)
    s = subject
    s.send( name, *args)
  end</p>

<p>def subject
    @subject = @creation_block.call unless @subject
    @subject
  end
end</p>

<p>array = VirtualProxy.new { Array.new }
array « ‘hello’ array « ‘out’ array « ‘there’
```</p>

<h3 id="using-and-abusing-7">Using and Abusing</h3>

<p>Overusing <code>method_missing</code>, like overusing inheritance, is a great way to obscure your code.</p>

<h3 id="in-the-wild-7">In the Wild</h3>

<p><strong>drb using a remote proxy</strong></p>

<p>```ruby
# server
class MathService
  def add(a, b)
    return a + b
  end
end</p>

<p>require ‘drb/drb’</p>

<p>math_service=MathService.new
DRb.start_service(“druby://localhost:3030”, math_service)
DRb.thread.join</p>

<h1 id="client">client</h1>
<p>require ‘drb/drb’
DRb.start_service</p>

<h1 id="the-client-side-mathservice-is-actually-a-remote-proxy-to-the-real">the client-side math_service is actually a remote proxy to the real</h1>
<p># math service, which is running inside the server-side Ruby interpreter.
math_service = DRbObject.new_with_uri(“druby://localhost:3030”)
sum=math_service.add(2,2)
```</p>

<h2 id="the-decorator">The Decorator</h2>

<blockquote>
  <p>But what if you simply need to vary the responsibilities of an object? What do you do when sometimes your object needs to do a little more, but sometimes a little less?</p>
</blockquote>

<h3 id="description-8">Description</h3>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/decorator.png" alt="decorator" /></p>

<p>The ConcreteComponent is the “real” object, the object that implements the basic component functionality.</p>

<p>The Decorator pattern is a straightforward technique that you can use to assemble exactly the functionality that you need at runtime. The Decorator class has a reference to a Component—the next Component in the decorator chain—and it implements all of the methods of the Component type. </p>

<p>Each decorator supports the same core interface, but adds its own twist on that interface. The key implementation idea of the Decorator pattern is that the decorators are essentially shells: Each takes in a method call, adds its own special twist, and passes the call on to the next component in line. </p>

<p>The Decorator pattern lets you start with some basic functionality and layer on extra features, one decorator at a time.</p>

<h3 id="why-not-the-template-method">Why Not The Template Method?</h3>

<p>The trouble is that the inheritance-based approach requires you to come up with all possi- ble combinations of features up-front, at design time.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/out-of-control-inheritance.png" alt="out-of-control inheritance" /></p>

<h3 id="code-usage-2">Code Usage</h3>

<p>```ruby
class WriterDecorator
  def initialize(real_writer)
    @real_writer = real_writer
  end</p>

<p>def write_line(line)
    @real_writer.write_line(line)
  end</p>

<p>def pos
    @real_writer.pos
  end</p>

<p>def rewind
    @real_writer.rewind
  end</p>

<p>def close
    @real_writer.close
  end
end</p>

<p>class NumberingWriter &lt; WriterDecorator
  def initialize(real_writer)
    super(real_writer)
    @line_number = 1
  end</p>

<p>def write_line(line)
    @real_writer.write_line(“#{@line_number}: #{line}”)
    @line_number += 1
   end
end</p>

<p>writer = NumberingWriter.new(SimpleWriter.new(‘final.txt’))
writer.write_line(‘Hello out there’)
```</p>

<p><strong>Fowardable module</strong> <a href="http://www.ruby-doc.org/stdlib-2.0/libdoc/forwardable/rdoc/Forwardable.html">API</a></p>

<p>Ruby provides the <strong>Forwardable</strong> module provides delegation of specified methods to a designated object, using the methods <code>def_delegator</code> and <code>def_delegators</code>.</p>

<p>```ruby
require ‘forwardable’</p>

<p>class WriterDecorator
  extend Forwardable</p>

<p>def_delegators :@real_writer, :write_line, :rewind, :pos, :close</p>

<p>def initialize(real_writer)
    @real_writer = real_writer
  end
end
```</p>

<p>The forwardable module is more of a precision weapon than the <code>method_missing</code> technique. But the <code>method_missing</code> technique really shines when you want to delegate large numbers of calls.</p>

<p><strong>Dynamic Alternatives - Wrapping Methods</strong></p>

<ul>
  <li>Around Alias</li>
  <li>Refinement Wrapper</li>
  <li>Prepended Wrapper</li>
</ul>

<p>Check <a href="http://blog.ifyouseewendy.com/blog/2014/06/03/metaprogrammingi-ruby/#method-wrapper">this</a>.</p>

<p><strong>Dynamic Alternatives - Decorating with Modules</strong></p>

<p>```ruby
w = SimpleWriter.new(‘out’)
w.extend(NumberingWriter)
w.extend(TimeStampingWriter)</p>

<p>w.write_line(‘hello’)
```</p>

<p>With both of these techniques, it is hard to undo the decoration. Unwrapping an aliased method is likely to be tedious, and you simply cannot un-include a module.</p>

<h3 id="using-and-abusing-8">Using and Abusing</h3>

<ul>
  <li>The classic Decorator pattern is loved more by the folks who build the thing than by those who use it.</li>
  <li>One thing to keep in mind when implementing the Decorator pattern is that you need to keep the component interface simple.</li>
  <li>Another potential drawback of the Decorator pattern is the performance overhead associated with a long chain of decorators.</li>
  <li>Finally, one drawback of the method-aliasing technique for decorating objects is that it tends to make your code harder to debug.</li>
</ul>

<h3 id="in-the-wild-8">In the Wild</h3>

<p><strong><code>alias_method_chain</code> in ActiveSupport</strong></p>

<p>```ruby
def write_line(line)
  puts(line)
end</p>

<p>def write_line_with_timestamp(line)
  write_line_without_timestamp(“#{Time.new}: #{line}”)
end</p>

<p>alias_method_chain :write_line, :timestamp
```</p>

<p>The <code>alias_method_chain</code> method will rename the original <code>write_line</code> method to <code>write_line_without_timestamp</code> and rename <code>write_line_with_timestamp</code> to plain old <code>write_line</code>, essentially creating a chain of methods. The nice thing about <code>alias_method_chain</code> is that, as its name suggests, you can chain together a number of enhancing methods.</p>

<h3 id="adapter-proxy-or-decorator">Adapter, Proxy or Decorator</h3>

<p>They are all “<em>one object stands for another</em>”, and the basic idea is <em>Delegate, delegate, delegate</em>.</p>

<ul>
  <li><strong>The Adapter</strong> hides the fact that some object has the wrong interface by wrapping it with an object that has the right interface. </li>
  <li><strong>The Proxy</strong> also wraps another object, but not with the intent of changing the interface. Instead, the proxy has the same interface as the object that it is wrapping. The proxy isn’t there to tre; it is there to control. Proxies are good for tasks such as enforcing security, hiding the fact that an object really lives across the network, and delaying the creation of the real object until the last possible moment. </li>
  <li><strong>The Decorator</strong> enables you to layer features on to a basic object.</li>
</ul>

<h2 id="singleton">Singleton</h2>

<p>A singleton class has exactly one instance, and access to that one instance is available globally.</p>

<h3 id="code-usage-3">Code Usage</h3>

<ol>
  <li>Creating the class variable and initializing it with the singleton instance</li>
  <li>Creating the class-level <code>instance</code> method</li>
  <li>Make <code>new</code> private.</li>
</ol>

<p>```ruby
class SimpleLogger
  # Lots of code deleted…</p>

<p>@@instance = SimpleLogger.new</p>

<p>def self.instance
    return @@instance
  end</p>

<p># make sure there is only one
  private_class_method :new
end</p>

<p>logger1 = SimpleLogger.instance   # Returns the logger
logger2 = SimpleLogger.instance   # Returns exactly the same logger
```</p>

<p>Creating the singleton instance before you actually need it is called <em>eager instantiation</em>.</p>

<p><strong>Singleton module</strong> <a href="http://www.ruby-doc.org/stdlib-1.9.3/libdoc/singleton/rdoc/Singleton.html">API</a></p>

<p>```ruby
require ‘singleton’</p>

<p>class SimpleLogger
  include Singleton</p>

<p># Lots of code deleted…
end
```</p>

<p>The Singleton module, waits until someone calls instance before it actually creates its singleton. This technique is known as <em>lazy instantiation</em>.</p>

<h3 id="alternatives">Alternatives</h3>

<p><strong>Global Variables and Constants</strong></p>

<ol>
  <li>If you use a global variable or a constant for this purpose, there is no way to delay the creation of the singleton object until you need it.</li>
  <li>Neither of these techniques does anything to prevent someone from creating a second or third instance of your supposedly singleton class.</li>
</ol>

<p><strong>Class and Module methods</strong></p>

<p>Lazy initialization remains and all of those <code>self.methods</code> and <code>@@variables</code> makes a strange feel.</p>

<h3 id="using-and-abusing-9">Using and Abusing</h3>

<p><strong>Don’t expect the Singleton module really prevent anything</strong></p>

<p>```ruby
require ‘singleton’</p>

<p>class Manager
  include Singleton</p>

<p>def manage_resources
    puts(“I am managing my resources”)
  end
end
```</p>

<p>Use <code>public_class_method</code>.</p>

<p>```ruby
m = Manager.new # =&gt; private method ‘new’ called for Manager:Class</p>

<p>class Manager
  public_class_method :new
end</p>

<p>m = Manager.new
```</p>

<p>Use <code>clone</code></p>

<p>```ruby
m = Manager.instance.close
# =&gt; TypeError: can’t clone instance of singleton Manager</p>

<p>Foo = Manager.clone
Foo.instance.manage_resources
# =&gt; I am managing my resources
```</p>

<p>The Ruby philosophy is that if you decide to circumvent the very clear intent of the author of the ClassBasedLogger class by cloning it, the language is there to help you out. You are in the driver’s seat, not the language. By keeping almost everything open to modification, Ruby allows you to do the things that you say you want to do—but it is up to you to say the right things.</p>

<p><strong>Coupling concern</strong></p>

<p>Create a singleton, and you have just made it possible for widely separated bits of your program to use that singleton as a secret channel to communicate with each other and, in the process, tightly couple themselves to each other. The horrible consequences of this coupling are why software engineering got out of the global variable business in the first place.</p>

<p>There is only one solution to this problem: <em>Don’t do that</em>.</p>

<p><strong>Considering the count, Do I really only need one instance?</strong></p>

<p><strong>a Need-to-Know Basis</strong></p>

<p>Another mistake that many people make is to spread the knowledge of a class’s singleton-ness far and wide.</p>

<p>```ruby
require ‘singleton’</p>

<p>class DatabaseConnectionManager
  include Singleton</p>

<p>def get_connection
    # Return the database connection…
  end
end
```</p>

<p><em>Which classes are actually aware that DatabaseConnectionManager is a singleton?</em></p>

<p>```ruby
class PreferenceManager
  def initialize
    @reader = PrefReader.new
    @writer = PrefWriter.new
    @preferences = { :display_splash=&gt;false, :background_color=&gt;:blue }
  end</p>

<p>def save_preferences
    preferences = {}
    # Preference are in
    @writer.write(@preferences)
  end</p>

<p>def get_preferences
    @preferences = @reader.read
  end
end</p>

<p>class PrefWriter
  def write(preferences)
    connection = DatabaseConnectionManager.instance.get_connection
    # Write the preferences out
  end
end</p>

<p>class PrefReader
  def read
    connection = DatabaseConnectionManager.instance.get_connection
    # Read the preferences and return them…
  end
end
```</p>

<p>A better approach might be to concentrate the knowledge that <code>DatabaseConnectionManager</code> is a singleton in the <code>PreferenceManager</code> class and simply pass it into the preference reader and writer:</p>

<p>```ruby
class PreferenceManager
  def initialize
    @reader = PrefReader.new
    @writer = PrefWriter.new
    @preferences = { :display_splash=&gt;false, :background_color=&gt;:blue }
  end</p>

<p>def save_preferences
    preferences = {}
    # Preference are in
    @writer.write(DatabaseConnectionManager.instance, @preferences)
  end</p>

<p>def get_preferences
    @preferences = @reader.read(DatabaseConnectionManager.instance)
  end
end
```</p>

<p><strong>Test Interferes</strong></p>

<p>As the Singleton saves the state, there is one exceedingly nasty thing about the Singleton pattern is the way that it interferes with unit testing.</p>

<p>One way to deal with this problem is to create two classes: an ordinary (i.e., non-singleton) class that contains all of the code, and a subclass of the first class that is a singleton. </p>

<p>```ruby
require ‘singleton’</p>

<p>class SimpleLogger
  # All of the logging functionality in this class…
end</p>

<p>class SingletonLogger &lt; SimpleLogger
  include Singleton
end
```</p>

<p>The actual application code uses the <code>SingletonLogger</code>, while the tests can use the plain old, non-singleton <code>Logger</code> class.</p>

<h3 id="in-the-wild-9">In the Wild</h3>

<p><strong>Inflections in ActiveSupport</strong></p>

<p>The <code>Inflections</code> class is a singleton, which saves space and ensures that the same inflection rules are available everywhere.</p>

<p><strong>Rake::Application in rake</strong> <a href="http://ruby-doc.org/stdlib-2.0/libdoc/rake/rdoc/Rake/Application.html">API</a></p>

<p>As it runs, rake—like most build tools—reads in information about what it needs to do: which directories to create, which files to copy, and so on.3 All of this information needs to be available to all of the moving parts of rake, so rake stores it all in a single object (the <code>Rake::Application</code> object, to be precise) that is available as a singleton to the entire rake program.</p>

<h2 id="factory">Factory</h2>

<blockquote>
  <p>picking the right class for the circumstances</p>
</blockquote>

<h3 id="description-9">Description</h3>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/factory.png" alt="factory" /></p>

<p>The GoF called this technique of pushing the “which class” decision down on a subclass the Factory Method pattern.</p>

<ul>
  <li>The <strong>creators</strong> are the base and concrete classes that contain the factory methods.</li>
  <li>The <strong>products</strong> are the objects being created.</li>
</ul>

<p>At its heart, this pattern is really just the Template Method pattern applied to the problem of creating new objects. In both the Factory Method pattern and the Template Method pattern, a generic part of the algorithm is coded in the generic base class, and subclasses fill in the blanks left in the base class.  </p>

<p><strong>Parameterized Factory Method</strong></p>

<p>Parameterized factory method is a method that can produce either a plant or an animal, depending on the symbol that is passed in:</p>

<p>```ruby
class Pond
  def initialize(number_animals, number_plants)
    @animals = []
    number_animals.times do |i|
      animal = new_organism(:animal, “Animal#{i}”)
      @animals « animal
    end</p>

<pre><code>@plants = []
number_plants.times do |i|
  plant = new_organism(:plant, "Plant#{i}")
  @plants &lt;&lt; plant
end   end   # ... end
</code></pre>

<p>class DuckWaterLilyPond &lt; Pond
  def new_organism(type, name)
    if type == :animal
      Duck.new(name)
    elsif type == :plant
      WaterLily.new(name)
    else
      raise “Unknown organism type: #{type}”
    end
  end
end</p>

<p>pond = DuckWaterLilyPond.new(3, 2)
```</p>

<p><strong>Claasses Are Just Objects, Too</strong></p>

<p>While the GoF concentrated on inheritance-based implementations of their fac- tories, we can get the same results with much less code by taking advantage of the fact that in Ruby, classes are just objects.</p>

<p>```ruby
class Pond
  def initialize(number_animals, animal_class,
                 number_plants, plant_class)
    @animal_class = animal_class
    @plant_class = plant_class</p>

<pre><code>@animals = []
number_animals.times do |i|
  animal = new_organism(:animal, "Animal#{i}")
  @animals &lt;&lt; animal
end

@plants = []
number_plants.times do |i|
  plant = new_organism(:plant, "Plant#{i}")
  @plants &lt;&lt; plant
end   end
</code></pre>

<p>def simulate_one_day
    @plants.each {|plant| plant.grow}
    @animals.each {|animal| animal.speak}
    @animals.each {|animal| animal.eat}
    @animals.each {|animal| animal.sleep}
  end</p>

<p>def new_organism(type, name)
    if type == :animal
      @animal_class.new(name)
    elsif type == :plant
      @plant_class.new(name)
    else
      raise “Unknown organism type: #{type}”
    end
  end
end</p>

<p>pond = Pond.new(3, Duck, 2, WaterLily)
pond.simulate_one_day
```</p>

<h3 id="abstract-factory">Abstract Factory</h3>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/abstract-factory.png" alt="abstract factory" /></p>

<p>An object dedicated to creating a compatible set of objects is called an abstract factory. </p>

<p>The problem is that you need to create sets of compatible objects. The solution is that you write a separate class to handle that creation.</p>

<p>The important thing about the abstract factory is that it encapsulates the knowledge of which product types go together. You can express that encapsulation with classes and subclasses, or you can get to it by storing the class objects as we did in the code above. Either way, you end up with an object that knows which kind of things belong together.</p>

<p>```ruby
class PondOrganismFactory
  def new_animal(name)
    Frog.new(name)
  end
  def new_plant(name)
    Algae.new(name)
  end
end</p>

<p>class JungleOrganismFactory
  def new_animal(name)
    Tiger.new(name)
  end
  def new_plant(name)
    Tree.new(name)
  end
end</p>

<p>class Habitat
  def initialize(number_animals, number_plants, organism_factory)
    @organism_factory = organism_factory</p>

<pre><code>@animals = []
number_animals.times do |i|
  animal = @organism_factory.new_animal("Animal#{i}")
  @animals &lt;&lt; animal
end

@plants = []
number_plants.times do |i|
  plant = @organism_factory.new_plant("Plant#{i}")
  @plants &lt;&lt; plant
end   end end
</code></pre>

<p>jungle = Habitat.new(1, 4, JungleOrganismFactory.new)
jungle.simulate_one_day</p>

<p>pond = Habitat.new( 2, 4, PondOrganismFactory.new)
pond.simulate_one_day<br />
```</p>

<p><strong>Claasses Are Just Objects, Too</strong></p>

<p>```ruby
class OrganismFactory
  def initialize(plant_class, animal_class)
    @plant_class = plant_class
    @animal_class = animal_class
  end</p>

<p>def new_animal(name)
    @animal_class.new(name)
  end</p>

<p>def new_plant(name)
    @plant_class.new(name)
  end
end</p>

<p>jungle_organism_factory = OrganismFactory.new(Tree, Tiger)
pond_organism_factory = OrganismFactory.new(WaterLily, Frog)</p>

<p>jungle = Habitat.new(1, 4, jungle_organism_factory)
jungle.simulate_one_day
pond = Habitat.new( 2, 4, pond_organism_factory)
pond.simulate_one_day
```</p>

<p><strong>Naming</strong></p>

<p>Another way that we can simplify the implementation of abstract factories is to rely on a consistent naming convention for the product classes. </p>

<h3 id="factory--abstract-factory">Factory &amp;&amp; Abstract Factory</h3>

<ul>
  <li>The Factory Method pattern is really the Template Method pattern applied to object creation.</li>
  <li>the Abstract Factory pattern is simply the Strategy pattern applied to the same problem.</li>
</ul>

<h3 id="using-and-abusing-10">Using and Abusing</h3>

<p>Not every object needs to be produced by a factory. (<em>You Ain’t Goona Need It</em>).</p>

<p>Engineers do have a tendency to build the Queen Mary (or perhaps the Titanic?) when a canoe will suffice. If you have a choice of exactly one class at the moment, put off adding in a factory.</p>

<h3 id="in-the-wild-10">In the Wild</h3>

<p><strong>Base in ActiveRecord</strong></p>

<p><code>ruby
adapter = "mysql"
method_name = "#{adapter}_connection"
Base.send(method_name, config)
</code></p>

<h2 id="builder">Builder</h2>

<h3 id="description-10">Description</h3>

<p>Builder pattern, a pattern designed to help you configure those complex objects. The builder class takes charge of assembling all of the components of a complex object.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/buidler.png" alt="builder" /></p>

<p>The client of the builder object the <strong>director</strong> because it directs the builder in the construction of the new object (called the <strong>product</strong>). Builders not only ease the burden of creating complex objects, but also hide the implementation details.</p>

<p>The idea behind the Builder pattern is that if your object is hard to build, if you have to write a lot of code to configure each object, then you should factor all of that creation code into a separate class, the builder.</p>

<p>The builders are less concerned about picking the right class and more focused on helping you configure your object.</p>

<ul>
  <li>Take control of configuring your object</li>
  <li>Prevent you from constructing an invalid object</li>
</ul>

<h3 id="code-usage-4">Code Usage</h3>

<p>```ruby
class ComputerBuilder
  attr_reader :computer</p>

<p>def initialize
    @computer = Computer.new
  end</p>

<p>def turbo(has_turbo_cpu=true)
    @computer.motherboard.cpu = TurboCPU.new
  end</p>

<p>def display=(display)
    @computer.display=display
  end</p>

<p>def memory_size=(size_in_mb)
    @computer.motherboard.memory_size = size_in_mb
  end</p>

<p>def add_cd(writer=false)
    @computer.drives « Drive.new(:cd, 760, writer)
  end</p>

<p>def add_dvd(writer=false)
    @computer.drives « Drive.new(:dvd, 4000, writer)
  end</p>

<p>def add_hard_disk(size_in_mb)
    @computer.drives « Drive.new(:hard_disk, size_in_mb, true)
  end
end</p>

<p>builder = ComputerBuilder.new
builder.turbo
builder.add_cd(true)
builder.add_dvd
builder.add_hard_disk(100000)</p>

<p>computer = builder.computer
```</p>

<h3 id="builders-can-ensure-sane-objects">Builders Can Ensure Sane Objects</h3>

<p>That final “give me my object” method makes an ideal place to check that the configuration requested by the client really makes sense and that it adheres to the appropriate business rules.</p>

<p><code>ruby
def computer
  raise "Not enough memory" if @computer.motherboard.memory_size &lt; 250
  raise "Too many drives" if @computer.drives.size &gt; 4
  hard_disk = @computer.drives.find {|drive| drive.type == :hard_disk}
  raise "No hard disk." unless hard_disk
  @computer
end
</code></p>

<h3 id="resuable-buidlers">Resuable Buidlers</h3>

<p>An important issue to consider when writing and using builders is whether you can use a single builder instance to create multiple objects. </p>

<p>One way to deal with this issue is to equip your builder with a <code>reset</code> method, which reinitializes the object under construction.</p>

<p><code>ruby
class LaptopBuilder
  # Lots of code omitted...
  def reset
    @computer = LaptopComputer.new
  end
end
</code></p>

<p>The reset method will let you reuse the builder instance, but it also means that you have to start the configuration process all over again for each computer. If you want to perform the configuration once and then have the builder produce any number of objects based on that configuration, you need to store all of the configuration information in instance attributes and create the actual product only when the client asks for it.</p>

<h3 id="better-builders-with-magic-methods">Better Builders with Magic Methods</h3>

<p>Use ghost method <code>method_missing</code>.</p>

<p>```ruby
def method_missing(name, *args)
  words = name.to_s.split(“_”)
  return super(name, *args) unless words.shift == ‘add’
  words.each do |word|
    next if word == ‘and’
    add_cd if word == ‘cd’
    add_dvd if word == ‘dvd’
    add_hard_disk(100000) if word == ‘harddisk’
    turbo if word == ‘turbo’
  end
end</p>

<p>builder.add_dvd_and_harddisk
builder.add_turbo_and_dvd_and_harddisk
```</p>

<h3 id="using-and-abusing-11">Using and Abusing</h3>

<p>It is usually fairly easy to spot code that is missing a builder: You can find the same object creation logic scat- tered all over the place. Another hint that you need a builder is when your code starts producing invalid objects.====</p>

<p>Builder pattern sometimes creeps up on you as your application becomes increasingly complex.</p>

<h3 id="in-the-wild-11">In the Wild</h3>

<h2 id="interpreter">Interpreter</h2>

<h3 id="description-11">Description</h3>

<p>Interpreter pattern, which suggests that sometimes the best way to solve a problem is to invent a new language for just that purpose. </p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/interpreter.png" alt="Interpreter" /></p>

<p>The heart of the Interpreter pattern is the abstract syntax tree.</p>

<p>The GoF called such values or conditions supplied at the time the AST is interpreted the <code>context</code>.</p>

<ol>
  <li>The parser reads in the program text and produces a data structure, called an abstract syntax tree (AST).</li>
  <li>The AST is evaluated against some set of external conditions, or context, to produce the desired computation.</li>
</ol>

<blockquote>
  <p>ASTs are, in fact, specialized examples of the Composite pattern, with the nonterminal expressions playing the parts of the composites.</p>
</blockquote>

<p>You can supply your clients with an API for building up the tree in code, or you can write a parser that takes strings and turns them into the AST.</p>

<h3 id="with-a-parser">With a Parser</h3>

<p>```ruby
class Parser
  def initialize(text)
    @tokens = text.scan(/(|)|[\w.*]+/)
  end</p>

<p>def next_token
    @tokens.shift
  end</p>

<p>def expression
    token = next_token
    if token == nil
      return nil
    elsif token == ‘(‘
      result = expression
      raise ‘Expected )’ unless next_token == ‘)’
      result
    elsif token == ‘all’
      return All.new
    elsif token == ‘writable’
      return Writable.new
    elsif token == ‘bigger’
      return Bigger.new(next_token.to_i)
    elsif token == ‘filename’
      return FileName.new(next_token)
    elsif token == ‘not’
      return Not.new(expression)
    elsif token == ‘and’
      return And.new(expression, expression)
    elsif token == ‘or’
      return Or.new(expression, expression)
    else
      raise “Unexpected token: #{token}”
    end
  end
end  </p>

<p>parser = Parser.new “and (and(bigger 1024)(filename *.mp3)) writable”
ast = parser.expression
```</p>

<p><strong>Let XML or YAML Do The Parsing</strong></p>

<p>Keep in mind that the main motivation behind building an interpreter is to give your users a natural way to express the kind of processing that needs to be done.</p>

<p><strong>Racc</strong></p>

<p>Racc is modeled (and named) after the venerable UNIX YACC utility. Racc takes as input a description of the grammar for your language and spits out a parser, written in Ruby for that language.</p>

<h3 id="without-a-parser">Without a Parser</h3>

<p>Internal Domain-Specifc Languages.</p>

<p>You may implement your Interpreter pattern in such a way that users could write their pro-grams in actual Ruby code. Maybe you could design your AST API in such a way that the code flows so naturally that your users might be unaware that they are, in fact, writing Ruby code.</p>

<h3 id="using-and-abusing-12">Using and Abusing</h3>

<ul>
  <li>The complexity issue. (The sheer number of components is why the Interpreter pattern is in practice limited to relatively simple languages.)</li>
  <li>Program efficiency, it is probably best to limit your use of the Interpreter pattern to areas that do not demand high performance.</li>
</ul>

<h3 id="in-the-wild-12">In the Wild</h3>

<p><strong>SQL</strong></p>

<p><strong>HTML</strong></p>

<p><strong>Ruby</strong>, of course, an interpreted language.</p>

<p><strong>regular expression</strong></p>

<h2 id="domain-specific-languages">Domain-Specific Languages</h2>

<h3 id="description-12">Description</h3>

<p>The DSL pattern suggests that you should focus on the language itself, not on the interpreter.</p>

<p>External DSLs are external in the sense that there is a parser and an interpreter for the DSL, and there are the programs written in the DSL.</p>

<p>An internal DSL, according to Fowler, is one in which we start with some implementation language, perhaps Ruby, and we simply bend that one language into being our DSL.</p>

<h3 id="using-and-abusing-13">Using and Abusing</h3>

<ol>
  <li>You are limited to what you can parse with a Ruby- based internal DSL.</li>
  <li>Error messages.</li>
</ol>

<h3 id="in-the-wild-13">In the Wild</h3>

<p>The most prominent example of a pure internal DSL in the Ruby world is probably rake, Ruby’s answer to ant or make. </p>

<p><strong>rake</strong>, Ruby’s answer to ant or make.</p>

<h2 id="custom-objects">Custom Objects</h2>

<p>Meta-programming certainly takes a different tack in producing the right object, at its heart this pattern focuses on leveraging the flexibility of Ruby.</p>

<ul>
  <li>We can start with a simple object and add individual methods or even whole modules full of methods to it. </li>
  <li>Using <code>class_eval</code>, we can generate completely new methods at runtime.</li>
  <li>We can take advantage of Ruby’s reflection facilities, which allow a program to examine its own structure</li>
</ul>

<p>A note:</p>

<blockquote>
  <p>The <code>attr_accessor</code> method and its friends live in the module <code>Module</code>, which is included by the <code>Object</code> class. If you go looking for the Ruby code for <code>attr_accessor</code>, <code>attr_reader</code>, and <code>attr_writer</code>, however, you are destined to be disappointed. For the sake of efficiency—but purely for efficiency—these methods are written in C.</p>
</blockquote>

<h3 id="custom-tailoring-technique">Custom-Tailoring Technique</h3>

<p>This custom-tailoring technique is particularly useful when you have lots of orthogonal features that you need to assemble into a single object.</p>

<p>Of course, there really is no rule that says you need to start your customizations with a plain-vanilla instance of Object. In real life, you will likely want to start with an instance of a class that provides some base level of functionality and then tweak the methods from there.</p>

<p>```ruby
def new_animal(diet, awake)
  animal = Object.new
  if diet == :meat
    animal.extend(Carnivore)
  else
    animal.extend(Herbivore)
  end</p>

<p>…
end<br />
```</p>

<p>No matter whether you tailor your objects one method at a time or in module- sized chunks, the ultimate effect is to create a customized object, uniquely made to order for the requirements of the moment.</p>

<h3 id="reflections">Reflections</h3>

<blockquote>
  <p>If you are meta-programming new functionality into your classes on the fly, how can you tell what any given instance can do?</p>
</blockquote>

<p>Reflection features like <code>public_methods</code> and <code>respond_to?</code> are handy anytime but become real assets as you dive deeper and deeper into meta-programming, when what your objects can do depends more on their history than on their class.</p>

<h3 id="using-and-abusing-14">Using and Abusing</h3>

<p>Tests are absolutely mandatory for systems that use a lot of meta- programming.</p>

<h2 id="convention-over-configuration">Convention Over Configuration</h2>

<blockquote>
  <p>The common message is that you should not just take your lan- guage as you find it, but rather mold it into something closer to the tool that you need to solve the problem at hand.</p>
</blockquote>

<h3 id="description-13">Description</h3>

<p>The Convention Over Configuration pattern suggests that you define a convention that a sensible engineer might use anyway.</p>

<ul>
  <li>
    <p>Try to deduce how your users will behave.</p>
  </li>
  <li>
    <p>You can give your user a kick start by supplying him or her with a model, a template, or an example to follow. You could also supply a utility to generate the outline or <strong>scaffold</strong> of a class. It is easy to discount the value of this scaffold-generating script.</p>
  </li>
</ul>

<h3 id="using-and-abusing-15">Using and Abusing</h3>

<p>One danger in building convention-based systems is that your convention might be incomplete, thereby limiting the range of things that your system can do.</p>

<blockquote>
  <p>Our message gateway, for example, does not really do a thorough job of transforming host names into Ruby class names. The code in this chapter will work fine with a simple host name like <em>russolsen.com</em>, transforming it into <em>RussOlsenDotCom</em>. But feed our current system something like <em>icl-gis.co</em>m and it will go looking for the very illegal <em>Icl-gisDotComAuthorizer</em> class.</p>
</blockquote>

<p>Another potential source of trouble is the possibility that a system that uses a lot of conventions may seem like it is operating by magic to the new user. Configuration files may be a pain in the neck to write and maintain, but they do provide a sort of road map—perhaps a very complicated and hard-to-interpret road map, but a map nevertheless—to the inner workings of the system. A well-done convention-based system, by contrast, needs to supply its operational road map in the form of (gasp!) <strong>documentation</strong>.</p>

<p>Also keep in mind that as the convention magic becomes deeper and more complex, you will need ever more thorough unit tests to ensure that your conventions behave, well, conventionally. </p>

<h2 id="reference">Reference</h2>

<ul>
  <li><a href="https://github.com/nslocum/design-patterns-in-ruby">Examples from the book Design Patterns</a> by <a href="https://github.com/nslocum">Nick Slocum</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Review] Rebuilding Rails]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2014/09/27/rebuilding-rails/"/>
    <updated>2014-09-27T14:48:48+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2014/09/27/rebuilding-rails</id>
    <content type="html"><![CDATA[<table class="custom">
  <tbody>
    <tr>
      <td><strong>Book</strong></td>
      <td>Rebuilding Rails</td>
    </tr>
    <tr>
      <td><strong>Author</strong></td>
      <td>Noah Gibbs</td>
    </tr>
    <tr>
      <td><strong>Link</strong></td>
      <td><a href="http://rebuilding-rails.com/">rebuilding-rails.com</a></td>
    </tr>
  </tbody>
</table>

<ul id="markdown-toc">
  <li><a href="#zero-to-it-works">1. Zero to “It Works!”</a></li>
  <li><a href="#your-first-controller">2. Your First Controller</a></li>
  <li><a href="#rails-automatic-loading">3. Rails Automatic Loading</a></li>
  <li><a href="#httpcontroller---httpcontroller">‘HTTPController’ -&gt; ‘http_controller’</a>    <ul>
      <li><a href="#rendering-views">4. Rendering Views</a></li>
      <li><a href="#basic-models">5. Basic Models</a></li>
      <li><a href="#request-response">6. Request, Response</a></li>
    </ul>
  </li>
  <li><a href="#rulerslibrulersrb">rulers/lib/rulers.rb</a>    <ul>
      <li><a href="#the-littlest-orm">7. The Littlest ORM</a></li>
      <li><a href="#rack-middleware">8. Rack Middleware</a></li>
    </ul>
  </li>
  <li><a href="#rackup">$ rackup</a>    <ul>
      <li><a href="#real-routing">9. Real Routing</a></li>
    </ul>
  </li>
</ul>

<p>My re-building source code</p>

<ul>
  <li><a href="https://github.com/ifyouseewendy/rulers">rulers</a></li>
  <li><a href="https://github.com/ifyouseewendy/best_quotes">best_quotes</a></li>
</ul>

<p>Work flow diagram</p>

<p><img src="https://raw.githubusercontent.com/ifyouseewendy/best_quotes/master/rebuilding-rails.png" alt="img texrebuilding-rails" style="width:562px" /></p>

<h2 id="zero-to-it-works">1. Zero to “It Works!”</h2>

<p><code>ruby
gem.add_development_dependency "rspec"
gem.add_runtime_dependency "rest-client"
gem.add_runtime_dependency "some_gem", "1.3.0"
gem.add_runtime_dependency "other_gem", "&gt;0.8.2"
</code></p>

<p>Each of these adds a runtime dependency (needed to run the gem at all) or a development dependency (needed to develop or test the gem).</p>

<p>Youʼll need to go into the rulers directory and <code>git add .</code> before you rebuild the gem (<code>git add .; gem build rulers.gemspec; gem install rulers-0.0.1.gem</code>). Thatʼs because rulers.gemspec is actually calling git to find out what files to include in your gem.</p>

<p><strong>Rails structure</strong></p>

<ul>
  <li>
    <p><strong>ActiveSupport</strong> is a compatibility library including methods that aren’t necessarily specific to Rails. You’ll see ActiveSupport used by non-Rails libraries because it contains such a lot of useful baseline functionality. ActiveSupport includes methods like how Rails changes words from single to plural, or CamelCase to snake_case. It also includes significantly better time and date support than the Ruby standard library.</p>
  </li>
  <li>
    <p><strong>ActiveModel</strong> hooks into features of your models that aren’t really about the database - for instance, if you want a URL for a given model, ActiveModel helps you there. It’s a thin wrapper around many different ActiveModel implementations to tell Rails how to use them. Most commonly, ActiveModel implementations are ORMs (see ActiveRecord, below), but they can also use non-relational storage like MongoDB, Redis, Memcached or even just local machine memory.</p>
  </li>
  <li>
    <p><strong>ActiveRecord</strong> is an Object-Relational Mapper (ORM). That means that it maps between Ruby objects and tables in a SQL database. When you query from or write to the SQL database in Rails, you do it through ActiveRecord. ActiveRecord also implements ActiveModel. ActiveRecord supports MySQL and SQLite, plus JDBC, Oracle, PostgreSQL and many others.</p>
  </li>
  <li>
    <p><strong>ActionPack</strong> (<em>ActionDispatch, ActionController, Actionview</em>) does routing - the mapping of an incoming URL to a controller and action in Rails. It also sets up your controllers and views, and shepherds a request through its controller action and then through rendering the view. For some of it, ActionPack uses Rack. The template rendering itself is done through an external gem like Erubis for .erb templates, or Haml for .haml templates. ActionPack also handles action- or view-centered functionality like view caching.</p>
  </li>
  <li>
    <p><strong>ActionMailer</strong> is used to send out email, especially email based on templates. It works a lot like you’d hope Rails email would, with controllers, actions and “views” - which for email are text- based templates, not regular web-page templates.</p>
  </li>
</ul>

<h2 id="your-first-controller">2. Your First Controller</h2>

<p>Rails encapsulated the Rack information into a “request” object rather than just including the hash right into the controller. Thatʼs a good idea when you want to abstract it a bit – normalize values for certain variables, for instance, or read and set cookies to store session data.</p>

<h2 id="rails-automatic-loading">3. Rails Automatic Loading</h2>

<p>When debugging or printing error messages I like to use STDERR because itʼs a bit harder to redirect than a normal “puts” and so youʼre more likely to see it even when using a log file, background process or similar.</p>

<p>For simple structures, “inspect” shows them exactly as youʼd type them into Ruby – strings with quotes, numbers bare, symbols with a leading colon and so on.</p>

<p><strong>Reloading Means Convenience</strong></p>

<p><code>gem "rulers", :path =&gt; "../rulers"</code> This trick actually relies on deep Bundler trickery and requires you to always “bundle exec” before running things like rackup. If you forget that, it can look like the gem isnʼt there or (worse) look like an old version.</p>

<p><strong>CamelCase and snake_case</strong></p>

<p>```ruby
# rulers/lib/rulers/util.rb
module Rulers
  def self.to_underscore(string)
    string.gsub(/::/, ‘/’).
    gsub(/([A-Z]+)([A-Z][a-z])/,’\1<em>\2’).
    gsub(/([a-z\d])([A-Z])/,’\1</em>\2’).
    tr(“-“, “_”).
    downcase
  end
end</p>

<h1 id="httpcontroller---httpcontroller">‘HTTPController’ -&gt; ‘http_controller’</h1>
<p># ‘MD5Controller’ -&gt; ‘md5_controller’
# ‘HomeController’ -&gt; ‘home_controller’
```</p>

<p><strong>Put it together</strong></p>

<p><code>ruby
# rulers/lib/rulers/dependencies.rb
class Object
  def self.const_missing(c)
    require Rulers.to_underscore(c.to_s)
    Object.const_get(c)
  end
end
</code></p>

<p><code>ruby
# rulers/lib/rulers/controller.rb
def controller_name
  klass = self.class
  klass = klass.to_s.gsub /Controller$/, ""
  Rulers.to_underscore klass
end
</code></p>

<p><strong>Did it work?</strong></p>

<p>When you load a file called whatever_class.rb, youʼre not actually guaranteed that it contains WhateverClass, or that the constant WhateverClass is actually a class. How would you check?</p>

<p>You might try calling const_get(:WhateverClass)… Except that you just made const_get try to load automatically. If you call it on an unloaded class inside the method call where you try to load, youʼll recurse forever and get a “stack level too deep” and a crash. So const_get isnʼt the full answer.</p>

<p>```ruby
# rulers/lib/rulers/dependencies.rb
class Object
  def self.const_missing(c)
    return nil if @calling_const_missing</p>

<pre><code>@calling_const_missing = true
require Rulers.to_underscore(c.to_s)
klass = Object.const_get(c)
@calling_const_missing = false

klass   end end ```
</code></pre>

<p>But thereʼs a reason I say “hideously hacky.” Think about ways this could break. For instance – think about what would happen if you hit this in multiple threads at once. Oops!</p>

<p><strong>Re-re-reloading</strong></p>

<p><a href="https://github.com/alexch/rerun">rerun</a></p>

<p>```ruby
# best_quotes/Gemfile
source ‘https://rubygems.org’
gem ‘rulers’, :path =&gt; “../rulers”</p>

<p>group :development do
  gem ‘rerun’
  gem ‘listen’, ‘=1.3.1’ # for older Ruby
end
```</p>

<p>Running by <code>bundle exec rerun -- rackup -p 3001</code>. The “–” is an old Unix trick. It means “thatʼs all the arguments you get, the rest belong to somebody else.” Specifically, it tells rerun to ignore the “-p” later.</p>

<p><a href="https://github.com/rtomayko/shotgun">shotgun</a></p>

<p>reloading rack development server, forking version of rackup.</p>

<p><strong>In Rails</strong></p>

<ol>
  <li>
    <p><a href="https://github.com/rails/rails/blob/master/activesupport/lib/active_support/dependencies.rb">rails/activesupport/lib/active_support/dependencies.rb</a> Rails uses ActiveSupport for its const_missing support. Most of the code is installing a const_missing that can call through to non-Rails versions of const_missing in other classes, and can be removed or re-added and is appropriately modular. It also works hard to support nested modules like MyLibrary::SubModule::SomeClass.</p>
  </li>
  <li>
    <p><a href="http://urbanautomaton.com/blog/2013/08/27/rails-autoloading-hell/#fn1">Rails autoloading — how it works, and when it doesn’t</a> by Simon Coffey.</p>
  </li>
</ol>

<h2 id="rendering-views">4. Rendering Views</h2>

<p><strong>Erb and Erubis</strong></p>

<p>```ruby
# some_directory/erb_test.rb
require “erubis”</p>

<p>template = «TEMPLATE
Hello! This is a template.
It has &lt;%= whatever %&gt;.
TEMPLATE</p>

<p>eruby = Erubis::Eruby.new(template)
puts eruby.src
puts “==========”
puts eruby.result(:whatever =&gt; “ponies!”)
```</p>

<p>Run it with <code>ruby erb_test.rb</code></p>

<p><code>ruby
bash-3.2$ ruby erb_test.rb
_buf = ''; _buf &lt;&lt; 'Hello!   This is a template. It has ';
_buf &lt;&lt; ( whatever ).to_s; _buf &lt;&lt; '.';
_buf.to_s
==========
Hello! This is a template.
It has ponies!.
</code></p>

<p>The few lines starting with <code>_buf</code> are interesting. Erubis takes apart our string, appends it to <code>_buf</code> piece by piece, and adds the variables in as well after calling <code>.to_s</code> on them. Then it just returns <code>_buf</code>.</p>

<p><strong>Rack test example</strong></p>

<p><a href="https://github.com/brynary/rack-test">rack-test</a></p>

<p>```ruby
require_relative “test_helper”</p>

<p>class TestApp &lt; Rulers::Application
  def get_controller_and_action(env)
    [TestController, “index”]
  end
end</p>

<p>class TestController &lt; Rulers::Controlle
  def index
    “Hello!”  # Not rendering a view
  end
end</p>

<p>class RulersAppTest &lt; Test::Unit::TestCase
 include Rack::Test::Methods</p>

<p>def app
    TestApp.new
  end</p>

<p>def test_request
    get “/example/route”
    assert last_response.ok?
    body = last_response.body
    assert body[“Hello”]
  end
end
```</p>

<p><strong>Rake test example</strong></p>

<p>Rake actually ships with a “Rake::TestTask”.</p>

<p>```ruby
# Rakefile
require “bundler/gem_tasks”
require “rake/testtask”</p>

<p>Rake::TestTask.new do |t|
  t.name = “test”  # this is the default
  t.libs « “test”  # load the test dir
  t.test_files = Dir[‘test/<em>test</em>.rb’]
  t.verbose = true
end
```</p>

<p><em>A word of caution</em>: Rake will always run your tests by loading them into the same Ruby process, then running each one in turn. This is a lot faster than running them in individual processes, but it means that your tests can mess with each other in annoying ways. If you find yourself saying, “but I didnʼt set that global variable in this test!” think about whether some other test might have done it. For extra fun, the tests donʼt always run in any predictable order.</p>

<p><strong>In Rails</strong></p>

<p>Rails actually allows registering a number of different template engines at once with a number of different extensions so that Erb files are rendered with Erubis, but .haml files are rendered with the HAML templating engine.</p>

<p>You can find the top-level view code in <a href="https://github.com/rails/rails/blob/master/actionview/lib/action_view.rb">actionpack/lib/action_view.rb</a>, and the whole big chunk of Rails view code in actionpack/lib/action_view/. From there, look in <a href="https://github.com/rails/rails/blob/master/actionview/lib/action_view/template/handlers/erb.rb">template/handlers/erb.rb</a> for a pretty compact description of exactly how Rails uses Erubis to render Erb templates. You can see that most of the bulk of Railsʼ version is setup, interface and dealing with string encodings. You save a lot of trouble by knowing that youʼre basically only dealing with ASCII and/or UTF-8 strings.</p>

<h2 id="basic-models">5. Basic Models</h2>

<p>Use <a href="https://github.com/intridea/multi_json">multi_json</a> (a generic swappable back-end for JSON handling) to built a simple system of models based on JSON files.</p>

<p><strong>In Rails</strong></p>

<p>ActiveRecord is an Object-Relational Mapper so that each of your objects represents a database row. ActiveModel is the interface that Rails uses to all of storage including non-relational stores like Cassandra or MongoDB, to fit particular object types into Rails.</p>

<p>For a good overview of ActiveModel, have a look at a blog post from Yehuda Katz on that topic: <a href="http://yehudakatz.com/2010/01/10/activemodel-make-any-ruby-object-feel-like-activerecord/">ActiveModel: Make Any Ruby Object Feel Like ActiveRecord</a></p>

<h2 id="request-response">6. Request, Response</h2>

<p>```ruby
# rulers/lib/rulers/controller.rb
module Rulers
  class Controller
    def response(text, status = 200, headers = {})
      raise “Already responded!” if @response
      a = [text].flatten
      @response = Rack::Response.new(a, status, headers)
    end</p>

<pre><code>def get_response  # Only for Rulers
  @response
end

def render_response(*args)
  response(render(*args))
end   end end
</code></pre>

<h1 id="rulerslibrulersrb">rulers/lib/rulers.rb</h1>
<p>module Ruler
  class Application
    def call(env)   # Redefine
      if env[‘PATH_INFO’] == ‘/favicon.ico’
        return [404,
          {‘Content-Type’ =&gt; ‘text/html’}, []]
      end</p>

<pre><code>  klass, act = get_controller_and_action(env)
  controller = klass.new(env)
  text = controller.send(act)
  if controller.get_response
    # ensure the code after render_response works
    st, hd, rs = controller.get_response.to_a
    [st, hd, [rs.body].flatten]
  else
    # without explicitly render_response in action,
    # you can add auto render here
    [200, {'Content-Type' =&gt; 'text/html'}, [text]]
  end
end   end end ```
</code></pre>

<p>In Rails, the return value from the controller is ignored. Instead if you donʼt call render (Railsʼ equivalent of render_response), it will automatically call it for you with the same controller name, and the viewʼs name set to the same name as your action.</p>

<p>Rails doesnʼt return the string when you call “render” (well, usually - some calls to render do!). Instead, it keeps track of the fact that you called render and what you called it on. Then it gives you an error if you call it again, or uses the defaults if you get to the end of a controller action without calling it</p>

<p><strong>Instance Variables</strong></p>

<p>The Rails answer is to set instance variables in the controller, then use them in the view. Try creating a new view object, mostly just to use Erubis to evaluate the view file. Then, make it easy to pass in a hash of instance variables which youʼll set on the view object before doing the evaluation.</p>

<p><code>ruby
# rulers/lib/rulers/controller.rb
module Rulers
  class Controller
    def render(view_name, locals = {})
      filename = File.join 'app', 'views', controller_name, "#{view_name}.html.erb"
      ivars = instance_variables.reduce({}) {|ha, iv| ha[iv] = instance_variable_get(iv); ha }
      Rulers::View.new(filename, ivars, locals).result
    end
  end
end
</code></p>

<p><strong>In Rails</strong></p>

<p>Rails (more specifically, ActionPack) uses Rack in a very similar way, even exposing the Rack Request object with the “request” method. Especially <a href="https://github.com/rails/rails/blob/master/actionpack%2Flib%2Faction_controller%2Fmetal.rb">metal.rb </a>and metal/*.rb. “Rails Metal” is a name for the lower-level Rails which goes mostly straight through to the “bare metal” – that is, to Rack.</p>

<p>You can find a lot of the Rails implementation of Rack in these directories – for instance, metal/redirecting.rb is the implementation of the redirect_to() helper which returns status 302 (redirect) and a location to Rack. You could steal the code and add a redirect_to to Rulers, if you wanted.</p>

<p>You can also find things like forgery (CSRF) protection, multiple renderers (i.e. Erb vs Haml), forcing SSL if requested and cookies in this directory. Some are complex, while others call to Rack very simply and you could move right over to Rulers.</p>

<h2 id="the-littlest-orm">7. The Littlest ORM</h2>

<p>migration</p>

<p><code>ruby
# best_quotes/mini_migration.rb
require "sqlite3"
conn = SQLite3::Database.new "test.db"
conn.execute &lt;&lt;SQL
create table my_table (
  id INTEGER PRIMARY KEY,
  posted INTEGER,
  title VARCHAR(30),
  body VARCHAR(32000));
SQL
</code></p>

<p>sqlite model</p>

<p>```ruby
# rulers/lib/rulers/sqlite_model.rb
require “sqlite3”
require “rulers/util”</p>

<p>DB = SQLite3::Database.new “test.db”</p>

<p>module Rulers
  module Model
    class SQLite</p>

<pre><code>  class &lt;&lt; self
    def table
      Rulers.to_underscore name
    end

    def schema
      return @schema if @schema
      @schema = {}
      DB.table_info(table) do |row|
        @schema[ row['name'] ] = row['type']
      end
      @schema
    end

    def to_sql(val)
      case val
      when Numeric
        val.to_s
      when String
        "'#{val}'"
      else
        raise "Can't change #{val.class} to SQL!"
      end
    end

    def create(values)
      values.delete 'id'
      keys = schema.keys - ['id']
      vals = keys.map do |key|
        values[key] ? to_sql(values[key]) : 'null'
      end

      DB.execute &lt;&lt;SQL
        INSERT INTO #{table} (#{keys.join(',')})
        VALUES (#{vals.join(',')}); SQL

      data = Hash[keys.zip(vals)]
      sql = "SELECT last_insert_rowid();"
      data['id'] = DB.execute(sql)[0][0]
      self.new data
    end

    def count
      DB.execute(&lt;&lt;SQL)[0][0]
        SELECT COUNT(*) FROM #{table} SQL
    end

    def find(id)
      row = DB.execute &lt;&lt;SQL
        SELECT #{schema.keys.join(',')} from #{table} where id=#{id} SQL
      data = Hash[ schema.keys.zip row[0] ]
      self.new data
    end
  end

  def initialize(data = nil)
    @hash = data
  end

  def [](name)
    @hash[name.to_s]
  end

  def []=(name, value)
    @hash[name.to_s] = value
  end

  def save!
    unless @hash['id']
      self.class.create
      return true
    end

    fields = @hash.map do |k,v|
      "#{k}=#{self.class.to_sql(v)}"
    end.join(',')

    DB.execute &lt;&lt;SQL
      UPDATE #{self.class.table}
      SET #{fields}
      WHERE id="#{@hash['id']}" SQL
    true
  end

  def save
    save! rescue false
  end

end   end end ```
</code></pre>

<p>You can add a method to the SQLite model that takes a column name and a type, and then when saving and loading that column, does something type-dependent to it, like the boolean or JSON fields above.</p>

<p>ActiveRecord allows both ways – you can research the <code>before_save</code> and <code>after_initialize</code> callbacks for how to do it on save/ load.</p>

<p><strong>In Rails</strong></p>

<p>ActiveRecord contains mappings of operations like our gem, but also migrations, cross-database compatibility and a huge amount of optimization and general complexity. And thatʼs even though they use the ARel gem for most of the heavy lifting!</p>

<h2 id="rack-middleware">8. Rack Middleware</h2>

<p>With any Ruby web framework, you can modify how it works by adding Rack components around it. I like thinking of them as pancakes, because Rack lets you build your framework and your application like a stack of pancakes.</p>

<p><strong>Built-in middlewares</strong></p>

<ul>
  <li><strong>Rack::Auth::Basic</strong> - HTTP Basic authentication.</li>
  <li><strong>Rack::Auth::Digest</strong> - HTTP Digest authentication.</li>
  <li><strong>Rack::Cascade</strong> - Pass a request to a series of Rack apps, and use the first request that comes back as good. Itʼs a way to mount one Rack app “on top of” another (or many).</li>
  <li><strong>Rack::Chunked</strong> - A Rack interface to HTTP Chunked transfer.</li>
  <li><strong>Rack::CommonLogger</strong> - Request logging.</li>
  <li><strong>Rack::ConditionalGet</strong> - Implement HTTP If-None-Match and If- Modified-Since with ETags and dates.</li>
  <li><strong>Rack::Config</strong> - Call a given block before each request.</li>
  <li><strong>Rack::ContentLength</strong> - Set Content-Length automatically.</li>
  <li><strong>Rack::ContentType</strong> - Try to guess Content-Type and set it. Rack::Deflater - Compress the response with gzip/deflate.</li>
  <li><strong>Rack::Directory</strong> - Add Apache-style directory listings. This is an endpoint not an intermediate layer, so use it with “run.”</li>
  <li><strong>Rack::ETag</strong> - Generate ETags from MD5s of the content.</li>
  <li><strong>Rack::Head</strong> - Remove response body for HEAD requests.</li>
  <li><strong>Rack::Lint</strong> - Check your responses for correctness.</li>
  <li><strong>Rack::Lock</strong> - Only allow one thread in at once.</li>
  <li><strong>Rack::Reloader</strong> - Reload your app when files change.</li>
  <li><strong>Rack::Runtime</strong> - Times the request, sets X-Runtime in response.</li>
  <li><strong>Rack::Sendfile</strong> - Use the X-Sendfile header to ask your web server to send a file much faster than Ruby can.</li>
  <li><strong>Rack::ShowExceptions</strong> - Show a nice exception page if something breaks.</li>
  <li><strong>Rack::ShowStatus</strong> - Show a pretty page if the result is empty.</li>
  <li><strong>Rack::Static</strong> - Serve from certain directories as static files instead
of calling your framework.</li>
  <li><strong>Rack::URLMap</strong> - Route different directories to different apps or different stacks. You can also use this with a “map” block in config.ru.</li>
</ul>

<p>Rack::URLMap is a way to tell Rack what paths go to what Rack apps - and if thereʼs could be two that match, the longer path always takes precedence.</p>

<p>Rack::ContentType is to set the default HTML content type for everything. Since itʼs at the top, outside the blocks, it applies to all the blocks.</p>

<p>The lobster, by the way, is a simple test app built into Rack. Youʼll see it as an example in many places.</p>

<p><strong>Thrid-party middlewares</strong></p>

<ul>
  <li><a href="https://github.com/rack/rack-contrib">rack-contrib</a></li>
  <li><a href="https://github.com/rack/rack/wiki/List-of-Middleware">middlewares listed in rack wiki</a></li>
</ul>

<p><strong>In Rails</strong></p>

<p>The primary Rack application object in Rails is called ActionController::Dispatcher.</p>

<p>ActionController::Base allows you to get mini-Rack-apps for each controller action because it inherits from Metal, the basic Rails Rack class. So you can call MyController.action(:myaction) and get a Rack app for that action in your controller.</p>

<p><strong>Calling order of Rack middlewares</strong></p>

<p>```ruby
class Foo
  def initialize(app, arg = ‘’)
    puts ‘–&gt; Foo#init’
    @app = app
    @arg = arg
    puts ‘–&gt; Foo#initend’
  end</p>

<p>def call(env)
    puts ‘–&gt; Foo#call’
    status, headers, content = @app.call(env)
    content[0] += “#{@arg}”
    puts ‘–&gt; Foo#callend’
    [ status, headers, content ]
  end
end</p>

<p>class Bar
  def initialize(app, arg = ‘’)
    puts ‘–&gt; Bar#init’
    @app = app
    @arg = arg
    puts ‘–&gt; Bar#initend’
  end</p>

<p>def call(env)
    puts ‘–&gt; Bar#call’
    status, headers, content = @app.call(env)
    content[0] += “#{@arg}”
    puts ‘–&gt; Bar#callend’
    [ status, headers, content ]
  end
end</p>

<p>use Foo, ‘, foo’
use Bar, ‘, bar’</p>

<p>run proc {
  puts ‘–&gt; main#call’
  [200, {‘Content-Type’ =&gt; ‘text/html’}, [‘Hello, world’]]
}</p>

<h1 id="rackup">$ rackup</h1>
<p># –&gt; Bar#init
# –&gt; Bar#initend
# –&gt; Foo#init
# –&gt; Foo#initend
# Thin web server (v1.6.1 codename Death Proof)
# Maximum connections set to 1024
# Listening on 0.0.0.0:9292, CTRL+C to stop
#
# –&gt; Foo#call
# –&gt; Bar#call
# –&gt; main#call
# –&gt; Bar#callend
# –&gt; Foo#callend
# 127.0.0.1 - wendi [23/Sep/2014 15:56:20] “GET / HTTP/1.1” 200 - 0.0013
```</p>

<p>Other samples:</p>

<ul>
  <li><a href="https://gist.github.com/ifyouseewendy/15dd511d2d939e432068#file-config-lobster-ru">lobster</a></li>
  <li><a href="https://gist.github.com/ifyouseewendy/15dd511d2d939e432068#file-config-auth-ru">auth</a></li>
  <li><a href="https://gist.github.com/ifyouseewendy/15dd511d2d939e432068#file-config-benchmark-ru">benchmark</a></li>
</ul>

<h2 id="real-routing">9. Real Routing</h2>

<p>Rails 3 takes this a half-step farther and makes every action on every controller a full-on Rack app that you can extract and use.</p>

<p>Add RouteObject class.</p>

<p>```ruby
class RouteObject
  def initialize
    @rules = []
  end</p>

<p># save routing rules
  def match(url, *args)
    options = {}
    options = args.pop if args[-1].is_a?(Hash)
    options[:default] ||= {}</p>

<pre><code>dest = nil
dest = args.pop if args.size &gt; 0
raise 'Too many args!' if args.size &gt; 0

parts = url.split('/')
parts.select!{|p| !p.empty? }

vars = []
regexp_parts = parts.map do |part|
  if part[0] == ':'
    vars &lt;&lt; part[1..-1]
    "([a-zA-Z0-9_]+)"
  elsif part[0] == '*'
    vars &lt;&lt; part[1..-1]
    "(.*)"
  else
    part
  end
end

regexp = regexp_parts.join('/')
@rules.push({
  :regexp =&gt; Regexp.new("^/#{regexp}$"),
  :vars =&gt; vars,
  :dest =&gt; dest,
  :options =&gt; options
})   end
</code></pre>

<p># match rules to url and route to specific controller action.
  # 
  # 1. the router just applies them in order – if more than
  #    one rule matches, the first one wins.
  # 2. the second argument can be a Rack application, 
  #    which Rails then calls.
  def check_url(url)
    @rules.each do |r|
      m = r[:regexp].match(url)</p>

<pre><code>  if m
    options = r[:options]
    params = options[:default].dup

    r[:vars].each_with_index do |v, i|
      params[v] = m.captures[i]
    end

    if r[:dest]
      return get_dest(r[:dest], params)
    else
      controller = params['controller']
      action = params['action']
      return get_dest("#{controller}##{action}", params)
    end
  end
end

nil   end
</code></pre>

<p>def get_dest(dest, routing_params = {})
    return dest if dest.respond_to?(:call)</p>

<pre><code>if dest =~ /^([^#]+)#([^#]+)$/
  name = $1.capitalize
  cont = Object.const_get("#{name}Controller")
  return cont.action($2, routing_params)
end

raise "No destination: #{dest.inspect}!"   end end ```
</code></pre>

<p>Define <code>route</code> to save rules in an instance of RouteObject, and use <code>get_rack_app</code> to route to controller actions. </p>

<p>```ruby
module Rulers
  class Application
    def route(&amp;block)
      @route_obj ||= RouteObject.new
      @route_obj.instance_eval(&amp;block)
    end</p>

<pre><code>def get_rack_app(env)
  raise 'No routes!' unless @route_obj
  @route_obj.check_url env['PATH_INFO']
end   end end ```
</code></pre>

<p>Update Rulers::Controller to use <code>self.action</code> to initialize rack app, and <code>dispatch</code> to specific action.</p>

<p>```ruby
# rulers/lib/rulers/controller.rb
module Rulers
  class Controller
    include Rulers::Model</p>

<pre><code>def initialize(env)
  @env = env
  @routing_params = {}
end

def env
  @env
end

def self.action(act, p = {})
  proc {|e| self.new(e).dispatch(act, p) }
end

def dispatch(action, routing_params = {})
  @routing_params = routing_params

  self.send(action)
  render_response action.to_sym unless get_response
  st, hd, rs = get_response.to_a
  [st, hd, [rs.body].flatten]
end

def params
  request.params.merge @routing_params
end
</code></pre>

<p>end
end
```</p>

<p><strong>In Rails</strong></p>

<p>Rails connects lots of tiny Rack applications into a single overall application. Itʼs a complicated, multi-layered construction.</p>

<p>Each Rails controller keeps track of a mini-Rack stack of middleware which can be specified per-action like before_filters.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Review] Git Community Book]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2014/09/27/git-community-book/"/>
    <updated>2014-09-27T13:51:25+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2014/09/27/git-community-book</id>
    <content type="html"><![CDATA[<table class="custom">
  <tbody>
    <tr>
      <td><strong>Book</strong></td>
      <td>Git Community Book</td>
    </tr>
    <tr>
      <td><strong>Author</strong></td>
      <td>people in the Git community</td>
    </tr>
    <tr>
      <td><strong>Link</strong></td>
      <td><a href="http://alx.github.io/gitbook/">alx.github.io/gitbook</a></td>
    </tr>
  </tbody>
</table>

<ul id="markdown-toc">
  <li><a href="#git-object-model">Git Object Model</a>    <ul>
      <li><a href="#the-sha">The SHA</a></li>
      <li><a href="#the-objects">The Objects</a></li>
      <li><a href="#different-from-svn">Different from SVN</a></li>
    </ul>
  </li>
  <li><a href="#advanced-git">Advanced Git</a>    <ul>
      <li><a href="#create-new-empty-branches">Create New Empty Branches</a></li>
      <li><a href="#modifying-your-history">Modifying Your History</a></li>
      <li><a href="#advanced-merging">Advanced Merging</a></li>
      <li><a href="#git-and-email">Git and Email</a></li>
      <li><a href="#client-side-hookds">Client Side Hookds</a></li>
      <li><a href="#submodules">Submodules</a></li>
    </ul>
  </li>
  <li><a href="#internals-and-plumbing">Internals and Plumbing</a>    <ul>
      <li><a href="#how-git-stores-objects">How Git Stores Objects</a></li>
      <li><a href="#the-git-index">The Git Index</a></li>
      <li><a href="#the-packfile-index">The Packfile Index</a></li>
      <li><a href="#raw-git">Raw Git</a></li>
    </ul>
  </li>
</ul>

<h2 id="git-object-model">Git Object Model</h2>

<h3 id="the-sha">The SHA</h3>

<ol>
  <li>Represents object name.</li>
  <li>40-digit long.</li>
  <li>Use SHA1 hash to generate based on the object content.</li>
  <li>Keeps the identity.</li>
</ol>

<h3 id="the-objects">The Objects</h3>

<p>Every object consists of three things: <strong>type, size, content</strong>.</p>

<p>There are four different types of objects: <strong>blob, tree, commit, tag</strong>.</p>

<p><strong>blob</strong> is a chunk of binary data, used to stroe file data.</p>

<blockquote>
  <p>The blob is entirely defined by its data, totally independent of its location.</p>
</blockquote>

<p><strong>tree</strong> is basically like a directory - it references a bunch of other trees and/or blobs.</p>

<blockquote>
  <p>Since trees and blobs, like all other objects, are named by the SHA1 hash of their contents, two trees have the same SHA1 name if and only if their contents (including, recursively, the contents of all subdirectories) are identical.</p>
</blockquote>

<p><strong>commit</strong>  points to a single tree, marking it as what the project looked like at a certain point in time. It contains meta-information about that point in time, such as a timestamp, the author of the changes since the last commit, a pointer to the previous commit(s), etc.</p>

<p>```sh
➜  git show –pretty=raw HEAD
commit 6cc1a668111eb54ef4dbe976fff24f2e3d8b95f9
tree 36df675d7ae80e7eef0faac893b266801a4fa94a
parent d448c30aa03fba2884ab87c21081ef0f74d24f7e
author wendi <a href="&#109;&#097;&#105;&#108;&#116;&#111;:&#119;&#101;&#110;&#100;&#105;&#064;&#117;&#109;&#101;&#110;&#103;&#046;&#099;&#111;&#109;">&#119;&#101;&#110;&#100;&#105;&#064;&#117;&#109;&#101;&#110;&#103;&#046;&#099;&#111;&#109;</a> 1409022714 +0800
committer wendi <a href="&#109;&#097;&#105;&#108;&#116;&#111;:&#119;&#101;&#110;&#100;&#105;&#064;&#117;&#109;&#101;&#110;&#103;&#046;&#099;&#111;&#109;">&#119;&#101;&#110;&#100;&#105;&#064;&#117;&#109;&#101;&#110;&#103;&#046;&#099;&#111;&#109;</a> 1409022733 +0800</p>

<pre><code>Update error type service url ```
</code></pre>

<p><strong>tag</strong> is a way to mark a specific commit as special in some way. It is normally used to tag certain commits as specific releases or something along those lines.</p>

<blockquote>
  <p>A tag object contains an object name (called simply ‘object’), object type, tag name, the name of the person (“tagger”) who created the tag, and a message, which may contain a signature</p>
</blockquote>

<h3 id="different-from-svn">Different from SVN</h3>

<p>GIT stores a snapshot, while other SCM systems stores the differences between one commit and the next.</p>

<h2 id="advanced-git">Advanced Git</h2>

<h3 id="create-new-empty-branches">Create New Empty Branches</h3>

<p>Use <strong>symobolic-ref</strong>. A symbolic ref is a regular file that stores a string that begins with ref: refs/. For example, your .git/HEAD is a regular file whose contents is ref: refs/heads/master.</p>

<blockquote>
  <p>In the past, .git/HEAD was a symbolic link pointing at
       refs/heads/master. When we wanted to switch to another branch, we did
       ln -sf refs/heads/newbranch .git/HEAD, and when we wanted to find out
       which branch we are on, we did readlink .git/HEAD. But symbolic links
       are not entirely portable, so they are now deprecated and symbolic refs
       (as described above) are used by default.</p>
</blockquote>

<p><code>sh
$ git symbolic-ref HEAD refs/heads/newbranch
  # no branch is created,
  # and all files are deleted to index.
$ rm .git/index
git clean -fdx
&lt;do work&gt;
git add your files
git commit -m 'Initial commit'
  # branch 'newbranch' is created.
</code></p>

<h3 id="modifying-your-history">Modifying Your History</h3>

<p>use <code>git filter-branch</code> to rewrite branches.</p>

<h3 id="advanced-merging">Advanced Merging</h3>

<p>When merging, one parent will be <strong>HEAD</strong>, and the other will be the tip of the other branch, which is stored temporarily in <strong>MERGE_HEAD</strong>.</p>

<p>During the merge, the index holds three versions of each file. Each of these three “file stages” represents a different version of the file:</p>

<p><code>sh
$ git show :1:file.txt # the file in a common ancestor of both branches.
$ git show :2:file.txt # the version from HEAD.
$ git show :3:file.txt # the version from MERGE_HEAD.
</code></p>

<p>Some special diff options allow diffing the working directory against any of these stages:</p>

<p><code>sh
$ git diff -1 file.txt # diff against stage 1
$ git diff --base file.txt # same as the above
$ git diff -2 file.txt # diff against stage 2
$ git diff --ours file.txt # same as the above
$ git diff -3 file.txt # diff against stage 3
$ git diff --theirs file.txt # same as the above.
</code></p>

<h3 id="git-and-email">Git and Email</h3>

<p><code>sh
$ man git-format-patch # Prepare patches for email submission
$ man git-am # Apply a series of patches from a mailbox
</code></p>

<p><code>git format-patch origin</code> will produce a numbered series of files in the current directory, one of each patch in the current branch but not in origin/HEAD.</p>

<p><code>git am patches.mbox</code></p>

<h3 id="client-side-hookds">Client Side Hookds</h3>

<p>by example, <code>GIT_DIR/hooks/pre-commit</code></p>

<h3 id="submodules">Submodules</h3>

<p>Create the submodules:</p>

<p><code>sh
$ mkdir ~/git
$ cd ~/git
$ for i in a b c d
do
    mkdir $i
    cd $i
    git init
    echo "module $i" &gt; $i.txt
    git add $i.txt
    git commit -m "Initial commit, submodule $i"
    cd ..
done
</code></p>

<p>Create the superproject and add all the submodules:</p>

<p><code>sh
$ mkdir super
$ cd super
$ git init
$ for i in a b c d
do
    git submodule add ~/git/$i
done
</code></p>

<p>See what files git-submodule created:</p>

<p><code>sh
$ ls -a
.  ..  .git  .gitmodules  a  b  c  d
</code></p>

<p>The <code>git-submodule add</code> command does a couple of things:</p>

<ul>
  <li>It clones the submodule under the current directory and by default checks out the master branch.</li>
  <li>It adds the submodule’s clone path to the gitmodules file and adds this file to the index, ready to be committed.</li>
  <li>It adds the submodule’s current commit ID to the index, ready to be committed.</li>
</ul>

<p>Commit the superproject:</p>

<p><code>sh
$ git commit -m "Add submodules a, b, c and d."
</code></p>

<p>Clone the superproject:</p>

<p><code>sh
$ cd ..
$ git clone super cloned
$ cd cloned
</code></p>

<p>Check submodule status:</p>

<p><code>sh
$ git submodule status
-d266b9873ad50488163457f025db7cdd9683d88b a
-e81d457da15309b4fef4249aba9b50187999670d b
-c1536a972b9affea0f16e0680ba87332dc059146 c
-d96249ff5d57de5de093e6baff9e0aafa5276a74 d
</code></p>

<p>Register the submodule into <code>.git/config</code>:</p>

<p><code>sh
$ git submodule init
</code></p>

<p>Clone the submodules and check out the commits specified in the superproject:</p>

<p><code>sh
$ git submodule update
$ cd a
$ ls -a
.  ..  .git  a.txt
</code></p>

<p>One major difference between <code>git-submodule update</code> and <code>git-submodule add</code> is that git-submodule update checks out a specific commit, rather than the tip of a branch. It’s like checking out a tag: <strong>the head is detached</strong>, so you’re not working on a branch.</p>

<p><code>sh
$ git branch
* (no branch)
master
</code></p>

<p>Check out or create a new branch:</p>

<p><code>sh
$ git checkout master
</code></p>

<p><code>sh
$ git checkout -b fix-up
</code></p>

<p>Do work and commit:</p>

<p><code>sh
$ echo "adding a line again" &gt;&gt; a.txt
$ git commit -a -m "Updated the submodule from within the superproject."
$ git push
$ cd ..
$ git diff
diff --git a/a b/a
index d266b98..261dfac 160000
--- a/a
+++ b/a
@@ -1 +1 @@
-Subproject commit d266b9873ad50488163457f025db7cdd9683d88b
+Subproject commit 261dfac35cb99d380eb966e102c1197139f7fa24
$ git add a
$ git commit -m "Updated submodule a."
$ git push
</code></p>

<p><strong>Cautions on Submodules</strong>:</p>

<p><em>Always publish the submodule change before publishing the change to the superproject that references it. If you forget to publish the submodule change, others won’t be able to clone the repository:</em></p>

<p><code>sh
$ cd ~/git/super/a
$ echo i added another line to this file &gt;&gt; a.txt
$ git commit -a -m "doing it wrong this time"
$ cd ..
$ git add a
$ git commit -m "Updated submodule a again."
$ git push
$ cd ~/git/cloned
$ git pull
$ git submodule update
error: pathspec '261dfac35cb99d380eb966e102c1197139f7fa24' did not match any file(s) known to git.
Did you forget to 'git add'?
Unable to checkout '261dfac35cb99d380eb966e102c1197139f7fa24' in submodule path 'a'
</code></p>

<p><em>It’s not safe to run git submodule update if you’ve made and committed changes within a submodule without checking out a branch first. They will be silently overwritten</em>:</p>

<p><code>sh
$ cat a.txt
module a
$ echo line added from private2 &gt;&gt; a.txt
$ git commit -a -m "line added inside private2"
$ cd ..
$ git submodule update
Submodule path 'a': checked out 'd266b9873ad50488163457f025db7cdd9683d88b'
$ cd a
$ cat a.txt
module a
</code></p>

<h2 id="internals-and-plumbing">Internals and Plumbing</h2>

<h3 id="how-git-stores-objects">How Git Stores Objects</h3>

<p><strong>Loose objects</strong> are the simpler format. It is simply the compressed data stored in a single file on disk.</p>

<p>If the sha of your object is <code>ab04d884140f7b0cf8bbf86d6883869f16a46f65</code>, then the file will be stored in the following path:</p>

<p><code>sh
GIT_DIR/objects/ab/04d884140f7b0cf8bbf86d6883869f16a46f65
</code></p>

<p>The Ruby implementation of object storage:</p>

<p>```ruby
def put_raw_object(content, type)
  size = content.length.to_s</p>

<p>header = “#{type} #{size}#body”
  store = header + content</p>

<p>sha1 = Digest::SHA1.hexdigest(store)
  path = @git_dir + ‘/’ + sha1[0…2] + ‘/’ + sha1[2..40]</p>

<p>if !File.exists?(path)
    content = Zlib::Deflate.deflate(store)</p>

<pre><code>FileUtils.mkdir_p(@directory+'/'+sha1[0...2])
File.open(path, 'w') do |f|
  f.write content
end   end   return sha1 end ```
</code></pre>

<p><strong>Packed Objects</strong>. In order to save that space, Git utilizes the packfile. This is a format where Git will only save the part that has changed in the second file, with a pointer to the file it is similar to.</p>

<h3 id="the-git-index">The Git Index</h3>

<p>The index is a binary file (generally kept in .git/index) containing a sorted list of path names.</p>

<p><code>sh
$ git ls-files --stage
100644 63c918c667fa005ff12ad89437f2fdc80926e21c 0
100644 5529b198e8d14decbe4ad99db3f7fb632de0439d 0
100644 6ff87c4664981e4397625791c8ea3bbb5f2279a3 0
100644 a37b2152bd26be2c2289e1f57a292534a51a93c7 0
100644 fbefe9a45b00a54b58d94d06eca48b03d40a50e0 0
...
100644 2511aef8d89ab52be5ec6a5e46236b4b6bcd07ea 0
100644 2ade97b2574a9f77e7ae4002a4e07a6a38e46d07 0
100644 d5de8292e05e7c36c4b68857c1cf9855e3d2f70a 0
.gitignore
.mailmap
COPYING
Documentation/.gitignore
Documentation/Makefile
xdiff/xtypes.h
xdiff/xutils.c
xdiff/xutils.h
</code></p>

<ol>
  <li>
    <p>The index contains all the information necessary to generate a single (uniquely determined) tree object.</p>
  </li>
  <li>
    <p>The index enables fast comparisons between the tree object it defines and the working tree.</p>
  </li>
  <li>
    <p>It can efficiently represent information about merge conflicts between different tree objects.</p>
  </li>
</ol>

<h3 id="the-packfile-index">The Packfile Index</h3>

<p>Stored in <code>.git/objects/pack</code>.</p>

<p>Importantly, packfile indexes are not neccesary to extract objects from a packfile, they are simply used to quickly retrieve individual objects from a pack.</p>

<h3 id="raw-git">Raw Git</h3>

<p><strong>Creating Blobs</strong></p>

<p><code>sh
$ git hash-object -w myfile.txt
6ff87c4664981e4397625791c8ea3bbb5f2279a3
</code></p>

<p><strong>Creating Trees</strong></p>

<p>use <code>git mktree</code>.</p>

<p><strong>Creating Commits</strong></p>

<p>use <code>git commit-tree</code>.</p>

<p><strong>Updating a Branch Ref</strong></p>

<p><code>sh
$ echo 'a5f85ba5875917319471dfd98dfc636c1dc65650' &gt; .git/refs/heads/master
</code></p>

<p>a safer way of doing that is to use the <code>git update-ref</code> command:</p>

<p><code>sh
$ git update-ref refs/heads/master a5f85ba5875917319471dfd98dfc636c1dc65650
</code> </p>
]]></content>
  </entry>
  
</feed>
