<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Wendi's Blog]]></title>
  <link href="http://blog.ifyouseewendy.com/atom.xml" rel="self"/>
  <link href="http://blog.ifyouseewendy.com/"/>
  <updated>2024-03-04T17:39:38-08:00</updated>
  <id>http://blog.ifyouseewendy.com/</id>
  <author>
    <name><![CDATA[wendi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What I've Done in 2024]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2024/01/07/what-ive-done-in-2024/"/>
    <updated>2024-01-07T15:06:49-08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2024/01/07/what-ive-done-in-2024</id>
    <content type="html"><![CDATA[<h1 id="w9-0226---0303">W9 (02/26 - 03/03)</h1>

<ul>
  <li>异常忙碌的周末。周日是于总家宝宝百天，周六是在我家，叫朋友一起给第二个宝宝做 gender reveal（<a href="https://www.youtube.com/watch?v=LocxWd1iNfw&amp;ab_channel=JasmineYuan">视频链接</a>）。仪式很简单，主要是找机会叫大家一起开心。结果揭晓，第二个也是姑娘，我跟喜福很高兴，但回想跟第一个相比，已经平静了很多。总之，期待你来噢。
<img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202403041731137.JPG" alt="" /></li>
</ul>

<h1 id="w8-0219---0225">W8 (02/19 - 02/25)</h1>

<ul>
  <li>这几个月工作最忙碌的一周了，各种事情接踵而至，每天都刷刷地过，在晚上打网球复活。</li>
  <li>周五晚上带安妮去和山汇家看了场本地的冰球比赛，我们坐地很靠前，能听到两边运动员冲撞防护板的巨大声响，但是即使这么近也要聚精会神才能跟得上球的方位。安妮看的很入神，准确说是很迷糊，不太知道这两波破人冲来冲去是为了什么，那个小球时而出现又忽然消失。</li>
  <li>周四的 movie night 和喜福看了今敏的<a href="https://movie.douban.com/subject/1310177/">东京教父</a>，太棒了，动画电影就该这样吧，让天马行空彻底服务于情节，带来无尽的想象力和浪漫。
<img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202402262111155.JPG" alt="" /></li>
</ul>

<h1 id="w7-0212---0218">W7 (02/12 - 02/18)</h1>

<ul>
  <li>这周天气很好，好几天大太阳。有一丝凉意，但是有阳光时也暖暖的。生活很平静，每天工作，做饭，打网球，看着安妮长大。我很幸运。
<img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202402192119089.JPG" alt="" /></li>
</ul>

<h1 id="w6-0205---0211">W6 (02/05 - 02/11)</h1>

<ul>
  <li>春节快乐。周五除夕夜和山汇幸福家一起，周六和路易斯家水族馆，周日小白和于天航家来家里吃饭。连着吃吃喝喝，热热闹闹过年。想起第一年搬到这里，我和喜福自己庆祝，很感恩一点点有爸妈、有孩子、有朋友陪伴。</li>
  <li>最近的网球练习有点恶性循环，也可能是和越来越厉害的朋友练球， 好久没赢过练习赛。尤其因为打的多，身体吃不消，状态下滑，就打的更不好。趁着过年强迫自己休息，看视频云练习。</li>
  <li>这周同时有<a href="https://liquipedia.net/starcraft2/IEM_Katowice/2024">IEM Katowice Sc2 2024</a>，每天都在追着看比赛，见证了 Serral 碾压局全程 20-1 的胜率夺冠。
<img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202402121456627.JPG" alt="" /></li>
</ul>

<h1 id="w5-0129---0204">W5 (01/29 - 02/04)</h1>

<ul>
  <li>每天翻一翻，看完了 <a href="https://www.goodreads.com/en/book/show/905">The Inner Game of Tennis</a>。这实际上是一本披着网球外衣的使用冥想思路的学习书。1997年出版，竟写出了如此洞察力。大体上有这么些思路
    <ul>
      <li>Self 1 is the ego or think mind, whereas Self 2 is the body or execution mind.</li>
      <li>Quiet Self 1 by stop judging and trusting Self 2</li>
      <li>How to help Self 2 learn? by image, by sound, by feel</li>
      <li>Competition is about overcoming obstacles and taking challenges. It’s not a zero-sum game. Everyone gets better by stretching their ability and providing the best to each other. It turns competition into cooperation.</li>
    </ul>
  </li>
  <li>周末冒出了久违的晴天，带着安妮遛狗，还有去公园玩耍。自从安妮能独立走路，不需要太多抱抱之后，我好喜欢带她去散步。她虽然走的心不在焉，但是每一步都在自己的世纪里徜徉，而不像大人，每一步都迈向一个目的地。跟着她，我也会慢下来，尝试用她的视角体会眼前。
<img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202402051141438.JPG" alt="" /></li>
</ul>

<h1 id="w4-0122---0128">W4 (01/22 - 01/28)</h1>

<ul>
  <li>这周休假。没什么计划，只是 chill。处理各种签证，给妈妈、给我、给老姑；看了些书，第一次读奥斯卡·王尔德，<a href="https://book.douban.com/subject/34438689/">夜莺与玫瑰</a>“影子是灵魂的肉体”，写给成人的童话，以后我要读给安妮听；打了八次网球，身体酸爽也处在酸痛边缘；看了好多场澳网比赛，虽然我🐔脆败，但是见证 Sinner 封王实至名归。</li>
  <li>周五和喜福一起约会吃她心心念的牛油火锅，然后看<a href="https://movie.douban.com/subject/35725869/">年会不能停！</a>。借个讽刺的外壳，说了好多打工人的心声，不过快餐消费，也就只能搏君一笑。</li>
  <li>最近在给安妮做 potty training，只要安妮主动提出 pee pee 或者 poo poo，然后顺利拉在小尿盆里，就可以积攒五角星。两颗五角星就可以换取一次玩耍的机会，目前去了一次 Ikea，一次 Costco，还邀请幸福一起去了一次 Ikea，进展不错。
<img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202401291131716.JPG" alt="" /></li>
</ul>

<h1 id="w3-0115---0121">W3 (01/15 - 01/21)</h1>

<ul>
  <li>周三夜里突降暴雪，幼儿园连续停课两天，带着安妮在后院堆雪人，去操场划雪板，到狗公园在雪中跑。这次雪下的过瘾，在地上堆起厚厚的一层，有种想躺在里边的冲动。</li>
  <li>鉴于最近三个月我每天都在做晚饭，对烹饪保持耐心和兴趣，我决定适当升级家里的厨具和刀具。买了一把 Santoku Knife，然后把家里闲置已久的熟铁锅拿出来说，重新开锅上灶。那句话怎么说来着，一个男人，一辈子，总要，开过一口铁锅…
<img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202401221417464.JPG" alt="" /></li>
</ul>

<h1 id="w2-0108---0114">W2 (01/08 - 01/14)</h1>

<ul>
  <li>假期后遗症，每天晚上都想喝一杯。跟着阿咪入了摇酒的装备以及各种基酒，开始各种排列组合，上网学习 Cocktail。</li>
  <li>新年希望能捡起久违的读书习惯。我一连开了几本书，第一本完成的是 Tim 早年推荐的<a href="https://book.douban.com/subject/35170896/">平面国</a>。这本书于1884年出自一位牧师、神学家之手，内容是讨论多维空间，寓言也涉及讨论政治结构和女权，非常的魔幻。</li>
  <li>今年的第一场雪降临，一个下午，积雪不多，但是零下负十的温度把雪留在了每家的屋顶和林间的小路。周末跟着阿咪和公瑾小白去 Whistler 滑雪，晚上回来网球，脱离家庭生活的一天，麻痹双腿让身体接近虚脱的一天。
<img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202401151025923.JPG" alt="" /></li>
</ul>

<h1 id="w1-0101---0107">W1 (01/01 - 01/07)</h1>

<ul>
  <li>圣诞新年假期结束，繁忙的带娃陪朋友生活告一段落，回到工作中，重新享受安静惬意的生活。捡起我的网球运动，连打五天，慢慢找回状态。</li>
  <li>周末喜福陪着爱琳去芝加哥玩耍，留给我很多陪伴安妮的时间。自从圣诞期间有一天带她闲逛了一下午 Downtown 之后，我意识到这个小家伙只要足够兴奋，就能一直走下去。所以周末我先是带她去遛狗，走了一个小时，然后第二天去了 Sasamat Lake，走了一个半小时。因为我一只手要牵 Nikki，实在没法抱安妮，所以当她撒娇求抱时，我也只能一只手小抱，所以总共也就抱了五分钟不到。一路上带她“探险”，教她拍照（她也就拍了不到一百来张照片）。去程看风景，回程靠 pizza 望梅止渴，效果不错。我很享受和 Annie 第一次 hiking 的经历。
<img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202401122052496.JPG" alt="" /></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I've Done in 2023]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2023/03/06/what-ive-done-in-2023/"/>
    <updated>2023-03-06T15:06:49-08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2023/03/06/what-ive-done-in-2023</id>
    <content type="html"><![CDATA[<p>Favourite Podcasts</p>

<ul>
  <li><a href="https://www.acquired.fm/episodes/ethereum">Acquired - Ethereum (with Packy McCormick)</a></li>
  <li><a href="https://www.xiaoyuzhoufm.com/episode/62a52f60491e0b04ff0e9fe2">基本无害 - Ep72 和Kyth、重轻聊聊《风骚律师（Better Call Saul）》</a></li>
  <li><a href="https://www.xiaoyuzhoufm.com/episode/62f3822c03da6b049bdc0700?s=eyJ1IjogIjYyYWI4MzUwZWRjZTY3MTA0YWRkYTM0MiJ9">谐星聊天会 - 博世08. 今晚月色这么美，企鹅又想北极熊了吧？</a></li>
  <li><a href="https://www.xiaoyuzhoufm.com/episode/64804a7d6752b5f9de296733">半拿铁 - No.54 苹果简史1：嬉皮士、迷幻剂和不洗澡的男人</a></li>
  <li><a href="https://www.acquired.fm/episodes/costco">Acquired - Costco</a></li>
  <li><a href="https://www.xiaoyuzhoufm.com/episode/64002aa8ffd9560a519fb2d4">大内密谈 - vol.1065 圆梦!星际夺冠之后的聊天!</a></li>
  <li><a href="https://podcasts.apple.com/mx/podcast/vol-472-%E5%92%8C%E9%87%8D%E8%BD%BB%E8%81%8A%E8%81%8A%E9%99%88%E5%A5%95%E8%BF%85-%E4%BB%A5%E5%8F%8A%E6%88%91%E4%BB%AC%E7%9A%84%E5%BF%AB%E4%B9%90%E6%97%B6%E4%BB%A3/id1166949390?i=1000576461467">日谈公园 - vol.472 和重轻聊聊陈奕迅，以及我们的快乐时代</a></li>
  <li><a href="https://buzaichang.xyz/episodes/homesick">不在场 - S2E2 平凡故事</a></li>
</ul>

<h1 id="w51-52-1218---1831">W51-52 (12/18 - 18/31)</h1>
<ul>
  <li>12.18 第一次参加安妮幼儿园的开放日，主题是迎接圣诞。一个小时的时间，半小时用在参观和寒暄，半小时用来组织这些不到三岁的小朋友靠墙站成一排，最后用了三分钟唱跳了一首 Snowflake。安妮基本属于错愕但是听话的状态，一开始懵懵地对望着这么多家长的眼睛，后来放开跟着蹲下、站起，嘴里也嘟囔了两句歌词。结束后，害羞地冲进我怀里。</li>
  <li>圣诞节是在幸福家还有山汇一家一起渡过的。四个小朋友，围坐在圣诞树旁，可爱至极。</li>
  <li>邵琦一家去了班芙看雪景，圣诞节跑到白马看到了极光，最后回来加上小白一家，每天都在”小“聚。能看得出来，他们这趟旅程是开心的，我也一起期待他们什么时候夏天再来访。</li>
  <li>这个圣诞假期，我完全暂停了网球，每天都在陪朋友陪孩子。作为i人，固定的独处时间只有早上的遛狗时光，每天到最后都是电不够用的状态。第一次觉得，这十天假期比上班累多了。我亟需一周安静的工作时间，让生活重新恢复秩序。</li>
  <li>新年的最后一天，跟山汇家在 Stanley Park Railway 带孩子去坐圣诞小火车。我俩闲聊，想起了上一次一起跨年，正是2013年底他来北京找我，一起在家附近的烧烤店。这一转眼，十年。
<img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202401021559307.JPG" alt="" />
<img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202401021559098.JPG" alt="" /></li>
</ul>

<h1 id="w50-1211---1217">W50 (12/11 - 12/17)</h1>
<ul>
  <li>工作上各种收尾，为周末和圣诞做准备。按部就班的几天后，看视频“悟了”一些🎾技术，但是身体疲惫只能在家空气练习。周三跟阿咪打完球后想到再见就是明年，临时决定去吃烧烤，然后回他家摇酒到深夜。</li>
  <li>周六邵琦一家和小哥一起来温哥华玩耍，第一晚我给大家表演了一桌菜，算是对我这两个月厨艺学的汇演。整个周末都在上车聊天，下车吃喝，四处溜达，晚上回来打麻将宵夜的节奏度过。一堆东北人把高贵林变成了“高贵林子”，把满地宝变成了“满地堡(pu)”，太欢乐了。
<img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202312191130348.JPG" alt="" /></li>
</ul>

<h1 id="w49-1204---1210">W49 (12/04 - 12/10)</h1>
<ul>
  <li>最近帮忙做晚饭，每次都被捧杀，给了我一种中华小当家再世的错觉。不过相比于几年前的确有些变化，最重要的莫过于心态。我不再着急忙完一件事去追寻下一件，我可以全程专心，有条不紊，一个小时过去也不觉枯燥。大家的赞美当然是蒙眼瞎话，但是看到喜福和阿妮吃到可口的饭菜，成就感爆棚。</li>
  <li>周六下了这个冬天第一场雪。上午遛狗时眼看着小雨变成了冰雹，变成了雪花。回到家小坐，再一看外边小雪已经起了势，很快地面就铺了白。熟悉的感觉，又回来了。周日的下午，把一圈挂灯找出来缠到树上，再找出来放在地上的大灯，简单地装扮好今年的圣诞装饰。</li>
  <li>第八周的B超，我们第一次看你，和你健康的心跳。</li>
  <li>周末和一起双打的印度大叔约了网球比赛，被1:6，0:6血虐。好久没输这么惨了，记录在这里给几个月后的自己看，希望你能爬起来。我一点不觉着苦涩，作为前进道路的一部分，反倒对未来充满期望。
<img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202312110939092.JPG" alt="" /></li>
</ul>

<h1 id="w48-1127---1203">W48 (11/27 - 12/03)</h1>
<ul>
  <li>这周的网球连续挑战了 4.0 选手，差距明显，但是已经不是完全遥不可及。相比于两个月前，自己应该有了一些进步。虽然全方位还是需要提高，但是积累了一些信心。总归要跟比自己强很多的对手多打，才能适应更高的强度。</li>
  <li>周五晚上是国内时间牛哥的婚礼，我跟山汇儿远程参加然后喝酒到深夜。这么多年，牛哥终于落听，为他开心。
<img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202312041358524.JPG" alt="" /></li>
</ul>

<h1 id="w47-1120---1126">W47 (11/20 - 11/26)</h1>
<ul>
  <li>跟朋友聚会分离后习惯性宕机，工作没什么推进欲望， 大家也都沉浸在 Thanks giving week 的氛围里，心照不宣地认真工作。</li>
  <li>于总家的双胞胎在周五的一通电话后被紧急剖腹生产，虽然过程些许曲折，但是好在一切顺利。欢迎你们来到这个世界，两个着急出来的小家伙。
<img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202312011531623.JPG" alt="" /></li>
</ul>

<h1 id="w46-1113---1119">W46 (11/13 - 11/19)</h1>
<ul>
  <li>公司去 Miami 团建，我留在家里享受了一周的假期。每天打球，陪孩子，非常休闲。周四占东子怡带 Jeremy 来加拿大，上次相聚还是19年大家一起来温哥华玩。四年未见，甚是想念。尤其于天航和方欣也搬来，曾经在北京一起租房子的西小口1103，竟然在温哥华团聚。世界真奇妙。这一次的行程主要是白天陪娃，晚上安顿好了再一起喝酒打麻将。周五是 Sea to Sky Gondola，周六是 Aquarium。每天加班加点，一转眼就过去了。</li>
  <li>周三是35周岁生日，在家和喜福、妈妈还有 Annie 吃火锅庆祝。我还是有一点在少年时候就有的生日时候的扭捏情绪，我不喜欢每个纪念日，我害怕短暂的人为的快乐给我制造幻觉和假象。和喜福聊天让我很快疏解。我平和的面对自己步入中年，我坚信人生只过了三分之一，未来还有无数的可能。我没有经历过苦难，只有矫情。我一辈子都很幸运，尤其回看那些错误和尽可能及时地补救。我有爱我的女儿，老婆，爸妈和朋友，想到他们我就有更多力量向前，或者停在原地，过好每一天。</li>
  <li>周日见证了小徳赢下 ATP Finals 2023，渡过完美的一年。略微遗憾在于温网，就像21年的美网。是那样的高度才让这样的一年还是让人有一丝不甘，奢望完美。作为小徳的粉丝是幸运的，熬出了头，并且有幸亲历更多的历史。
<img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202311261743619.JPG" alt="" /></li>
</ul>

<h1 id="w45-1106---1112">W45 (11/06 - 11/12)</h1>
<ul>
  <li>这周因为搞出了线上事故工作异常忙碌，到了周五才算是消停下来。下周公司去 Miami 团建，我选择在家休养。一周的假期在即，我的计划是休息、打球、陪占东一家来玩。</li>
  <li>网球在逐步提高，伤病也在稳步地积累。到现在为止，左肩膀，右手腕，脚底板，加上这周的右臀，奇怪的部位轮番作痛。除了静养没什么好办法。莫非这就是三十多岁的身体，不休息就让你被迫休息。
<img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202311141037878.jpeg" alt="" /></li>
</ul>

<h1 id="w44-1030---1105">W44 (10/30 - 11/05)</h1>
<ul>
  <li>周一是万圣节，全家出动，带着安妮跟着幸福去挨家挨户要糖。我们阿妮的装扮是只 baby shark，完美契合她肥嘟嘟的脸。第一次参与这个节日，从胆小害怕，到挑衅地指着大乌鸦人说”我认识你，大鸦鸦“，从 happy birthday, new year 到 happy halloween，从一个街区走到另一个街区，在秋日的夜晚奔走一个半小时。我们大人也在一声声祝福中感受到了热闹和快乐。
<img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202311062050146.jpeg" alt="" /></li>
</ul>

<h1 id="w43-1023---1029">W43 (10/23 - 10/29)</h1>
<ul>
  <li>认真工作，稳步推进我负责的 auth project。网球连续打了 13 天，又濒临体力极限，强迫自己在周末休息了三天。</li>
  <li>最近天气放晴，无敌秋景。我真的太爱这个季节了。多彩的颜色，在阳光下充满生命力。只是它走的好快，每天遛狗的树林里很快就铺满了落叶。</li>
  <li>阿妮有两天发烧，生病在家。一脸没睡醒的状态，到哪里都要抱抱。可是吃下止疼药之后，就立马元气畅通，蹦蹦跳跳，在 Costco 吃着冰淇凌和汉堡，开心的不得了。</li>
  <li>今年我对我文的球赛基本处在半放弃状态，只有周末时间恰好才会跟着看个半场。最近两周 1:0 米兰，1:0 维罗纳的比赛，异常精彩。好像回到了十年前，挣扎着爬出低谷时的心气，太久未见，倍感振奋。</li>
</ul>

<p><img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202310301754061.JPG" alt="" />
<img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202310301754833.JPG" alt="" /></p>

<h1 id="w42-1016---1022">W42 (10/16 - 10/22)</h1>
<ul>
  <li>每天都照常忙碌着，工作、孩子、网球、吃吃喝喝。没什么特别的，我很满足。
<img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202310241824496.jpeg" alt="" /></li>
</ul>

<h1 id="w41-1009---1015">W41 (10/09 - 10/15)</h1>
<ul>
  <li>工作非常认真，每天坐下来就能很快进入状态，耐心地处理琐事，然后慢慢时间就飞快掠过。所以说，专注的时间是快乐的。David &amp; Sarah 这周来温哥华参加婚礼，住在家里五天。一年没见，没有太多变化，一起闲聊、遛狗、卡丁车、打乒乓。</li>
  <li>带贝贝上了五周的足球课结束了，进步很大，一个多月的时间，成功地…认识了足球🤦🏻‍♂️。知道球球抱久了也可以放下来踢踢。她每节课前十分钟热身都很专注，跑的最快并且喊的最响，然后就进入自由飞翔阶段，出神地看着其他小朋友玩球，木讷地回应你对她说的一切。腼腆地笑，得意地笑，尴尬礼貌地笑。</li>
  <li>阿妮从三月份开始去幼儿园，一直都很粘很依靠一位老师，阿妮称她叫“Sarve Mummy”。很多次放学我们去接，远远看到其他小朋友在玩沙玩玩具，而阿妮会自己坐在老师腿上，依偎在老师身旁。Sarve 成了她对幼儿园的向往与依靠。跟其他老师闲聊得知她是伊朗的硕士生，移民过来因为学历系统不互通，她需要从最基本的幼儿园做起积累时长。周五，我们得知这是她在幼儿园的最后一天，惊讶之余也不免能看到她对开启下一阶段生活的向往。我们为她祝好，也衷心地看些 Sarve Mummy 对安妮的照顾。
<img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202310161049976.JPG" alt="" /></li>
</ul>

<h1 id="w40-1002---1008">W40 (10/02 - 10/08)</h1>
<ul>
  <li>这周的天气非常无敌，是我最喜欢的秋景。湛蓝的天空，几乎没有云彩，走到哪里都是不同程度的五颜六色。对我而言，短暂的秋季更像是颜色的丰收，在绿、黄、红之间摇摆渐变，有的透亮，有的深沉。当阳光退去，满地落叶，铺一片颓唐，让人伤感。而这份矫情，也深得我心。</li>
  <li>我的网球事业在努力推进着。第一次在练习赛中赢三月，对我来讲是个不错的里程碑。当然差距还是很明显的，只是偶尔的光亮让我感到欣慰与希望。现在每周的负荷，让我的身体没法完全恢复，每天都在肌肉酸痛中苏醒，为了防止受伤我要强迫自己接下来休息一周。来路慢慢，心态放平。
<img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202310092208927.jpg" alt="" /></li>
</ul>

<h1 id="w39-0925---1001">W39 (09/25 - 10/01)</h1>
<ul>
  <li>连着下了几天小雨，作为入秋的警示，周末见识到了这几个月最美的蓝天。全家出行，和朋友们一起去 Langley 的 Willow View 农场遛娃，来了张好大的集体照，尤其是孩子们，很期待看到这些小朋友一起长大。</li>
  <li>周六和喜福去久违的 DT 跟小白公瑾晚餐，之后去了温哥华电影节的特别放映<a href="https://movie.douban.com/subject/1306664/">共同警备区</a>。开场前有个韩裔导演，讲述了自己推荐这部电影的理由，略显支支吾吾，但非常真诚。连着两周在电影院看朴赞郁，我真是幸福啊。
<img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202310021730479.JPG" alt="" /></li>
</ul>

<h1 id="w38-0918---0924">W38 (09/18 - 09/24)</h1>
<ul>
  <li>这一周认真工作，陪于总方欣熟悉生活，陪孩子家人吃吃喝喝，跟朋友打球，非常完美。这样的生活节奏好棒，每天都有享受与憧憬。</li>
  <li>周二我、喜福去 Rio Theatre 看了 <a href="https://movie.douban.com/subject/1308865/">Old Boy</a> 二十周年 4k 修复。有生之年能在电影院看到一直喜欢的电影，太幸福了。心潮澎湃，从头到尾都在用心感受。</li>
  <li>周五和阿咪去看了 Laver Cup。我俩作为氛围组选手，拿着啤酒，在球场几乎最外围聊天看球。其实没有那么远，很清楚能看到球手的动作，而且把手机像素拉到最糊能看到远处费天王的剪影，很值得了。
<img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202309251717296.JPG" alt="" /></li>
</ul>

<h1 id="w37-0911---0917">W37 (09/11 - 09/17)</h1>
<ul>
  <li>天气渐冷，外婆、安妮、喜福相继病倒，大家都在和鼻涕、头疼斗争，有点让人怀疑是不是二阳。还好两三天都逐渐恢复，没有大碍。趁着雨季来临前，我还在疯狂操练网球，最近的重点是 weight transfer。喜福说我中了大病，在家里经常捉到我在空气挥拍。</li>
  <li>周末等待了半年的于天航和方欣落地温哥华。去机场，回家，带他们熟悉环境，见到了久违的 Ruby 和 Rocky，晚上山汇和幸福两家来，家中一度出现了四个小朋友和三只汪汪齐声乱叫的名场面，我们都只能崩溃地接受我们的崩溃。
<img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202309191135732.JPG" alt="" /></li>
</ul>

<h1 id="w36-0904---0910">W36 (09/04 - 09/10)</h1>
<ul>
  <li>9.9是我们家阿四的五岁生日，安妮又蹭了一波生日宴，准备礼物，唱歌，拍手，欢笑。阿四作为家里最老实与骄傲的一员，常年为我们带来细腻柔软的手感，偶尔为之的关怀，时刻准备逃离撒野的心，以及史上最大的医疗账单。你是家宠，生日快乐。</li>
  <li>周日和阿咪一起见证了美网决赛小徳3:0总理，第24座大满贯。回想第二盘抢七，和温网第二盘和阿卡的抢七非常相似，就在两三个关键分决定了一场比赛的走势。小徳作为后起之辈强行拼出了“三巨头“时代，整个职业生涯被压制，终于在末期突出重围，走到更远，甚至最远。GOAT。
<img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202309111144302.JPG" alt="" /></li>
</ul>

<h1 id="w35-0828---0903">W35 (08/28 - 09/03)</h1>

<ul>
  <li>安妮的幼儿园这周休假，连着下周一长周末，我们开启了为期十天的带娃行动。带安妮去游泳，去公园，去遛狗，跟几个小伙伴翻来覆去的玩耍。周末继续外出，Buntzen Lake，可能是这个夏天最后一次野餐。随着安妮长大，我们不断感叹这是安妮最好的时候。最近能拼出长句，说出奇怪的话。她心情好的时候会走路歪歪，或者蹦来蹦去；她认真看路上的蚂蚁和小石子，好像拿着放大镜看这个世界；她会请求你帮忙，然后不听你讲解就一把抢走，傲慢又专横。</li>
  <li>偶尔晚上有空会玩会儿<a href="https://www.douban.com/game/25889245/">The Last of Us</a>，带带拉拉八九个月了，这周打通了。剧情很有趣，是个后末日的道德问题，很明显的体验是，游戏不像电影，再百转千回也是平平地铺开，游戏是代入的，在有限的框架内也还是能跟随、操纵主角做出探索，然后建立联系。这个体验很棒。</li>
  <li>这周和喜福看了 <a href="https://movie.douban.com/subject/1293767/">On Golden Pond</a>，上大学时候看到 Henry Fonda 记下来了这部电影，隔了这么多年，终于有机会看到。然而说实话，前半个小时我很有切片的冲动，因为看着缓慢的剧情推进，大体走向也能猜到大概。还好克制住了这份急迫，选择耐心花两个小时看完。没有意外，电影本身也没什么过于出彩的地方，但是整体的温馨以及很文学化的台词，娓娓道来，给人一种非常平静的感受，最后我们俩都很喜欢。</li>
</ul>

<p><img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202309041753865.JPG" alt="" /></p>

<h1 id="w34-0821---0827">W34 (08/21 - 08/27)</h1>
<ul>
  <li>工作上，近期的安排基本在上周完成，所以这周划水划的厉害。周中打球，周末出去划船野餐，抓住夏天最后的尾巴。</li>
  <li>安妮有一天突然轮着和大家说“我爱你”，我的心当场就化了。周五晚上和小白公瑾吃饭，聊到孩子的问题，我真的不知道怎么用语言去表述，看到自己孩子的暖心时刻，你好想她再来一遍，不要停再来一遍，而现实不会这样，所以只能在发生后立马在脑中回放，希望像影印机一样留一份在记忆。
<img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202308281808367.JPG" alt="" /></li>
</ul>

<h1 id="w33-0814---0820">W33 (08/14 - 08/20)</h1>
<ul>
  <li>这周的天气渐凉，秋天的萧瑟已经走起来了，山火飘来，更加云雾笼罩。眼看八月就要结束，我已经开始感伤夏日将近。我报名参加了第二次网球公开赛 Coquitlam Open，3.0 level，过了一轮，第二轮遇到了3号种子，开局僵持挣扎了一下，之后被一波带走。今年的网球比赛就此结束，有很多紧张与兴奋，希望明年能有突破。</li>
  <li>这个月和喜福恢复了周四的 movie night，这周去 Rio Theater 看了 Robert De Niro 的生日连放，Cape Fear。我还记得上次看是在大学宿舍的深夜，看的我心绪不宁。这次在大屏幕看效果更佳。
<img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202308231401035.jpeg" alt="" /></li>
</ul>

<h1 id="w32-0807---0813">W32 (08/07 - 08/13)</h1>
<ul>
  <li>周一是家妮两岁生日，找来了小伙伴一起玩耍、庆祝。我对小朋友过生日持谨慎态度，跟喜福态度坚决地表明，不要以后发展为大型生日趴，几个要好的朋友一起聚下最多。安妮现在已然明白这一天的重要，但是我们很努力地问她好几遍有没什么想要的礼物，她的回答也只局限在“贝贝要饼干“这种朴实无华的愿望。其实她已经走在超重的康庄大道上，但这个回答还是听起来像我们没有喂饱她一样。我猜她应该很享受大家为她唱生日歌的状态，虽然她一脸懵懂，希望赶快快进，直到她努起嘴，笨拙地吹灭蜡烛，然后终于能大快朵颐。我猜她也许挑不出这一天哪个瞬间最快乐，因为她的世界里就容不下烦恼，每一个吃饱喝足、奔跑拥抱、呼喊哭泣的时刻都是真实又美丽的。</li>
  <li>这周还有山汇和毛豆的生日，一周吃三顿蛋糕，生活还会有什么可抱怨的。周末在 Hayward Lake 野餐，起早占地方，然后一天的亲子时光，大家普遍表示“很费家长“，但是，不负好时光，而且也是对美好夏天的最大敬意。
<img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202308141141499.jpeg" alt="" /></li>
</ul>

<h1 id="w31-0731---0806">W31 (07/31 - 08/06)</h1>
<ul>
  <li>周一参加了线上入籍仪式，没太多期待与激动，只是平静地知道这一天会到来。一同参加的各色人，包括我一同合成大杂烩，不少人穿着红色，准备了枫叶旗。我最爱的是一个看起来中东背景的家庭，爸爸妈妈带着三个孩子，穿西装，拿国旗，全家透露出喜悦的表情。我不知道他们背后有怎样的故事，但真心祝福他们仪式后有个美好的庆祝。最后的最后，主持人老爷子给大家诚挚的祝福，as a Canadian。</li>
  <li>周二接 Neo 来家里玩耍，几个月不见心爱的狗子长胖了好多。Neo 和 Nikki 两只成年老狗，见面还能迸发出热情，全天都在打闹和休息。下午一起接 Annie 放学然后去公园玩耍。</li>
  <li>周末跟高磊一家去了 Cultus Lake，今年第一次 day picnic，带着安妮玩了 Standup Paddle 还有小游泳圈。她慌慌张张，迷迷糊糊，跟我在水上随着浪漂来漂去。新奇地看着水上的一切，也时不时焦急地望着岸边的妈妈。
<img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202308081335229.JPG" alt="" /></li>
</ul>

<h1 id="w30-0724---0730">W30 (07/24 - 07/30)</h1>
<ul>
  <li>七月结束了，疯狂打了25天网球，进步显著。一个副作用是掉了十斤，我得努力吃回来。这一个月的美好回忆都在傍晚，看着远处的山景逐渐失去太阳余晖，吹着凉爽的晚风，跟朋友打球到深夜。学习网球整整一年，身体和心理都非常快乐。</li>
  <li>周四恢复了和喜福看电影的传统，去看了最新一部 Mission Impossible。故事老套的很可爱，非要强行加个 AI 紧跟潮流。阿汤的皱纹不影响帅气，在大屏幕上看风景片也算很舒服。
<img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202307311727471.JPG" alt="" /></li>
</ul>

<h1 id="w29-0717---0723">W29 (07/17 - 07/23)</h1>
<ul>
  <li>工作终于找到些状态，每天都在有限时间内加班加点，赶在周五休假前算是完成了一周的目标。</li>
  <li>周一和久违的 Tim 一家吃饭，周二在山汇家，周五在高磊家，趁着美好的夏天，多在一起相聚。</li>
  <li>周五休假，我和喜福还有妈妈把安妮送到幼儿园，三个人去了 Grouse Mountain 玩耍。我还没有体验过这里夏天的景色，缆车上山，还有小缆车再到山顶，两只大棕熊很给面子，顶着烈日在我们面前走来走去，另外赶上了一场 lumber show，没想到压轴是个杂技表演，这哥们爬到了十多米的树桩上，看的人心惊胆战。
<img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202307241725882.jpeg" alt="" /></li>
</ul>

<h1 id="w27---w28-0703---0716">W27 - W28 (07/03 - 07/16)</h1>
<ul>
  <li>这两周上班乏力，完全找不到动力。跟老板 one one 直白地反映，我喜欢不起来自己在做的项目，以及这大半年来孤身作战的体验。希望接下来会有改善。我本来以为这次对话到此为止，但是他告诉我有一个 news，我 congratulations 已经挂在嘴边，心想莫非是“有了”。结果他告诉我，他和老婆还有一个好朋友，准备趁着没有背上车子、房子、孩子的各种压力前，环游世界。他已经请好了四个月的停薪留职，八月份出发，在欧洲、非洲、东南亚环游一圈。只有大体的方向，没有具体的计划。哈哈哈，真羡慕啊。我向来知道他是个 adventurer，但是没想到能如此洒脱，佩服。</li>
  <li>旅途回来，这个月报复性地连着打了十二天网球，每天八点半到十一点，两个多小时。运动已经成了惯性，身体处在疲惫又渴望的状态。上一次有这种心里长草想去运动还是在高中，开始痴迷篮球的阶段。</li>
  <li>安妮很快适应了回家的日子，和各个小伙伴享受着夏天，玩的不亦乐乎。最近的新技能是 terrible two 的副产品 – 讨价还价，“妈妈，我再玩一会儿”，“爸爸，再玩一分钟”，“阿婆，再吃一个”。好在这些短暂剂量的理性，也能让她听话，明白适可而止。当然，大不了就趴在地上打滚呗，阿妮的下线跟地表齐平。另外，经历了一周的适应，她很快回到了去幼儿园的节奏。早上会有些心烦，看着谁都要抱抱，不想去幼儿园。但是每天去接，老师都说安妮一天没哭，玩的很好，连午觉都睡的很踏实。</li>
  <li>周日早起，全程见证了温网阿卡新王登基。作为小徳球迷，五个小时的麓战失败，真的很惋惜，尤其在第二盘的抢七，6：5领先的情况下两个罕见的反手挂网，胜负手葬送了整场比赛。我很喜欢小徳输球后的采访，非常有风度地提及自己拿过的几个冠军也都是毫厘之间，这次的失利并没有太多怨言。然后，以阿卡的实力和小徳的年龄，我不知道是不是还会有 24 冠。我希望也相信会有。
<img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202307221521429.jpeg" alt="" /></li>
</ul>

<h1 id="w26-0626---0702">W26 (06/26 - 07/02)</h1>

<ul>
  <li>熟悉回来的节奏。收拾屋子，倒时差，上班，打网球，遛狗，遛娃，慢慢适应居家的节奏。告别了这一个月在国内的短裤，穿上长裤，正是夏天将至的舒服气候。带安妮见她的好朋友小幸福，跟山汇一家去湖边，和小白公瑾在家里烧烤。</li>
</ul>

<p><img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202307041538087.jpeg" alt="" /></p>

<h1 id="w21---w25-0522---0625">W21 - W25 (05/22 - 06/25)</h1>

<p>回国之旅，05/29 - 06/26。上次回国是2018年底回去结婚，之后一个突如其来的疫情，剥走了四年多的时光。很幸运疫情没有让我和身边人的健康遭受摧残， 但是和亲戚朋友的许久未见，以及相对单一的生活体验，让我深感有一部分生活是缺失的。这次我们俩请了一个月的假期，带上安妮，回国走一遭。</p>

<p>我们走了上海，嵊州（喜福家），重庆（和成都），沈阳，四平（我家），几乎每个地方四天，最后在北京停留一天，然后返程。行程紧凑，一直在路上。喜福落地第二天就身体吃不消，我坚挺到了一个礼拜后的重庆，在串串香吃嗨了，斗胆涮了两片大耗菇，吃到嘴里的爆汁（油）感我到现在还记得， 第二天就上吐下泻，胃开始罢工，做体操似的拧来拧去，休整了两天才算停歇。我们以为有一个月充足时光，实际上很快就被时间赶着走。情绪也是起起落落，我和喜福不断鼓励安慰对方，面对亲戚朋友的欣喜，以及再次离别的感伤。</p>

<p>安妮的表现很好。去程十多个小时的飞机睡了九个小时，回来倒是小精神上头，十个小时全程无歇地放电，直到下飞机开始倒头大睡。安妮没有跟着我们奔波，一半的时间在外婆家，一半的时间奶奶家。中间我带着她从杭州飞回长春，她一直很开心，直到飞机起飞，身体不适和精神紧张，一个劲儿地喊要回“家家”，“回Nikki家家”，我只能抱着她在飞机的最后排任她奔溃，哭了半小时，然后伴着疲惫睡去。东北话有个词叫“芬儿芬儿的”，那种哭起来不止半抽抽的状态，她在睡着的前半个小时还一直“芬儿芬儿的”。唉，当然不能怪她，都是爸妈的要求才带着你去不远万里的地方，然后伴随你长大，这些记忆会变的一干二净。好的地方是，我们这一个月都肉眼可见安妮在成长，她遗传了我们家大粗腿的优良基因，奔着胖丫的方向迈了肉墩墩的一步。一些简单的句子能被她拼凑出来，开始说一些没头脑但是很精彩的话。Terrible two 展露苗头，她对世界有了非常清晰的认识，就是要围着她的意愿运行。”不“，是最常用的词，在她触及的方方面面，建立了边界， 变成她的城堡。任何人胆敢质疑，瞬间变脸，上头，更有甚时，软骨症上身，瘫到地上嚎啕大哭。我们自然要经历各种无奈，但整体上相信这是她成长的一部分。她纯真甜美的微笑更加灿烂，慰藉着我们所有人。</p>

<p>这一路回国的感慨有一些，非常零碎。
* 大家的开车风格依然彪悍，我完全没法无缝切换到丛林法则的驾驶模式，所以一路避免开车。我在上海见到过礼让行人的汽车，但是多数时候，你走在绿灯的斑马线，还是要倍加小心。更不要提我在老家有一次带安妮遛弯，抱着她过马路，很远见到一辆车，我”判断“应该有足够的时间走到马路对面，可是刚走到一半，发现这辆车一直在加速，最后一脚油门贴着我面前穿过。我记得加拿大的驾照考试的开篇就是一句，Driving is a privilege，国内的司机们真是把开车当”特权“，在认真享用。
* 无论几点都能看到奔波或是刚刚结束奔波的人们，在高架，在地铁站附近，在烧烤摊。以前我刚学到 hustling 这个词的时候不是很理解，但是在国内看到大家的生活状态，这个词一下蹦了出来。我感觉大家都在认真付出辛劳，以前是为了生计，现在是为了更好的生活。即使，大多数人各方面生活已经比十年前好了太多太多，但是不够，而且更加不够。上海路上超过一半的电动车，我叫不上名字，但是慢慢熟悉，了解到它们各种 fancy 的功能和外型，一直都在抓着人眼球；在北京上海，走到熟悉的地方，查查房子的价钱，当然不会让我失望，想想这个城市密密麻麻的高楼，有多少人被房子套牢，而又有多少准备被套牢；在我的老家四平，在长春，在北京，跟朋友聊天避免不了孩子的教育，没有人主动着卷，都是被裹挟，上路了就没法停止。
* 四五年没回来，在喜福的老家，嵊州，绍兴下边的县级市，体验到了这个城市飞速的发展。从前在城区边的剡溪变成了中心，河另一端的新城有很多高档的住宅和购物中心。她的朋友也有很多会选择回到老家，在体制内、外都有位置和出路。这个城市背山，中间有水穿过，房价不过分，让我俩甚至畅想了下生活在此的感受。反观回到我的老家，四平，吉林省的第三大城市，我尽可能地骑车和走路丈量着城市，让好多记忆重新涌上心头。也许是太过熟悉，我几乎感受不到变化。满大街的车停在人行路上，路过的大爷问我去山门的路怎么走，体制内的工作还是大家的首选，年轻人从小地方来到这里，然后离开去往更大的城市。
* 感谢阿咪帮我们全程照看 Nikki 和赵四。6.21 Nikki 的四岁生日，山汇领着毛豆和莎莎，带 Nikki 去吃 Rocky Piont 冰淇淋庆祝。我俩的 6.22 五周年纪念日正赶在四平的家，有爸妈和老姑见证，深感幸福。</p>

<p>从国内回来，好像两个世界，没有好和不好，只是各有不同。第一个早晨，我在梦中听到狗叫，以为是在北京的民俗邻居家狗叫，直到我睁眼反映了半晌，看到了 Nikki，这不是我们家的傻狗？！适应了两天，我和喜福聊天，觉着生活又安静了下来，一切变得很简单。我们很疲惫，但是有足够多的日子让我们平静地生活，然后期待再次踏上旅程。</p>

<p><img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202307041515281.jpeg" alt="" />
<img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202307041515632.jpeg" alt="" />
<img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202307041516527.jpeg" alt="" /></p>

<h1 id="w20-0515---0521">W20 (05/15 - 05/21)</h1>
<ul>
  <li>工作异常忙碌，要在两周内 wrap up 手头的工作，为接下来的假期做好准备。网球赛把自己打成半残状态，休养生息。安妮在夏天奔跑，胖乎乎的小腿和脸上，到处挂彩。</li>
  <li>断断续续和喜福看了几个礼拜漫长的季节，完结，非常喜欢。范伟贡献了最棒的表扬，其他几个配角也都不错。辛爽的作品很有电影感，尤其倒数第二集，几个场景都写的异常有趣。三个警察相聚的烤肉戏是我的最爱，没有一句废话，讥讽相对，全是伤害。作为80后，那个年代的特质是我对世界最初的印象，现实是更简陋粗粒的存在，我也有幸跟着剧回去徜徉了一次。
<img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202305221348641.JPG" alt="" /></li>
</ul>

<h1 id="w19-0508---0514">W19 (05/08 - 05/14)</h1>

<ul>
  <li>全公司半年一次的聚会（网友见面）选在了 Montreal。四天时间，集中的、突击的，把公司八十多个人都简单认识个遍。各别比较聊得来，多数只是把 Slack 的名字和真身对应起来。整体上，会议有点多，留给大家自由活动的时间略少。住在 Downtown 的几天，不断在附近遛弯，比上次来对这个城市有了更好的印象。摩天大楼间，常常遇见古老的建筑，尤其是哥特教堂。虽然也就两三百年的历史，但是这建筑风格在加拿大的其他城市几乎没有。走在不熟悉的地方，我总是习惯性地设想生活在别处，例如，生活在 Montreal 的 DT 每天会是什么样，对这个城市更加着迷，还是更加肯定我对城乡结合部的向往。</li>
  <li>安妮出生后第一次不在她身边，每天期待着晚上和她短暂的视频，她的“爸比”叫的崇洋媚外，但是分外好听。她什么时候会对这个世界建立虚构的认识，例如思念。她对着手机笑呵呵的傻笑，不明所以地聆听、观看两千公里外的我，单纯地享受着虚拟的连接，而我只想克服这距离，冲回去要一个真实的拥抱。而到底是谁在拥有真实的体验？</li>
  <li>Richmond Open 开始了，人生第一次网球比赛，在 RTC 3.0 比赛对阵 Mike。顶着烈日，苦战三个多小时，遗憾在抢七败北。但是，我好开心。比赛前的紧张我已经好久没有体会，比赛中从不适到放松，到力竭，到腿上每一块肌肉都大呼小叫，再到最后决战时刻，小心翼翼又想放手一搏承担风险。我很欣慰自己没有纠结于结果，这个过程，积累了无数有用的经验，对的起自己一年的练习。</li>
</ul>

<p><img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202305212114729.jpeg" alt="" /></p>

<h1 id="w18-0501---0507">W18 (05/01 - 05/07)</h1>

<ul>
  <li>下周全公司去 Montreal 团建（网友见面），这周心里长草，无心工作。一是在疯狂练习网球，另外在商量回国行程，做各种准备。基本敲定了路线，上海，嵊州，重庆，四平，北京。28天的时间，原本以为很充足，但是仔细一算完全不够。为了节省旅途，把两波朋友先后安排在了重庆，九天，变成了我行程最长的一段。另外，我应该要备着马应龙了。</li>
  <li>周五是喜福三十三岁生日，全家人的节日。晚上在麻六给川渝之行热了个身，回来一起吃蛋糕，打麻将。安妮看大家过生日的样子特别搞笑，蜡烛点起来，坐在妈妈腿上，跟大家拍手唱歌，蒙的不行，直到蜡烛吹灭，她分来一小块蛋糕，露出甜甜的微笑。</li>
  <li>安妮这一个月一直小病不断，摸不清是不是幼儿园传染来的手足口，低烧了一周，终于好了，但是鼻涕就没断过。周六带她去 Oh My Land ，是属于我俩的独有时间，在游乐场我疲于奔命，跟着她跑东跑西，但是到来回路上我是车里的司机，她不吝啬哭泣和喊叫，也给我同样多的回应和欢笑。
<img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202305131337247.jpeg" alt="" /></li>
</ul>

<h1 id="w17-0424---0430">W17 (04/24 - 04/30)</h1>

<ul>
  <li>这一周工作都在忙 auth attack，两个 incident，还有各种后续。我也是边做边学，一点点把各种 security 相关的知识补全。虽然说不上那么感兴趣，但还是挺有趣的。</li>
  <li>天气状况急转直上，周六冲到了 26 度，直接进入夏天。四月份就这么过去，忙碌奔波的五六月就要来临。全家人一起买东西，各种安排回国计划和行程。我内心是充满期待，但越是临近，也略微不安。打破安逸的生活节奏，见到久违的亲戚朋友，相聚又离别，情绪和胃，一直激荡翻滚。尤其还有安妮，要在黑漆漆飞在空中的房子住十多个小时，去地球的另一边，见她完全陌生的世界。</li>
</ul>

<p><img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202305011204102.JPG" alt="" /></p>

<h1 id="w16-0417---0423">W16 (04/17 - 04/23)</h1>

<ul>
  <li>安妮北进入到略微磨人的阶段，每天常规操作是检查所有抽屉，追着最好说话的爷爷要吃喝，对想要的事情指指点点，口齿不清但是哭腔上脸。我们需要统一方针如何处理小妮子的不良风气。</li>
  <li>这周打了四次网球，非常开心。连续每周六晚上了半年的 3.0 Clinics 结束，稳定性在提升，战术在一点点体会。这种蜗牛般的进步，会在某一天某一个瞬间的领悟有所体现。希望不会太远。
<img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202304242159005.jpeg" alt="" /></li>
</ul>

<h1 id="w14-15-0403---0416">W14-15 (04/03 - 04/16)</h1>

<ul>
  <li>工作很紧凑，有压力也有乐趣。周五 oncall day off，难得多一天休息。去试验了新买的网球机，然后全家出动，赶在下一段连绵的阴雨天气前，花了一整个下午把前后院的草地弄好。</li>
  <li>我跟阿咪的 Fifa23 打出了一波无法比拟的连胜，最少十场吧，5-4成了我们熟悉的领域，只要把敌人拽到这个区间，剩下就是我们的表演时间。</li>
  <li>被我爸一度认为是客服（因为工作太过轻松）的喜福拿到了今年大笔的加薪，周四一起去烤鱼庆祝。</li>
  <li>周末兴致高昂地报名了 Richmond Open，第一个网球比赛，在五月份。我对成绩没有过多期待，只是借机给自己寻找比赛的刺激，很可能被打趴，但也很高兴去长见识。网球是个面向自身的运动，心理占了很大的比重，我能想象到在炎炎烈日下，在比分落后的时，在接近胜利的一刻，听到内心的声音。</li>
</ul>

<p><img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202304181804479.JPG" alt="" /></p>

<h1 id="w13-0327---0402">W13 (03/27 - 04/02)</h1>
<ul>
  <li>这周工作有点上头，零散琐碎事儿把我按在桌前，开启了一个新的大项目，最后一天给自己奖励把时间全花在了配置 Nvim。</li>
  <li>今年最后一次 Whistler，在大粉雪堆里完全滑不动，摔了几跤，还好无大碍。阿咪就惨了，临走前非要跳坡，谁成想第一个包后是更大的包，只能使用传统艺能劈腿刹。停是停住了，膝盖报废了。祈福 🕯️。</li>
  <li>阿妮即将结束半天在幼儿园的日子，最近已经摸清了规律，到了十二点听到一点动静，都情绪化上头，开始表演哭腔喊妈。见到有人接就喜笑颜开，跟其他小朋友摆手说拜。下周你就要在幼儿园睡午觉啦，看到你一点点进步，真为你开心。</li>
</ul>

<p><img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202304051612120.jpeg" alt="" /></p>

<h1 id="w12-0320---0326">W12 (03/20 - 03/26)</h1>
<ul>
  <li>五月让人充满的期待。方小姐收到了学校的 offer，坐等拿学签五月份登陆；山汇老婆孩子终于能团聚；Stefan 和 Clare 来温哥华玩耍；我们全家订了五月底的回国机票，一个月的假期，六月底回来。</li>
  <li>周六大部队今年第一次 Whistler 汇合，公瑾带我们尝试了双黑野路小树林，最后一程从 Blackcomb Bowl 直到山底缆车，全程10km，滑行净时间 27 分钟，尤其老天赏脸，这一路拨云见日，太美了。</li>
</ul>

<p><img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202303291727784.jpeg" alt="" /></p>

<h1 id="w11-0313---0319">W11 (03/13 - 03/19)</h1>

<ul>
  <li>周三找 Jarrod 做了一节网球 assessment，ground stroke 3.5，serving &amp; volley 3.0，整体就算是 3.0 水平了。我很开心，去年夏天捡起网球，参加课程，跟教练练习，认识新朋友，整个过程我都很享受。我没有一味追求最快的进步，我希望每周都能稳定、有条不紊地乐在其中。</li>
  <li>周末天气渐暖，春意盎然，全家去了久违的 Buntzen，带安妮玩沙子，看狗子自由泳。下午回来买肉，准备材料，春天由一顿美味的烧烤开始。</li>
  <li>安妮语言爆发，嘟嘟囔囔，叨逼叨逼，可以蹦出”还要“，”小妈妈“，”爸爸抱抱宝宝“这种组和词组。在路上，她也能安静地欣赏风景，只是有时是皱褶眉头，明显掉进了自己的小心思，疑问、不安、又深邃地看着这个世界。
<img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202303201444762.jpeg" alt="" /></li>
</ul>

<h1 id="w10-0306---0312">W10 (03/06 - 03/12)</h1>

<ul>
  <li>周四是妈妈六十岁生日，全家一起准备礼物，享受海鲜大餐，蛋糕，还有麻将。这个数字像是我对三十的感受，以为它很远，但是已经来临，又在身后远去。最近在安妮身上享受的美好，诸如张开双臂等着她扑进我怀里，妈妈也一定有很多这样的瞬间，只是都成了记忆。某一个时刻我长大，疏远，生活在自己的世界，她被迫接受，慢慢等待，直到我回头，再次冲进她怀里。</li>
  <li>周末继续 Whistler，带着Simon和阿咪刷了几次黑道，有一瞬间在山背后趟着松散的粉雪，和阳光一起穿梭在树林，四下无人，寂静无声，我感到无比的平静。</li>
</ul>

<p><img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202303131821128.jpeg" alt="" /></p>

<h1 id="w9-0227---0305">W9 (02/27 - 03/05)</h1>

<ul>
  <li>这周工作很有热情，或者被迫很有热情地完成了不少东西。有点疲倦，又很享受把事情完成安顿好的满足。</li>
  <li>大雪过后，气温没有很快回升融化路上的积雪，到了周末还让我能在大太阳下雪地里散步。这可能是我对冬天最美好的回忆。踩在雪地的沙沙声也能帮我拉回从前，翻涌出很多丢失不见的碎片。</li>
  <li>安妮开始了每周五天的 day care，从早上起床一路哭喊，到焦躁不安见到只有离别时哭着再见，再到接受现实，稍微皱眉然后头也不回跟着老师进去。这个过程是苦涩的，但是结果欣慰。陪伴、见证她成长，不会在她的记忆里留下任何印记，但在我们每个人的心底都是美好的故事和片段。</li>
</ul>

<p><img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202303061336492.jpeg" alt="" /></p>

<h1 id="w8-0220---0226">W8 (02/20 - 02/26)</h1>
<ul>
  <li>喜福各种查看攻略，准备材料，周二去耐心排队了四个小时，终于给安妮办好了回国的签证。简单定了下行程，争取五月或者六月回国玩耍。</li>
  <li>周四和喜福 dating，去看了流浪地球2然后大味麻辣烫。电影基本符合预期，特效满分，让我有种里边的文字是英翻中的后期制作，情节平庸，难逃星际穿越还有些政治因素的影响。</li>
  <li>周末和Simon、阿咪顶着暴风雪，颤颤巍巍地开到了 Whistler，还有小白公瑾，享受了一天完美雪景。</li>
  <li>安妮最近可能到了语言爆发期，不再是喃喃细语，迅速进入了叨逼叨的可爱阶段。她嘟嘟囔囔，对猫对狗对外边的风景；她从幼儿园学习了如何说 No 以及优雅地叫 Daddy；她精进已掌握的优先词汇，用呐喊表达情绪，也在某些奇怪的音节上，说出了地道的歪果仁口音。</li>
</ul>

<p><img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202302271644070.jpeg" alt="" /></p>

<h1 id="w7-0213---0219">W7 (02/13 - 02/19)</h1>
<ul>
  <li>周二下午放晴，停下工作，全家一起去运动场，网球、篮球、足球，我们十八般武艺，样样不精通。</li>
  <li>周六董哥来家里做客，瞬间成了 Annie 最爱的阿姨。粘着不放手，睡觉也要带走。正好阿咪从国内回来，晚上好多人一起吃饭，然后回家打麻将。</li>
  <li>周末全家去了 Bloedel Conservatory，在 Queen Elizebeth Park 的山顶。这地方是有着穹顶的温室大棚，没想到里边住着热带的花草和五颜六色的金刚鹦鹉。安妮早就耐不住性子，要下来奔跑，实际上是逃窜，像里边的小老鼠一样在缝隙中穿梭并快乐着。</li>
</ul>

<p><img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202302200821076.jpeg" alt="" /></p>

<h1 id="w6-0206---0212">W6 (02/06 - 02/12)</h1>
<ul>
  <li>周二晚上陪喜福去看了池子的脱口秀。好久没在见到这么多中国人了，也是第一次在公共场合听到如此多政治不正确，大放厥词，非常淋漓尽致。很喜欢池子的一个段子，讲早年间互联网环境相对开放，他在微博给粉丝抽奖，十位幸运观众收到了他亲手邮寄的宪法。但是！谁成想转眼间这十本已成了绝版。</li>
  <li>周末见证了 Oliveria (TIME，李培楠) 在 IEM 顶着 21 的排位，小组艰难出线，淘汰赛连克世界第一虫神人 Reynor, Hero and Maru，勇猛夺冠，堪称神级。我也久久不能平复，一遍遍看不同版本的回放，听一路解说的惊呼。能有幸见证普通人下等马的逆袭，走上人生巅峰， 真实太刺激了。</li>
  <li>我最近脑中不断回顾的瞬间是，前一周我坐在地毯上问安妮爸爸的尾巴巴在哪，她指着我身后，然后跑过来要作我的尾巴巴。我开始问，安妮宝宝在哪里，她躲在我身后跟我玩起了捉迷藏，几个回合后她斜着身子出现在我的眼前，笑眯眯又得意洋洋的盯着我，瞬间融化我的心。</li>
  <li>安妮小时候收到的第一个小娃娃我们给她起名叫 Anna，也正好符合她奶奶教她“哎呀妈呀”的发音。她最近去幼儿园也碰巧遇到了一个叫 Anna 的小朋友，比她还小两个月。上周在车上，Spotify 蹦出了一首歌，喜福跟我说叫 All About Anna，坐在后排的她悄悄记住了。放到下一首的时候她就按耐不住了，“Anna, Anna, 没“。所以，最近我们在车里、在家都在无限循环这首歌。</li>
</ul>

<p><img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202302131541304.jpeg" alt="" /></p>

<h1 id="w5-0130---0205">W5 (01/30 - 02/05)</h1>
<ul>
  <li>来新公司的第一个大项目是做数据迁移，早已准备就绪，这周的实施没有差错，非常顺利。</li>
  <li>周五幸福家来玩，周末全家人逛白石，Richmond，山汇请大家吃 Gyu-kaku 欢度元宵节。</li>
  <li>安妮的 Day Care 进入第二周，非常强烈地显现出分离焦虑。哭喊着不要上车， 再哭喊着下车，直到狠心把她交给老师，我走远才听不到哭声。她的脆弱体现在已经抱着她的时候喊“抱抱”，任何人不在都心神不宁，但只要回来就又习以为常。没什么办法，只能坚持，希望每一次别离都有让她变坚强。</li>
</ul>

<p><img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202302060919148.JPG" alt="" /></p>

<h1 id="w4-0123---0129">W4 (01/23 - 01/29)</h1>
<ul>
  <li>这周的工作很愉快，充实、努力地学习、推进，把一切安排妥当后，是种深刻的满足，让我在周末可以无限放飞。</li>
  <li>一个月的滑雪课告一段落了，跟着 Peter 每节课都有进步一些，我自觉有了一些质的提高，尤其在 carving 和对滑雪的理解上。这个雪季可以继续做些课上的练习，或者自己看视频不断探索，总之这个课程送我到了另一个阶段，让我有基础和能力去巩固和尝试很多新东西。</li>
  <li>周日我们的飞行员朋友 Calvin 帮忙约了教练，带我、喜福和山汇一起去天上飞了一圈。从 Abbotsford 到 Chilliwack，在空中见到了硕大的 Harrison Lake，云朵在高山留下透过百叶窗一样的影子，还有连绵的雪山在同一个高度开始戴上白帽。</li>
  <li>安妮第一周去 day care。整体表现良好，处在摸索、徘徊与分离焦虑的混沌状况。周三我们第一次尝试离开，跟她拜拜关上房门，听到了安妮撕心裂肺的哭泣，我俩在门外聆互相安慰，只能转身走开。现在她可以独自跟着小朋友、老师做活动玩耍，但是忙碌过后一瞬间的片刻安宁，会让她脑中突然回想起我是谁我在哪的终极问题，脱口一句“妈妈”然后嚎啕大哭。</li>
  <li>安妮学会了说“安妮”，用她东北口音“嗯呢”的变种。周日晚上妈妈教她在冰箱上的小记事本写名字，她跟着有模有样画出一团黑色线条，然后大喊“哇，安妮”，逗笑了全家人。
<img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202301301022811.jpeg" alt="" /></li>
</ul>

<h1 id="w3-0117---0122">W3 (01/17 - 01/22)</h1>
<ul>
  <li>休假三天，陪山汇适应生活处理琐事，陪 Delta 和 Alex 吃饭滑雪。</li>
  <li>滑雪课上有了不少进步，尤其在 carving 上。Peter 布置的各种练习我都能很好地实践然后领悟要领，跟三周前相比有了质的提升。</li>
  <li>除夕夜邀请小白和公瑾，还有山汇在家，八个人一起过大年，喝酒聊天。新的一年没啥期待，继续这样平稳、有序、静静地跟家人一起享受时光，我就无比知足。
<img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202301222048426.jpeg" alt="" /></li>
</ul>

<h1 id="w2-0109---0116">W2 (01/09 - 01/16)</h1>

<ul>
  <li>这周的滑雪课提前做了些功课，脑海里有了正确的认识，周六上课感受到了 edging &amp; carving。这一丝丝的进步感觉很奇妙，我会继续练习、探索。</li>
  <li>跟喜福看完了 Better Call Saul，我很喜欢它的慢步调，重人物轻情节。也不像十年多前的 Breaking Bad，有更多美术风格上的造诣。我对 Kim 还是颇有微词，后两季晋升为双主角，缺少足够的铺垫。给我的感受是她在变化，而不是像其他人物那样与生俱来，一以贯之。</li>
  <li>周日山汇终于落地，各方面手续都很顺利。四年不见，换来未来更长久的路一起走。</li>
  <li>周末和喜福带 Annie 去参加了社区中心的项目 Baby &amp; Me，她略微羞怯，但是过一会儿也能收放自如，算是给马上到来的 day care 预热。</li>
</ul>

<p><img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202301191508202.jpeg" alt="" /></p>

<h1 id="w1-0102---0108">W1 (01/02 - 01/08)</h1>

<ul>
  <li>Work highlights: Get to know Pablo and deep dive with him on Auth0</li>
  <li>帮妈妈重新申请了 Super VISA 🤞</li>
  <li>Weekend Warriors，周六白天滑雪，晚上网球课程。这个强度的运动在我的体力边缘，力竭的感觉很爽。</li>
  <li>下周末山汇的到来以及过年让我充满期待</li>
  <li>我和喜福开始新的尝试，每周四晚上一个半小时，<a href="https://docs.google.com/document/d/1KLki89yql7t6PRfRy-qXlRwXtyyhK26os5rx1xVl3Gs/edit">Let’s talk about Annie</a>。这周一起回顾育儿百科幼儿期，整理出一个列表的注意事项，然后和爸妈一起分享。</li>
  <li>安妮小宝宝这周开始崩连词了，“爷爷抱抱”，“爸爸妈妈”，以及模糊不堪的”我不知道“。</li>
  <li>周末夕屿小弟弟来，安妮表现的很好，不拘束但也不疯癫，不断拿礼物给弟弟，跟大家都有互动，活像个在树立榜样的大姐姐。</li>
</ul>

<p><img src="https://raw.githubusercontent.com/ifyouseewendy/image-repo/master/PicGo/202301091101196.jpeg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I've Done in 2022]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2022/12/31/what-ive-done-in-2022/"/>
    <updated>2022-12-31T09:58:49-08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2022/12/31/what-ive-done-in-2022</id>
    <content type="html"><![CDATA[<p>这一年断了记日记的习惯，没了流水账，这时候才凸显出它的用处。我坐在桌前回想这过去的一年，缺少很多细节，只有一些模糊的印象，但我很明确我拥有一个美好的 2022。</p>

<p>工作上一波三折。休完亲子假回来，最喜欢的老板离职，团队的方向被上边牵着走，很多无用功做完没人认可。我的心态倒是调整的不错，重新梳理自己的工作方式，设计每天的时间安排，只为最终明确的目标：<strong>我要工作地开心</strong>。我不想去适应工作，而是寻找怎么让工作更好地适应自己。效果显著，工作生活端的很平。同时，我和喜福很早也嗅到了在现有公司的疲惫，上半年开始一起刷题，之后准备系统设计。九月份的假期回来，面对我们组的混乱，我毅然跳进市场。用一个半月的时间，尽可能多地尝试面试，不安地看着各大公司开始疯狂裁员，焦急地推进进度。好在最后收到心满意足的 offer，一家 A 轮的创业公司 <a href="https://www.cointracker.io/">CoinTarcker</a>。几个因素做了这个决定：人，有我非常信任的前老板和同事；钱；前景,虽然整体上我对虚拟货币没有信仰，但以我浅薄的了解，我愿意相信它在技术上有创新和长远价值。</p>

<p>生活上是团聚的一年。年初岳父岳母到来，春天爸爸退休也来团聚，至此这一年多数时候是七个人的大家庭。我从没想象过这个场景，但是疫情切碎了时空让我们三年不见，那我们只能报复性的相聚。有了父母们的帮忙，我和喜福主要把重心放在如何让这个家融洽地运转。即使每个人都抱着好的愿望，但是生活在一个屋檐下总归需要过度然后寻找各自舒适的边界。慢慢两个月过后，我能听到岳父不再念叨国内的生活，开始说起每天都过的好快。到了夏天，大家庭完全磨合好，一起过了一个无比美丽的夏天。爸妈们慢慢结交了些朋友，我们也给每个礼拜找到了固定的节奏：周二上午游泳，周四晚上外出吃饭，周日打麻将。最重要的，周六全家出游，去湖边去草地野餐露营。今年才体会到在温哥华生活的价值:不论贫富阶级，每个人都平等地享受自然的馈赠， 只要你愿意走出去。年底岳父母回国前，我们集体恒源祥，又一起经历了一段共患难的生活。现在回头想，这样的时光是无比奢侈的，当他们都健康，当她还在糊涂地成长，而我们没有任何负担和压力。</p>

<p>安妮小姑娘，很难想象这一年的变化有多大。我翻看照片，年初时候刚刚能抬起头，又胖又圆，逐渐地出了尖下巴，跳了双眼皮，牙牙也越笑越多。我是想不到，你这个小宝宝怎么就变的那那那那那么好看惹人爱。我喜欢你在早晨放肆地在赵四身边睡大觉，看到赵四就发出呢喃，把脸凑过去要亲亲，直到后来把“猫猫”比“妈妈”喊的还响亮；给 Nikki 贴上满头贴纸，抱抱，然后骑上去指指点点；我在滑雪场的缆车上看到你的视频，第一次听你清脆地喊爸爸；坐在车里久了，就不安地嚎啕大哭，竭斯底里，搞得全车大人都紧张兮兮，狼狈不堪；不知道从里习得的假笑，在必要的场合礼貌性地挤眉弄眼，偶尔也在人群的欢笑之后，跟着大笑，社会的不行；发烧的时候虚弱柔软，失去活力后给了大家片刻安静，也揪起大家的心，跟着着急；听到“世上只有妈妈好的歌声”就放下手头忙碌，头也不回地拉着奶奶跑到房间的小床上躺好；你奶声奶气地说“抱抱”，决绝犀利地说“不”，逐步学习叫出然后喊出家里每个人的名字；我最喜欢的还是你学会走路的一瞬间，肉嘟的大腿迈出有力的步伐，全家人围观喝彩，而你腼腆又不失骄傲地抬起头，所有的阳光都洒到你身上。</p>

<p>关于自己的空闲时间，大部分精力花在了出门运动上。年初时候跟随双飞二人组一起滑雪到四月。第一次 Whistler 的体验太过友好，让我终于体会到那些雪瘾患者也是身不由己。夏天高磊大神带我和爸爬了一次大温最长的单日徒步，Garibaldi Panarama Ridge，30公里十小时，见识到了罕无人迹的高山湖泊，好像塞尔达里的世界，并且第一次走路到达的身体嗨，轻盈，舒适，走到不想停下。下半年重新拾起疫情前开始的网球练习，我找到了自己的热情，每周都盼望着去上课跟朋友约球。另外也验证了 杰夫大大去年跟我讲的，“要找到组织”。身边有一群充满热情的朋友，让一切都变得简单。年底的卡塔尔世界杯，在意大利黯然神伤之后，我选择支持梅老板。和去年的欧锦赛如出一辙，一句“阿根廷是🏆”从赛前喊道了史诗般的决赛，好久没看这么刺激的比赛了，太费心脏。梅老板功德圆满，完美。</p>

<p>回想这一年，我对生活充满感激。我不期待明年或者未来，我期待每一个具体的日子，有热爱的工作和充满爱的家，我很幸福。</p>

<h2 id="section">一些美好的瞬间</h2>

<p>全家福
<img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2022/whole-family.jpg" alt="whole-family" /></p>

<p>安妮和爷爷奶奶外公外婆
<img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2022/annie-and-grand-parents.jpg" alt="annie-and-grand-parents" /></p>

<p>安妮和爸妈
<img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2022/annie-and-parents.jpg" alt="annie-and-parents" /></p>

<p>安妮和妈妈
<img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2022/annie-and-ma.jpg" alt="annie-and-ma" /></p>

<p>安妮和爸爸
<img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2022/annie-and-pa.jpg" alt="annie-and-pa" /></p>

<p>安妮和朋友
<img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2022/annie-and-friends.jpg" alt="annie-and-friends" /></p>

<p>安妮和猫狗
<img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2022/annie-and-pets.jpg" alt="annie-and-pets" /></p>

<p>安妮
<img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2022/annie1.jpg" alt="annie1" />
<img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2022/annie2.jpg" alt="annie2" />
<img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2022/annie3.jpg" alt="annie3" />
<img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2022/annie4.jpg" alt="annie4" />
<img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2022/annie5.jpg" alt="annie5" /></p>

<p>猫狗
<img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2022/pets.jpg" alt="pets" /></p>

<p>其他
<img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2022/other.jpg" alt="other" /></p>

<p>风景
<img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2022/scenary2.jpg" alt="scenary2" />
<img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2022/scenary3.jpg" alt="scenary3" />
<img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2022/scenary4.jpg" alt="scenary4" />
<img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2022/scenary1.jpg" alt="scenary1" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I've done in 2021]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2021/01/11/what-ive-done-in-2021/"/>
    <updated>2021-01-11T15:23:20-08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2021/01/11/what-ive-done-in-2021</id>
    <content type="html"><![CDATA[<blockquote>
  <p>A weekly log on my life and personal growth</p>
</blockquote>

<h2 id="section">2021 回顾</h2>

<p><strong>和爸妈团聚，迎接安妮出生</strong>。爸妈五月到达，带他们熟悉新城市，四处闲逛，在家烧烤斗地主。我的胃很快恢复了家乡记忆，每天都是一场关于干饭的战斗。八月盛夏，一起焦躁不安地等待，直到安妮顺利抵达。她带着孱弱的哭声来到世间，没有质问，只是轻轻在说“是你们带我来的？”，肩上的重担从无形到有形，我们不让她看见地挠头，然后坚定又自信地看着她”是的，宝贝“。自此生活进入另一种模式，从忙碌，有条不紊，到建立秩序。以安妮为核心，让大家尽可能舒适地进入新的角色。我发现自己不只晋升为新手爸爸，面对老小，我不经意间成为这个家真正的核心。当然早有人发明了那个头衔——中年人。我不讨厌这个称号，只要接受并找到正确的理解。曾经作为骚年，我心底的骄傲是靠自己努力拼搏眼前的一切，而进入中年，我在寻找的骄傲是全心全意照顾好家人。作为新手父母和新手祖父母我们都在寻找各自的位置， 不断讨论统一思路，而启明星是小宝贝安妮，一点点褪却黄疸，神经性的咧嘴到自主的笑，腼腆微笑，眯眼大笑，嗯嗯啊啊，到放声尖叫嚎啕大哭。这个过程是琐碎又美好的。记录的意义在于定格这些瞬间，作为记忆的锚点，每次回顾都是新的体验。</p>

<p><strong>每周阅读一本书。</strong>我对书在认知上的一些<strong>改变</strong>：书本是信息浓度最高的载体。我曾经热衷于电影，回想看完星际穿越和朋友连续不停的讨论，看完盗梦空间走在寒风中听着自己脑子嗡嗡作响，都是无比美好的体验。但是如此信息量的电影，也难比一般书本所提供的信息那般细致详实。（当然了，电影的优势在于更直观感受上的愉悦）。除此之外，我相信书籍历久弥新，越经历时间考验的书越有价值；阅读的终极体验是愉悦思维；书籍比碎片化的文章更容易形成网络去除噪音；听有声书很难掌握节奏，不易略过无聊文字，也不易在重点处停下思考；电子书需要拿住阅读，一不小心就会拍脸；选择夜晚看书就会自然地戒掉晚饭的啤酒。对这个目标我也认识到了<strong>几点不足</strong>：时间的紧迫让我更倾向选择容易读的书；虚荣心作祟；产生幻觉，好像依靠阅读，在书本上画线记笔记就能积累知识。这一点尤其重要，所以新一年的实践我会注重追寻阅读的意义：停止豆瓣标记；依靠阅读获取信息，通过自我表达方式（说和写）帮自己形成更多的想法。</p>

<p>一些好书</p>

<ul>
  <li><a href="https://book.douban.com/subject/30216624/">How to Take Smart Notes (Ahrens, 2017)</a></li>
  <li><a href="https://book.douban.com/subject/27104959/">离开的，留下的 : 那不勒斯四部曲3 (埃莱娜·费兰特, 2013)</a></li>
  <li><a href="https://book.douban.com/subject/26986954/">新名字的故事：那不勒斯四部曲2 (埃莱娜·费兰特, 2012)</a></li>
  <li><a href="https://book.douban.com/subject/35426737/">吴军数学通识讲义 (吴军, 2021)</a></li>
  <li><a href="https://book.douban.com/subject/25920202/">泛若不系之舟 (傅真, 2014)</a></li>
  <li><a href="https://book.douban.com/subject/30144095/">海边的卡夫卡 (村上春树, 2002)</a></li>
  <li><a href="https://book.douban.com/subject/35025453/">失落的卫星 (刘子超, 2020)</a></li>
  <li><a href="https://book.douban.com/subject/34781358/">史记的读法 (杨照, 2019)</a></li>
  <li><a href="https://book.douban.com/subject/3831788/">逃离 (艾丽丝·门罗, 2009)</a></li>
  <li><a href="https://book.douban.com/subject/1440468/">漩涡 (伊藤润二, 1999)</a></li>
  <li><a href="https://book.douban.com/subject/26896878/">刀锋  (毛姆, 1944)</a></li>
  <li><a href="https://book.douban.com/subject/34840201/">你的孩子不是你的孩子 (吴晓乐, 2019)</a></li>
  <li><a href="https://book.douban.com/subject/27172839/">苏菲的世界 (乔斯坦·贾德, 1991)</a></li>
</ul>

<p><strong>认真打游戏：星际争霸2。</strong>本来是疫情和朋友找乐子玩红警，结果不知怎么就过渡到了星际2，二十岁时不入坑，三十岁后爬不出。开始也只是瞎玩，后来逐渐发现了新世界。原来那么多兵种、操作、战术需要学习，如何对战局做判断，该攻该守该狗，大量的经验积累最终体现在实时做出有效的判断上。一旦学习、练习、进步的闭环形成，我对游戏的快感就转移到了自我提高上。</p>

<p><strong>意大利是冠军。</strong>这个夏天，我从第一天就奔走呼喊“意大利是冠军！”。梦想是要有的，喊着喊着就成真了。这种体验在我的人生中还是比较稳定的，十来年出现一次（上一次 06 年），所以每一次来临都要用尽全力地嘶吼，“意大利是冠军”。</p>

<p><strong>新年的一点期待。</strong>1. 除了工作，停止追求效率。这些年的工作以及自我驱动，让我不自觉地在生活中过分在意时间与追求效率，恨不得站在马桶前还没尿完就开始冲水（我不会承认我有这个习惯）。而导致的结果就是不能尊重过程和享受时间，完成一件事是为了开启下一件事。希望自己慢下来，刻意练习这方面的肌肉，在特定的时间专注高效，在其他时间轻松惬意。2. 通过写作来学习。我现阶段对学习的理解是，用阅读作为输入，写作作为思考、消化、联结的过程，以此形成多想法。3. 探索如何有趣地做事。或者说如何克服结果导向。成长的过程有太多次为了大的小的目标，强迫自己依靠纪律去完成，而一旦达成，享受过短暂成就感后，就只想逃离，跑的越远越好，因为过程是苦涩的。我想探索在生活和工作中，把过程有趣当作重要评判标准，是否会有不同结果。最近我偶然对弹琴燃起兴致，刚刚在二手网站淘了台电子琴，在这个学习曲线异常陡峭的领域，我要怎么享受过程又做到坚持。其实心底更大的疑问是，如果我自己都做不好，以后要如何引导孩子去学这学那呢。4. 寻找第二个可能的职业。我对作为程序员是有热爱的，只是时常会想，未来那么多十年是否可以给自己更多身份。我在慢慢思考，找到两个大体方向和几个具体选择。基本上这会是个不断试错的过程，其实很有可能最终的答案揭晓我就是程序员的命。</p>

<h2 id="w52-1227---0102">W52 (12/27 - 01/02)</h2>

<ul>
  <li>这周还浸淫在大雪的氛围中，每天都是雪后无比晴朗的天，明亮耀眼。出门见了几波朋友，去公园和操场踏雪，在家里悠闲地吃喝。带妈妈去了一次 SFU 山上的公园，她嘴上说这雪在东北不是每年都见，真到地方就精神亢奋一屁股坐在雪地里拍照。所以说，雪才是东北银的集体回忆，跨越年代，既是风景也是阻碍，那种亲切感以及顺延出的记忆会一直都在。</li>
  <li>安妮的右双眼皮走丢了，就像来的那么突然。全家人扼腕叹息，来过又走的事实总让人更加难过。安妮不知不觉学会了聊天应答，嗯嗯啊啊，你说啥我都是这两句，给个笑脸，你自己体会含义。</li>
  <li>2021的最后一天，我对身体有了更深的领悟。下午在家和朋友聊天，忽然间发现我的第三只眼在觉醒，它的呼吸敏锐，而我第一次体会身体上的坐立难安。去网上冲浪一番后确诊，我痔了，在旧年的最后一天。尝试了几种解药，众里寻他，终与久闻大名的马先生相逢，在新年的第一天。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w52-collage.jpg" alt="w52-collage" /></p>

<h2 id="w51-1220---1226">W51 (12/20 - 12/26)</h2>

<ul>
  <li>圣诞节迎来今年最大一场雪，心情非常愉悦。我对圣诞没什么特殊的情谊，倒是见到雪就莫名的开心。试着理清楚为什么，想到这么几点：1. 单纯景色上的愉悦。明亮、干净、目之所及都统一穿起白套装，整齐又轻快；2. 走在雪地的感受。脚踩进雪地的咔嚓声音动听（穿矮帮靴脚感更佳）；凉爽的空气，吸进去畅快呼出来一团白气；迎面而来的雪花，不像雨水一样冷酷，而是漫漫飘飘的状态落在身上；3. 雪天的回忆。儿时滑冰的景象，去学校的路上，昏黄路灯下和朋友在雪地散歩。我对雪天没有阴雨天昏暗的记忆，全部是明亮的，即使偶有化雪时的泥泞，也是春天来临的信号。</li>
  <li>安妮最近习得的新技能，抱着妈妈的手臂吹气，发出噗噗的放屁声，哈哈大笑。</li>
  <li>周四的 #date-night 和喜福尝试了<a href="https://g.page/thedolarshopcanada?share">豆捞坊</a>，猪肚锅底鲜香，牛肉非常滑嫩，只是价格过分不值得。隔壁桌的爸爸穿戴商务套装，点了所有菜单上几个最贵的菜，对面坐着上中学的女儿，全程戴着耳机，相对无言。我跟喜福说，这是我最不希望到达的状态。</li>
  <li>这周的阅读是 <a href="https://book.douban.com/subject/30216624/">How to Take Smart Notes</a>，关于久闻的 Slip Box 笔记法以及对写作的影响，受益匪浅。自己回顾了现有的笔记体系，翻看了 https://zk.zettel.page/ 做更多了解，尝试了几个软件，选定 <a href="https://obsidian.md/">Obsidian</a> 开始尝试这个新方法。#weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w51-collage.jpg" alt="w51-collage" /></p>

<h2 id="w50-1213---1219">W50 (12/13 - 12/19)</h2>

<ul>
  <li>这周下了好几场雪。睁开眼看到外边白晃晃，带 Nikki 在公园疯跑，一起享受踩在雪地上咔嚓的声响，超级凉爽的空气，以及嘴巴呼出的白气。找了家雪具店把雪板和雪鞋调整好，准备月底开始走起。也难得见了好多朋友，圣诞将至，大家都有闲暇。</li>
  <li>周四的 #date-night 我们和 Vic, Lily 一起<a href="https://goo.gl/maps/rtn2am3viwVSKvS7A">耕食记</a>，他们也惊叹于这家书本一样的菜谱，翻着翻着就忘了前面的菜。这次的去骨炸小黄鱼非常棒。周末和喜福开始在 PS 上玩 <a href="https://www.hazelight.se/games/it-takes-two/">It Takes Two</a>，操作简单难度适中，玩过分手厨房后可以尝试这个来修复。</li>
  <li>这周的阅读是 <a href="https://www.goodreads.com/book/show/99107.Winnie_the_Pooh?from_search=true&amp;from_srp=true&amp;qid=fTbhi8x2ue&amp;rank=1">Winnie-the-Pooh</a>。几周前我跟 Ray 调侃 Winnie 熊因为长相问题被禁，他开心的不行， 反手给我买了这本书，说曾是他忙碌成人生活中抚慰心灵的良药。我很快读完，也认同这种说法。并不是我想象中单纯的儿童读物，而是颇有禅意的故事集。#weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w50-collage.jpg" alt="w50-collage" /></p>

<h2 id="w49-1206---1212">W49 (12/06 - 12/12)</h2>

<ul>
  <li>全家一起为安妮制定了戒夜奶计划，想办法拉长吃奶间隔，准备一整套睡前仪式，但是效果欠佳。后半夜的任何努力都需要极大的耐心，面对娃的终极武器——嘶吼哭闹，计划只能屈服给变化。</li>
  <li>最近一段时间日常的一天：起床，早饭，看书，午饭，遛狗，看娃，看书，晚饭，打游戏，哄孩子睡觉。</li>
  <li>周末早起看了 F1 大结局，无比期待 Ham 完成大逆转，剧情也是这么发展的，直到最后四圈，老天赏饭强行把奖杯给了 Max，好失落。本来我也不是 Ham 粉，但是今年的表现，包括这场失利后淡定又有风度的发言，让我见识了当代第一人的风采。</li>
  <li>周四的 #date-night 是<a href="https://g.page/yuanshotpot?share">袁记串串香</a>，味道没得说，只是上劲有点快，喜福回来就不行了，我到第二天也全面崩溃。</li>
  <li>本周阅读<a href="https://book.douban.com/subject/30208077/">禅与摩托车维修艺术</a>。这本书结构非常巧妙，在路上的旅程与讨论双线叙述，从摩托车维修过渡到禅修与各种哲学讨论。直到阅读完毕看了小册子，才明白这是发生在作者身上的“真人真事”，包括一人分饰两角。我没法完全明白作者的一些阐述，但是阅读过程中会蹦出有趣的思考。#weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w49-collage.jpg" alt="w49-collage" /></p>

<h2 id="w48-1129---1205">W48 (11/29 - 12/05)</h2>

<ul>
  <li>安妮马上四个月了，有了嘹亮的嗓门，这意味着嘹亮的笑声和撕心裂肺的哭声。她能坚定地挺起脖子，不再像汽车里的摇头小娃娃那般摇头晃脑，抱在怀里也不喜欢躺着看天，而是喜欢坐着，目光追随着前方或者眼前玩具。她看到妈妈和奶奶会给一个甜死人的笑，瞥见我的话看心情，偶尔发呆思考眼前的家伙是谁，偶尔聪慧占据高地认出了这个叫ba的男人，赏赐一个微笑。我和喜福开始尝试戒夜奶的行动，拉长她吃奶的间隔，在晚八点到早八点的时间段吃一到两次。争取在回去上班前实现这个愿望。</li>
  <li>周四的 #date-night 和喜福尝试了 <a href="https://goo.gl/maps/hFyd9DkNsjF1RNWcA">Kai Japanese Restaurant</a>，也许是好久不吃生的，我们都觉着他们家的 sashimi 很棒。</li>
  <li>这周的阅读是第四本<a href="https://book.douban.com/subject/30172069/">失踪的孩子</a>，完结了那不勒斯四部曲。这本中年危机加结尾，岁月的烦恼远多过甜蜜。整体上作者着眼于女性，但实际上在说的是人性。我有种错觉，就像一本书不会以幸福事件串联一样，一个人的一生是由一连串跳跃的悲剧，以及对它的反应定义的。#weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w48-collage.jpg" alt="w48-collage" /></p>

<h2 id="w47-1122---1128">W47 (11/22 - 11/28)</h2>

<ul>
  <li>喜福爸妈的 Super VISA 终于下来了，一年的等待，总算有了好的结果。</li>
  <li>国际比赛日回归，我文继续连败，0:4切尔西，0:1亚特兰大，看的我难过又服气。如果是玩FM，除了德利赫特、洛卡特利和基耶萨，全都一次性换掉好了。</li>
  <li>这周的阅读继续那不勒斯四部曲，第三本，<a href="https://book.douban.com/subject/27104959/">离开的，留下的</a>。两个女主人到中年，儿时的选择和性格的优劣都在时间中无限放大，另一个角度也可以说，需要付出越来越多的代价去修正任何一个“错误”。作者的心理描写太过强大，让我没办法拒绝每个人心中暗黑的一面，它是如此真实。#weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w47-collage.jpg" alt="w47-collage" /></p>

<h2 id="w46-1115---1121">W46 (11/15 - 11/21)</h2>

<ul>
  <li>周一是三十三岁生日，正好赶上安妮百天，全家人一起庆祝。喜福给我送上一年一度的手绘贺卡，妈妈做了一碗断了的长寿面，我给安妮买了一堆五颜六色的大气球，安妮剪了头发，换上新衣，美美的拍照。</li>
  <li>安妮最近的睡眠不是很安稳，最难的在于哄睡着之后把她放下。有一次我抱她睡了好久，每次放下都是惊醒加哭声，我有点不耐烦，让她在床上独自哭了五分钟。我指望她能渐渐平息，但是并没有，她的哭从一声两声很快就过度到了声嘶力竭，最后弓起身体，爆发全力地嘶吼，我只能屈服，这倔强的小朋友，哭到了我心里。</li>
  <li>上周开始坚持一项新规矩，每天要带妈妈出门， 天气好就遛娃，阴雨天就随便家附近超市逛逛。每周找一天，再让喜福陪她逛商场。</li>
  <li>周四的 #date-night 在咪哥和女朋友的强力推荐下去尝试了<a href="https://goo.gl/maps/rtn2am3viwVSKvS7A">耕食记</a>，的确很不错，我理解是带创新的江南菜，一道山胡椒炒牛肉，让我这辈子都对山胡椒肃然起敬，敬而远之。</li>
  <li>这周的阅读继续那不勒斯四部曲，<a href="https://book.douban.com/subject/26986954/">新名字的故事</a>。这第二本写得好棒，关于青春的困窘、成长与不安。人物丑陋而真挚。我喜欢作者几乎没停下来发表过任何感慨和看法，只是让时间无情地前进。#weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w46-collage.jpg" alt="w46-collage" /></p>

<h2 id="w45-1108---1114">W45 (11/08 - 11/14)</h2>

<ul>
  <li>为了更好的继续我的游戏事业，入了一台专门的游戏 PC。现在的电脑都很酷炫，主机里边都配上各种烂俗的灯光，打开电脑第一件事就赶快关掉，闪烁的光芒超出了我老迈的接受程度。</li>
  <li>周四的 #date-night 叫上咪哥新认识的小妹妹一起京门涮肉，怎么说呢，我们也是有 00 后朋友的人了；周末和喜福去看了韦安的新片 <a href="https://movie.douban.com/subject/30300279/">The French Dispatch</a>，被画面上的设计感美哭了，每一帧都是艺术品，虽然早已有了这种精致的预期，但还是不得不承认眼球上的享受。</li>
  <li>这周的阅读是<a href="https://book.douban.com/subject/34661936/">我的天才女友</a>。故事和文字都很简单，好像放在我的生长年代和环境也不违和。不像男人之间靠爽快和憨直解决问题，女性之间的情谊是微妙的，那种扭捏的易碎的充满心思的友谊，在时间中反复和成长。#weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w45-collage.jpg" alt="w45-collage" /></p>

<h2 id="w44-1101---1107">W44 (11/01 - 11/07)</h2>

<ul>
  <li>我们家天使小安妮一天天长大，还不到一百天，三到六个月的衣服就快穿不下了。每天吃好饭拉好屎换好尿布，尤其对着手机镜头的时候，笑的不行不行的，全家人都乐此不疲的来围观，被童真亲切地抚慰。</li>
  <li>最近我文的比赛看的很享受，虽然积分榜遥遥落后，之前联赛连着便秘输球，但是好像在囧叔的带领下，能在一场场比赛中看到些许希望，这感受是之前的两三年没有的。今年的联赛还不能指望，但是人员上的进出，球队整体上的士气，希望明年能回归正轨。</li>
  <li>Tim Ferris 近期的播客 <a href="https://tim.blog/2021/07/26/ramit-sethi-2/">Ramit Sethi — Build a Rich Life with Your Partner</a> 听的很入我心。对于父母的一代，一辈子走过是个积累的过程，即使钱还在人没了，也可能是种并不让人排斥的幸福的走法。从我们的传统观念出发，父母教我们如何省钱， 我们步入社会学习如何挣钱，但是没人告诉我们要怎样正确的花钱。Ramit 举了很多例子，关于家庭如何更有效利用金钱，让钱花在有意义(meaningful)的事情上，或者丰富人生体验上(adventurous)。</li>
  <li>关于每个家庭寻找自己的 rich life，尤其是如何花钱。</li>
  <li>周四的 #date-night 和喜福尝试了 Coquitlam 新开的 <a href="https://goo.gl/maps/6RRutzs6eW8uca3d8">Marutama</a>，熟悉的味道从不让人失望。</li>
  <li>这周的阅读是 <a href="https://www.goodreads.com/book/show/30002835-how-to-play-chess">How to Play Chess</a>，半儿童读物，正适合我这种刚刚熟悉规则的选手，虐虐喜福很有帮助。#weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w44-collage.jpg" alt="w44-collage" /></p>

<h2 id="w43-1025---1031">W43 (10/25 - 10/31)</h2>

<ul>
  <li>周三送爸爸回国，繁琐的程序，终于在去机场的路上全部敲定。妈妈挥泪送别，我也有些伤心，但是这次与以往不同，我可以牵着妈妈回家。机场这个让人离别惆怅的地方，自从出国生活，在机场留下的失落记忆远多过开心和喜悦。</li>
  <li>这几个月在思考入籍的事情，我知道这是个早晚的决定，但是没想好什么时候迈出这一步。最早的一次动念是那年听到“连任未满”的消息，以为提前过了次愚人节。之后每次听到国内的各种新闻，即使早已习惯了操蛋的定义，也忍不住波涛汹涌。和朋友一起聊国内，到最后总归会落到对zf的不信任上，缺少这最基本的一点，就丢掉了讨论的空间。西方社会同样有混乱和迂腐，但往往是信息泛滥，靠不同的声音混淆视听。但东方的世界里，只存在一个声音。同样在他的眼中，也只有一个国家、团体和民族，而没有一个个独立的活生生的人。遇到事情的处理办法是稳住你的双手双脚，把命令倾倒给你，伟大光荣正确， 当然不容质疑也不需要质疑。</li>
  <li>一个礼拜的时间，五颜六色从绽放到凋零，周末的两个好天气，是这个秋天的句号。跟喜福和妈妈一起带 Nikki 和 Annie 去公园玩耍，周日咪哥来家里一起国际象棋，乒乓，Fifa 三连。</li>
  <li>周四的 #date-night 和喜福去尝试了新加坡菜，<a href="https://g.page/Singapore-Hawker604?share">Singapore Hawker</a>，海南鸡和娘惹口味很不错。断断续续和喜福看完了 <a href="https://movie.douban.com/subject/32579283/">Queen’s Gambit</a>，爽剧，跟着主角进阶打怪就行了。唯一的收获是买了个国际象棋，跟朋友和喜福尝试一下，乐趣无穷。</li>
  <li>这周的阅读是 <a href="https://book.douban.com/subject/26372738/">Elon Musk</a>，实际上是在 Audible 靠无数个遛狗的午后听完的。Elon 的故事太传奇了，他的人生才是一部爽剧。#weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w43-collage.jpg" alt="w43-collage" /></p>

<h2 id="w42-1018---1024">W42 (10/18 - 10/24)</h2>

<ul>
  <li>这周继续登山，高磊大神带我入了些装备，正式入坑。周二加我爸三个人 <a href="https://www.alltrails.com/explore/trail/canada/british-columbia/joffre-lakes">Joffrey Lakes Park</a> 走起。一共三个湖，往返11公里，开始的一段爬升就看出了和常年徒步的区别， 我和爸很快就呼哧带喘跟不上节奏了。还好一旦走到第二个湖就觉着这趟值了。雪上加高原湖，有了班芙的体验。到达第三个湖，我们继续爬了一段山脊，在山上的露营地喝了一杯现煮咖啡，怎么说呢，在山顶吃啥喝啥都香香。</li>
  <li>一起遛狗的好伙伴 George 要回台湾继承家业了，他们家美金毛 Neo 只能留守加拿大。临走前一起来家里小聚，想想就替他们悲伤。</li>
  <li>咪哥搬来温哥华，迫不及待带他尝试了渔人，因为没有鲶鱼只好试了蝶鱼，肉质美妙像蟹肉，骨头轻奇似牛蛙，体验不错，除了第二天隔空厕所喊话。</li>
  <li>这周的阅读是<a href="https://book.douban.com/subject/35426737/">吴军数学通识讲义</a>，本以为有些厚度，结果读起来畅通无阻，帮我系统地梳理了数学知识。#weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w42-collage.jpg" alt="w42-collage" /></p>

<h2 id="w41-1011---1017">W41 (10/11 - 10/17)</h2>

<ul>
  <li>这周的 highlight 是周二和爸爸带 Nikki 去爬山，高磊大神推荐的 trail，<a href="https://www.alltrails.com/explore/trail/canada/british-columbia/frosty-mountain-trail?ref=result-card">Frosty Mountain Trail</a>。上下各8公里，爬升1.2公里。因为是周中，一路上几乎没有人，Nikki 放肆奔跑，忙前忙后，全程无休。山顶有 Alpine Larch，是种落叶松，所以秋季会变成金黄色，大家叫它金松。一路上从泥泞到飘雪，真的是走进了冬天。五小时下来，我和爸几乎没有放慢速度，但也都感到了疲惫，只有 Nikki 还活蹦乱跳，到山底的湖水中游泳。</li>
  <li>小安妮变得越来越爱笑，大小眼提起一边嘴角的媚笑，眯起眼的哈哈大笑，闭着眼也会嘴角上扬，让全家人融化。</li>
  <li>周四的 #date-night 和喜福去了家附近的 Rio 巴西烤肉，肉有点烤的太干，但是出于肉食动物的本能，我俩吃的很过瘾。</li>
  <li>这周的阅读是<a href="https://book.douban.com/subject/35292688/">微积分的力量</a>，很有趣的体验，作者梳理了微积分的发展历程，并且给出很多实际应用的案例。最核心的一点，微积分是一种思维方式，关于整体和部分，关于无穷和极限。#weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w41-collage.jpg" alt="w41-collage" /></p>

<h2 id="w40-1004---1010">W40 (10/04 - 10/10)</h2>

<ul>
  <li>安妮乖宝宝好久没有在后半夜闹人了，很稳定的睡三个小时，醒来吃好就继续睡去。我的夜班生活可以告一段落，交给喜福陪着安妮睡，晚上不再专门泵奶而是直接喂给安妮。</li>
  <li>陪伴我整个夜班生活的九季 <a href="https://movie.douban.com/subject/30442303/">Suits</a> 结束了，开始是有趣，中间乏味，到后来喜欢其中的各路配角，每个人都有可爱的一面。像看完 Mad Men 一样有点失落，即使明知是虚构，我也愿意去想象他们生活在远方的某个城市。经历科比的逝世让我明白，很多时候，你只要愿意相信，他们就在那里。</li>
  <li>周四的 #date-night 喜福找了家附近的创新日本菜，味道过于西式，其实就是没什么味道。之后喜福看着天还没黑，非要跑到           Surrey 去买瓜子，结果高速上爆胎，开着开着就忽忽悠悠了起来。还好没什么大碍，拖着瘪胎缓慢地爬下高速找了附近的修理店。结果瓜子没买到，花出去1k多。</li>
  <li>这周的阅读是<a href="https://book.douban.com/subject/26772731/">七堂极简物理课</a>，简明扼要才突出重点，时间只是一场幻觉。#weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w40-collage.jpg" alt="w40-collage" /></p>

<h2 id="w39-0928---1003">W39 (09/28 - 10/03)</h2>

<ul>
  <li>十月份了，休假两个月，每天活在没有钟表的状态里，时间过的飞快。安妮小宝宝继续乖巧不闹人，一点点从懵懂中焕发出活力，没有缘由的笑，偶尔一句大声的喊叫，都让全家开心的不行。喜福拿出我白天的照片比对，发现相同模子的印记，但是我们都相信这个宝宝一定会比我爱笑。</li>
  <li>新赛季的我文看的我习惯性脑淤血，这一个月终于慢慢有了起色，1:0战胜切尔西是典型的囧式足球，基耶萨的锋芒越发耀眼，给了我很多振奋。</li>
  <li>周四的 #date-night 跟喜福尝试了家附近的西餐厅 Joey，氛围很棒，而且不得不承认自从有了孩子，每一次约会都变得异常美好。</li>
  <li>这周的阅读是<a href="https://book.douban.com/subject/30435253/">讲给大家的中国历史06</a>，同样是四百年的时间，汉朝是一个典型又完整的帝国，而魏晋南北朝是十足的乱世。它的意义在于在混乱中寻找秩序，为下一个朝代破旧迎新。#weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w39-collage.jpg" alt="w39-collage" /></p>

<h2 id="w38-0920---0927">W38 (09/20 - 09/27)</h2>

<ul>
  <li>爸妈的 Super VISA 有了进展，带他们去做各种体检；五月份订的 2021 Sienna 终于到货了，去提车然后全家出行，带着安妮和 Nikki 去公园玩耍。</li>
  <li>周四的 #date-night 和喜福去吃了久违的渔人，尝试了酸菜鱼，比较一般；周中和喜福看了<a href="https://movie.douban.com/subject/34812928/">鱿鱼游戏</a>，旧瓶装新酒，制作精良但还是大逃杀的内核。</li>
  <li>这周的阅读是<a href="https://book.douban.com/subject/30435244/">讲给大家的中国历史05</a>，杨照的书读起来很顺畅，有人说这个系列是微博体，每篇内容很短，但是我很喜欢作者的角度，讲历史讲解为思想史，不只是朝代年份的堆积，而更多思考人在特定的背景下做了什么选择。#weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w38-collage.jpg" alt="w38-collage" /></p>

<h2 id="w37-0913---0919">W37 (09/13 - 09/19)</h2>

<ul>
  <li>这周的 highlight 是整理草坪，学习实践了全套的 overseeding，每天出去干两小时农活，疲惫身体，愉悦心情。</li>
  <li>看完了<a href="https://book.douban.com/subject/30306994/">讲给大家的中国历史04</a>，现在用求知的心态读历史很有趣，脑子里浆糊似的时间和典故都一点点变清楚。晚上照顾孩子闲暇把<a href="https://movie.douban.com/subject/26436601/">Suits</a>看到了第六季，这个剧已经很模式化了，两个人物聊天结束，一定要在临走前回头丢一句狠话。支撑我一直看下去的是看着看着主角变得让人费解嫌弃，各色配角都逐渐丰满而有趣。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w37-collage.jpg" alt="w37-collage" /></p>

<h2 id="w36-0906---0912">W36 (09/06 - 09/12)</h2>

<ul>
  <li>又到了秋天，天空凉爽透亮。我的走出家门计划除了打球遛狗，现在多了一项用心打理草坪。我们家赵四三岁了，小奶猫变成了粘人的大猫，有了狗子和孩子后才发现赵四是最省事的宝宝。每天沉浸在自己的世界，去各个窗口放风，傍晚时分孤单，陪着我们看电视睡觉，早上起来上蹿下跳，不给吃的就一直喵喵大叫。有你真好呀。</li>
  <li>我的 sc2 生涯在不断学习中终于有了一点点突破，每天打两三场积累经验，这回晋级到了 Platinum。</li>
  <li>这周最悲情时刻是看到德约科维奇没能如愿年度全满贯，十年等一会，披巾斩棘在最后一步倒下，不知道重回山底的西西佛何时能卷土重来。</li>
  <li>这周的阅读是<a href="https://book.douban.com/subject/34835320/">这里是中国</a>，好看的地理画册，就是文字没啥营养。#weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w36-collage.jpg" alt="w36-collage" /></p>

<h2 id="w35-0830---0905">W35 (08/30 - 09/05)</h2>

<ul>
  <li>安妮满月了，眼镜睁的越来越大，哭声越来越响亮，小手挥动的越来越有力，拉屎时候憋的小脸也越来越红。生命力在迸发。我们搬家到温哥华也一年了，时间飞快，如果不停下来想想也意识不到发生了那么多美好。</li>
  <li>这周的变化是恢复运动，打了三场球，今年的三场球。虽然打的非常水，需要忍受自己打的越来越差的事实，但是运动后的酸痛是身体的享受。准备继续下去，让身体保持活跃。</li>
  <li>这周的阅读是傅真的<a href="https://book.douban.com/subject/25920202/">泛若不系之舟</a>。几年前读过她的另外两本游记，很庆幸最后一本留到今天，给了我很多不一样的感受。在被疫情控制的两年，跟着游记去远方。除了旅行中的见闻，我更喜欢作者的感悟和讨论，关于在路上，拥抱不同的文化，和每个旅人的选择。现在的我，很向往开启一段“新”生活，我不知道它该是什么样子，但我知道它不该是逃离，它需要勇气与接受。#weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w35-collage.jpg" alt="w35-collage" /></p>

<h2 id="w34-0823---0829">W34 (08/23 - 08/29)</h2>

<ul>
  <li>小安妮一天天长大，虽然每天都在身边，也能明显看到变化。这周她的小脸又圆了起来，手臂挥舞的更加有力，嗓子也鸿亮了起来。身体内的能量在睡眠中不断积累，苏醒后想尽办法寻求释放。她奇怪的表情在一点点变清楚，皱眉和微笑不再一起来临，而是分情况，或者说看心情。我喜欢看她一脸疑惑的样子，眼前的世界是一片灰蒙，倒是黑白卡让一切因为简单变清楚，她的目光会追随，会发光，然后或者皱眉，或者微笑。</li>
  <li>周中和喜福去散步一起聊有孩子后的变化。时间变成模糊的概念，每天被牵引着向前，没有大块但很多零散的时间。也许是我黑白颠倒，很难提起兴致，想寻求些改变，但是没有自律去实现。我不想被困在身体的需求中，饿了去吃饱了还要吃，累了坐着，无聊了看电视看书，这样的为所欲为不是自由，而是被身体奴役和禁锢。我想要获得解放。这半年假期另外一个想要追寻的问题是，要不要回去继续工作，我到底热爱什么，我到底想做什么，我要怎么尝试才能找到答案。</li>
  <li>这周读了李沧东的<a href="https://book.douban.com/subject/30441551/">烧纸</a>，很有故事性的短篇小说集，看到了喜欢的电影薄荷糖的雏形，光州事件大概是那代人记忆共同的里程碑；杨照的<a href="https://book.douban.com/subject/30306986/">讲给大家的中国历史03</a>，这本回顾了春秋战国的历史，作者引用了一个有趣的观点，“越是自由的社会，越有更多的人自杀”，以此来解释为什么春秋时期大家说死就死，为了忠诚为了气节为了仁义。这也同样可以解释苏格拉底在的古希腊和日本的武士精神。#weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w34-collage.jpg" alt="w34-collage" /></p>

<h2 id="w33-0816---0822">W33 (08/16 - 08/22)</h2>

<ul>
  <li>安妮小天使两周了，暂时还保持着天使宝宝的称号，不哭不闹，吃喝拉撒后就瞪着眼镜看这看那。我的夜班工作强度起伏不定，见过安妮一晚上只花十五分钟喂奶换尿布然后倒头就睡，也有过神采飞扬在我怀里四个小时不肯睡。整体上，我还在适应，我的生物钟和精神头也在适应。每天早上六点睡觉，应了路遥那本短篇小说集，早晨从中午开始。</li>
  <li>周四的 #date-night 和喜福去吃了 Marutama，好久不出门，好享受。我们的 #movie-night 过渡到了任何空闲时间，一起看了<a href="https://movie.douban.com/subject/2609258/">芝加哥七君子审判</a>和 <a href="https://movie.douban.com/subject/4842285/">Suits</a>前两季。</li>
  <li>这周的阅读是<a href="https://book.douban.com/subject/25796061/">杜撰集</a>，很有趣的短篇故事，在博尔赫斯笔下，文字、思考都能去结构然后拼接成有趣的谜团。#weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w33-collage.jpg" alt="w33-collage" /></p>

<h2 id="w32-0809---0815">W32 (08/09 - 08/15)</h2>

<p>周三把安妮从医院接回家，爷爷奶奶的兴奋溢于言表，Nikki 和赵四也迅速过来凑热闹，好奇地看和嗅着新来的小生物。养娃的生活正式开始。</p>

<ul>
  <li>
    <p>到目前为止，安妮是个天使宝宝，几乎没有哭过，每天大睡很久，醒来就用她30cm的视力看这看那，她两颊的小肥肉掉了下去，两个小手总在摆动，投降式的睡觉，吃饱喝足后漏出撇嘴的怪笑。我料想她的世界里不存在时间，混沌的状态中，可能笑都不代表开心，哭声也不是失落，只有生理上的满足和渴望。有时候我也在想， 在她每天16个小时的睡眠中，会有梦发生吗？如果梦是基于你的经历和想象，那她的梦中会有什么呢？</p>
  </li>
  <li>我和喜福在认真看书，学习各种育儿知识，跟爸妈的观念冲突努力在饭桌解决。作息上，我选择接管后半夜，回到了黑白颠倒的大学生活，解放家中其他人，我和安妮和我自己都有了漫长的独处时间。</li>
  <li>碎片的时间让我失去打游戏的动力，多了很多看书看电影的时间。在医院陪护的几天读完了村上春树的<a href="https://book.douban.com/subject/30144095/">海边的卡夫卡</a>，在这之前看了很多村上，但没有明确意识到他是个超现实作家，这本书的精彩在于跳脱语言与逻辑，一串串奇异事件像梦一样隐晦的表达，我没法完整拼接作者要给的完图，但乐此不疲地徜徉在那个世界中。周中看了<a href="https://movie.douban.com/subject/27060077/">绿皮书</a>和<a href="https://movie.douban.com/subject/27046740/">人之怒</a>，都是咩，如果这种电影都能拿奥斯卡，这个世界也太政治正确过了头。#weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w32-collage.jpg" alt="w32-collage" /></p>

<h2 id="w31-0802---0808">W31 (08/02 - 08/08)</h2>

<ul>
  <li>2021年8月7日晚6点16分，我们在 Royal Columbia Hospital 迎来了Annie，温文。剖腹产，体重六斤九两，长度50.5厘米。</li>
  <li>这周的等待是漫长的。8月3日的预产期毫无动静，继续等了两天依旧。周五开始出现宫缩迹象，我们照例产检，发现开了一指。晚上去医院检查，发现羊水破，打了一阵吗啡帮助睡眠，告知第二天做生产准备。周六早上再次来到医院，开指不足又被退回。下午四点钟再次到医院，起初一切指标正常，但是很快喜福不断发热，孩子的心跳也从标准的140一点点跳到了200。情况紧急，做了血检之后，两名医生不断商量，告知我们很可能产妇内部感染，需要尽快取出婴儿，需要做剖腹产。我和喜福点头同意，很快推进病房，十五分钟后，Annie 被医生捧在了手中。期间我全程陪同，喜福面对宫缩的疼痛，羊水感染后的发热，麻药过后的呕吐，手术过程的抽搐，一幕幕我只能无助地看着她的无助。再努力地感同身受，距离她经历的苦难万分之不及。母亲，在我心中不再只是简单的称谓，而是一种境界，一个女人的涅槃。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w31-collage.jpg" alt="w31-collage" /></p>

<h2 id="w30-0726---0801">W30 (07/26 - 08/01)</h2>

<ul>
  <li>预产期前最后一周，静静等待安妮的到来。生活好自在，忘记时间，无拘无束。</li>
  <li>周四的 #date-night 完成喜福的夙愿，去吃了太二酸菜鱼；周六的 #movie-night 带爸妈重看了<a href="https://movie.douban.com/subject/1292365/">活着</a>，我以为看错了版本，期待开篇和结尾也是与老牛福贵的对话，后来确认是自己出现了偏差，书中的画面感太强了。</li>
  <li>这周的阅读是刘子超<a href="https://book.douban.com/subject/35025453/">失落的卫星</a>。这周陪喜福看奥运举重，她问我 TKM 是什么国家，我说土库曼斯坦。第二天翻到书架上这本书，没想到正是斯坦国游记。这些可能一辈子不会去的地方，跟着作者云游一番，对那些粗粝的，被历史席卷沉淀的，时间停滞的人与自然，也有了无限向往。#weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w30-collage.jpg" alt="w30-collage" /></p>

<h2 id="w29-0719---0725">W29 (07/19 - 07/25)</h2>

<ul>
  <li>假期第一周，每天打游戏、遛狗、打扑克、看电影、看奥运。作息被全部打乱，忘记时间，忘记星期，享受最后的安宁时光。</li>
  <li>周中又去了 Whistler 的 Rainbow Lake，我们在湖边野餐，Nikki 在湖边不停歇玩了三个小时。这里是 Nikki 的天堂，有个小码头，Nikki 加速飞奔跳水游泳，开心的不行。</li>
  <li>周四的 #date-night 去了 Green Leaf，一起尝试了炙寿司大拼盘；周六的 #movie-night 带喜福重看了<a href="https://movie.douban.com/subject/1482090/">刑房</a>两部，陪爸妈重看了<a href="https://movie.douban.com/subject/25921812/">驴得水</a>。</li>
  <li>这周玩的太狠，没有读书😢 #weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w29-collage.jpg" alt="w29-collage" /></p>

<h2 id="w28-0712---0718">W28 (07/12 - 07/18)</h2>

<ul>
  <li>假期前最后一周工作，认真且珍惜最后的工作时光。周四和大家告别，明年一月见。周末和爸妈打扑克，和朋友继续星际2，打的飞起来。这游戏最快乐的地方在于无止尽的深入，可以看到自己不断进步。</li>
  <li>周四的 #date-night 去吃了 Insadong 韩国烤肉；周六的 #movie-night 带爸妈继续罗宏镇<a href="https://movie.douban.com/subject/3743114/">黄海</a>，十年前第一次看有爽到，这次更多看到是人物的单薄，越往后越站不住。</li>
  <li>这周的阅读是杨照讲<a href="https://book.douban.com/subject/26945912/">庄子</a>，上学时候只记得北海的大鱼化作大鸟，翼若垂天之云，但完全不知道庄子在讲什么。他辩论的文风，关于大小、相对以及“息”和“枢”的讲解，让人惊叹。我想，鲲鹏是存在的，就在这两千多年的长河之中。摘抄一句他对人境界的划分，“其次以为有物矣，而未始有封也。其次以为有封焉，而未始有是非也”。#weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w28-collage.jpg" alt="w28-collage" /></p>

<h2 id="w27-0705---0711">W27 (07/05 - 07/11)</h2>

<ul>
  <li>这周高光十足，期待已久的周末迎来了美洲杯，温网和欧洲杯决赛，我支持的阿根廷，小德和意大利相继夺冠。从极端唯心的角度讲，感谢老天对我的眷顾。这其中欧洲杯决赛是最美好的回忆，从开场落后一直到点球大战，全程紧张、麻木、恍惚，直到一切尘埃落定，我还久久走不出来。上一次是在 06 年，全程目睹意大利夺冠。这感受，我愿意再等十五年。</li>
  <li>妈妈自从开始去抖音 Youtube 查美食之后，厨艺突飞猛进，不由得我暗暗佩服。给妈妈买的乒乓球桌到了，跟她比划了两天，看她蹦跳我也跟着开心。</li>
  <li>周四的 #date-night 去吃了久违的烤鱼；周六的 #movie-night 一起重看了<a href="https://movie.douban.com/subject/3006309/">追击者</a>。</li>
  <li>这周的阅读是杨照的<a href="https://book.douban.com/subject/34781358/">史记的读法</a>。好久没有这么畅快的感觉，拿起来两天读完，意犹未尽。作为古文痴，有幸读到这本史记讲解，爱不释手，畅快之余也感叹司马迁能如此系统又立体地梳理历史。尤其，在两千年以前。#weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w27-collage.jpg" alt="w27-collage" /></p>

<h2 id="w26-0628---0704">W26 (06/28 - 07/04)</h2>

<ul>
  <li>继续看球看的飞起。西班牙克罗地亚和瑞士法国的两场八分之一决赛会长久留在人们心中，相同的剧本常规时间3:3，在加时赛走入了不同方向，精彩。最最开心的是四分之一意大利2:1比利时，印象中就没看过这样的意大利，酣畅淋漓。论一名好教练的重要性。</li>
  <li>周二是爸爸生日，和喜福准备礼物，做晚餐，也包括一个给”安妮爷爷“的生日蛋糕。周末一起去 Buntzen Lake 划船，看 Nikki 抢别狗家的小球树枝，晚上 BBQ，四个人斗地主。</li>
  <li>周四的 #date-night 去吃了<a href="https://goo.gl/maps/3ifBHsQxnU18gPZNA">颐东</a>广式餐厅，还像上次一样味道丰富，爸妈也觉着很特别。周六的 #movie-night 一起重温了<a href="https://movie.douban.com/subject/25917973/">心迷宫</a>，不如几年前惊艳，但依旧精彩，这个名字就说明了一切。</li>
  <li>这周的阅读是<a href="https://book.douban.com/subject/27593934/">陪你慢慢长大</a>，“写给孩子的信”合集。很高兴看到书中好多想法我都不赞同，那些响亮的名字也依旧受时代局限，感到不少安慰。#weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w26-collage.jpg" alt="w26-collage" /></p>

<h2 id="w25-0621---0627">W25 (06/21 - 06/27)</h2>

<ul>
  <li>夏天来了，这周的天气是灾难性的热，BC 的温度达到了历史最高，生活在40度的室内，没有空调，想死的心都有。还好有精彩的欧洲杯相伴。我意还算顺利，加时战胜比利时，暂时还没有大冷，无比期待下周与比利时的四分之一决赛。</li>
  <li>这周和喜福结婚三周年，按照惯例，继续套娃拍照，只是这次有爸妈见证，晚上一起聚餐 happy。Nikki 也过了两周岁的生日，带她去吃了冰淇淋庆祝，祝你永远作一只疯疯癫癫的傻狗。</li>
  <li>周四的 #date-night 带喜福和爸妈去了 <a href="https://goo.gl/maps/MdLrEhwAaAa7za1o6">Hanayuki Sushi</a>，非常不错，爸妈也开始对日料感兴趣；周六的 #movie-night 一起看了韩国电影<a href="https://movie.douban.com/subject/26863778/">铁雨</a>，虽然已经知道是朝韩问题的商业片，但是过程是爽快又美好的。</li>
  <li>这周没有阅读 😔 #weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w25-collage.jpg" alt="w25-collage" /></p>

<h2 id="w24-0614---0620">W24 (06/14 - 06/20)</h2>

<ul>
  <li>这周休假，带爸妈去逛街公园。新买的小船在 Buntzen Lake 下水，飘荡在湖面上感受很不错，凉爽又安静。周末朋友来家里玩耍，妈妈秀了一桌东北菜，夏天大家都忙着四处玩耍，估计是生产前最后一次小聚。</li>
  <li>周四的 #date-night 带爸妈尝试了 Daon 小章鱼饭；周六的 #movie-night 响应父亲节主题，一起看了<a href="https://movie.douban.com/subject/33432655/">困在时间里的父亲</a>。我的感受不大，也许是距离尚远，也许是不想走进那种状况。</li>
  <li>这周的阅读是第一本爱丽丝·门罗<a href="https://book.douban.com/subject/3831788/">《逃离》</a>。读的时候磕磕绊绊，可能是翻译的问题，我很难一口气读完，只能每隔一段时间重新捡起。当我意识到有时候脑子里会想起书中的故事时，我发现都蛮让人回味。尤其书中出现的地方，我多数都有去过，空间上拉近了很多距离，好像就发生在身边。#weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w24-collage.jpg" alt="w24-collage" /></p>

<h2 id="w23-0607---0613">W23 (06/07 - 06/13)</h2>

<ul>
  <li>慢慢适应了有爸妈的生活，每天各种好吃的轮番轰炸。这周他们隔离结束，一起去逛了White Rock, Golden Ear, Stanley Park。下周我休假，继续四处闲逛。</li>
  <li>最近遛狗有了两对好伙伴，Neo 和 Lucky，中午总会碰到，大家一起聊天，看着狗狗玩耍。</li>
  <li>欧洲杯开始，看了意大利的开幕战，一改往日球风，让人非常期待。连续看了两场法网比赛，德约3:1纳德尔和3:2逆转西西帕斯，拿到第19个大满贯，距离费纳只差一冠。作为小德球迷，对结果无比开心。在这个层面的网球比赛，完全是对心理的考验，观看者都屏气凝神，想象不到亲历者要承受怎样的压力。过程有多煎熬，胜利就有多喜悦。</li>
  <li>周四的 #date-night 加入了爸妈，一起去吃了郝记羊肉，这家店几乎从不让人失望，把羊肉做到了无法拒绝的好吃。周六的 #movie-night 重看了<a href="https://movie.douban.com/subject/1291851/">小武</a>，好多小时候的记忆翻滚，喜福问这电影说了些啥，我说一种状态，和那个年代的气息。</li>
  <li>这周的阅读是马洛伊·山多尔的<a href="https://book.douban.com/subject/26580084/">烛烬</a>。很特别，向内挖掘主人公几十年错综复杂的思绪，被伤害，到原谅，到宽恕然后施加原谅。我最喜欢的是完全不给访客插嘴的机会，因为不需要。#weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w23-collage.jpg" alt="w23-collage" /></p>

<h2 id="w22-0531---0606">W22 (05/31 - 06/06)</h2>

<ul>
  <li>认真工作，不能让自己的心过于涣散，跟老板聊天也表明自己的态度，现在的生活非常开心，工作上没有太大野心，只是安心完成工作。</li>
  <li>爸妈还不能出门，在家里忙这忙那，轮番给我们秀厨艺，喜福也偶尔参与比拼，我负责专心品尝，拍手称赞。周末终于等来了我的老北京铜锅，在阴雨天一起涮羊肉，美哉。</li>
  <li>周四的 #date-night 终于恢复啦，去吃了重庆小面，但是味道一般般，从老板的东北口音就可见一斑。周的 #movie-night 加上老妈，一起看了<a href="https://movie.douban.com/subject/1291858/">鬼子来了</a>。上次看还是大学，这次更加玩味，人物的对白和节奏非常姜文，幽默与讽刺也饶有深度。</li>
  <li>这周的阅读继续伊藤润二，看了<a href="https://book.douban.com/subject/1442678/">鱼</a>和 <a href="https://book.douban.com/subject/26365779/">Fragments of Horror</a>。还是上周的漩涡比较上头，我脑子里还时常回想各种🌀。#weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w22-collage.jpg" alt="w22-collage" /></p>

<h2 id="w21-0524---0530">W21 (05/24 - 05/30)</h2>

<ul>
  <li>这周的大新闻是爸妈到来，快两年的分离，终于熬到了头。一切顺利，酒店隔离一晚，顺利拿到核酸检测报告，然后回家隔离。周末一起烧烤，打扑克，吃吃喝喝，享受欢聚的时光。</li>
  <li>一年一度的欧冠决赛，看的心不在焉，没想到切尔西命那么硬，中途换帅成了常规战术，这样的阵容能走到最后，怎么说呢，羡慕。</li>
  <li>周四的 #date-night 餐馆禁令中断；周六的 #movie-night 和喜福看了<a href="https://movie.douban.com/subject/30279836/">第十一回</a>，欣赏无能，拍的过于话剧风，每个人都不好好说话，高于生活但是完全飘在了空中，距离感太强烈。</li>
  <li>这周的阅读是第一本伊藤润二，<a href="https://book.douban.com/subject/1440468/">漩涡</a>。披着恐怖的外衣，探索着想象力的边界。画风很超脱，夸张的背后是每个人的心魔。#weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w21-collage.jpg" alt="w21-collage" /></p>

<h2 id="w20-0517---0523">W20 (05/17 - 05/23)</h2>

<ul>
  <li>天气好了，每天中午送喜福和 Nikki 去公园遛弯，我去骑车四处瞎逛。骑车是件惬意的事儿，尤其漫无目的，攀爬俯冲，伴着微风享受美景。</li>
  <li>这周看了很多球赛：我文赢得意大利杯，英超和意甲大结局，跟大舅边聊天边看球，非常开心。</li>
  <li>继续每天晚上练习 StarCraft 2，周末和大家连线。我没有像以前觉着打游戏是在“浪费时间”，而是尽可能享受和朋友玩耍，以及自己不断进步的快乐。</li>
  <li>周四的 #date-night 餐馆禁令中断；周六的 #movie-night 继续哈内克，看了 <a href="https://movie.douban.com/subject/1892527/">Funny Games</a>，没想到这次导演在明目张胆玩观众，这股病态的劲头让我想到发条橙。</li>
  <li>这周的阅读是 <a href="https://book.douban.com/subject/26738885/">Shoe Dog</a>，Nike 创始人 Phil Knight 的回忆录。这本书断断续续在 Audible 上听完，故事性很强，脑补出一个真实的六七十年代的创业故事。说实话我没有得到有用的“经验”，但是阅读本身是愉悦的。#weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w20-collage.jpg" alt="w20-collage" /></p>

<h2 id="w19-0510---0516">W19 (05/10 - 05/16)</h2>

<ul>
  <li>这周很不错，工作顺利，生活也很美好。还有两个月 Annie 就要来了，留给我工作和打游戏的时间不多啦。</li>
  <li>最近在狗公园结交了我最爱的大金毛 Neo 和他的主人 George。相比之下 Nikki 就是只假金毛，Neo 才是大只，毛茸茸，抱起来软乎乎的大金毛，每次和我见面都是热情的拥抱，分离五分钟就好久不见，再来一个拥抱。</li>
  <li>周末招待了高磊明远和小白公瑾，大家一起在阳台烧烤，享受夏天，聊起天来时间过的超级快，转眼从太阳当头就到了落山。</li>
  <li>周四的 #date-night 餐馆禁令中断；周六的 #movie-night 看了<a href="https://movie.douban.com/subject/1293830/">猎杀红色十月</a>，很好莱坞但是内敛还有些幽默，好喜欢这几个男演员，整体上非常好看，除了奇怪的俄国士兵只在面对美国士兵面前才会说俄语。</li>
  <li>这周的阅读没有完成。我有在推进几本书，但是不想因为达成目标去“强行”读完哪本。一周一本的目标是好的，但是不必要变成负担，丢掉阅读的乐趣。#weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w19-collage.jpg" alt="w19-collage" /></p>

<h2 id="w18-0503---0509">W18 (05/03 - 05/09)</h2>

<ul>
  <li>这周休假，配合国内五一，休了个九天小长假。每天的基本操作是和喜福带 Nikki 去各种狗公园，方圆二十公里的基本都走过了；下午回来大吃一顿，我们潜心研究了羊肉串的做法，第一次尝试后做了些改良，第二次就近乎完美了；晚上打游戏到深夜。这样的日子清净，悠闲，怎么能过的够。</li>
  <li>周四的 #date-night 餐馆禁令中断；周六的 #movie-night 响应母亲节，看了<a href="https://movie.douban.com/subject/34841067/">你好，李焕英</a>，有组织有预谋地先戳笑点再戳泪点，可惜抓不到我。导演对母亲的真情怀念毋庸置疑，但是表现上和初中命题作文没有本质区别。</li>
  <li>这周的阅读是 <a href="https://book.douban.com/subject/32777812/">Talking to Strangers</a>，马尔科姆·格拉德威尔的新书，因为他很赶的上新新媒体，自己也一直在做播客，所以新书在 Audible 是自读的，也有群众演员配合，整体效果很好。但是内容上没有太多新意，用了几个有趣的社会调查确认了一些也许大家不那么意外的概念。#weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w18-collage.jpg" alt="w18-collage" /></p>

<h2 id="w17-0426---0502">W17 (04/26 - 05/02)</h2>

<ul>
  <li>这周的工作很认真，完成了很多活，为下周的休假做好准备。预计五月份休息一周，六月份休息一周，七月份两周然后开始亲子假。</li>
  <li>周末带 Nikki 去了 Hayward Lake，在湖边奔跑了两个半小时，没停歇，身边的狗狗换了一批又一批，只剩下欢乐的她。</li>
  <li>最近的游戏打的有点略多，周中也是经常玩到半夜，看书的时间骤减，这周的阅读任务没有完成。#weekly-read</li>
  <li>周四的 #date-night 餐馆禁令中断；周六的 #movie-night 看了<a href="https://movie.douban.com/subject/26874505/">人生果实</a>，讲述老年爱情故事的纪录片，好喜欢里边的老奶奶，平和又积极。慈祥，是老年的美丽。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w17-collage.jpg" alt="w17-collage" /></p>

<h2 id="w16-0419---0425">W16 (04/19 - 04/25)</h2>

<ul>
  <li>这周的工作不错，很快地完成了既定任务。这两个月在尝试把早上的咖啡挪到午饭后，下午的效率明显好了很多。每次头昏脑胀，都会被出门散步缓解。</li>
  <li>周末去试驾了 2021 Sienna，回来做些功课然后交了订金。一个好的 family man 要从开面包车开始。</li>
  <li>断断续续想看又克制地带喜福看完了<a href="https://movie.douban.com/subject/35004928/">Drive To Survive Season 3</a>，上个赛季就在期待 Pierre Gasly 的故事，这回看到了跟更多幕后，还是非常感动。除此，Sergio Perez 的故事作为压轴也是异常精彩。新赛季对他们无比期待。</li>
  <li>周四的 #date-night 餐馆禁令中断；周六的 #movie-night 看了<a href="https://movie.douban.com/subject/30167509/">徒手攀岩</a>，心脏病都要出来了，很受鼓舞，看到另一种存在，用谨慎的无畏去追求卓越与自由。</li>
  <li>这周的阅读是第二本双雪涛，<a href="https://book.douban.com/subject/33455193/">猎人</a>，说不上非常喜欢，有那么几篇会意犹未尽。#weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w16-collage.jpg" alt="w16-collage" /></p>

<h2 id="w15-0412---0418">W15 (04/12 - 04/18)</h2>

<ul>
  <li>夏天来了，一连两个礼拜大晴天，气温也骤升。周三面对炎热的天气，我不得不脱掉秋裤，换上背心裤衩迎接天意。每天中午都和喜福带 Nikki 去公园散步，绿意盎然，好像忘记了之前几个月连绵不断的阴雨。周末开始打理院子，翻出去年的笔记，继续上午看视频学习，去杂草，补种子，浇水，施肥，预计要搞个一个月。</li>
  <li>周中看了欧冠四分之一拜仁对巴黎的比赛。从第一分钟到最后一分钟都在急速运转，高手过招，甚是过瘾。今年对看球的热情被我文打磨殆尽，终于可以淋漓畅快一把，不紧张、不兴奋，但是由衷地赞叹比赛的精彩。</li>
  <li>周末和占东、小鸡、伍神把 StarCraft2 打到了新高度，时间跟飞一样，literally 没有喘息的机会。当然几乎一直在挣扎一直在被虐。</li>
  <li>周四的 #date-night 餐馆禁令中断；周六的 #movie-night 看了<a href="https://movie.douban.com/subject/34805873/">孤味</a>，对这种亲情片感受不大。</li>
  <li>这周的阅读是李诞的<a href="https://book.douban.com/subject/30365801/">冷场</a>，本来是想找他的新书，但是没有渠道只好翻了本之前的短篇集。他在天马行空地打趣，偶尔有严肃的时候，又没那么严肃。有点纠结。但是你如果认真去看呢，他又会佛系地告诉你别认真嘛，不值得。#weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w15-collage.jpg" alt="w15-collage" /></p>

<h2 id="w14-0405---0411">W14 (04/05 - 04/11)</h2>

<ul>
  <li>开始两天很难专注工作，没有什么大的动力和压力，周三终于调整过来。我最不想做事的时候，是什么都还没做的时候，而一旦开始专注，哪怕只有半天，就会带来惯性。所以这就是“Just do it”的意义吗？</li>
  <li>周中给爸妈订了五月底的机票，生活多了很多盼头。周末喜福的朋友来家里做客，疫情原因不可以进屋，所以在阳台和后院一起 BBQ、玩牌、享受阳光，非常惬意。</li>
  <li>最近和大家 StarCraft2 练习的很不错，有些地图可以稳定地虐四个专家了。周六晚上开始 2v2 操作，和人斗其乐无穷啊。</li>
  <li>周四的 #date-night 因为餐馆禁令只能中断；周六的 #movie-night 看了波兰斯基的<a href="https://movie.douban.com/subject/1301601/">不道德的审判</a>，我和喜福都想到了<a href="https://movie.douban.com/subject/4913185/">杀戮</a>，戏剧化的表现方式，全靠台词和表演去营造风味和张力。</li>
  <li>这周的阅读是<a href="https://www.goodreads.com/book/show/49012971-golden-retriever-training-vol-2">Golden Retriever Training Vol. 2: Dog Training for your grown-up Golden Retriever</a>，为了更好地训练 Nikki；<a href="https://book.douban.com/subject/27003014/">半小时漫画中国史</a>和<a href="https://book.douban.com/subject/34437274/">有趣得让人睡不着的地理</a> 为了更好的睡眠 #weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w14-collage.jpg" alt="w14-collage" /></p>

<h2 id="w13-0329---0404">W13 (03/29 - 04/04)</h2>

<ul>
  <li>这周的简报：天气逐渐好转，阳台打理好弄了两次 BBQ；我们家两位妈妈因缘巧合同一天阴历生日，周三大家一起遥祝；自从买了婴儿床，赵四就鸠占鹊巢，每天都霸在里边，睡觉、思索、露肚皮；周四早上惯例带 Nikki 散步，在小巷碰到邻居站在阳台观望搭话，他说自己也有条金毛，是陪了他十八年的 bro，走下楼跟 Nikki 打招呼，临走从冰箱里塞了根牛大骨给我们，Nikki 这一天都没消停，啃个不停。</li>
  <li>最近的游戏打的飞起，StarCraft2, Dirt 5, Fifa 21，又是长周末，玩个不停。自己要收敛一些了。</li>
  <li>周末带 Nikki 去了个新的海边公园，我们站在岸边，看着 Nikki 踏着水跑过来跑过去，身边的人换了一批又一批。她对水的执念是沉浸和迸溅，不露笑意，在自己的世界里奔跑不停。</li>
  <li>周四的 #date-night 挪到了周一晚上，在餐馆禁令之前，去了袁记串串香。周六的 #movie-night 看了<a href="https://movie.douban.com/subject/34902639/">同学麦纳斯</a>。去年看了黄信尧导演的大佛普拉斯，很是喜欢。这部新作，继续怪味黑幽默，只是过于零散，画外音和音乐插入过多，让人出戏。</li>
  <li>这周的阅读是<a href="https://book.douban.com/subject/34782541/">从一到无穷大</a>，断断续续看了有一段时间，很不错的科普读物，经得住时间的考验。#weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w13-collage.jpg" alt="w13-collage" /></p>

<h2 id="w12-0322---0328">W12 (03/22 - 03/28)</h2>

<ul>
  <li>工作继续划水，对于下个季度要做的事情热情不高，处在不思进取的状态。周五是 oncall day off 休息，本来想利用这个长周末好好调整放松休息，但是打了太多游戏，反倒心慌慌。也好，既然个人状态总是处于波动之中，那更快到达波谷也意味着会更快逃离。只是我写下这些的时候又怀疑，哪里来的波峰波谷，无非是脑子里的怪念想。为什么要被这种思维左右，定义丧和不丧。做就完了，玩就完了，生活没有做完了和玩完了这一说。</li>
  <li>晚上遛狗碰到马路对面许久不见的老爷爷。总是酒过三巡赤红的面孔，映的白色毛发更加突出。总是耷拉着眼皮不太听你讲什么，自顾自地唠叨。只是这次我隐约听见了“癌症”，再三确认后得到他肯定的答复。我和喜福表示了难过的心情，他说第二天会去确诊讨论治疗方案。第二天，我出门前还在想要怎么能偶遇他，结果恰巧他就在自家门口。我询问病情，他说结果不算太差，良性，不用手术但是需要放疗。不给我多问的机会，分别前他指着背后的红色小跑车继续唠叨，“唉，啥时候能再坐上我的宝贝”。</li>
  <li>周四一起去送别喜福的好朋友，爱琳。最后一顿晚餐，然后陪她收拾行李，去机场，告别。我是到了机场心里开始不是滋味的。你认识一个人不会从机场开始，但是这几年有过几次都是在机场结束。说到底，这个的地方的见证是聚少离多。喜福表现地很淡定。但是我知道不远将来的某一天，当她真正发现城市里少了自己的好伙伴，一定会嚎啕大哭的。在三十岁的年纪，大家还有多少耐心和时间留给新朋友；生活在国外，好不容易碰到那么几个人让你无拘无束放任地沟通与相处，但不知何时，大家又要奔东西。</li>
  <li>周四的 #date-night 在 <a href="https://goo.gl/maps/nnfyq6L9HznK99v66">The Greek By Anatoli</a>。周六的 #movie-night 看了哈内克的<a href="https://movie.douban.com/subject/1438066/">隐藏摄像机</a>，我对这种节奏的欧洲电影还是有些不适的。</li>
  <li>这周的阅读是尤瓦尔·赫拉利的<a href="https://book.douban.com/subject/25985021/">人类简史</a>，我捡了不少…有趣的思考。看了些对这本书批判的声音，可能是这书太火了吧，大家对它的预期过高。整体来说，值回票价。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w12-collage.jpg" alt="w12-collage" /></p>

<h2 id="w11-0315---0321">W11 (03/15 - 03/21)</h2>

<ul>
  <li>这周开始进入夏令时，被偷走了一个小时，很影响我的生物钟。工作斗志不大，每天都有点昏昏沉沉。</li>
  <li>周中和 PWL 一起过了她们提供的 financial plan，比我想象的会细致一些，几个 scenario 的情况也都算比较乐观。基本要到 45岁，有点着急呀。</li>
  <li>这两周天气明显好转，周三下班和喜福一起去远方，开车半个小时到附近的海边小镇，白石。这感觉很奇妙，只要过了 North Surrey，就好像进入了另一个城市，天的颜色也好像更蓝一些。一直到一个无比陡峭的下坡，引入眼帘就是无比宽敞的大海。我们一起闲逛，吃日料，设想在这里的生活。</li>
  <li>周六是这周的 highlight。早上送喜福去做b超，给医生递上画好的贺卡，然后一起去 Party City 麻烦员工把结果放到黑色大气球里，蓝色是男孩，粉色是女孩。下午三点钟和爸妈约好了视频，一起见证戳破气球的瞬间。其实我们都有梦到会是男孩，所以看到粉色纸片飞溅出来的时候，我们都欣喜若狂。我的小公主，好期待你。（视频：<a href="https://youtu.be/iUXLM3ZpYD8">https://youtu.be/iUXLM3ZpYD8</a>）</li>
  <li>
    <p>周四的 #date-night 在白石吃了 <a href="https://goo.gl/maps/upHKcQ5F1iCDsSPf7">Sushi Iwa</a>，还不错，不如评分那么惊艳。周六的 #movie-night 看了<a href="https://movie.douban.com/subject/30458949/">无依之地</a>，很喜欢。孤独、悲伤是很治愈的情绪。想起 Into the wild，想象自己去流浪。被圈养久了会以为屋檐就是世界，而白墙黑瓦永远给不了最真切的感动。在路上，单纯地活着，感受大自然的馈赠。</p>
  </li>
  <li>这周的阅读继续上周的黑塞，<a href="https://book.douban.com/subject/19967336/">彷徨少年时</a>。黑塞的心理描写太细致了，故事走向只是为了大环境的铺垫。也许是我过了青春彷徨的年纪，只被有些想法打到，更多时候都没有太大感触。#weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w11-collage.jpg" alt="w11-collage" /></p>

<h2 id="w10-0308---0314">W10 (03/08 - 03/14)</h2>

<ul>
  <li>周中见证了我文3：2波尔图再一次欧冠出局，已经有点习惯了，每一年都有心碎的一天，只是这两年比以往时候来的晚一些。踢成这个b样，即使晋级了有什么关系呢？问题是那么的突出，场面是那么的难看，我都佩服自己一年年陪跑，到底为了啥呢？只能说我一直坚信不经历低谷，有一天赢了也不会那么开心吧。看球已然成为我生活的一部分，我没指望心爱的球队一定要站在欧洲之巅，只是奢望每周能有些许精彩与进步吧。</li>
  <li>这两周周末开始和吕神、武神搞 StarCraft2，作为 OpenRA 的提升版玩。本来该高中大学一头扎进去，但是并没有，现在作为消遣不亦乐乎。</li>
  <li>周四的 #date-night 去尝试了渔人的烤猪蹄，也非常不错；周六的 #movie-night 和喜福一起看了<a href="https://movie.douban.com/subject/24733428/">心灵奇旅</a>，这部动画片真是给大人看的，因为每个小朋友兜里都有自己的小落叶吧。我喜欢它提醒大家关注当下，珍惜享受生活的点滴，但是如何到那里呢？几乎避而不谈，好像只要望向天空就能看到落叶，睁大眼睛就能看见美好。然而，并不是。落叶一直都在，我们看不到，即使看到了也感受不到。从这个角度讲，所有不深入的探讨都产生更大的误导，尤其一直和主角的追逐梦想做对比，它给人们提供了一种错觉，好像应该放弃梦想，活在当下就好了，是这样吗？</li>
  <li>这周的阅读是<a href="https://book.douban.com/subject/1732250/">悉达多</a>，第一次阅读英文而感受到文字之美。想起初中在学校参加竞赛，背诵各种名著的作者和名字，第一次知道这本奇怪名字的书以及它的故事梗概：一个富家子弟离经叛道修仙成佛。当时完全没有任何去了解的欲望，被应试教育判了死刑，所有兴趣都被关在水晶棺材，我被领进去看了一眼恨不得赶快离开。想不到这么多年过去，我认真地读完，心中深深地感动，不止是他的经历，还有背后一整套耐人寻味的思考。#weekly-read</li>
  <li>周末花了一整天时间把阳台的家具都布置好了，天气渐暖，期待美好的春天。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w10-collage.jpg" alt="w10-collage" /></p>

<h2 id="w9-0301---0307">W9 (03/01 - 03/07)</h2>

<ul>
  <li>这周的工作很过瘾，推进了很多事情，做了两个月的 guest serialization 终于要收官了。</li>
  <li>周四的 #date-night 又去了<a href="https://goo.gl/maps/f651UCmUTq56Hyri8">一品川菜</a>，尝试些上周想吃没吃到的😋。周六的 #movie-night 看了喜福的千玺，<a href="https://movie.douban.com/subject/35096844/">送你一朵小红花</a>，meh，披着肿瘤外衣的青春爱情片。周中的闲暇看完了 <a href="https://movie.douban.com/subject/35192377/">The Playbook</a>，对几个不同体育项目金牌教练的采访，很有趣。</li>
  <li>这周的阅读是<a href="https://book.douban.com/subject/26896878/">刀锋</a>。我好喜欢毛姆的文字，像剃刀边缘般锋利，尖酸刻薄，有时你又不得不承认被切中要害。他笔下的主角总是超凡脱俗，带有一丝仙气或者异于常人的勇气，看完心中免不了一丝向往与冲动。既然这部是他生涯后期的作品，我有理由相信东方哲学，悉达多式的流浪与醒悟，是他认为人生的出路。#weekly-read
    <ul>
      <li>“这回答让我感到些许不安。在如此陈设精美、挂着名画的房间里，这句话就像是漫过浴缸的水，在渗透天花板后，滴答一声落了下来。”</li>
      <li>“他没有抱负且淡泊名利，出名只会让他倒尽胃口，因此可能满足于过自己选择的生活，忠于自己。他为人太过谦虚，不愿当别人的榜样。不过他也许认为，终究会有某些人受他吸引前来，宛如飞蛾扑火，共享那温暖又带着光亮的信念，相信人生最大的满足在于精神生活。他也许觉得，只要无我和无求，在自我实现的道路上踽踽独行，贡献也不亚于著书立说或教诲世人。”</li>
    </ul>
  </li>
  <li>周末无聊躺在沙发上刷到这两个视频 <a href="https://www.youtube.com/watch?v=kE7D7qFayVg">Greatest Sports Moments</a> &amp; <a href="https://www.youtube.com/watch?v=v3m_DlYSJOA">Greatest World Records in Sport History</a>，是关于一些体育赛事的经典瞬间。之前当然有看过类似的，但是这次不知怎么被感动到哭。在那些奇迹当中，我感受到了美，那些奔跑的躯体，瞬间爆发的能量，对身体极限的拼搏与追逐。其中有一场历时最久（十一小时）的网球比赛，在温网的长盘决胜中 Isner 70:68 战胜 Mahut。赛后俩人筋疲力竭的站在比分板合照，Isner 自然流露着喜悦，而我最难忘 Mahut 的表情，那种无奈，是上帝对一个人最残酷的玩笑。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w9-collage.jpg" alt="w9-collage" /></p>

<h2 id="w8-0222---0228">W8 (02/22 - 02/28)</h2>

<ul>
  <li>刚刚意识到二月份这么快就过去了。工作上继续很投入，效率不错。周中得知要好的同事离职，一起视频聊天。他的离职理由是，退休。为他开心，也为自己忧愁什么时候能完全自由。我不讨厌工作，事实上我对工作的喜爱比厌烦更多，但是来自工作的压力是潜移默化的，就像很明显周末的睡眠质量会更好。想来想去，对于现状我还是非常知足的。设想如果真的能够退休，或者需要一些运气，或者需要自己能对生活有更多的认识，摆脱更多物质的需求。</li>
  <li>周五休息去滑雪，这个冬天第五次，整体感受明显在变好。来之前准备了一些视频学习，但是用处不大，下次可以找个教练帮忙指点迷津。</li>
  <li>周四的 #date-night 去吃了小白公瑾推荐的<a href="https://goo.gl/maps/f651UCmUTq56Hyri8">一品川菜</a>，名不虚传，我和喜福干掉了四盘菜，吃相有点难看。周六的 #movie-night 一起看了<a href="https://movie.douban.com/subject/35068230/">吉祥如意</a>。虽然是记录我的家乡吉林，但是感受不大，除了单纯的记录，我觉着导演什么都没说。</li>
  <li>这周的阅读是<a href="https://book.douban.com/subject/1022238/">菊与刀</a>，作为一个中国人观摩日本文化的有趣之处在于，那些属于日本的特立独行我们都清楚也理解它的源头，就像日本汉字一样，我们能猜但是往往get不到那近似又微妙的区别；<a href="https://book.douban.com/subject/34840201/">你的孩子不是你的孩子</a>，写的真好，一篇篇简单的文字道尽教育恐怖主义。#weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w8-collage.jpg" alt="w8-collage" /></p>

<h2 id="w7-0215---0221">W7 (02/15 - 02/21)</h2>

<ul>
  <li>春节假期回来，有点怅然若失。倒不是不想工作，只是和国内朋友密集接触，心也飞了回去。花了一天时间调整，很快又让生活回到正轨，其实最有效的办法就是每天六点半把自己强行拽起来，运转起来就好了。</li>
  <li>周三看了我文欧冠八分之一淘汰赛第一回合1:2波尔图的比赛，​💩​意浓，我是该习惯呢还是该习惯呢。这赛季至今最让人无法接受的三场比赛，输巴萨、国米、波尔图。完全不是因为比分，而是毫无章法，我已经伴随着降低预期了，可还是接不住各种无脑的表现。</li>
  <li>周中确认了，这一两年无底线借钱的好朋友是因为赌博。事情烂到今天的地步，其实早就没了任何挽救的办法。你以为拼上了底线会有一线生机，但现实是你敢把底线放多低，最后就有多惨。我已经很努力去试着理解，但是我没有义务再去帮助，我的意愿也早被这两年的欺骗耗光。所以，peace，后会无期。</li>
  <li>周末爱琳来家里过周末，小白和公瑾也来做客，喜福做了一大桌子菜，大家一起闲聊扯淡，啃着油光锃亮的烤牛尾，愉快的浪费时光。</li>
  <li>周四的 #date-night 去吃了 <a href="https://goo.gl/maps/cdpyMfipXSJqFJqW8">Smoking Pig</a>，我对拉面的定义早就被 <a href="https://goo.gl/maps/KUMXY4ziqBhiF9oL9">Marutama</a> 拉到了天际，所以这家只能算是家附近还不错的一家。周六的 #movie-night 一起看了<a href="https://movie.douban.com/subject/1947270/">天狗</a>，说来有趣竟是一部讲退伍军人的电影，当然更多是情节需要，一个刚正不阿的存在和发展中的特色社会的激烈对撞。我其实更愿意把主角想象成村民和所有村民，他们才是真正的大多数啊。</li>
  <li>这周的阅读是大殷哥念兹在兹的<a href="https://book.douban.com/subject/27172839/">苏菲的世界</a>，大学时候看了<a href="https://movie.douban.com/subject/1293077/">苏菲的抉择</a>就一直以为是这本书的电影版，直到我开始看还在用斯特里普想象苏菲，当然了看过开头就知道完全对不上呀 :man_facepalming: 这本哲学科普书的确写出了新高度，竟然用画中画的方式套娃了三层视角，很好地隐喻了哲学中关于个人意志关于上帝的终极议题。说实话，我并不觉得其中关于哲学概念的介绍足够有章法，但是如此有趣的阅读体验，不敢要求更多。#weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w7-collage.jpg" alt="w7-collage" /></p>

<h2 id="w6-0208---0214">W6 (02/08 - 02/14)</h2>

<ul>
  <li>继续认真推进工作，在做的 guest serialization 也终于要到尾声了。当然越到后来，可能问题越多，但是不重要，”Set up systems, not goals”，保持节奏就好。</li>
  <li>周四是国内的春节，我们继续火锅的传统。和爸爸妈妈视频，给各位朋友拜年。虽然还是有点社交恐惧，但是主动给朋友发些祝福我也真心感到愉悦。周六喜福包了饺子，我非常认真地加油鼓励，然后畅快大吃😋</li>
  <li>周五我和 Jeff 一起请假去 Whistler 尝试了一次 cross country。天气一般般，但是人烟稀少，走在无比安静的山林间，望着茫茫白雪和远处的雪山，然后慢慢掌握这种滑雪的技巧，最后一起杀到黑道，天黑了才匆忙赶回来，非常爽。</li>
  <li>周六开始这个冬天第二场雪，连续下了三天，带 Nikki 去公园开心了三天。蹦啊蹦，吃雪追雪，把脑子插雪里。让我，在雪地上撒点野。</li>
  <li>每天晚上的日常是和小哥小鸡联机 OpenRA，玩出了各种花样，一起进步也一起互相制衡。</li>
  <li>周四的 #date-night 在家火锅。周六的 #movie-night 一起看了<a href="https://movie.douban.com/subject/1469049/">处刑人</a>，有风格，但是形式大于内容。</li>
  <li>这周的阅读是<a href="https://book.douban.com/subject/26791320/">历史原来可以这样学（一、二）</a>，青少年历史读物，非常轻松愉悦，真希望上学时候有这种书可以读。#weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w6-collage.jpg" alt="w6-collage" /></p>

<h2 id="w5-0201---0207">W5 (02/01 - 02/07)</h2>

<ul>
  <li>这周的工作节奏超级棒，非常专注且高效。每天结束工作精神上会疲惫，但是有很大满足感。跟在实践 Make Time 有关系。</li>
  <li>这周的阅读是 <a href="https://maketime.blog/">Make Time</a>，很简单的一本任务管理的小书，不能说有什么开创性的想法，但是作者提出了一套简单的系统，并且有各种有趣的小 tip 来帮助做改进。几个对我比较重要的点：设立 highlight 并实现，让每天都有期盼；减少手机打扰的核心的办法是反向产品设计，让一切功能变得难用一点点；关注自己的 energy level，例如什么时候吃零食，什么时候来杯咖啡最有效；最后，如果想释放大脑的压力，可以从放松身体着手。#weekly-read</li>
  <li>周四的 #date-night 又和喜福去吃了渔人烤鱼，可能是来到温哥华最爱的一家了。周六的 #movie-night 重看了<a href="https://movie.douban.com/subject/1900841/">窃听风暴</a>，这个结尾总是让我印象深刻。</li>
  <li>这周的播客听到了久违的开心内容：ALL THE SMOKE 采访 <a href="https://podcasts.apple.com/us/podcast/kendrick-perkins-ep-69-all-smoke-full-episode-showtime/id1483638752?i=1000506915099">Kendrick Perkins (ep 69)</a> 和 <a href="https://podcasts.apple.com/us/podcast/doc-rivers-ep-70-all-smoke-full-episode-showtime-basketball/id1483638752?i=1000507759379">Doc Rivers (ep 70)</a>。球员和教练总是有最真切的角度，阐释比赛和回忆历史。何况这两位都很有语言魅力。Doc 自不必说，回顾绿军三巨头以及后来快船时期讲了各种趣闻，等到 Perkins 着实让我理解为什么他退役之后做了媒体人。让我最喜爱的是看到一个完全在我经验与想象外的人。他也就说了一百来次 mother fucker 吧，我开始脑子画问号，后来就完全笑崩。</li>
  <li>周五下午翘班去滑雪，终于不像前两次那么极端天气了，也很快找回了滑雪的乐趣。缆车上跟一个哥们遇到两次，他说要带我体验一个不错的路线，然后指着陡坡上的一片雪包说他在练习这个，要我跟着一起。我看他半天没动，就说“我先来吧”。开始时候我稳扎稳打表现不错，但是突然不知道哪个雪包好像伸了一下手，把我的雪板拽了下来，我也被这股力量推上了天，空中翻了个筋斗，稳稳地胸部着地 💯。我也没准备站起来，就这样，头朝下慢慢在雪道上驰骋。怎么说呢，超级开心的。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w5-collage.jpg" alt="w5-collage" /></p>

<h2 id="w4-0125---0131">W4 (01/25 - 01/31)</h2>

<ul>
  <li>工作很顺利，做了一个新的 msgpack prototype，给大家展示都觉着没什么问题，下面就是一点点完善最终实现出来。</li>
  <li>最近在联系 PWL 做 financial planning/investment，周末终于把去年的花销统计好，和喜福简单做了些计划。</li>
  <li>周末和小哥、小鸡和大偏连战了三天 OpenRA，Europe 打得不亦乐乎。</li>
  <li>周四的 #date-night 和喜福去吃了<a href="https://goo.gl/maps/kAAS4y976qiKR9BV9">京门涮肉</a>，非常赞；周六的 #movie-night 一起看了 <a href="https://movie.douban.com/subject/1293821/">Heathers</a>，本来以为是轻松的青春电影，但是慢慢发现所有人都很怪，逐渐就拐成了黑色 cult 片。</li>
  <li>这周的阅读是<a href="https://book.douban.com/subject/34855123/">历史原来可以这样学（三、四）</a>，还是林新浩的科普读物，对我这种历史盲人来讲看到了光明与愉悦。#weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w4-collage.jpg" alt="w4-collage" /></p>

<h2 id="w3-0118---0124">W3 (01/18 - 01/24)</h2>

<ul>
  <li>做了两个礼拜的项目，终于在这周可以收尾。最近在纠结是应该追求更自由的工作方式更有纪律。自由的好处是，看天吃饭，用“想”字来做决定，坏处也是显而易见，到了晚上还在问自己是否完成了工作；而保持纪律呢，会有困顿着工作的时候，但也会有更稳定的产出，尤其固定时间下班就不需要再去纠结。我个人的经验经常摇摆，目前来看最好的做法是尊重纪律，适当给予自己灵活。另外，这周花了好多精力在和组长对线，关于加薪和更新股票，希望下周会有好结果。</li>
  <li>周三带喜福去了第一次B超，本来期望的多胞胎计划落空了 🙃。但是这个小宝宝也很可爱，喜福说她一直张牙舞爪，161下每分钟的心跳，你是有多着急长大？</li>
  <li>周末继续和小鸡和小哥 OpenRA，从上周的三家平三家冷酷，到最后一把平了九家冷酷，开心啊。</li>
  <li>这周断断续续到了很多家具，周六花了一整天把楼上的书架，阅读角，楼下的沙发、影音室全部弄好。终于快结束半年的折腾，可以安心享受了。</li>
  <li>周四的 #date-night 和Jeff爱琳去吃了<a href="https://g.page/vancouver-liziba?share">李子坝板栗鸡</a>；周六的 #movie-night 看了韩国电影<a href="https://movie.douban.com/subject/30475125/">担保</a>，九十年代韩剧的套路，所有情节都是可以扭曲操纵观众感情的，有点浪费时间。</li>
  <li>这周用 audible 听了 Trever Noah 的 <a href="https://book.douban.com/subject/26907961/">Born A Crime</a>，料想是单口演员亲自口述，有很多期待。但是最终感受一般，我只听到了童年故事会，而仅此而已。#weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w3-collage.jpg" alt="w3-collage" /></p>

<h2 id="w2-0111---0117">W2 (01/11 - 01/17)</h2>

<ul>
  <li>工作按部就班，坚持上周制定的计划，去做就好了。</li>
  <li>自从 Nikki 几周前在操场贴地飞行无意碰倒老奶奶后，就再也不敢让她放肆奔跑了。最近找了个操场外围一块隐秘的下坡，陪她使劲练球：扔出去捡回来，扔出去让她等指令后再去捡，扔给她高空球一嘴接住。好久不见她回到家里还在边喘边笑，在兴奋中睡去了。</li>
  <li>因为之前买了新设备，Apple 给了几个月试用 Arcade，看到这个游戏 <a href="https://apps.apple.com/us/app/mini-motorways/id1453901000">Mini Motorways</a>，玩两次就上瘾了。规则非常简单，随着时间不断形成复杂的情况，最后会形成一个近乎艺术品的状态。很有乐趣也很治愈。</li>
  <li>周末和国内朋友一起玩了些线上游戏，OpenRA (重制红警)，太空狼人，谁是卧底，不亦乐乎。</li>
  <li>周四的 #date-night 和高磊明远一起去了 Green Leaf Cafe，他们家的炙寿司没得说。一起聊了很久，直到服务员完全不理我们。周六的 #movie-night 和喜福重温<a href="https://movie.douban.com/subject/1857099/">老无所依</a>，上一次还是一个人在大学寝室，看的云里雾里。这一次才发觉乐趣。贾维尔巴登的痴面杀手，真是独树一帜的存在。</li>
  <li>这周的阅读是<a href="https://book.douban.com/subject/26390842/">哲学家们都干了些什么</a>，有趣又好读。这本书帮我建立一起一套简单的谱系，关于各位哲学大家和思潮，从前那些看似是人话但又摸不到头绪的词组，诸如理性主义、经验主义，终于在我脑中变得生动起来。一切都是那么的有趣。#weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w2-collage.jpg" alt="w2-collage" /></p>

<h2 id="w1-0104---0110">W1 (01/04 - 01/10)</h2>

<ul>
  <li>新年第一周，还没完全从假期中走出来，有点雄心勃勃，也有点无精打采。周一早上六点半顽强地爬起来，我都被自己感动了，强行喂自己鸡血过了几天，周四就开始无心恋战了，还好前三天算是完成了一些基本的工作，做了些总结，制订些新的工作日程。</li>
  <li>周一整理了准备继续保持和实践的习惯，写在这里自我鼓励
    <ul>
      <li>每日：工作日六点半起床；九点洗澡、写日记、看书；十点半上床睡觉</li>
      <li>每日：冥想（已经坚持了一个多月，每天五分钟，可以尝试提高时间）</li>
      <li>每日：复习笔记（readwise + eudic）</li>
      <li>每周：运动一次（有点犯愁，不知道阴雨连连可以去干嘛）</li>
      <li>每周：阅读一本书 #weekly-read</li>
      <li>每周：和喜福周四晚上约会 #date-night，周六看电影 #movie-night</li>
      <li>第一个季度：戒烟</li>
    </ul>
  </li>
  <li>周三我文联赛关键战，在米兰主场3:1取胜，开心了一整天。这赛季我文不再稳健，时而还是上赛季的翔味儿，但是踢出了两场标志性的胜利，之前的客战巴萨和这场国家德比。</li>
  <li>周四的 #date-night 去吃了明远推荐的伊朗菜 <a href="https://g.page/KhaghanNorthVancouver?share">Khaghan Restaurant</a>，跟我们在 Waterloo 喜欢的一家中东菜不相上下，偶尔体验一次异域风情，感受非常不错；周六的 #movie-night 我们看了过春天，应该是我老了，对这种青春片没什么兴致。如果可以选择，我宁愿活在少年时代，懵懂但是纯真，更多是靠好奇心（而不是自尊心）驱使着对世界的探索。但是青春期？我喜欢那些回忆和身体里涌动的力量，但是那种不自知的拧巴，很像走在路上我无处安放的双手，我还是更愿意在记忆中去回望。</li>
  <li>这周读了 <a href="https://book.douban.com/subject/1291231/">The Curious Incident of the Dog in the Night-Time</a>，非常简单的小故事，但是视角非常有趣：一个自闭症儿童如何面对生活，面对父母离异的生活。#weekly-read</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2021/w1-collage.jpg" alt="w1-collage" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What we've done in 2020]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2021/01/01/what-weve-done-in-2020/"/>
    <updated>2021-01-01T12:24:53-08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2021/01/01/what-weve-done-in-2020</id>
    <content type="html"><![CDATA[<svg id="gantt-2020"></svg>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Review] SOE-YCSCS1 Compilers]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2020/06/07/review-soe-ycscs1-compilers/"/>
    <updated>2020-06-07T11:47:14-04:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2020/06/07/review-soe-ycscs1-compilers</id>
    <content type="html"><![CDATA[<table class="custom">
  <tbody>
    <tr>
      <td><strong>Course</strong></td>
      <td>Compilers</td>
    </tr>
    <tr>
      <td><strong>Instructor</strong></td>
      <td>Alex Aiken</td>
    </tr>
    <tr>
      <td><strong>Link</strong></td>
      <td><a href="https://online.stanford.edu/courses/soe-ycscs1-compilers">online.stanford.edu/courses/soe-ycscs1-compilers</a></td>
    </tr>
  </tbody>
</table>

<ul id="markdown-toc">
  <li><a href="#summary" id="markdown-toc-summary">Summary</a></li>
  <li><a href="#intro" id="markdown-toc-intro">0 Intro</a>    <ul>
      <li><a href="#what-a-compiler-does" id="markdown-toc-what-a-compiler-does">0.1 What a compiler does</a></li>
      <li><a href="#economy-of-programming-language" id="markdown-toc-economy-of-programming-language">0.2 Economy of programming language</a></li>
    </ul>
  </li>
  <li><a href="#lexical-analysis" id="markdown-toc-lexical-analysis">1 Lexical Analysis</a>    <ul>
      <li><a href="#intro-1" id="markdown-toc-intro-1">1.1 Intro</a></li>
      <li><a href="#regular-language" id="markdown-toc-regular-language">1.2 Regular Language</a></li>
      <li><a href="#formal-language" id="markdown-toc-formal-language">1.3 Formal Language</a></li>
      <li><a href="#lexcial-specification" id="markdown-toc-lexcial-specification">1.4 Lexcial Specification</a></li>
      <li><a href="#finite-automata" id="markdown-toc-finite-automata">1.5 Finite Automata</a></li>
    </ul>
  </li>
  <li><a href="#parsing" id="markdown-toc-parsing">2 Parsing</a>    <ul>
      <li><a href="#intro-2" id="markdown-toc-intro-2">2.1 Intro</a></li>
      <li><a href="#context-free-grammars" id="markdown-toc-context-free-grammars">2.2 Context Free Grammars</a>        <ul>
          <li><a href="#cfg---intro" id="markdown-toc-cfg---intro">2.2.1 CFG - Intro</a></li>
          <li><a href="#cfg---deriviations" id="markdown-toc-cfg---deriviations">2.2.2 CFG - DERIVIATIONS</a></li>
          <li><a href="#cfg---ambiguity" id="markdown-toc-cfg---ambiguity">2.2.3 CFG - AMBIGUITY</a></li>
          <li><a href="#cfg---error-handling" id="markdown-toc-cfg---error-handling">2.2.4 CFG - ERROR HANDLING</a></li>
        </ul>
      </li>
      <li><a href="#abstract-syntax-tree" id="markdown-toc-abstract-syntax-tree">2.3 Abstract Syntax Tree</a></li>
      <li><a href="#recursive-descent-parsing" id="markdown-toc-recursive-descent-parsing">2.4 Recursive-Descent Parsing</a></li>
      <li><a href="#predictive-parsing" id="markdown-toc-predictive-parsing">2.5 Predictive Parsing</a></li>
      <li><a href="#bottom-up-parsing" id="markdown-toc-bottom-up-parsing">2.6 Bottom-up Parsing</a>        <ul>
          <li><a href="#shift--reduce" id="markdown-toc-shift--reduce">SHIFT &amp; REDUCE</a></li>
          <li><a href="#handles" id="markdown-toc-handles">HANDLES</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#semantic-analysis" id="markdown-toc-semantic-analysis">3 Semantic Analysis</a>    <ul>
      <li><a href="#identifiers" id="markdown-toc-identifiers">3.1 Identifiers</a>        <ul>
          <li><a href="#scope" id="markdown-toc-scope">SCOPE</a></li>
          <li><a href="#symbol-tables" id="markdown-toc-symbol-tables">SYMBOL TABLES</a></li>
        </ul>
      </li>
      <li><a href="#types" id="markdown-toc-types">3.2 Types</a>        <ul>
          <li><a href="#type-checking" id="markdown-toc-type-checking">3.2.1 TYPE CHECKING</a></li>
          <li><a href="#type-environment" id="markdown-toc-type-environment">3.2.2 TYPE ENVIRONMENT</a></li>
          <li><a href="#subtype-methods-and-implementation" id="markdown-toc-subtype-methods-and-implementation">3.2.3 SUBTYPE, METHODS and IMPLEMENTATION</a></li>
          <li><a href="#static-vs-dynamic" id="markdown-toc-static-vs-dynamic">3.2.4 STATIC VS. DYNAMIC</a></li>
          <li><a href="#selftype" id="markdown-toc-selftype">3.2.5 SELF_TYPE</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#runtime-organizations" id="markdown-toc-runtime-organizations">4 Runtime Organizations</a>    <ul>
      <li><a href="#activations" id="markdown-toc-activations">4.1 Activations</a></li>
      <li><a href="#activation-records" id="markdown-toc-activation-records">4.2 Activation Records</a></li>
      <li><a href="#global--heaps" id="markdown-toc-global--heaps">4.3 Global &amp;&amp; Heaps</a></li>
      <li><a href="#alignment" id="markdown-toc-alignment">4.4 Alignment</a></li>
    </ul>
  </li>
  <li><a href="#code-generation" id="markdown-toc-code-generation">5 Code Generation</a>    <ul>
      <li><a href="#stack-machines" id="markdown-toc-stack-machines">5.1 Stack Machines</a>        <ul>
          <li><a href="#stack-machine-vs-register-machine" id="markdown-toc-stack-machine-vs-register-machine">5.1.1 Stack machine vs Register machine</a></li>
          <li><a href="#n-register-stack-machine" id="markdown-toc-n-register-stack-machine">5.1.2 n-register stack machine</a></li>
        </ul>
      </li>
      <li><a href="#intro-3" id="markdown-toc-intro-3">5.2 Intro</a></li>
      <li><a href="#code-gen" id="markdown-toc-code-gen">5.3 Code Gen</a></li>
      <li><a href="#code-gen---object-layout" id="markdown-toc-code-gen---object-layout">5.4 Code Gen - Object Layout</a></li>
      <li><a href="#evaluation-semantics" id="markdown-toc-evaluation-semantics">5.5 Evaluation Semantics</a></li>
      <li><a href="#operational-semantics" id="markdown-toc-operational-semantics">5.6 Operational Semantics</a></li>
      <li><a href="#intermediate-language" id="markdown-toc-intermediate-language">5.7 Intermediate language</a></li>
    </ul>
  </li>
  <li><a href="#optimization" id="markdown-toc-optimization">6 Optimization</a>    <ul>
      <li><a href="#intro-4" id="markdown-toc-intro-4">6.1 Intro</a></li>
      <li><a href="#local-optimization" id="markdown-toc-local-optimization">6.2 Local Optimization</a></li>
      <li><a href="#global-optimization" id="markdown-toc-global-optimization">6.3 Global Optimization</a>        <ul>
          <li><a href="#dataflow-analysis" id="markdown-toc-dataflow-analysis">6.3.1 Dataflow analysis</a></li>
          <li><a href="#global-constant-propogation" id="markdown-toc-global-constant-propogation">6.3.2 Global constant propogation</a></li>
          <li><a href="#liveness-analysis" id="markdown-toc-liveness-analysis">6.3.3 Liveness Analysis</a></li>
        </ul>
      </li>
      <li><a href="#register-allocation" id="markdown-toc-register-allocation">6.4 Register Allocation</a>        <ul>
          <li><a href="#graph-coloring" id="markdown-toc-graph-coloring">6.4.2 Graph Coloring</a></li>
        </ul>
      </li>
      <li><a href="#managing-cache" id="markdown-toc-managing-cache">6.5 Managing Cache</a></li>
      <li><a href="#automatic-memory-management-gc" id="markdown-toc-automatic-memory-management-gc">6.6 Automatic Memory Management (GC)</a>        <ul>
          <li><a href="#intro-5" id="markdown-toc-intro-5">6.6.1 Intro</a></li>
          <li><a href="#mark-and-sweep" id="markdown-toc-mark-and-sweep">6.6.2 Mark and Sweep</a></li>
          <li><a href="#stop-and-copy" id="markdown-toc-stop-and-copy">6.6.3 Stop and Copy</a></li>
          <li><a href="#reference-counting" id="markdown-toc-reference-counting">6.6.4 Reference Counting</a></li>
          <li><a href="#advanced-gc-algorithm" id="markdown-toc-advanced-gc-algorithm">6.6.5 Advanced GC Algorithm</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h1 id="summary">Summary</h1>

<p><strong>INTRO</strong></p>

<p>Interpreter is “online” and compiler is “offline”</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Program + Data =&gt; Interpreter =&gt; Output
</span><span class="line">
</span><span class="line">Program =&gt; Compiler =&gt; exec
</span><span class="line">                       exec + Data =&gt; Output</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>What a compiler does?</p>

<p>Five phases</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Lexical Analysis  (input)   -&gt; tokens
</span><span class="line">Parsing           (tokens)  -&gt; AST
</span><span class="line">Semantic Analysis (AST)     -&gt; IL
</span><span class="line">Optimization      (IL)      -&gt; IL
</span><span class="line">Code Generation   (IL)      -&gt; Machine code</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Why are there new programming languages?</p>

<p>Programming training is the main dominant cost for a programming language. It’s easy to start a new
language when productivity boost is over the training cost.</p>

<p><strong>LEXICAL ANALYSIS</strong></p>

<p>A LA does two things: partition the input string into lexemes, and identify the token class of each
lexeme. We need a way to specify which set of strings belongs to each token class and the usual tool
for doing that is to use Regular Language.</p>

<p>As a sidenote, inside of the compiler, we typically have several different Formal Languages, and
Regular Language is one of them. A Formal Language has a set of alphabet and a meaning function,
that maps syntax to semantics.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">              described by
</span><span class="line">Lexical Analysis -------------- Lexical Spec
</span><span class="line">                                  |
</span><span class="line">                            Formal Language
</span><span class="line">                                  |           implemented by
</span><span class="line">                            Regular Language ---------------- Regular Expression
</span><span class="line">                                             \--------------- Finite Automata (NFA, DFA)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We use Regular Expression as the Lexical Specification and we use Finite
Automata as the implementation.</p>

<p>To define Deterministic Finite Automata: 1. no e moves; 2. for one input, there is only one
transition from a state.</p>

<p>A token consists of (token class, lexeme).</p>

<p><strong>PARSING</strong></p>

<p>Heuristic: why is there a Parsing stage? A Regular Language is the weakest Formal Language that’s
widely used, no matter is Regular Expression, NFA, DFA, it has its limit on expressing, eg. nested
structure.</p>

<p>Since not all strings of tokens are programs, a parser must distinguish between valid and invalid
string of tokens. We need</p>

<ul>
  <li>a language for describing valid string of tokens – CFG</li>
  <li>a method (algorithm) for distinguishing valid from invalid string of tokens – Parsing algorithm</li>
</ul>

<p>Context Free Grammars (a Formal Language) is help to describe whether a string of tokens is valid. It consist of</p>

<ul>
  <li>a set of terminals, T</li>
  <li>a set of non-terminals, N</li>
  <li>a start symbol, S, where S (- N</li>
  <li>a set of productions or rules</li>
</ul>

<p>Recursive-descent Parsing (top-down): The parse tree is constructed from the top and from left to
right. Start with top-level non-terminal E, try the rules for E <strong>in order</strong>. Recursive-descent
parsing is a simple and general parsing strategy, which is used in GCC frontend.  To use it, left
recursion must be eliminated first.</p>

<p>Predictivce Parsing (top-down): In Recursive-descent parsing, at each step, there are many choices
of production to use. Therefore, we need to backtrack to undo bad choices. Predictive parsing are a
lot like Recursive-descent parsing, but it can “predict” which production to use by looking at the
next few tokens, thus there is no need to backtrace. Predictive parers accept LL(k) grammars. At
each step, there should be at most one choice of production.</p>

<ul>
  <li>Left-to-right</li>
  <li>Left-most derivation</li>
  <li>k tokens looking ahead</li>
</ul>

<p>Bottom-up parsing is more general than top-down parsing, but just as efficient.  Bottom-up builds on
ideas in top-down parsing and is the preferred method for most of generator tools. Bottom-up parsing
reduces a string to the start symbol by inverting productions.</p>

<p><strong>SEMANTIC ANALYSIS</strong></p>

<p>Lexical analysis detects inputs with illegal tokens; Parsing detects with ill-formed parse trees;
and Semantic Analysis, as last front-end phase, catches all remaning errors, eg</p>

<ul>
  <li>all identifiers are declared</li>
  <li>reserved identifiers are not misused</li>
  <li>types</li>
  <li>inheritance relationships</li>
  <li>classes defined only once</li>
  <li>method in a class defined only once</li>
</ul>

<p>Much of Semantic Analysis can be expressed as recursive descent of an AST:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">before: process an AST node n
</span><span class="line">recurse: process the children of n
</span><span class="line">after: finish processing the node n</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Identifiers. The scope of an identifier is the portion of a program in which that identifier is accesible. Scope
helps match identifier declarations with uses. There are two kinds of scopes:</p>

<ul>
  <li>static, that the scope depends only on the program text not runtime behaviour;</li>
  <li>dynamic, which referes to the cloest enclosing binding in the execution of the program.</li>
</ul>

<p>As we need to know which identifiers are defined, we introduce a data structure that tracks the current bindings of identifiers, which is Symbol Table.</p>

<p>Types. A set of values and a set of operations on those values. A language’s type system specifies which operations are valid for which types. The goal of type checking is to enture that operations are used with the correct types. There is no types in an assembly language, therefore there are no types at the bit level in the machine code. So, type is a
virtual concept at the language level, and to type check is to enforce the intended interpretation of values.</p>

<p>There are a few kinds:</p>

<ul>
  <li>static typed langs: C, Java. A lot of code is written in statically typed lang has an “escape”
mechanism: like unsafe casts in C, Java (void pointer can be anything).</li>
  <li>dynamic typed langs: Lips, Ruby. A lot of dynamically typed lang rewrites their compilers with
static lang for optimization and better debugging.</li>
  <li>untyped langs: machine code</li>
</ul>

<p>Type checking. The Formal Language we use is Logic Rules of Inference, which has the form that “if
Hypothesis is true, then Conclusion is true”.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">⊢ Hypothesis .. ⊢ Hypothesis
</span><span class="line">----------------------------
</span><span class="line">         ⊢ Conclusion
</span><span class="line">
</span><span class="line">⊢ means "it's provable that..."</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Type environment. A type environment gives types for free variables/identifiers in the current scope, by free it means
the varaible is not defined.</p>

<p>As an example for defining Assign type checking rule:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">O ⊢ e1: T1
</span><span class="line">O(x) = T0       [Assign]
</span><span class="line">T1 &lt;= T0
</span><span class="line">-------------
</span><span class="line">O ⊢ x = e1: T1</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>A type environment is built inisde the Symbol Table and gets passed down the AST from root to
leaves. Types are computed up the AST from the leaves towars the root.</p>

<p><strong>RUNTIME ORGANIZATIONS</strong></p>

<p>Before we get into optimization and code generation, we need to understand what we are trying to
generate. A runtime organization controls the management of run-time resources. Particually, to
understand a compiler works, we should understand the correspondenc between static (compile-time)
and dynamic (run-time) strucutres: what is done by the compiler and what is deferred to the
generated program actually runs.</p>

<p>Execution of a program is initially by OS. When a program is invoked: the OS allocates space for the
program; the code is loaded into part of the space; the OS jumps to the entry point (“main”).
A compiler is responsible for generating code and orchestrating code to use the data space.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">+-------------+
</span><span class="line">|     code    | ---+
</span><span class="line">+-------------+    |
</span><span class="line">|             |    |
</span><span class="line">|     data    | &lt;--+
</span><span class="line">|             |
</span><span class="line">+-------------+</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Activations. An invocation of procedure P is an activation of P. The lifetime of an activation of P
is all the steps of execute P, including all the steps in procedures P calls. We can also say that
the lifetime of a varaible x is the portion of execution in which x is defined. To be noted that,
lifetime is a dynamic (run-time) concept, whereas scope is a static (compile-time) concept. Since
activations are properly nested, we can use a stack to track currently active procedures.</p>

<p>Activation Records. The information needed to manage one procedure activation is called an
Activation Record or Frame. If procedure F calls G, then G’s activation records contains a mix of
info about F and G. Becuase G’s AR should contain information to 1. complete execution of G 2.
resume execution of F.</p>

<p>One of many possible AR designs (which works for C)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">+----------------+
</span><span class="line">| result         |
</span><span class="line">+----------------+
</span><span class="line">| argument       |
</span><span class="line">+----------------+
</span><span class="line">| control link   |   // who calls the current activation
</span><span class="line">+----------------+
</span><span class="line">| return address |   // where to resume execution after the current activation
</span><span class="line">+----------------+</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The compiler must determine, at compile-time, the layout of AR and generate code
that correctly accesses location in the activation records. Thus, the AR layout and the code
generator must be designed together.</p>

<p>Globals cannot be stored in AR as all references to a global variable should point to
the same object. So, globals are assigned at a fixed address once, as statically allocated.
For values that outlive the procedure that creates it cannot be kept in the AR neither, like in
<code>method foo() { new Bar }</code>, that <code>Bar</code> value must survive deallocation of <code>foo</code>’s AR. So, we need to
use heap to store dynamically allocated data.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class=""><span class="line">+-------------+ Low address
</span><span class="line">|    code     |
</span><span class="line">+-------------+
</span><span class="line">|             |
</span><span class="line">| static data | -- Globals
</span><span class="line">|             |
</span><span class="line">+-------------+
</span><span class="line">|   stack     | -- ARs
</span><span class="line">|     |       |
</span><span class="line">|     v       |
</span><span class="line">|.............|
</span><span class="line">|             |
</span><span class="line">|             |
</span><span class="line">|             |
</span><span class="line">|             |
</span><span class="line">|             |
</span><span class="line">|.............|
</span><span class="line">|     ^       |
</span><span class="line">|     |       |
</span><span class="line">|    heap     |
</span><span class="line">+-------------+ High address</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Alignment. Data is word aligend if it begins at a word boundary. Most machines have some alignment
restrictions or performance penalties for poor alignment.</p>

<p><strong>CODE GENERATION</strong></p>

<p>Stack Machine, the simplest model for code generation. A stack machines use a stack as the only
storage. An instruction <code>r = F(a1,...an)</code> is executed as</p>

<ul>
  <li>Pops n operands from the stack</li>
  <li>Computes the operation F</li>
  <li>Pushes result back to the stack</li>
</ul>

<p>The invariance a stack machine maintains: After evaluating an expression e, the accumulator holds
the value of e and the stack is unchanged. This is a very important property: <strong>Expression
evaluation preserves the stack</strong>.</p>

<p>Stack machine vs Register machine. Location of the operands/result is not explicitly stated, as
which are always on the top of the stack. We consider <code>add</code> as a valid operation, instead of <code>add
r1, r2</code> in a register machine. This leads to more compact programs (space). Java bytecode uses stack
evaluation. However, a register machine is mostly preferred and generally faster (time), because we
can place the data at exactly where we want it to be, which has generally less intermediate
operations and manipulation like pushing and popping off the stack.</p>

<p>N-register stack machine. It’s an intermediate form between pure stack machine and register machine.
Conceptually, keep the top n locations of the pure stack machine’s stack in registers. A 1-register
stack machines is called the accumulator.</p>

<p>A code gen example</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cgen(e1 + e2) =
</span><span class="line">  // compile time code prints out runtime code
</span><span class="line">
</span><span class="line">  cgen(e1)
</span><span class="line">  print "sw $a0 0($sp)"           // push value onto stack
</span><span class="line">  print "addiu $sp $sp-4"
</span><span class="line">
</span><span class="line">  cgen(e2)
</span><span class="line">
</span><span class="line">  print "lw $t1 4($sp)"           // load value from stack
</span><span class="line">  print "add $a0 $t1 $a0"         // add
</span><span class="line">  print "addiu $sp $sp 4"         // pop from stack</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>A code gen example for object layout</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">+--------------+ First 3 words are headers
</span><span class="line">| Class tag    |
</span><span class="line">+--------------+
</span><span class="line">| Object size  |                   Dispatch Table
</span><span class="line">+--------------+                   +-------------------+
</span><span class="line">| Dispatch Ptr | ---------------&gt;  |    |    |    |    |
</span><span class="line">+--------------+                   +-------------------+
</span><span class="line">| Attrs        | then attributes
</span><span class="line">+--------------+</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Given a layout for class A, a layout for subclass B can be defined by
extending the layout of A with additional slots of the addition attributes of B. So consider layout of <code>A3 &lt; A2 &lt; A1</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">+--------------+
</span><span class="line">| Header       |
</span><span class="line">+--------------+
</span><span class="line">| A1 attrs     |
</span><span class="line">+--------------+
</span><span class="line">| A2 attrs     |
</span><span class="line">+--------------+
</span><span class="line">| A3 attrs     |
</span><span class="line">+--------------+</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The offset for an attribute is the same in a class and all of its subclasses.</p>

<p>Dynamic dispatch. Every class has a fixed set of methods, including inherited methods. A dispatch
table is used to index these mtehods. It’s an array of method entrypoints. A method <code>f</code> lives at a
fixed offset in the dispatch table for a class and all of its subclasses. Theorectially we can save
the table directly as we do for attributes. But attributes are states that 100 objects can each have
a different set of attributes values. Methods are static that it makes sense to share the common
table among objects.</p>

<p>Evaluation Semantics. In Code Generation, we need to define an evaluation rule, which is also called Semantics.</p>

<ul>
  <li>The tokens is parsed by Regular Expressions in Lexical Analysis</li>
  <li>The grammar is represented by CFG in Syntactic Analysis</li>
  <li>The typing rule is represented by Inferenece Rule in Semantics Analysis</li>
  <li>The evaluation rules is represented by Semantics in Code Generation and Optimization</li>
</ul>

<p>Operational Semantics. It describes program evaluation via execution rules on an abstract machine,
which is most useful for specifying implementations.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># in type checking, this means in a given context, expression e has type C
</span><span class="line">Context ⊢ e: C
</span><span class="line">
</span><span class="line"># in evaluation, this means in a given context, expression e evaluates to value v
</span><span class="line">Context ⊢ e: v</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Consider the evaluation of <code>y &lt;- x + 1</code>, we should track variables and their values with:</p>

<ul>
  <li>an environment: where a variable is in memory, <code>E = [a: l1, b: l2]</code></li>
  <li>a store: what is in the memory, <code>S = [l1 -&gt; 5, l2 -&gt; 7]</code></li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">so, E, S ⊢ e: v, S'
</span><span class="line">
</span><span class="line">Given
</span><span class="line">  so as the current value of self
</span><span class="line">  E as the current variable environment
</span><span class="line">  S as the current store
</span><span class="line">If the evaluation of e terminates then
</span><span class="line">  the value of e is v
</span><span class="line">  the new store is S'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>OPTIMIZATION</strong></p>

<p>Most complexity in modern compilers is in the optimizer. Optimization seeks to improve a program’s
resoure utilization: execution time, code size and network messages sent, etc.</p>

<p>What should we perform optimizations on?</p>

<p>On Intermediate language</p>

<ul>
  <li>pro: machine independent</li>
  <li>pro: expose optimization opportunities</li>
  <li>on AST is too high level</li>
  <li>On Assembly is not machine independent</li>
</ul>

<p>Intermediate Language. A language between source and target. With more details than souce and less
than target. Intermidate language can be considered as high-level assmebly. It uses register names,
but has an unlimited number. It uses control structures as assembly language. It uses opcodes but
some are higher level, like <code>push</code> translates to several assembly instructions. Usually, we prefer
to apply optimizations over IL, instead of AST or assembly language.</p>

<p>What are the units of optimization?</p>

<ul>
  <li>A basic block is a maximal sequence of instructions with no labels (except at the first instruction)
and no jumps (except in the last instruction), which makes it a single-entry, single-exit,
straight-line code segment.</li>
  <li>A control-flow graph is a directed graph with basic block as nodes.</li>
</ul>

<p>What are granularities of optimizations? Like in C</p>

<ol>
  <li>Local optimization: apply to a basic block in isolation</li>
  <li>Global optimization (it’s not really global, but to function): apply to a control-flow graph in
isolation</li>
  <li>Inter-procedural optimization: apply across function boundaries.</li>
</ol>

<p>Global optimization. There are many global dataflow analysis, but they all follow the methodology:
The analysis of a complicated program can be expressed as a combination of simple rules relating
the change in information between adjacent statements.</p>

<p>Register Allocation. Register Allocation is a “must have” in compilers: because intermediate code
uses too many temporaries and it makes a big difference in performance. So the optimization is about
to rewrite the intermediate code to use no more temporarie than there are machine registers.</p>

<p>Solution: Construct an undirected graph, that a node for each temporary, an edge between t1 and t2
if they are live simultaneously at some point in the program, which is called REGISTER INTERFERENCE
GRAPH (RIG). Two temporaries can be allocated to the same register if there is no edge connecting
them. After RIG construction, the Register Allocation algorithm is architecture independent. The
algorithm to use is called Graph coloring.</p>

<p>A coloring of a graph is an assignment of colors to nodes, such that nodes connected by an edge have
different colors. A graph is K-COLORABLE if it has a coloring with k colors. For Register
Aollocation, we need to assign colors (registers) to graph nodes (temporaries), and let k be the
number of machine registers. If the RIG is k-colorable then there is a register assignment that uses
no more than k registers.</p>

<p>Managing Cache</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">+-----------+---------------+-----------+
</span><span class="line">| Registers | 1 cycle       | 256-8000B |
</span><span class="line">| Cache     | 3 cycles      | 256K-1M   |
</span><span class="line">| Memory    | 20-100 cycles | 32M-4G    |
</span><span class="line">| Disk      | 0.5-5M cycles | 4G-1T     |
</span><span class="line">+-----------+---------------+-----------+
</span><span class="line">
</span><span class="line">*cycle is the clock frequency</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The cost of cache miss (for register) is very high, so typically it requires 2-layered cache to bridge
fast processor with large main memory.</p>

<p>Automatic Memory Managemen (GC)</p>

<ul>
  <li>Advantage: it prevents serious storage bugs</li>
  <li>Disadvantge:
    <ul>
      <li>it reduces programmer control, like the layout of data in memory, or when is memory
deallocated;</li>
      <li>inefficient in some cases</li>
      <li>pauses problematic in real-time applications</li>
      <li>memory leaks possible</li>
    </ul>
  </li>
</ul>

<p>Mark and Sweep</p>

<ul>
  <li>Advantage: objects are not moved during GC, works well for languages with pointers like C and C++</li>
  <li>Disadvantge: fragment memory</li>
</ul>

<p>Stop and Copy</p>

<p>Stop and copy is generally believed to be the fastest GC technique</p>

<ul>
  <li>Advantage: Allocation is very cheap (just increment the heap pointer). Collection is relatively
cheap, especially if there is a lot of garbage, as it only touches reachable objects</li>
  <li>Disadvantge: some languages do not allow copy, like C and C++.</li>
</ul>

<p>Reference Counting</p>

<ul>
  <li>Advantage: easy to implement; collects garbage incrementally without large pauses in the execution</li>
  <li>Disadvantge: cannot collect circular structures; manipulating reference counts at each assignment is
very slow</li>
</ul>

<hr />

<h1 id="intro">0 Intro</h1>

<p>Interpreter is “online” and compiler is “offline”</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Program + Data =&gt; Interpreter =&gt; Output
</span><span class="line">
</span><span class="line">Program =&gt; Compiler =&gt; exec
</span><span class="line">                       exec + Data =&gt; Output</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>When John Backus tried to solve program productivity problem in 1950s, compared
to writing machine code, he tried an interpreter language first, which is called
“Speedcoding”, which makes programmer happy but takes too much memory and runs
10x slower (as an interpreter lang does). After that, he developed Fortran
(Formalas Translated), which introduces a two stage development, compile and
execute. Modern compilers preserve the outline of Fortran.</p>

<h2 id="what-a-compiler-does">0.1 What a compiler does</h2>

<p>Five phases</p>

<ol>
  <li>Lexical analysis (syntactic)</li>
  <li>Parsing (syntactic)</li>
  <li>Semantic analysis (types, scopes..)</li>
  <li>Optimization</li>
  <li>Code generation (machine code, or byte code on a VM)</li>
</ol>

<p>Lexical analysis is to divide a program into “words” or “tokens”</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">This is a sentence.</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Once words are understood, the next step, Parsing, is to understand sentence structure</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">This    line is   a       longer    sentence
</span><span class="line">----    ---- --   -       ------    --------
</span><span class="line">article noun verb article adjective noun
</span><span class="line">   |     /           \       |      /
</span><span class="line">   subject                object
</span><span class="line">          \               /
</span><span class="line">               sentence</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Once sentence structure is understood, the next step, Semantic analysis, is to
try understanding the “meaning”. For humans, we do lexical
analysis and parsing, but we don’t know how we understand it. So, this is too
hard for compilers. <strong>Compilers can only perform limited Semantic analysis to
catch inconsistencies.</strong></p>

<p>Eg. 1 Variable bindings</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Jack said Jerry left his assignment at home.
</span><span class="line">                     ---
</span><span class="line">                     points to Jack or Jerry?
</span><span class="line">
</span><span class="line">Jack said Jack left his assignment at home?
</span><span class="line">----      ----      ---
</span><span class="line">How many people are involved?</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The analogy in programming language is variable bindings. Programming lang
define strict rules to avoid such ambiguities. For example, lexical scoped
language</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">{
</span><span class="line">  int Jack = 3;
</span><span class="line">  {
</span><span class="line">    int Jack = 5;
</span><span class="line">    cout &lt;&lt; Jack;
</span><span class="line">  }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Eg. 2 Type mismatch</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Jack left her homework at home.
</span><span class="line">          ---</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Optimization has no strong counterpart in English, but you can think of what an
editor do. The main purpose here is to modify the program so that they use less
resource, run faster (time) and use less memory (space).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">But a little bit like editing
</span><span class="line">    -----------------
</span><span class="line">But akin to           editing
</span><span class="line">    -------
</span><span class="line">
</span><span class="line">Y=X*0 =&gt; Y=0
</span><span class="line">// only works for intergers, but not floats, as NAN * 0 = NAN</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Code generation generally means a translation to another language, like in human
language. It usually produces assembly code.</p>

<p>The proportion of each phase does has changed since Fortran</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Fortran: [    L    ] [    P    ] [S] [   O   ] [   CG   ]
</span><span class="line">Modern : [L] [P] [    S    ] [           O              ] [ CG ]</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="economy-of-programming-language">0.2 Economy of programming language</h2>

<p>Q1. Why are so many programming languages?</p>

<p><strong>Application domains have distinctive/conflicting needs.</strong></p>

<ul>
  <li>In scientific computing, there should be good float point numbers, good
arrays, and parallelism, like Fortran</li>
  <li>In bussiness applications, there should be persistence, report generation and
data analysis, like SQL</li>
  <li>In system programming, there should be resource management and real time
constraints, like C and C++.</li>
</ul>

<p>Q2. Why are there new programming languages?</p>

<p>Claim: <strong>Programming training is the dominant cost for a programming
language</strong></p>

<p>Prediction:</p>

<ol>
  <li>Widely used languages are slow to change (for education cost).</li>
  <li>Easy to start a new language, when productivity boost is over the training
cost.</li>
  <li>Language adopted to fill a void as tech grows with new open niche</li>
  <li>New languages tend to look like old languages (think about the training cost)</li>
</ol>

<p>Q3. What is good programming language? :shrug:</p>

<h1 id="lexical-analysis">1 Lexical Analysis</h1>

<h2 id="intro-1">1.1 Intro</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">                         one token
</span><span class="line">String -------&gt; LA --------&gt; (token class, lexeme) --------&gt; Parser
</span><span class="line">
</span><span class="line">foo = 4                       (Id, "foo")
</span><span class="line">                          (Op, "=")
</span><span class="line">                          (Int, "4")</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>What are the valid token classes?</p>

<ul>
  <li>Identifier</li>
  <li>Keyword</li>
  <li>Operator</li>
  <li>Whitespace, a non-empty sequence of blanks, newlines and tabs</li>
  <li>Numbers</li>
  <li>(</li>
  <li>)</li>
  <li>;</li>
  <li>=</li>
</ul>

<p>A LA does two things:</p>

<ol>
  <li>Partition the input string into lexemes.</li>
  <li>Identify the token class of each lexeme.</li>
</ol>

<p>Reading left-to-right and recognizing one token at a time, which requires
lookahead, to help determine the end of the current token and start of next
token.</p>

<p>Fun fact:
1. In FORTRAN, all whitespaces can be omitted
2. In PL/1, keywords are not reserved :P</p>

<h2 id="regular-language">1.2 Regular Language</h2>

<p>The lexical strucutre of a programming language is a set of token classes, and
each one of the token classes consists of some set of strings. We need a way to
specify which set of strings belongs to each token class and the usual tool for
doing that is to use <strong>Regular Language</strong>.</p>

<p>Usually, we use Regular Expression (the syntax) to denote Regular Languages (set
of strings).</p>

<p>Empty string (Epsilon)  {“”}
1-char string           {“c”}
Compound
  Union                 A + B
  Concatenation         AB
  Interation            A*</p>

<p>The regular expressions over Σ(alphabet) are the smallest set of expressions
including:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">// Grammar
</span><span class="line">R = e
</span><span class="line">  | 'c'
</span><span class="line">  | R +R
</span><span class="line">  | RR
</span><span class="line">  | R*</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Example</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Σ= {0, 1}
</span><span class="line">
</span><span class="line">1*       - represents "" + 1 + 11 + 111 ...
</span><span class="line">(1 + 0)1 - represents 11, 01
</span><span class="line">(0 + 1)* - represents all possible strings, we call it Σ*</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="formal-language">1.3 Formal Language</h2>

<p>Inside of the compiler, we typically have several different formal languages
that we are manipulating. A Regular Expression is one example.</p>

<p><strong>A Formal Language has a set of alphabet Σ</strong>. A language over Σ is a set of
strings of characters drawn from Σ.</p>

<table>
  <thead>
    <tr>
      <th>Alphabet</th>
      <th>Language</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>a-z</td>
      <td>English</td>
    </tr>
    <tr>
      <td>ASCII</td>
      <td>C</td>
    </tr>
  </tbody>
</table>

<p><strong>A Formal Language has a meaning function L, that maps syntax to semantics</strong>. Why
it’s necessary:</p>

<ul>
  <li>It makes clear what is syntax, what is semantics</li>
  <li>Allow to abstract notaion as a separate issue (1,2,10 vs I,II,X)</li>
</ul>

<p>Generally, <strong>meaning function L is many to one</strong>. Syntax (expressions) and semantics
(meanings) are not 1-1, but many to one, which means there are different ways,
optimizations, to achieve the same meaning.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">L(e) = M
</span><span class="line">L: Exp -&gt; Set of strings
</span><span class="line">
</span><span class="line">L(e)     = {""}
</span><span class="line">L('c')   = {"c"}
</span><span class="line">L(A + B) = L(A) ⋃ L(B)
</span><span class="line">L(AB)    = { ab | a ∈ (LA) , b ∈L(B) }
</span><span class="line">L(A*)    = L(A^i) for i &gt;=0</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Example, L in Regular Expression</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">?     = {""}
</span><span class="line">c     = {"c"}
</span><span class="line">[AB]  = L(A) ⋃ L(B)
</span><span class="line">AB    = { ab | a ∈ (LA) , b ∈L(B) }
</span><span class="line">A*    = L(A^i) for i &gt;=0
</span><span class="line">A+    = AA*</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="lexcial-specification">1.4 Lexcial Specification</h2>

<ol>
  <li>Write a rexp for the lexemes of each token class, like R1 = Number, R2 = Identifier..</li>
  <li>Construct R, matching all lexemes of all tokens. R = R1 + R2 ..</li>
  <li>Let input be x1..xn, for <code>1 &lt;= i &lt;= n</code>, check x1..xi ∈ L(R)</li>
  <li>If so, then we know that x1..xi ∈ L(Rj) for some i</li>
  <li>Remove x1..xi from input and go to 3.</li>
</ol>

<p>To resolve ambiguities</p>

<ul>
  <li>Apply “Maximal Munch” to the input, matching <code>==</code> instead of <code>=</code>.</li>
  <li>Choose highest priority match, (usually list the high priority one first), like putting Keyword ahead of Identifiers</li>
</ul>

<p>To handle errors</p>

<ul>
  <li>Better not let it happen; otherwise specify a Error to denote all strings not in the lexical spec, put it last in priority</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Lexical Analysis -- partition input into lexemes
</span><span class="line">                 -- identify token of each lexeme
</span><span class="line">
</span><span class="line">                  described by
</span><span class="line">Lexical Analysis -------------- Lexical Spec
</span><span class="line">                                      |
</span><span class="line">                                Formal Language
</span><span class="line">                                      |           implemented by
</span><span class="line">                                Regular Language ---------------- Regular Expression
</span><span class="line">                                                 \--------------- Finite Automata (NFA, DFA)</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="finite-automata">1.5 Finite Automata</h2>

<p><strong>We use Regular Expression as the Lexical Specification and we use Finite
Automata as the implementation.</strong></p>

<p>A finite automata consists of
* An input alphabet Σ
* A finite set of states S
* A start state n
* A set of transitions, state + input -&gt; state
* A set of accepting states F ∈ S</p>

<p>For a transition s1 + input -&gt; s2, if it’s in accpeting state =&gt; accept;
otherwise =&gt; reject. Eg. terminating in a state that S not ∈ F or getting stuck
of a state that cannot be moved.</p>

<p>So Language of a FA is the set of accepted strings.</p>

<p>If we allow a transition from s1 + e -&gt; s2, that means for one input, we
have two valid states, which ends up having two syntax mapping to one semantic.
To define <strong>Deterministic Finite Automata</strong>:</p>

<ul>
  <li>No e moves</li>
  <li>For one input, there is only one transition from a state</li>
</ul>

<p>NFA can have e moves. Essentially, deterministic means for one input, there is
one path through the state graph.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">DFA: -&gt; s1 -&gt; s2 -&gt; ... F
</span><span class="line">NFA: -&gt; s1 -&gt; s2  -&gt; s2a
</span><span class="line">        |        \-&gt; s2b
</span><span class="line">        e        \-&gt; s2c
</span><span class="line">        |
</span><span class="line">        s3  -&gt; s3a
</span><span class="line">           \-&gt; s3b
</span><span class="line">           \-&gt; s3c</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As for one input, NFA might end up multiple states. We say an NFA accepts if
any one of the path finishes at an accepting state.</p>

<p>NFA, DFA and Regular Expression all have equivalent power for specifying Regular
Language.</p>

<ul>
  <li>DFA are faster to execute, as there are no choices to consider. (TIME)</li>
  <li>NFA are in general (might be exponentially) smaller. (SPACE)</li>
</ul>

<p>NFA TO DFA</p>

<p>e-closure for a state is all the states that it can reach through e move.</p>

<p>An NFA may be in many states at any time, but how many different states? For N
states, there would be 2**N - 1 finite set of possible states (except for the
empty set).</p>

<p>NFA</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">states: S
</span><span class="line">start : s ∈S
</span><span class="line">final : F
</span><span class="line">transition: a(X) = { y | x ∈X, x + a -&gt; y }</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>to transit to DFA</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">states: subsets of S
</span><span class="line">start : e-closure(s)
</span><span class="line">final : { X | X ⋂ F != empty }
</span><span class="line">transition: X + a -&gt; Y if Y = e-closure(a(X))</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>IMPLEMENTING DFA</p>

<p>A DFA can be implemented by a 2D table T
* One dimension is states
* Ohter dimension is input symbol
* For every transition Si + a -&gt; Sk, define T[i,a] = k</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">input = "01010";
</span><span class="line">i = 0;
</span><span class="line">state = S;
</span><span class="line">
</span><span class="line">while (input[i]) {
</span><span class="line">  state = T[state, input[i]];
</span><span class="line">  i++;
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="parsing">2 Parsing</h1>

<h2 id="intro-2">2.1 Intro</h2>

<p>Heuristic: why is there a Parsing stage?</p>

<p>A Regular Language is the weakest Formal Language that’s widely used, no matter is Regular
Expression, NFA, DFA, it has its limit on expressing, eg. nested structure.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">()
</span><span class="line">(())
</span><span class="line">((()))
</span><span class="line">
</span><span class="line">if ... then
</span><span class="line">  if ... then
</span><span class="line">    if ... then
</span><span class="line">    fi
</span><span class="line">  fi
</span><span class="line">fi</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Parsing is the stage to help apply more analysis onto tokens.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">  stream of characters        stream of tokens             parse tree
</span><span class="line">------------------------ LA -------------------- Parser --------------- ..</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="context-free-grammars">2.2 Context Free Grammars</h2>

<h3 id="cfg---intro">2.2.1 CFG - Intro</h3>

<p>Since not all strings of tokens are programs, a parser must distinguish between valid and invalid
string of tokens. We need</p>

<ul>
  <li>a language for describing valid string of tokens, and</li>
  <li>a method (algorithm) for distinguishing valid from invalid string of tokens</li>
</ul>

<p>Context Free Grammars is help to solve the first point, which is to answer “yes” or “no” whether a
string of tokens is valid.</p>

<p>Programming languages have recursive strucutres. CFG are a natural notaion for
this recursive structure.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">EXPR -&gt; if EXPR then EXPR els EXPR fi
</span><span class="line">      | while EXPR loop EXPR pool
</span><span class="line">      | ...</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>A CFG consists of</p>

<ul>
  <li>a set of terminals, T</li>
  <li>a set of non-terminals, N</li>
  <li>a start symbol, S, where S (- N</li>
  <li>a set of productions or rules, X -&gt; Y1…Yn, where X (- N, Yi (- T + N + {e}</li>
</ul>

<p><code>X-&gt;Y1..Yn</code> means you can replace X with <code>Y1..Yn</code>. This also explains that Terminal means there are
no rules to replace them.</p>

<p>Eg, to represent nested structure</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">S -&gt; e
</span><span class="line">S -&gt; (S)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To use CFG to present a language: Let G be a CFG with start symbol S, then the language L(G) is</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">{ a1..an | V ai (- T, S *-&gt; a1..an }
</span><span class="line">           for all</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You can derive from S (with the defined of productions) to <code>a1..an</code>, which are all valid string of tokens.</p>

<p>Usually we use <code>bison</code> to implement a CFG.</p>

<h3 id="cfg---deriviations">2.2.2 CFG - DERIVIATIONS</h3>

<p>A derivation is a sequence of productions.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">S -&gt; * -&gt; * ... -&gt; *</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>A derivation can be drawn as a tree, Parse Tree.</p>

<ul>
  <li>use start symbol as the root</li>
  <li>for a production <code>X -&gt; Y1..Yn</code>, add children <code>Y1..Yn</code> to node <code>X</code>.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">  X
</span><span class="line">/  | \
</span><span class="line">Y1 Y2 Y3</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>A parse tree</p>

<ul>
  <li>has terminal at the leaves and non-terminals at the interior nodes</li>
  <li>an in-order traversal of the leaves is the original input</li>
  <li>shows the assocation of operations, the input string does not</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Grammar: E -&gt; E+E | E*E|| (E) | id
</span><span class="line">Input:   id * id + id
</span><span class="line">Derivation:
</span><span class="line">
</span><span class="line">        E
</span><span class="line">   /    |    \
</span><span class="line">  E     +     E
</span><span class="line">/ | \         |
</span><span class="line">E *  E        id
</span><span class="line">|    |
</span><span class="line">id   id</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>A derivation defines a parse tree, but a parse tree may have many derivations.
Left-most and right-most derivations are important in parser implementations.</p>

<h3 id="cfg---ambiguity">2.2.3 CFG - AMBIGUITY</h3>

<p>A grammar is ambiguous if it has more than one parse tree for some string.
For a string of tokens: <code>id * id + id</code>, there are two parse trees can be derived with the following
grammar <code>E -&gt; E+E | E*E | (E) | id</code>.</p>

<p>To fix it, we can rewrite grammar unambiguously, to enforce precedence</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">E -&gt; E' + E | E'
</span><span class="line">E' -&gt; id * E' | id | (E) * E' | (E)
</span><span class="line">
</span><span class="line">E manage +,   as E -&gt; E' + E -&gt; E' + E' + E =&gt; E' + E' + .. E'
</span><span class="line">E' manage *,  as E' -&gt; id * E' -&gt; id * id * E' =&gt; id * id * .. id
</span><span class="line">E' manage (), as E' -&gt; (E) * E' -&gt; (E' + E' .. E') * E'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It’s impossible to convert automatically. Instead of rewriting, we can also use the more natural
(ambiguous) grammar along with disambiguating declarations. Most tools allow <strong>precedence and
associativity</strong> declarations to disambiguate grammars.</p>

<h3 id="cfg---error-handling">2.2.4 CFG - ERROR HANDLING</h3>

<p>A compiler not only translates the valid programms, but also detects non-valid ones.</p>

<table>
  <thead>
    <tr>
      <th>Erro kind</th>
      <th>Example</th>
      <th>Detected by</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Lexical</td>
      <td>..$..</td>
      <td>Lexer</td>
    </tr>
    <tr>
      <td>Syntax</td>
      <td>..x*%..</td>
      <td>Parser</td>
    </tr>
    <tr>
      <td>Semantic</td>
      <td>int x; y = x(3);</td>
      <td>Type checker</td>
    </tr>
    <tr>
      <td>Correctness</td>
      <td>your program</td>
      <td>User</td>
    </tr>
  </tbody>
</table>

<p>Error recorvery</p>

<ul>
  <li>Panic mode. When an error is encountered, discard tokens until one with a clear role is found. The
synchronizing tokens are typicall the statements or expression terminators, like ;</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">// in bison, there is a special terminal error to describe how much input to skip
</span><span class="line">E -&gt; int | E + E | (E) | error int | (error)
</span><span class="line">     ------------------  -------------------
</span><span class="line">           normal               error</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Error productions</li>
</ul>

<p>Add <code>E -&gt; .. | EE</code> to support <code>5x</code> in addition to <code>5 * x</code></p>

<ul>
  <li>Error correction: automatic local or global correction by try token insertions and deletions
(historially, due to the slow compilation cycle)</li>
</ul>

<h2 id="abstract-syntax-tree">2.3 Abstract Syntax Tree</h2>

<p>Rather than working on the elaborate parse tree, we can use a more compact (abstract) one</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">-----------------
</span><span class="line">| PLUS | 5 |    |
</span><span class="line">-----------------
</span><span class="line">               |
</span><span class="line">               |--&gt; ----------------
</span><span class="line">                    | PLUS | 2 | 3 |
</span><span class="line">                    ----------------</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="recursive-descent-parsing">2.4 Recursive-Descent Parsing</h2>

<p>Top-down. The parse tree is constructed from the top and from left to right. Start with top-level
non-terminal E, try the rules for E <strong>in order</strong>.</p>

<p>Let’s take an example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">E -&gt; T | T + E
</span><span class="line">T -&gt; int | int * T | (E)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We should define a few helper funcsionts along with a <code>next</code> pointer pointing to the next input token.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">term(tok: TOKEN) -&gt; bool { return *next++ == tok } // check a token is terminal
</span><span class="line">Sn() -&gt; bool                                       // check the nth production of S
</span><span class="line">S() -&gt; bool                                        // check all productions of S</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>So</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">E -&gt; T              E1() -&gt; bool { T() }
</span><span class="line">E -&gt; T + E          E2() -&gt; bool { T() &amp;&amp; term(PLUS) &amp;&amp; E() }
</span><span class="line">                    E()  -&gt; bool {  save = next;
</span><span class="line">                                    (next = save, E1()) ||
</span><span class="line">                                    (next = save, E2()) }
</span><span class="line">
</span><span class="line">T -&gt; int            T1() -&gt; bool { term(INT) }
</span><span class="line">T -&gt; int * T        T2() -&gt; bool { term(INT) &amp;&amp; term(TIMES) &amp;&amp; T() }
</span><span class="line">T -&gt; ( E )          T3() -&gt; bool { term(LEFT) &amp;&amp; E() &amp;&amp; term(RIGHT) }
</span><span class="line">                    T()  -&gt; bool {  save = next;
</span><span class="line">                                    (next = save, T1()) ||
</span><span class="line">                                    (next = save, T2()) ||
</span><span class="line">                                    (next = save, T3()) }</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>LIMITATIONS</p>

<p>If a production for non-terminal X succeeds, there is no way to backtract and try a different
production for X later. like matching against <code>int * int</code>, our program would stop after parsing the
first <code>int</code>. A general RD algorithm should support such “full” backtracking. We can also rewrite our
grammar to make it work without backtracking, by rewriting to eliminate left recursion.</p>

<p>LEFT RECURSION</p>

<p>Considering a production S -&gt; Sa, there will be a loop</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">S1() -&gt; bool { return S() &amp;&amp; term(a) }
</span><span class="line">S()  -&gt; bool { return S1() }</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>A left-recursive grammar has a non-terminal S, where S -&gt; Sa for some a. Recursive-descent doesn’t
work with in such cases. Generally, given a left-resurive gramar with Recursive-descent algorithm,
it runs into a loop.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">S -&gt; Sa | b
</span><span class="line">
</span><span class="line">=&gt;
</span><span class="line">S -&gt; Sa -&gt; Saa -&gt; Saaa -&gt; ... -&gt; baaaaa</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>But, we can rewrite it using right-recursion.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">S -&gt; bS'
</span><span class="line">S' -&gt; aS' | e
</span><span class="line">
</span><span class="line">=&gt;
</span><span class="line">S -&gt; bS' -&gt; baS' -&gt; baaS' -&gt; ... -&gt; baaaaa</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To make it more general</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">S -&gt; Sa1 | Sa2 .. San | b1 | b2 .. bm</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>can be rewritten as</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">S -&gt; b1S' | b2S' .. bmS'
</span><span class="line">S' =&gt; a1S' | a2S' .. anS' | e</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>SUMMARY</p>

<p>Recursive-descent parsing is a simple and general parsing strategy, which is used in GCC frontend.
To use it, left recursion must be eliminated first.</p>

<h2 id="predictive-parsing">2.5 Predictive Parsing</h2>

<blockquote>
  <p>deterministic top-down parsing</p>
</blockquote>

<p>In Recursive-descent parsing, at each step, there are many choices of production to use. Therefore,
we need to backtrack to undo bad choices. Predictive parsing are a lot like Recursive-descent
parsing, but it can “predict” which production to use by looking at the next few tokens, thus there
is no need to backtrace.</p>

<p>Predictive parers accept LL(k) grammars. At each step, there should be at most one choice of
production.</p>

<ul>
  <li>Left-to-right</li>
  <li>Left-most derivation</li>
  <li>k tokens looking ahead</li>
</ul>

<p>Eg. in Recursive-descent parsing, we have the grammar</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">E -&gt; T + E | T
</span><span class="line">T -&gt; int | int * T | (E)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In Predictive parsing, we should left-factor the grammar to make it LL(k) grammar:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">E -&gt; TX
</span><span class="line">X -&gt; + E | e
</span><span class="line">
</span><span class="line">T -&gt; intY | (E)
</span><span class="line">Y -&gt; * T | e</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>How to apply the Recursive-descent parsing?</p>

<p>Once we have the LL(1) grammar, we should build a LL(1) parsing table: the row is left-most
non-terminals, and the column is the next input token, content is the production rule to use, and
empty content is the error state.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">+---+------+----+----+----+-----+---+
</span><span class="line">| _ | int  | *  | +  | (  |  )  | $ |
</span><span class="line">+---+------+----+----+----+-----+---+
</span><span class="line">| E | TX   |    |    | TX |     |   |
</span><span class="line">| X |      |    | +E |    | e   | e |
</span><span class="line">| T | intY |    |    |    | (E) |   |
</span><span class="line">| Y |      | *T | e  |    | e   | e |
</span><span class="line">+---+------+----+----+----+-----+---+</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The algorithm maintains a stock records frontier of parse tree. Top of the stack is the left-most
pending terminal or non-terminal. It accpets on end of input $ &amp; empty stack. It rejects on reaching
error state.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">initialize stack = &lt;S $&gt; and next
</span><span class="line">repeat
</span><span class="line">  case stack of
</span><span class="line">    &lt;X, rest&gt; : if T[X, *next] = Y1...Yn
</span><span class="line">                then stack = &lt;Y1...yn rest&gt;;
</span><span class="line">                else error();
</span><span class="line">    &lt;t, rest&gt; : if t == *next ++
</span><span class="line">                then stack = &lt;rest&gt;;
</span><span class="line">                else error();
</span><span class="line">until stack == &lt;&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>How to build build LL(1) parsing table?</p>

<p>Consider non-terminal A, and production A -&gt; a &amp; token t, there are two valid cases for T[A,t] = a:</p>

<ol>
  <li>If a -&gt;* tb, which means a can derive t in the first position, we say t ∈First(a), t belongs to
the First Set of a.</li>
  <li>Else if A -&gt; a and a -&gt;* e and S -&gt;* <em>At</em>, which means A cannot derive t, but t follows up A in
at least one derivation, we say t ∈Follow(A).</li>
</ol>

<p>First Set</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">First(X) = { t | X -&gt;* ta } ⋃ { e | X -&gt;* e }</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Follow Set</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Follow(X) = { t | S -&gt;* _Xt_ }</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To construct a parsing table T for CFG G, for each production A -&gt; a in G do:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">For each terminal t ∈ First(a) do T[A, t] = a
</span><span class="line">if e ∈First(a), foreach t ∈Follow(A) do T[A, t] = a</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If in the table, any entry is multiply defined, then G is not LL(1), eg. G is not left factored,
left recursive, or ambiguous.</p>

<h2 id="bottom-up-parsing">2.6 Bottom-up Parsing</h2>

<p>Bottom-up parsing is more general than (deterministic) top-down parsing, but just as efficient.
Bottom-up builds on ideas in top-down parsing and is the preferred method for most of generator
tools. Bottom-up parsers don’t need left-factored grammar.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">E -&gt; T + E | T
</span><span class="line">T -&gt; int * T | int | (E)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Bottom-up parsing reduces a string to the start symbol by inverting productions.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">                       input string
</span><span class="line">
</span><span class="line">int * int + int              ^    |
</span><span class="line">int * T   + int              |    |
</span><span class="line">T         + int  production  |    |  reduction
</span><span class="line">T         + T                |    |
</span><span class="line">T         + E                |    |
</span><span class="line">E                            |    v
</span><span class="line">
</span><span class="line">                       start symbol</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Important Fact #1 about Bottom-up parsing: A bottom-up parser traces a rightmost derivation in
reverse.</p>

<p>This has an interesting implication: let αβω be a step of a bottom-up parse, assume the next
reduction is by X -&gt; β, then ω must be a string of terminals</p>

<h3 id="shift--reduce">SHIFT &amp; REDUCE</h3>

<p>First, we need a marker and the left handside is called left string and right side is right string.</p>

<p>Bottom-up parsing uses only two kinds of actions:</p>

<ul>
  <li>
    <table>
      <tbody>
        <tr>
          <td>Shift: Move</td>
          <td>one place to the right <code>ABC|xyz =&gt; ABCx|yz</code></td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>Reduce: Apply an inverse production at the right end of the left string</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">If A -&gt; xy is a production, then Cbxy|ijk =&gt; CbA|ijk</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Left string can be implemented by a stack. Shift move pushes a terminal onto the stack. Reduce move
pops symbols off of the stack (production rhs) and pushes a non-terminal back to the stack
(production lhs).</p>

<h3 id="handles">HANDLES</h3>

<blockquote>
  <p>How do we decide when to shift or reduce?</p>
</blockquote>

<p>Bottom-up parsing algorithms are based on recognizing handles.</p>

<p>We should reduce only if the result can still be reduced to the start stymbol. Assume a rightmost
derivation, <code>S -&gt;* aXw -&gt; abw</code>, then <code>ab</code> is a handle of <code>abw</code>.</p>

<p>Important Fact #2 about Bottom-up parsing: In shift-reduce parsing, handles appear only at the top
of the stack, never inside.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">stack|input
</span><span class="line">
</span><span class="line">(E|)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In terms of recognizing handles, there are no efficent algorithms, but there are heuristic guessing
always correct for some CFGS.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">All CFGs
</span><span class="line">  Unambiguous CFGs
</span><span class="line">    LR(k) CFGs
</span><span class="line">      LALR(k) CFGs
</span><span class="line">        SLR(k) CFGs</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>a</code> is a <strong>viable prefix</strong> if there is an <code>w</code> such that <code>a|w</code> is a state of shift-reduce parser.</p>

<p>Important fact #3 about Bottom-up parsing: For any grammar, the set of viable prefixs is a regular
language (can be recognized by a FA).</p>

<p>To recognize viable prefixes: we must</p>

<ul>
  <li>recognize a sequence of partial rhs’s of productions, where</li>
  <li>each partial rhs can eventually reduce to part of the missing suffix of its predecessor</li>
</ul>

<p>I DON’T QUITE FOLLOW THIS PART IN DETAILS, HERE IS THE ROADMAP</p>

<ul>
  <li>handles</li>
  <li>items</li>
  <li>valid prefix</li>
  <li>recognize valid prefix</li>
  <li>valid items</li>
</ul>

<h1 id="semantic-analysis">3 Semantic Analysis</h1>

<p>Lexical analysis detects inputs with illegal tokens; Parsing detects with ill-formed parse trees;
and Semantic Analysis, as last front-end phase, catches all remaning errors, eg</p>

<ul>
  <li>all identifiers are declared</li>
  <li>types</li>
  <li>inheritance relationships</li>
  <li>classes defined only once</li>
  <li>method in a class defined only once</li>
  <li>reserved identifiers are not misused</li>
</ul>

<p>Much of Semantic Analysis can be expressed as recursive descent of an AST:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">before: process an AST node n
</span><span class="line">recurse: process the children of n
</span><span class="line">after: finish processing the node n
</span><span class="line">
</span><span class="line">Eg. let x: Int &lt;- 0 in e
</span><span class="line">before: add the definition of x to current definitions, overriding any other definition of x
</span><span class="line">recurse: recurse processing children of e
</span><span class="line">after: remove definition of x and restore the old definition of x</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="identifiers">3.1 Identifiers</h2>

<h3 id="scope">SCOPE</h3>

<p>The scope of an identifier is the portion of a program in which that identifier is accesible. Scope
helps match identifier declarations with uses. There are two kinds of scopes:</p>

<ul>
  <li>most languages use static scope, which means scope depends only on the program text, not runitme behaviour;</li>
  <li>a few languages are dynamically scoped, like LISP. A dynamically-scoped variable refers to the closest
enclosing binding in the execution of the program.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">f(x) = a + 1
</span><span class="line">
</span><span class="line">let a = 4 in {
</span><span class="line">  f(x)
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Static scopes in Cool lang is introduced by:</p>

<ul>
  <li>class declarations</li>
  <li>method definitions</li>
  <li>attribute definitions</li>
  <li>let expression</li>
  <li>case expressions</li>
  <li>formal parameters</li>
</ul>

<h3 id="symbol-tables">SYMBOL TABLES</h3>

<p>When performing Semantic Analysis on a portion of the program, we need to know which identifiers are
defined. Therefore we introduce a data structure that tracks the current bindings of identifiers,
which is Symbol Table.</p>

<p>For its recursive nature, we can use stack to represent nested scopes and a set to represent Symbol
Table in each scope</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">enter_scope()  - start a new nested scope
</span><span class="line">find_symbol(x) - find x (or null) in current scope
</span><span class="line">add_symbol(x)  - add symbol x to the table
</span><span class="line">check_scope(x) - true if x defined in current scope
</span><span class="line">exit_scope()   - exit current scope
</span><span class="line">
</span><span class="line">scope: x, y
</span><span class="line">  scope: x, y, z
</span><span class="line">                       -- enter_scope(), add_symbol(a)
</span><span class="line">    scope: x, y, z, a
</span><span class="line">                       -- exit_scope()</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>There are cases, like Class names, that can be used before being defined. We cannot check class
names using Symbol Table or in one pass. We can gather all class names first and do the checking.
Therefore, Semantic Analysis requires multiple passes.</p>

<h2 id="types">3.2 Types</h2>

<p>What is a type? The notion varies from language to language. But a consensus is: a set of values and
a set of operations on those values. Classes are one instantiation of the modern notion of type,
like in OO.</p>

<p>A language’s type system specifies which operations are valid for which types. The goal of type
checking is to enture that operations are used with the correct types. There is no types in an
assembly language, therefore there are no types at the bit level in the machine code. So, type is a
virtual concept at the language level, and to type check is to enforce the intended interpretation of values.</p>

<p>There are a few kinds:</p>

<ul>
  <li>static typed langs: C, Java. A lot of code is written in statically typed lang has an “escape”
                    mechanism: like unsafe casts in C, Java (void pointer can be anything).</li>
  <li>dynamic typed langs: Lips, Ruby. A lot of dynamically typed lang rewrites their compilers with
                    static lang for optimization and better debugging.</li>
  <li>untyped langs: machine code</li>
</ul>

<h3 id="type-checking">3.2.1 TYPE CHECKING</h3>

<p>When type checking, the compiler basically infers types for every expression, to make sure it’s used
with the correct type.</p>

<p>We’ve seen two forma notations specifying parts of a compiler: Regular Expression and Context-Free
Grammars. The formalism for type check is <strong>logic rules of inference</strong>, which has the form that “if
Hypothesis is true, then Conclusion is true.” By tradition, inference rules are written as</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">⊢ Hypothesis .. ⊢ Hypothesis
</span><span class="line">----------------------------
</span><span class="line">         ⊢ Conclusion
</span><span class="line">
</span><span class="line">⊢ means "it's provable that..."</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If there is no Hypothesis required, we can consider it as an axiom</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">----------------------------
</span><span class="line">         ⊢ Axiom
</span><span class="line">
</span><span class="line">--------
</span><span class="line">⊢ 1: Int</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As an example, the inference rule for Int plus operation is</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">⊢ e1: Int ⊢ e2: Int
</span><span class="line">-------------------
</span><span class="line">  ⊢ e1+e2: Int</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>A type system is sound if whenever <code>⊢ e: T</code>, then <code>e</code> evaluates to a value of type <code>T</code>. So, type
checking proves the fact of <code>e: T</code> on the strucuture of the AST, which then maintains the shape of
AST. There is one type rule used for each AST node and in a type rule of node <code>e</code>: Hypotheses are the proofs of
types of <code>e'</code>s subexpression and conclustion is the type of <code>e</code>. So, types are computed in a
bottom-up pass over the AST.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">   +                    ⊢ 1: Int ⊢ 2: Int
</span><span class="line"> /   \                  -----------------
</span><span class="line">1      2                    ⊢ 1+2: Int</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="type-environment">3.2.2 TYPE ENVIRONMENT</h3>

<p>Heuristic: for a literal <code>1 is an Int</code>, we know that <code>⊢ 1: Int</code>; but for a variable <code>x</code> how could we
know it type.</p>

<p>A type environment gives types for free variables/identifiers in the current scope, by free it means
the varaible is not defined. So, we can consider a type environment is a function from identifiers
to types.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">x                       // x is free
</span><span class="line">x + y                   // x, y is free
</span><span class="line">let y = 1 in { x + y }  // x is free, y is bound</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>With the type environment, we can refine our Conclusion branch in inference rules: <code>O ⊢ e: T</code>, under
the assumption that free variables have the types given by <code>O</code>, it’s provable that the expression
<code>e</code> has type <code>T.</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">O(x) = T
</span><span class="line">--------    [Var]
</span><span class="line">O ⊢ x: T</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To make it more scoped, we can introduce another notation <code>O[T/x]</code>, which means <code>x</code> is of type <code>T</code>
in <code>O</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">   O[T/x] ⊢ e: T
</span><span class="line">--------------------      [Let]
</span><span class="line">O ⊢ let x: T in e: T</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>A type environment is built inisde the Symbol Table and gets passed down the AST from root to
leaves. Types are computed up the AST from the leaves towars the root.</p>

<h3 id="subtype-methods-and-implementation">3.2.3 SUBTYPE, METHODS and IMPLEMENTATION</h3>

<p>SUBTYPE</p>

<p>Let’s look at the <code>[Assign]</code> inference rule</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">O ⊢ e1: T1
</span><span class="line">O(x) = T0       [Assign]
</span><span class="line">T1 &lt;= T0
</span><span class="line">-------------
</span><span class="line">O ⊢ x = e1: T1</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>What about <code>[if-then-else]</code>? It should be the smallest supertype larger than each branch. We
introduce <code>lub(X,Y)</code>, the least upper bound of X and Y. In an OO language, <code>lub</code> of two types is the
least common ancestor in the inheritance tree.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">O ⊢ e0: Bool
</span><span class="line">O ⊢ e1: T1
</span><span class="line">O ⊢ e2: T2
</span><span class="line">-----------------------------------------
</span><span class="line">O ⊢ if e0 then e1 else e2 fi: lub(T1, T2)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>METHODS</p>

<p>In the example language COOL, method and object identifiers in different name spaces, that a method
<code>foo</code> and an object <code>foo</code> can coexist in the same scope. This is reflected by a separate mapping <code>M</code>
for method signatures, which we call the method environment. In most cases, <code>M</code> is passed down the
AST and only gets used in <code>Dispatch</code> rules.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">M(C, f) = (T1, T2, ... Tn, Tn+1)
</span><span class="line">
</span><span class="line">// The method signature of f in class C
</span><span class="line">
</span><span class="line">f(x1: T1, x2: T2 ... xn: Tn): Tn+1</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Therefore a method is type checking by</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">O, M ⊢ e0: T0                          [Dispatch]
</span><span class="line">M(T0, f) = (T1', T2', ... Tn', Tn+1)
</span><span class="line">
</span><span class="line">O, M ⊢ e1: T1
</span><span class="line">...
</span><span class="line">O, M ⊢ en: Tn
</span><span class="line">
</span><span class="line">Ti &lt;= Ti' for 1 &lt;= i &lt;= n
</span><span class="line">-----------------------------------
</span><span class="line">O, M ⊢ e0.f(e1, ..., en): Tn+1</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>For a static dispatch, we require users to use <code>e0@T</code> explicitly</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">O, M ⊢ e0: T0                          [Static-dispatch]
</span><span class="line">M(T0, f) = (T1', T2', ... Tn', Tn+1)
</span><span class="line">T0 &lt;= T
</span><span class="line">
</span><span class="line">O, M ⊢ e1: T1
</span><span class="line">...
</span><span class="line">O, M ⊢ en: Tn
</span><span class="line">
</span><span class="line">Ti &lt;= Ti' for 1 &lt;= i &lt;= n
</span><span class="line">-----------------------------------
</span><span class="line">O, M ⊢ e0@T.f(e1, ..., en): Tn+1</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>SELF_TYPE</p>

<p>For a language supports self type, we need to know that which class the expression appears in. So
the full type environment for COOL is</p>

<ul>
  <li>A mapping <code>O</code> gives types to object identifiers</li>
  <li>A mapping <code>M</code> gives types to method identifiers</li>
  <li>The current class <code>C</code></li>
</ul>

<p>IMPLEMENTING</p>

<p>COOL type checking can be implemented in a single traversal of the AST, that type environment is
pass down and types are passed up.</p>

<p>Let’et take <code>[Let-init]</code> as an example. Inference rule is the defined as</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">O,M,C ⊢ e0: T0
</span><span class="line">O[T/x], M, C ⊢ e1: T1
</span><span class="line">T0 &lt;= T
</span><span class="line">-------------------------------
</span><span class="line">O,M,C ⊢ let x: T = e0 in e1: T1</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The implementation would be</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">TypeCheck(Environment, let x: T = e0 in e1) = {
</span><span class="line">    T0 = TypeCheck(Environment, e0);
</span><span class="line">    T1 = TypeCheck(Environment.add(x: T), e1);
</span><span class="line">    Check subtype(T0, T);
</span><span class="line">    return T1;
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="static-vs-dynamic">3.2.4 STATIC VS. DYNAMIC</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">
</span><span class="line">class A { .. }
</span><span class="line">class B inherits A { .. }
</span><span class="line">class Main {
</span><span class="line">  x: A = new A;           // static type of x is A, dynamic type of x is A
</span><span class="line">  x = new B;              // dynamic type of x is B now
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In COOL, <code>dynamic_type(E) &lt;= static_type(E)</code></p>

<h3 id="selftype">3.2.5 SELF_TYPE</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class Count {
</span><span class="line">  i: int = 0;
</span><span class="line">  inc(): Count {
</span><span class="line">    i = i + 1;
</span><span class="line">    self;
</span><span class="line">  }
</span><span class="line">}
</span><span class="line">
</span><span class="line">class Stock inherits Count {
</span><span class="line">  name: String;
</span><span class="line">}
</span><span class="line">
</span><span class="line">class Main {
</span><span class="line">  Stock a = (new Stock).inc(); // Type error, as we are assigning Count to Stock
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>So, we should extend the type system with SELF_TYPE, which allows the return type of <code>inc</code> to change
whne <code>inc</code> is inherited.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class Count {
</span><span class="line">  i: int = 0;
</span><span class="line">  inc(): SELF_TYPE {
</span><span class="line">    i = i + 1;
</span><span class="line">    self;
</span><span class="line">  }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="runtime-organizations">4 Runtime Organizations</h1>

<p>Before we get into optimization and code generation, we need to understand what we are trying to
generate. A runtime organization controls the management of run-time resources. Particually, to
understand a compiler works, we should understand the correspondenc between static (compile-time)
and dynamic (run-time) strucutres: what is done by the compiler and what is deferred to the
generated program actually runs.</p>

<p>Execution of a program is initially by OS. When a program is invoked: the OS allocates space for the
program; the code is loaded into part of the space; the OS jumps to the entry point (“main”).</p>

<p>In terms of space (memroy), traditionally it’s like this. A compiler is responsible for generating
code and orchestrating code to use the data space.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">+-------------+
</span><span class="line">|     code    | ---+
</span><span class="line">+-------------+    |
</span><span class="line">|             |    |
</span><span class="line">|     data    | &lt;--+
</span><span class="line">|             |
</span><span class="line">+-------------+</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="activations">4.1 Activations</h2>

<p>There are two goals for code generation: correctness and speed. To talk about that, we need to talk
about activations.</p>

<p>An invocation of procedure P is an activation of P. The lifetime of an activation of P is all the
steps of execute P, including all the steps in procedures P calls. We can also say that the lifetime
of a varaible x is the portion of execution in which x is defined. To be noted that, lifetime is a
dynamic (run-time) concept, whereas scope is a static (compile-time) concept.</p>

<p>Given, when P calls Q, then Q returns before P returns, activation lifetimes can be depicted as a
activation tree. The activation tree depends on run-time behaviour and may be different for every
program input.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class Main {
</span><span class="line">  g(): Int { 1 };
</span><span class="line">  f(): Int { 2 };
</span><span class="line">  main() { g(); f(); }
</span><span class="line">}
</span><span class="line">
</span><span class="line">  main
</span><span class="line">  /  \
</span><span class="line">g     f
</span><span class="line">
</span><span class="line">class Main {
</span><span class="line">  g(): Int { 1 };
</span><span class="line">  f(x: Int): Int { if x == 0 then g() else f(x-1) };
</span><span class="line">
</span><span class="line">  main(): Int {
</span><span class="line">    f(3)
</span><span class="line">  }
</span><span class="line">}
</span><span class="line">
</span><span class="line">main
</span><span class="line">  |
</span><span class="line">  f(3)
</span><span class="line">  |
</span><span class="line">  f(2)
</span><span class="line">  |
</span><span class="line">  f(1)
</span><span class="line">  |
</span><span class="line">  f(0)
</span><span class="line">  |
</span><span class="line">  g</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Since activations are properly nested, we can use a stack to track currently active procedures.</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">+-------------+
</span><span class="line">|     code    |
</span><span class="line">+-------------+
</span><span class="line">|     stack   | ------------+
</span><span class="line">|       |     |             |
</span><span class="line">|       v     |            main
</span><span class="line">|             |             |
</span><span class="line">+-------------+             f(3)
</span><span class="line">                            |
</span><span class="line">                            ..
</span><span class="line">                            |
</span><span class="line">                            g</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="activation-records">4.2 Activation Records</h2>

<p>So what information we should keep for activations? The information needed to manage one procedure
activation is called an Activation Record or Frame.</p>

<p>If procedure F calls G, then G’s activation records contains a mix of info about F and G. Becuase
G’s AR should contain information to 1. complete execution of G 2. resume execution of F.</p>

<p>This is one of many possible AR designs (which works for C)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">+----------------+
</span><span class="line">| result         |
</span><span class="line">+----------------+
</span><span class="line">| argument       |
</span><span class="line">+----------------+
</span><span class="line">| control link   |   // who calls the current activation
</span><span class="line">+----------------+
</span><span class="line">| return address |   // where to resume execution after the current activation
</span><span class="line">+----------------+</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Let’s review this example again:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class=""><span class="line">class Main {
</span><span class="line">  g(): Int { 1 };
</span><span class="line">  f(x: Int): Int { if x == 0 then g() else f(x-1) (**) };
</span><span class="line">
</span><span class="line">  main(): Int {
</span><span class="line">    f(3); (*)
</span><span class="line">  }
</span><span class="line">}
</span><span class="line">
</span><span class="line">+----------------+ &lt;-+              main
</span><span class="line">| Main AR        |   |                |
</span><span class="line">+----------------+   |                |
</span><span class="line">                     |                |
</span><span class="line">+----------------+ &lt;-|---+           f(3)
</span><span class="line">| result         |   |   |            |
</span><span class="line">+----------------+   |   |            |
</span><span class="line">| argument: 3    |   |   |            |
</span><span class="line">+----------------+   |   |            |
</span><span class="line">| control link   | --+   |            |
</span><span class="line">+----------------+       |            |
</span><span class="line">| return (*)     |       |            |
</span><span class="line">+----------------+       |            |
</span><span class="line">                         |            |
</span><span class="line">+----------------+       |           f(2)
</span><span class="line">| result         |       |            |
</span><span class="line">+----------------+       |            |
</span><span class="line">| argument: 2    |       |            |
</span><span class="line">+----------------+       |
</span><span class="line">| control link   | ------+
</span><span class="line">+----------------+
</span><span class="line">| return (**)    |
</span><span class="line">+----------------+</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The compiler must determine, at compile-time, the layout of AR and generate code
that correctly accesses location in the activation records. Thus, <strong>the AR layout and the code
generator must be designed together.</strong></p>

<h2 id="global--heaps">4.3 Global &amp;&amp; Heaps</h2>

<p>Globals cannot be stored in AR as all references to a global variable should point to
the same object. So, globals are assigned at a fixed address once, as statically allocated.</p>

<p>For values that outlive the procedure that creates it cannot be kept in the AR neither, like in
<code>method foo() { new Bar }</code>, that <code>Bar</code> value must survive deallocation of <code>foo</code>’s AR. So, we need to
use heap to store dynamically allocated data.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class=""><span class="line">+-------------+ Low address
</span><span class="line">|    code     |
</span><span class="line">+-------------+
</span><span class="line">|             |
</span><span class="line">| static data |
</span><span class="line">|             |
</span><span class="line">+-------------+
</span><span class="line">|   stack     |
</span><span class="line">|     |       |
</span><span class="line">|     v       |
</span><span class="line">|.............|
</span><span class="line">|             |
</span><span class="line">|             |
</span><span class="line">|             |
</span><span class="line">|             |
</span><span class="line">|             |
</span><span class="line">|.............|
</span><span class="line">|     ^       |
</span><span class="line">|     |       |
</span><span class="line">|    heap     |
</span><span class="line">+-------------+ High address</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="alignment">4.4 Alignment</h2>

<blockquote>
  <p>This is a very low level but important detail of machine architecture.</p>
</blockquote>

<p>Most modern machines are 32 or 64 bit: 8 bits in a byte, and 4 or 8 bytes in a <strong>word</strong>. Machines are
either byte or word addressable.</p>

<p>Data is <strong>word aligend</strong> if it begins at a word boundary. Most machines have some alignment
restrictions or performance penalties for poor alignment.</p>

<h1 id="code-generation">5 Code Generation</h1>

<h2 id="stack-machines">5.1 Stack Machines</h2>

<blockquote>
  <p>the simplest model for code generation</p>
</blockquote>

<p>A stack machines use a stack as the only storage. An instruction <code>r = F(a1,...an)</code> is executed as</p>

<ul>
  <li>Pops n operands from the stack</li>
  <li>Computes the operation F</li>
  <li>Pushes result back to the stack</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">5 + 7
</span><span class="line">
</span><span class="line">push(5) - push 5 on the stack
</span><span class="line">push(7) - push 7 on the stack
</span><span class="line">add     - pop, add and push 12 on the stack</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="stack-machine-vs-register-machine">5.1.1 Stack machine vs Register machine</h3>

<p>What’s the benefit of using a stack machine?</p>

<p>Location of the operands/result is not explicitly stated, as which are always on the top of the
stack. We consider <code>add</code> as a valid operation, instead of <code>add r1, r2</code> in a register machine. This
leads to more compact programs (space). Java bytecode uses stack evaluation.</p>

<p>However, a register machine is mostly preferred and generally faster (time), because we can place
the data at exactly where we want it to be, which has generally less intermediate operations and
manipulation like pushing and popping off the stack.</p>

<h3 id="n-register-stack-machine">5.1.2 n-register stack machine</h3>

<p>It’s an intermediate form between pure stack machine and register machine. Conceptually, keep the
top n locations of the pure stack machine’s stack in registers. A 1-register stack machines is
called the accumulator.</p>

<p>In a pure stack machine, an <code>add</code> does 3 memory operations, with two reads and one write to the
stack. In a 1-register stack machine, <code>add</code> does one read as <code>acc &lt;- acc + top_of_stack</code>.</p>

<p>In a general form, for expression <code>op(e1,..en)</code> (each <code>e</code> is an subexpression)</p>

<ul>
  <li>for each <code>ei</code>
compute <code>ei</code>
store the result in <code>acc</code>
push result on the stack</li>
  <li>Pop n-1 values from the stack, compute <code>op</code></li>
  <li>Store result in <code>acc</code></li>
</ul>

<p>The invariance a stack machine maintains: After evaluating an expression e, the accumulator holds
the value of e and the stack is unchanged. This is a very important property: <strong>Expression
evaluation preserves the stack</strong>.</p>

<h2 id="intro-3">5.2 Intro</h2>

<p>We’ll focus on generating code for a stack machine with accumulator. We simulate stack machines
instrinstructions using MIPS instructions and registers. MIPS architecture is prototypical RISC.
Most operations use registers sfor operands &amp; results, use load&amp;store instructions to use values in
memory. There 32 general purpose registers (32 bits each), we’ll use <code>$a0 $sp $t1</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Stack Machine                       MIPS
</span><span class="line">
</span><span class="line">accumulator                         $a0 register
</span><span class="line">stack                               memory
</span><span class="line">  the next location on the stack    $sp
</span><span class="line">  the top of stack                  $sp + 4 (stack grows towards lower addresses)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>MIPS instruction list</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># register - memory
</span><span class="line">lw reg1 offset(reg2)    load a 32-bit word from reg2+offset into reg1
</span><span class="line">sw reg1 offset(reg2)    store a 32-bit word in reg1 at address reg2+offset
</span><span class="line">
</span><span class="line"># register - immediate value
</span><span class="line">li reg imm              eg. li reg 4
</span><span class="line">
</span><span class="line"># register - add operation
</span><span class="line">add reg1 reg2 reg3
</span><span class="line">addiu reg1 reg2 imm</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="code-gen">5.3 Code Gen</h2>

<p>Let’s define a simple language with integers and integer operations</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">P -&gt; D; P | D
</span><span class="line">
</span><span class="line">D -&gt; def id(ARGS) = E;
</span><span class="line">ARGS -&gt; id, ARGS | id
</span><span class="line">
</span><span class="line">E -&gt; int | id | if E1 = E2 then E3 else E4
</span><span class="line">      | E1 + E2 | E1 - E2 | id(E1,...En)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>For each expression <code>e</code> we generate MIPS code that
* Computes the value of <code>e</code> in <code>$a0</code>
* Preserves <code>$sp</code> and the contents of the stack</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cgen(e1 + e2) =
</span><span class="line">  // compile time code prints out runtime code
</span><span class="line">
</span><span class="line">  cgen(e1)
</span><span class="line">  print "sw $a0 0($sp)"           // push value onto stack
</span><span class="line">  print "addiu $sp $sp-4"
</span><span class="line">
</span><span class="line">  cgen(e2)
</span><span class="line">
</span><span class="line">  print "lw $t1 4($sp)"           // load value from stack
</span><span class="line">  print "add $a0 $t1 $a0"         // add
</span><span class="line">  print "addiu $sp $sp 4"         // pop from stack</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>How about code gen for functions?</p>

<p>Code for function calls and function definitions depend on the layout of the AR. A very simple AR
suffices for COOL lang:</p>

<ul>
  <li>The result is always in the accumulator (no need to store in the AR)</li>
  <li>The AR holds actual parameters. For <code>f(x1,..xn)</code> push <code>xn,..x1</code> on the stack</li>
  <li>The stack discipline guarantees that on function exit <code>$sp</code> is the same as it was on function
entry (no need for a control link)</li>
  <li>We need the return address</li>
  <li>A pointer to the current activation is useful. This pointer lives in register <code>$fp</code> (frame pointer)</li>
</ul>

<p>For AR, the caller’s frame pointer, the actual parameters and the return address suffices.</p>

<p>A call to <code>f(x, y)</code> the AR is</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">+-------------+
</span><span class="line">| old fp      |
</span><span class="line">+-------------+
</span><span class="line">| y           |
</span><span class="line">+-------------+
</span><span class="line">| x           |
</span><span class="line">+-------------+
</span><span class="line">| return addr |
</span><span class="line">+-------------+</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The calling sequene is the instructions (of both caller and callee) to set up a function invocation.</p>

<p>The caller
  * saves its value of the frame pointer
  * then it saves the actual parameters in reverse order
  * finally the caller saves the return address in register $ra
  * The AR so far is 4*n + 4 bytes long
The callee
  * pops the return address, the actual arguments and restores the caller’s frame pointer</p>

<p>Summary:</p>

<ul>
  <li>The AR must be designed together with the code generator</li>
  <li>Code generation can be done by recursive traversal of the AST</li>
  <li>Production compilers do different things:
    <ul>
      <li>Emphasis on keeping values in registers</li>
      <li>Intermediate results (temporaries) are laid out in the AR, not pushed and poped from the stack</li>
    </ul>
  </li>
</ul>

<p>How about temporaries?</p>

<p>A rule of thumb is to keep temporaries in AR. So, code generation must know how many temporaries are
in use at each point, which can be done by looking at the AST.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class=""><span class="line">+-------------+
</span><span class="line">| old fp      |
</span><span class="line">+-------------+
</span><span class="line">| xn          |
</span><span class="line">+-------------+
</span><span class="line">| ..          |
</span><span class="line">+-------------+
</span><span class="line">| x1          |
</span><span class="line">+-------------+
</span><span class="line">| return addr |
</span><span class="line">+-------------+
</span><span class="line">| temp 1      |
</span><span class="line">+-------------+
</span><span class="line">| temp 2      |
</span><span class="line">+-------------+</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="code-gen---object-layout">5.4 Code Gen - Object Layout</h2>

<p>OO Slogan: If B is a subclass of A, then an object of class B can be used wherever an object of
class A is expected. This means that code in class A has to work unmodified for object of class B,
at compile time.</p>

<p>Q. How are objects represented in memory?</p>

<p>Objects are laid out in contiguous memory. Each attributes stored at a fixed offset in the object.
WHen a method is invoed, <code>self</code> points to the  whole object.</p>

<p>The layout for Cool objects</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">+--------------+ First 3 words are headers
</span><span class="line">| Class tag    |
</span><span class="line">+--------------+
</span><span class="line">| Object size  |
</span><span class="line">+--------------+
</span><span class="line">| Dispatch Ptr |
</span><span class="line">+--------------+ then attributes
</span><span class="line">| attr 1       |
</span><span class="line">+--------------+
</span><span class="line">| attr 2       |
</span><span class="line">+--------------+
</span><span class="line">| ...          |
</span><span class="line">+--------------+</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Based on the observation: <strong>Given a layout for class A, a layout for subclass B can be defined by
extending the layout of A with additional slots of the addition attributes of B</strong>. So consider layout
of <code>A3 &lt; A2 &lt; A1</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">+--------------+
</span><span class="line">| Header       |
</span><span class="line">+--------------+
</span><span class="line">| A1 attrs     |
</span><span class="line">+--------------+
</span><span class="line">| A2 attrs     |
</span><span class="line">+--------------+
</span><span class="line">| A3 attrs     |
</span><span class="line">+--------------+</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The offset for an attribute is the same in a class and all of its subclasses.</p>

<p>Q. How is dynamic dispatch implemented?</p>

<p>Every class has a fixed set of methods, including inherited methods. A dispatch table is used to
index these mtehods. It’s an array of method entrypoints. A method <code>f</code> lives at a fixed offset in
the dispatch table for a class and all of its subclasses.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">A { f() }
</span><span class="line">B &lt; A { g() }
</span><span class="line">C &lt; A { f(); h() }</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The dispatch table would be: tables for B and C extend table for A to the right, and because methods
can be overriden, the method of f is not the same in every class, but is always at the same offset.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">+--------+----+---+
</span><span class="line">| offset | 0  | 4 |
</span><span class="line">+--------+----+---+
</span><span class="line">| A      | FA |   |
</span><span class="line">| B      | FA | g |
</span><span class="line">| C      | FC | h |
</span><span class="line">+--------+----+---+</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>So back to the dispatch pointer, the dispatch pointer in an object of class X points to the dispatch
table for class X:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">+--------------+
</span><span class="line">| Class tag    |
</span><span class="line">+--------------+
</span><span class="line">| Object size  |     Dispatch Table
</span><span class="line">+--------------+     +-------------------+
</span><span class="line">| Dispatch Ptr | --&gt; |    |    |    |    |
</span><span class="line">+--------------+     +-------------------+
</span><span class="line">| Attrs        |
</span><span class="line">+--------------+</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Every method <code>f</code> of <code>X</code> is assigned an offset <code>Of</code> in the dispatch table at compile time. That’s why
we maintain the offset when extending dispatch table.</p>

<p>Theorectially we can save the table directly as we do for attributes. But attributes are
states that 100 objects can each have a different set of attributes values. Methods are static that
it makes sense to share the common table among objects.</p>

<h2 id="evaluation-semantics">5.5 Evaluation Semantics</h2>

<blockquote>
  <p>runtime semantics, compared to compile-time Semantic Analysis</p>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">LA - SA - Semantic Analysis - Code Generation
</span><span class="line">                                     |
</span><span class="line">              +---               bytecode                ---+
</span><span class="line">              |                      |                      |
</span><span class="line">              |              +---------------+              |
</span><span class="line">        Execution            | Stack Machine |    Evaluation Semantics
</span><span class="line">              |              +---------------+              |
</span><span class="line">              |                      |                      |
</span><span class="line">              +---             machine code              ---+
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In Code Generation, we need to define an evaluation rule, which is also called Semantics.</p>

<p>Let’s look back the definition of a programming language:
* The tokens is parsed by Regular Expressions in Lexical Analysis
* The grammar is represented by CFG in Syntactic Analysis
* The typing rule is represented by Inferenece Rule in Semantics Analysis
* The evaluation rules is represented by Semantics in Code Generation and Optimization</p>

<p>We have specified evaluation rules indirectly by
* the compilation of Cool program to a stack machine bytecode; and
* the evaluation rules of the stack machine, which translates bytecode to some assembly program</p>

<p>This is a complete description of evaluation rules, but it’s not good enough, as assembly-language
descriptions of language implementations have irrelevant details, that we don’t want it become the
only way to execute our program.</p>

<ul>
  <li>whether to use a stack machine or not</li>
  <li>which way the stack grows</li>
  <li>how integers are represented</li>
  <li>the particular instruction set of the architecture</li>
</ul>

<p>Therefore, we’d love to have a complete description, but not an overly restrictive specification.</p>

<p>There are many ways to specify semantics:</p>

<ul>
  <li>Operational semantics: it describes program evaluation via execution rules on an abstract machine,
which is most useful for specifying implementations.</li>
  <li>Denotation semantics: program’s meaning is mapping to a mathematical function</li>
  <li>Axiomatic semantics: program’s behaviour is described via logical formalae. It’s the foundation of
many program verification systems.</li>
</ul>

<h2 id="operational-semantics">5.6 Operational Semantics</h2>

<p>We should introduce a formal notation, which is Logical rules of inference as in type checking.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># in type checking, this means in a given context, expression e has type C
</span><span class="line">Context ⊢ e: C
</span><span class="line">
</span><span class="line"># in evaluation, this means in a given context, expression e evaluates to value v
</span><span class="line">Context ⊢ e: v</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Consider the evaluation of <code>y &lt;- x + 1</code>, we should track variables and their values with:</p>

<ul>
  <li>an environment: where a variable is in memory</li>
  <li>a store: what is in the memory</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">  environment          store
</span><span class="line">     |                   |
</span><span class="line">var ---&gt; memory address ---&gt; value</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>A variable environment maps variables to locations, that keeps track of which variables are in scope
and tells us where those variables are</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">E = [a: l1, b: l2]</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>A store maps memory locations to values</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">S = [l1 -&gt; 5, l2 -&gt; 7]
</span><span class="line">
</span><span class="line">S' = S[12/l1] defines a new store S' which has a substitution of l1 to 12</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Cool values are objects, which define <code>X(a1 = l1, ..., an = ln)</code> as a Cool object where <code>X</code> is the
class name, <code>ai</code> are the attributes (including the inherited ones) and <code>li</code> the location where the
value of <code>ai</code> is stored.</p>

<p>There are a few special cases (classes withouth attributes)
* <code>Int(5)</code>
* <code>Bool(true)</code>
* <code>String(4, "abcd")</code>
* <code>void</code> of type Object and usually use <code>NULL</code> as the concrete implementation</p>

<p>The evaluation judgement is</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">so, E, S ⊢ e: v, S'
</span><span class="line">
</span><span class="line">Given
</span><span class="line">  so as the current value of self
</span><span class="line">  E as the current variable environment
</span><span class="line">  S as the current store
</span><span class="line">If the evaluation of e terminates then
</span><span class="line">  the value of e is v
</span><span class="line">  the new store is S'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Therefore, the result of an evaluation is a value and a new store, where new store models the
side-effects.</p>

<p>Examples</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">  E(id) = lid
</span><span class="line">  S(lid) = v
</span><span class="line">-------------------
</span><span class="line">so, E, S ⊢ id: v, S</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="intermediate-language">5.7 Intermediate language</h2>

<p>A language between source and target. With more details than souce and less than target.</p>

<p>Intermidate language can be considered as high-level assmebly. It uses register names, but has an
unlimited number. It uses control structures as assembly language. It uses opcodes but some are
higher level, like <code>push</code> translates to several assembly instructions.</p>

<p>Usually, we prefer to apply optimizations over IL, instead of AST or assembly language.</p>

<h1 id="optimization">6 Optimization</h1>

<h2 id="intro-4">6.1 Intro</h2>

<p>Most complexity in modern compilers is in the optimizer. Optimization seeks to improve a program’s
resoure utilization: execution time, code size and network messages sent, etc. In practice, not all
fancy optimizations known are implemented, given the difficulty to implement, the cost in
compilation and low payoff. So, the goal of optimization should be to get maximum benefit with
minimum cost.</p>

<p>Q. What should we perform optimizations?</p>

<p>On AST (after Semantic Analysis)
* pro: machine independent
* con: too high level</p>

<p>On Assembly language (after code gen)
* pro: expose optimization opportunities
* con: machine independent
* con: must reimplement optimizations when re-targeting</p>

<p>On Intermediate language
* pro: machine independent
* pro: expose optimization opportunities</p>

<p>Q. What are the units of optimization?</p>

<p>A basic block is a maximal sequence of instructions with no labels (except at the first instruction)
and no jumps (except in the last instruction), which makes it a single-entry, single-exit,
straight-line code segment.</p>

<p>For example, within this basic block, given 3 executes only after 2, we can change 3 to be <code>w := 3*x</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">1. L:
</span><span class="line">2.  t := 2*x
</span><span class="line">3.  w := t + x
</span><span class="line">4.  if w &gt; 0 goto L</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>A control-flow graph is a directed graph with basic block as nodes. Between the nodes, there can be
an edge from block A to block B if the execution can pass from the last instruction in A to the
first instruction in B. Usually, the body of a function can be represented as a control-flow graph.</p>

<p>Q. What are granularities of optimizations? Like in C</p>

<ol>
  <li>Local optimization: apply to a basic block in isolation</li>
  <li>Global optimization (it’s not really global, but to function): apply to a control-flow graph in
isolation</li>
  <li>Inter-procedural optimization: apply across function boundaries.</li>
</ol>

<p>Most compilers do 1, many do 2 and few do 3.</p>

<h2 id="local-optimization">6.2 Local Optimization</h2>

<p>Each local optimization does little by itself, given the scope of basic block. But optimizations
typically interfact, comiplers repeat optimizations until no improvement is possible.</p>

<p>ALGEBRAIC OPTIMIZATION</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">x = x * 0   =&gt; x = 0
</span><span class="line">y = y ** 2  =&gt; y = y*y
</span><span class="line">x = x * 8   =&gt; x = x &lt;&lt; 3</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>CONSTANT FOLDING, that operations on constants can be computed at compile time. This can be
dangerous when compiler and gen code are running on different archs, eg. how float is represented.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">x = 2 + 2 =&gt; x = 4</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>ELIMINIATE UNREACHABLE BASIC BLOCKS</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#define DEBUG 0
</span><span class="line">if DEBUG {
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Some optimizations are simplified if each register occurs only once on the left-hand side of an
assignment. We can rewrite intermediate code in <strong>SINGLE ASSIGNMENT FORM</strong>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">x := z + y   =&gt;   b := z + y
</span><span class="line">a := x            a := b
</span><span class="line">x := 2 * x        x := 2 * b</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>COMMON SUB-EXPRESSION ELIMINATION</p>

<p>If basic block is in single assignment form, and a definition <code>x:=</code> is the first use of <code>x</code> in a
block, then when two assignments have the same rhs, they compute the same value.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">x := y + z                    =&gt;  x := y + z
</span><span class="line">... // this won't change x
</span><span class="line">w := y + z                        w := x</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>COPY PROPAGATION, which assumes single assignment form</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">b := z + y  =&gt;  b := z + y
</span><span class="line">a := b          a := b
</span><span class="line">x := 2 * a      x := 2 * b</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>DEAD CODE ELIMINATION, which assumes single assignement form</p>

<p>if <code>w := rhs</code> appears in a basic block, <code>w</code> does not appear anywhere else in the program. then <code>w</code>
is dead in the sense of not contributing to the program’s result that can be eliminated.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">x := z + y  =&gt;  b := z + y  =&gt;  b := z + y
</span><span class="line">a := x          a := b
</span><span class="line">x := 2 * b      x := 2 * b      x := 2 * b</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>PEEPHOLE OPTIMIZATION</p>

<p>It’s a variation of local optimization, which directly applies on assemly code. The peephole is a
short sequenve of (usually contiguous) instructions. The optimizer replaces the sequenve with
another equivalent one (but faster).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">// move from b to a
</span><span class="line">move $a $b, move $b $a -&gt; move $a $b
</span><span class="line">
</span><span class="line">addiu $a $a i, addiu $a $a j -&gt; addiu $a $a i+j</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This implies that many simple optimizations can still be applied on assembly language. “Program
optimization” is grossly misnamed, that code produced by “optimizers” is not optimal in any
reasonable sense. “Program improvement” is a more appropriate term.</p>

<h2 id="global-optimization">6.3 Global Optimization</h2>

<h3 id="dataflow-analysis">6.3.1 Dataflow analysis</h3>

<p>Before we get understand some global optimization technique, like global constant propagation, we
need to know the dataflow analysis.</p>

<p>Can we propagate constant <code>X := 3</code> to the end result?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">  X := 3
</span><span class="line">  B &gt; 0
</span><span class="line">/          \
</span><span class="line">Y := Z + W    Y := 0
</span><span class="line">X := 4
</span><span class="line">\          /
</span><span class="line">  A := 2 * X</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To replace a use of <code>x</code> by a constant <code>k</code> we must know: on every path to the use of <code>x</code>, the last
assignment to <code>x</code> is <code>x := k</code>.</p>

<p>The correctness condition is not trivial to check. It requres global dataflow analysis, which is an
anylysis of the entire control-flow graph.</p>

<p>Global optimization tasks share several traits:</p>

<ul>
  <li>the optimization depends on knowing a property <code>X</code> at a particular point in program execution</li>
  <li>proving <code>X</code> at any point requires knowledge of the entire program</li>
  <li>it’s Ok to be conservative, that we may say <code>X</code> is definitely true, or Don’t know if <code>X</code> is true.</li>
</ul>

<p>There are many global dataflow analysis, but they all follow the methodology: <strong>The analysis of a
complicated program can be expressed as a combination of simple rules relating the change in
information between adjacent statements.</strong></p>

<h3 id="global-constant-propogation">6.3.2 Global constant propogation</h3>

<p>To replace a use of <code>x</code> by a constant <code>k</code> we must know: on every path to the use of <code>x</code>, the last
assignment to <code>x</code> is <code>x := k</code>.</p>

<p>Let’s consider the case of computing for a single variable <code>X</code> at all program ponts. To make the
problem precise, we associate one of the following values with <code>X</code> at every program point</p>

<ul>
  <li>⊥ that <code>X</code> is bottom, this statement never executes</li>
  <li>C that <code>X</code> is constant <code>C</code></li>
  <li>T that <code>X</code> is top, means <code>X</code> is not a constant</li>
</ul>

<p>How to compute the properties <code>X = ?</code> at each program point?</p>

<p>It means to tag the property <code>X</code> before each statement in the program.We should define a transfer
function that transfers information one statement to another. There are 8 general rules in total,
here is one example</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">if C(pi, X, out) = T, for any preceder of s, then C(s, X, in) = T</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The algorithm is depicted as</p>

<ul>
  <li>For every entry <code>s</code> to the program, set <code>C(s, X, in) = T</code>, set <code>C(s, X, in) = C(s, X, out) = ⊥</code> everywhere else</li>
  <li>Repeat until all points satisfy rule 1-8
Pick <code>s</code> not satisfiying rule 1-8 and update using the appropriate rule</li>
</ul>

<p>ORDERING</p>

<p>We can simplify the presentation of the analysis by ordering the values that <code>⊥ &lt; C &lt; T</code>
To make it clear, that all constants are in between and incomparable.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">      T
</span><span class="line">/  /  |  \   \
</span><span class="line">   .. -1  0   1   ..
</span><span class="line">   \   \  |   /   /
</span><span class="line">      ⊥</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We can define the lub, least-upper bound</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lub(⊥, 1) = 1
</span><span class="line">lub(T, ⊥) = T
</span><span class="line">lub(1, 2) = T</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The use of lub explains why the algorithm terminates: Values start as <code>⊥</code> and only increas and <code>⊥</code>
can change to a constant, and to <code>T</code>, Thus <code>C(s, x, in/out)</code> can change at most twice.Therefore the
constant propagation algorithm is linear in program size:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Number of steps = Number of C(..) values compuated * 2
</span><span class="line">                = Number of program statements * 2 (in and out) * 2</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="liveness-analysis">6.3.3 Liveness Analysis</h3>

<p>“live” here means value may be used in the future.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">X := 3 // x is dead
</span><span class="line">X := 4 // x is live
</span><span class="line">y := X</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>A variable <code>x</code> is live at statement <code>s</code> if</p>

<ul>
  <li>there exists a statement <code>s'</code> that uses <code>x</code></li>
  <li>there is a path from <code>s</code> to <code>s'</code></li>
  <li>that path has no intervening assignment to <code>x</code></li>
</ul>

<p>How do we gather the liveness information?</p>

<p>Just as we do in the constant propagation, we can express liveness in terms of information
transferred between adjacent statements. It’s simpler as it only needs a boolean property.</p>

<p>The algorithm is depicted as</p>

<ul>
  <li>Let all <code>L(..) = false</code> initially</li>
  <li>Repeat untile all statements <code>s</code> satisfy rules 1-4
pick <code>s</code> where one of 1-4 does not hold and update use the appropriate rule</li>
</ul>

<p>A value can change from <code>false</code> to <code>true</code>, but not the other way around, so the order is <code>false &lt;
true</code>. Each value can change only once, so termination is guaranteed. Once the analysis is
computed, it is simple to eliminate dead code.</p>

<p>We’ve seen two kinds of analysis:
* Constant propagation is a forward analysis that information is pushed from input to output.
* Liveness is backwards analysis that information is pushed from output back towards input.</p>

<h2 id="register-allocation">6.4 Register Allocation</h2>

<blockquote>
  <p>one of the most sophiscated things that compilers do to optimize performance</p>
</blockquote>

<p>Register Allocation is a “must have” in compilers: because intermediate code uses too many
temporaries and it makes a big difference in performance.</p>

<blockquote>
  <p>temporaries -&gt; RIG -&gt; Graph Coloring</p>
</blockquote>

<p>Background: Intermediate code uses unlimited temporaries, which can simplify code generation and
optimization, but complicate the final translation to assembly. So, typical intermediate code uses
too many temporaries.</p>

<p>Problem: rewrite the intermediate code to use no more temporarie than there are machine
registers.</p>

<p>Solution: Register allocaiton is as old as compilers. There was a breakthrough in 1980 that people
found a algorithem that’s relatively simple, global and works well in practice, which is based on GRAPH
COLORING. The basic principle is: If t1 and t2 are live at the same time, they cannot share a
register.</p>

<p>Algorithm:</p>

<p>Construct an undirected graph, that a node for each temporary, an edge between t1 and t2
if they are live simultaneously at some point in the program, which is called REGISTER INTERFERENCE
GRAPH (RIG). Two temporaries can be allocated to the same register if there is no edge connecting
them. After RIG construction, the Register Allocation algorithm is architecture independent.</p>

<h3 id="graph-coloring">6.4.2 Graph Coloring</h3>

<p>A coloring of a graph is an assignment of colors to nodes, such that nodes connected by an edge have
different colors. A graph is K-COLORABLE if it has a coloring with k colors.</p>

<p>For Register Aollocation, we need to assign colors (registers) to graph nodes (temporaries), and let
k be the number of machine registers. If the RIG is k-colorable then there is a register assignment
that uses no more than k registers.</p>

<p>Graph coloring is hard:</p>

<ul>
  <li>Graph coloring is NP-hard, which means no efficient algorithems are known. So the solution is to use
heuristics, basically an approximation technique doesn’t solve the problem completely.</li>
  <li>A coloring might not exist for a given number of registers. The solution is to spill some spare
registers to memory.</li>
</ul>

<p>Observation (divide and conquor):
* Pick a node t with fewer than k neighbours in RIG
* Eliminate t and its edges from RIG
* If resulting graph is k-colorable, then so is the original grpah
* If not, spill registers to memory</p>

<p>Algorithm:</p>

<ol>
  <li>Pick a node t fewer than k neighbours; put t on a stack and remove it from the RIG; repeat until
the graph is empty
If there is no way to pick the node t with fewer than k neighbours, spill it to memory</li>
  <li>Assigne colors to nodes on the stack, starting with the last node added. At each step, pick a
color different from those assigned to already colored neighbours.</li>
</ol>

<h2 id="managing-cache">6.5 Managing Cache</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">+-----------+---------------+-----------+
</span><span class="line">| Registers | 1 cycle       | 256-8000B |
</span><span class="line">| Cache     | 3 cycles      | 256K-1M   |
</span><span class="line">| Memory    | 20-100 cycles | 32M-4G    |
</span><span class="line">| Disk      | 0.5-5M cycles | 4G-1T     |
</span><span class="line">+-----------+---------------+-----------+
</span><span class="line">
</span><span class="line">*cycle is the clock frequency</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The cost of cache miss (for register) is very high, so typically it requires 2-layered cache to bridge
fast processor with large main memory.</p>

<p>Compilers are very good at managing registers, but not that good at managing caches. Compilers can,
and a few do, perform some cache optimizations.</p>

<p>A simple example is to perform a loop interchange.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">// from
</span><span class="line">for (j=1; j&lt;10; j++)
</span><span class="line">  for (i=1; i&lt;1000000; i++)
</span><span class="line">    a[i] = b[i]
</span><span class="line">
</span><span class="line">// to
</span><span class="line">for (i=1; i&lt;1000000; i++)
</span><span class="line">  for (j=1; j&lt;10; j++)
</span><span class="line">    a[i] = b[i]</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="automatic-memory-management-gc">6.6 Automatic Memory Management (GC)</h2>

<h3 id="intro-5">6.6.1 Intro</h3>

<ul>
  <li>Advantage: it prevents serious storage bugs</li>
  <li>Disadvantge:
    <ul>
      <li>it reduces programmer control, like the layout of data in memory, or when is memory
deallocated;</li>
      <li>inefficient in some cases</li>
      <li>pauses problematic in real-time applications</li>
      <li>memory leaks possible</li>
    </ul>
  </li>
</ul>

<p>Automatic Memory Management became mainstream with the popularity of Java.</p>

<ul>
  <li>When an object is created, unused space is automatically allocated</li>
  <li>After a while there is no unused space. Some space is occupied by objects that will never be used
again. This space can be freed to be reused later</li>
</ul>

<p>How do we know an object will “never be used again”?</p>

<p>Observation: a program can use only the objects that it can find. An object <code>x</code> is REACHABLE if and
only if:</p>

<ul>
  <li>a register contains a pointer to <code>x</code>, or</li>
  <li>another reachable object <code>y</code> contains a point to <code>x</code></li>
</ul>

<p>You can find all reachable objects by starting from registers and following all the pointers. An
unreachable object can never be used, such objects are GARBAGE. One thing to be noted, reachability
is an approximation, which means you might be be able to find all reachability.</p>

<p>Every GC schema has the following steps:</p>

<ol>
  <li>Allocate space as needed for new objects</li>
  <li>When space runs out:
 a comput what objets might be used again (genearlly by tracing objects reachable from a set of
 “root” registers
 b free the space used by objects not found in a)</li>
</ol>

<h3 id="mark-and-sweep">6.6.2 Mark and Sweep</h3>

<ul>
  <li>Advantage: objects are not moved during GC, works well for languages with pointers like C and C++</li>
  <li>Disadvantge: fragment memory</li>
</ul>

<p>If there is no memory for GC happening, we can use some tricks, like reverse the pointer in the mark
phase and reuse garbage object in place as free list in the sweep phase.</p>

<p>CONSERVATIVE COLLECTION</p>

<p>This technique only works with Mark and sweep, as objects cannot be moved.</p>

<p>GC relies on being able to find all reachable objects which needs to find all pionters in an object.
In C or C++ it is impossible to identify the contents of objects in memory, thus we cannot tell
where all the pointers are.</p>

<p>But it’s ok to be conservative: if a memory word looks like a pointer, it’s considered to be a
pointer, like it must be algined, it must point to a valid address in the data segement.</p>

<h3 id="stop-and-copy">6.6.3 Stop and Copy</h3>

<p>Stop and copy is generally believed to be the fastest GC technique</p>

<ul>
  <li>Advantage: Allocation is very cheap (just increment the heap pointer). Collection is relatively
cheap, especially if there is a lot of garbage, as it only touches reachable objects</li>
  <li>Disadvantge: some languages do not allow copy, like C and C++.</li>
</ul>

<p>Memroy is organized into two areas: old space, used for allocation; new space, used as a reserve for GC</p>

<ol>
  <li>GC starts when the old space is full</li>
  <li>Copies all reachable objects from old space to new space, with garbage left behind</li>
  <li>After the copy, the roles of the old and new spaces are reversed and program resumes</li>
</ol>

<p>The problem is after we copy a reachable object into new space, we have to fix all pointers pointing
to it. One solution is to store in the old copy a forwarding pointer to the new copy.</p>

<h3 id="reference-counting">6.6.4 Reference Counting</h3>

<ul>
  <li>Advantage: easy to implement; collects garbage incrementally without large pauses in the execution</li>
  <li>Disadvantge: cannot collect circular structures; manipulating reference counts at each assignment is
very slow</li>
</ul>

<p>Rather than wait for memory to be exhausted, try to collect an object when there are no more
pointers to it. This requires to store in each object the number of pointers to that object, which
is the reference count. Each assignment operation manipulates the reference count.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Assume x, y point to objects o, p
</span><span class="line">
</span><span class="line">Every assignment x = y becomes
</span><span class="line">
</span><span class="line">rc(p) = rc(p) + 1
</span><span class="line">rc(o) = rc(o) + 1
</span><span class="line">if rc(o) == 0 then free o
</span><span class="line">x = y</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To solve the circular case, one way is to make programmer be aware of it when creating circular
data; another way is to combine with other GC technique, like running a Mark and sweep every once a
while.</p>

<h3 id="advanced-gc-algorithm">6.6.5 Advanced GC Algorithm</h3>

<ul>
  <li>concurrent: allow the program to run while the collection is happening (collector is running in
background)</li>
  <li>parallel: several collectors working at once</li>
  <li>generational: do not scan long-lived objects at every collection</li>
  <li>real time: bound the length of pauses</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I've done in 2020]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2020/01/13/what-ive-done-in-2020/"/>
    <updated>2020-01-13T12:34:18-05:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2020/01/13/what-ive-done-in-2020</id>
    <content type="html"><![CDATA[<blockquote>
  <p>A weekly log on my life and personal growth</p>
</blockquote>

<details>

<summary>&gt; 今年的最爱 (Year&#8217;s Favourites)</summary>

<p>电影</p>
<ul>
<li><a href="https://movie.douban.com/subject/30211998/">绅士们 The Gentlemen</a></li>
<li><a href="https://movie.douban.com/subject/33447642/">沉默的真相</a></li>
<li><a href="https://movie.douban.com/subject/26735549/">黑钱胜地 Ozark Season</a></li>
<li><a href="https://movie.douban.com/subject/30223100/">最后的舞动 The Last Dance‎</a></li>
<li><a href="https://movie.douban.com/subject/34971810/">养虎为患 Tiger King‎</a></li>
<li><a href="https://movie.douban.com/subject/26952704/">巴斯特·斯克鲁格斯的歌谣 The Ballad of Buster Scruggs‎</a></li>
<li><a href="https://movie.douban.com/subject/30234315/">摄影机不要停！ カメラを止めるな！</a></li>
<li><a href="https://movie.douban.com/subject/3718778/">永远的车神 Senna</a></li>
<li><a href="https://movie.douban.com/subject/34678530/">疾速争胜 第二季 Drive to Survive 2</a></li>
<li><a href="https://movie.douban.com/subject/1305530/">收件人未详</a></li>
</ul>

<p>书</p>
<ul>
<li><a href="https://waitbutwhy.com/2019/08/story-of-us.html">The Story of Us</a></li>
<li><a href="https://book.douban.com/subject/33430632/">Wait But Why Year One</a></li>
<li><a href="https://book.douban.com/subject/25838937/">美丽新世界</a></li>
<li><a href="https://book.douban.com/subject/2263709/">Writing Down the Bones</a></li>
<li><a href="https://book.douban.com/subject/25847219/">10% Happier</a></li>
<li><a href="https://book.douban.com/subject/6424727/">Six Easy Pieces</a> </li>
<li><a href="https://book.douban.com/subject/25742211/">上帝掷骰子吗?</a></li>
<li><a href="https://book.douban.com/subject/1761167/">Illusions : The Adventures of a Reluctant Messiah</a></li>
<li><a href="https://book.douban.com/subject/26672693/">一个叫欧维的男人决定去死</a></li>
<li><a href="https://book.douban.com/subject/26292964/">世界小史</a></li>
</ul>

<p>播客</p>
<ul>
<li><a href="https://shop.vistopia.com.cn/detail?id=YODjY&amp;source=ygxs">看理想 - 中国摇滚小史</a></li>
<li><a href="https://castbox.fm/episode/%E5%B0%88%E8%A8%AA%E6%9D%8E%E5%BF%97%E8%AB%87%E4%BB%96%E7%94%9F%E5%91%BD%E4%B8%AD%E6%84%8F%E7%BE%A9%E6%B7%B1%E9%81%A0%E7%9A%84%E6%AD%8C-id3223510-id299099732?country=us">耳朵借我 - 專訪李志談他生命中意義深遠的歌</a></li>
<li><a href="https://podcasts.apple.com/ie/podcast/richard-hamilton-ep-41-all-smoke-full-episode-stayhome/id1483638752?i=1000476078297">All The Smoke - Richard Hamilton | Ep 41</a></li>
<li><a href="https://www.acquired.fm/episodes/the-nba">Acquired - The NBA</a>, <a href="https://www.acquired.fm/episodes/tiktok">Tiktok</a>, <a href="https://www.acquired.fm/episodes/season-3-episode-5nbspalibaba">Alibaba</a></li>
<li><a href="https://castbox.fm/episode/S1E2-%E2%80%93-good-kid%2C-m.A.A.d.-city-by-Kendrick-Lamar-id1358289-id83434805?utm_campaign=i_share_ep&amp;utm_medium=dlink&amp;utm_source=i_share&amp;country=us">Dissect - S1E2 – good kid, m.A.A.d. city by Kendrick Lamar</a></li>
<li><a href="https://nav.al/rich">Naval Ravikant - How to Get Rich: Every Episode</a></li>
<li><a href="https://tim.blog/2015/08/18/the-evolutionary-angel-naval-ravikant/">Tim Ferris - Naval Ravikant - The Person I Call Most for Startup Advice (#97)</a></li>
<li><a href="https://tim.blog/2016/01/30/naval-ravikant-on-happiness-hacks/">Tim Ferris - Naval Ravikant on Happiness Hacks and the 5 Chimps Theory (#136)</a></li>
<li><a href="https://fs.blog/knowledge-project/naval-ravikant/">The Knowledge Project Ep. #18 - Naval Ravikant: The Angel Philosopher</a></li>
</ul>

<p>游戏</p>
<ul>
<li><a href="https://douc.cc/1rDxjK">神秘海域4：盗贼末路 Uncharted 4: A Thief&#39;s End</a></li>
<li><a href="https://douc.cc/03EcCD">空洞骑士 Hollow Knight</a></li>
</ul>

<p>吃</p>
<ul>
<li><a href="https://goo.gl/maps/BZvwbUjU8SBSbz346">Green Leaf Cafe</a> </li>
<li><a href="https://goo.gl/maps/tdYZgpxTDTzj5Sw97">半山烧烤</a> </li>
<li><a href="https://goo.gl/maps/dKpkSUHfKbgqf3Eh8">Narita Sushi</a> </li>
<li><a href="https://g.page/yookvancouver?share">Yook Korean Grilled BBQ &amp; Bistro</a> </li>
<li><a href="https://g.page/anhandchi?share">Anh and Chi</a></li>
<li><a href="https://goo.gl/maps/F5T2Xqb237kHoWyu6">渔人</a></li>
<li><a href="https://goo.gl/maps/7DBYGHTBU979f4bU7">京门涮肉</a></li>
</ul>

</details>

<h2 id="w52-1228---0103">W52 (12/28 - 01/03)</h2>

<ul>
  <li>十六天的假期，转眼就过去了。当处在一种熟悉又自在的节奏里，日子过的不讲理地快 😢</li>
  <li>周三去滑雪，天气非常的遭。地面下暴雨，山上下暴雪，能见度几乎等同于我摘下六百度的眼镜。第一圈结束我就想回家了，但是毕竟开了好久的车排了好久的队，后边慢慢适应后好了很多。独自坐在缆车上，回想以前按照自己的野路子滑，一次都没摔过。去年系统学习后，今年这两次都在努力寻找回忆纠正动作，结果每次都要摔两跤。比较意外的是，摔在雪面上很舒服，拿脸刹车也是一种释放，心态上让我更放松。雪场的路人一般会说，Enjoy, have a good run，但是我心里想的是，meh, I’ll have a good fall.</li>
  <li>元旦和高中和大学的朋友视频庆祝，料想不知道什么时候能回国相聚，还是线上云喝一波吧。</li>
  <li>周四的 #date-night 正好是31号，和喜福的朋友一起去吃了<a href="https://goo.gl/maps/GKCNpxLgEK5DTSJX9">太二酸菜鱼</a>；周六的 #movie-night 一起看了<a href="https://movie.douban.com/subject/27133913/">BlacKkKlansman</a>。</li>
  <li>周中和喜福刷完了 <a href="https://movie.douban.com/subject/26844438/">Stranger Things Season 2‎</a>，这种走奇幻风的剧只能走深坑路线，并没有办法持续的吸引人；我读完了刘瑜的<a href="https://book.douban.com/subject/20463108/">观念的水位</a>，WaitButWhy 的 <a href="https://book.douban.com/subject/33430632/">Year One</a> 和 <a href="https://waitbutwhy.com/2019/08/story-of-us.html">The Story of Us</a>，后边这两本可能是我假期的最大收获。记得电影里经常出现偷车贼熟练的找到点火的两根电线，碰在一起吱吱作响，对，看这两本书时我脑子里就是这个声音。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w52-collage.jpg" alt="w52-collage" /></p>

<h2 id="w51-1221---1227">W51 (12/21 - 12/27)</h2>

<ul>
  <li>圣诞假期第一周，和喜福安静窝在家里。每天遛狗放风，剩下时间在看书、装家具、吃吃喝喝。开始两天还不习惯无所事事，之后就完全进入“关闭闹铃”状态了，假期就是要没有压力，忘记时间，做喜欢的事。</li>
  <li>圣诞前两天，很应景地下了一场大雪，太阳放肆地明媚了两天，就又缩到云雾里，继续让雨一直下。</li>
  <li>周末看到明远的公众号推荐温哥华周边的徒步，我们带着 Nikki 去了 <a href="https://goo.gl/maps/drZiwHEVqDc5Suhk7">Buntzen Park</a>。现在出门散步，最后都很自然地变成去各种狗公园打卡。这里有一片狗狗海滩，Nikki 一进来就撒腿奔向水面，不管刮着多大风雨，冷暖不自知，玩就对了。</li>
  <li>这周陆续看完了<a href="https://book.douban.com/subject/1813841/">枪炮、病菌与钢铁</a>，<a href="https://book.douban.com/subject/35219712/">The Almanack of Naval Ravikant</a>，<a href="https://book.douban.com/subject/20397289/">没有一条道路是重复的</a>，<a href="https://movie.douban.com/subject/26359270/">Stranger Things Season 1</a>。我今年已经中了 Naval 的毒，他的各种采访已经听过很多遍，这回整理成书依然惊叹他的各种归纳与整理。</li>
  <li>周四的 #date-night 又去吃了半山烧烤，不得不说这家的牛肉面让我们记忆犹新；周六的 #movie-night 看了<a href="https://movie.douban.com/subject/26683421/">特工</a>。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w51-collage.jpg" alt="w51-collage" /></p>

<h2 id="w50-1214---1220">W50 (12/14 - 12/20)</h2>

<ul>
  <li>圣诞假期前的最后一周，每天都在加班加点的工作。弄了三个礼拜的项目，终于在周四晚上全部跑通，周五给大家做了 demo，非常完美。</li>
  <li>各种家具陆陆续续到了，家里堆的满满当当，每天慢慢弄一点，先把办公室弄好，终于不用在临时的餐桌和硬板凳上工作了。</li>
  <li>周四的 #date-night 去吃了 <a href="https://goo.gl/maps/BZvwbUjU8SBSbz346">Green Leaf Cafe</a>，这家的炙寿司超级赞；周六的 #movie-night 和喜福看了 <a href="https://movie.douban.com/subject/30211998/">The Gentlemen</a>，熟悉的盖里奇，把节奏和幽默发挥的更加纯熟，科林法瑞尔笑死我。</li>
  <li>周中晚上休息， 慢慢把<a href="https://book.douban.com/subject/27081128/">万物·文明</a>这本图册翻完了，作者用各种漫画插画的方式讲述了史前和古代的文明历程。很好地弥补了我对这段历史的空白和无知。我很喜欢结尾作者引用社会生物学家 Edward O. Wilson 的这段话，</li>
</ul>

<blockquote>
  <p>我们今天拥有的技术手段可以说已经接近神力，而我们的社会体制还滞留在中世纪，我们的情感更是自石器时代开始就没有任何进步。我们只能学会在这样的现实里过活。</p>
</blockquote>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w50-collage.jpg" alt="w50-collage" /></p>

<h2 id="w49-1207--1213">W49 (12/07 / 12/13)</h2>

<ul>
  <li>工作上开始搞一个新的难题。开始时候一脸茫然，然后不断加深了解、试验、推翻、重新尝试，最后一切慢慢变得清晰。这个过程有多少纠结与思考就有多少开心与成就。</li>
  <li>偏大和小哥送的生日礼物到了：<a href="https://remarkable.com/">reMarkable 2</a>，用了一个礼拜感受不错。最重要的是写起来流畅，笔和屏幕的质感都很好；软件上面，可以阅读 pdf &amp; epub，也可以在其他客户端发送网页过来阅读和批注，相当于 read it later。几点不足：屏幕要是能更大（A4？）就更好了，每一页可以书写更多，当然这会造成和便携的取舍；系统偶尔有卡顿，书写时候没发生过，但是伴随手势操作时而有停顿。</li>
  <li>这周最开心的一天当属我文欧冠小组赛最后一轮3:0巴萨。一年年的陪伴，看着球队人员变动，状态起伏，只为等那么几场好球。并不一定要战胜强大的对手或是赢得关键的比赛， 真心期待的是变化，哪怕是再小不过的进步。这场踢的没有足够好，但是有进步。希望不会是最后一场梅罗大战。</li>
  <li>今冬第一次滑雪，最好的体验是一个人在缆车上度过了黄昏，天色渐暗，一摸粉红逐渐变成深橙色，再到黑夜来临，星光满天。中间有一刹那我突然在眼前不远看到了北斗七星，非常明亮，而且不需要抬头，只须转头就在那里。俯瞰城市的景色也很棒，Grouse Mountain 有 1200 米，隐约看到城市华灯初上，一部分明亮一部分笼罩在云雾之中。我猜下面的人看到的是乌云，而我的视野却是云层顶端，一团团白色巨大的云朵。</li>
  <li>上周我在翻刘瑜的散文集，读到一篇她为<a href="https://book.douban.com/subject/25838937/">美丽新世界</a>写的<a href="https://book.douban.com/review/3095110/">序</a>，我瞬间被吸引了。赶紧找来读，发现比我想象还要夸张。各种匪夷所思的设定，乍看惊人但是都有迹可循，从当代的技术和约定俗成延伸开去，无限放大，带着读者穿越时间回看现在。我想本质上赫胥黎在说的是伦理和政治，关于生育的权利，关于幸福的定义，关于群体和个人的冲突。再仔细想想，还有一份熟悉的惊讶来自于这本书写于 1932 年？！所以抛开科技和信息的爆炸，本质上我们在进步吗？</li>
  <li>周四的 #date-night 去吃了<a href="https://goo.gl/maps/HBHAGybvcmGE3BLj7">鸿羊轩</a>；周六的 #movie-night 看了<a href="https://movie.douban.com/subject/3419943/">无声婚礼</a>，是个很不错的寓言故事，关于前苏联的黑色幽默，但它只简单抛出来问题，我更希望故事能继续延续去讨论一种可能。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w49-collage.jpg" alt="w49-collage" /></p>

<h2 id="w48-1130---1206">W48 (11/30 - 12/06)</h2>

<ul>
  <li>这周没怎么工作，三天hackday，周五请假忙活各种琐事：给车后边装了自行车架，想着到远方骑车；买了一整套的滑雪装备，准备下周开始走起。</li>
  <li>周四的 #date-night 去吃了<a href="https://goo.gl/maps/tdYZgpxTDTzj5Sw97">半山烧烤</a>，味道不错，环境好的不像吃烧烤的地方，可能也是因为冷清的缘故 :man_facepalming:。​周六的 movien night 重看了我最喜欢的一部 Wes Anderson: <a href="https://movie.douban.com/subject/1306031/">Royal Tenenbaum</a>。</li>
  <li>这周读了两本非常好看的书：
    <ul>
      <li><a href="https://book.douban.com/subject/25847219/">10% Happier</a>，有点作者半自传的性质，但是主线很明确，关于冥想和 Mindfulness （这个词到底要怎么对应到中文呢？我的理解是”觉察“，看到有人翻译成“正念“，但是加了”正“字不正是在做主观的判断吗？）。Mindfulness 是目的，冥想是方法。核心思想是刻意地通过冥想这种练习，不加判断地观察我们的想法，而不是无时无刻又不自知地让想法在脑中恣意发散。那些下意识的冲动与偏见，对过去的纠结与不安，对未来的担忧与焦虑都来源于此。我比较喜欢作者始终抱着怀疑的态度，道出了许多我自己心中的问题。最核心的当属怎么处理”不争“，人不该有野心吗？在乎的事情也要放任自流吗？作者给出了个简单的答案，追寻过程而不是结果，基本和我在别处看到的一致（pick up your battle）。但我还不确定，先把冥想实践起来。</li>
      <li><a href="https://book.douban.com/subject/2263709/">Writing Down the Bones</a> 是一本关于写作的小书，作者提倡的方法让我大开眼界：规定时间练习写作，时间开始，把脑子里所有的想法一股脑地倾泻到纸面，不要在意标点、错字、修辞、甚至逻辑，只管去写，去捕捉和描述此时此刻脑子里出现的一切，直到时间终止。非常巧合，这也是一种冥想的方法，用写作去冥想。看过之后，我每天有尝试去写五分钟，最明显的感受是：写作在帮我感知世界。</li>
    </ul>
  </li>
  <li>上周和 Nikki 吵完架，这周乖乖带她去玩耍。每天操场上狠跑几圈，跟几个狗友打闹一会儿，然后开启雷达四处搜找泥坑，蹦蹦跳跳，喝水打滚。直到有一天，遇到了白胡子老爷，看我家白狗眨眼变黑狗，带我去了附近的树林，找到了一条清澈的小溪。这里马上变成了疯狗的水上乐园，再也不愁给她洗澡了。大自然，是你派老爷爷来找我的吧？</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w48-collage.jpg" alt="w48-collage" /></p>

<h2 id="w47-1123---1129">W47 (11/23 - 11/29)</h2>

<ul>
  <li>上周末和 Nikki 堵气，可能一直下雨连着几天没带她出门疯跑，所以各种不听话。到了周一我还继续郁闷，下午出门去骑车散心，回来后终于缓和了一些。跟狗狗生气真是件愚蠢的事，尤其甭管你有多气，她就岿然不动。最终只能我自己心理建设，以理服己。第二天冒着雨陪她去跑了一个半小时，然后终于看到她躺在地上疲惫又平静的笑。</li>
  <li>周四的 #date-night 去吃了 <a href="https://goo.gl/maps/1cMHa1An1hXD9DC29">ARISU Korean BBQ</a>；周六的 #movie-night 看了<a href="https://movie.douban.com/subject/1293172/">末代皇帝</a>，我唏嘘又难过。一个人的渺小，无关乎身份，在历史的洪流中晃荡裹挟，即使自知也无奈。有兴盛就有其衰竭，到头来你想从中寻找答案，很简单，“潮起潮落，是什么都不为”。</li>
  <li>最近在重听 Pink Floyd 的 <a href="https://genius.com/albums/Pink-floyd/The-division-bell">The Division Bell</a>，听的入迷，带着耳机就能飘进另外一个世界。去仔细看了当时创作的背景和歌词，表面看是怨恨和追问，关于 Waters 的离开，但是显然他们成功营造了一种超脱疏离的氛围，好像在宇宙中追寻时间和答案。</li>
  <li>11.25 马拉多纳去世，这动荡不安的一年。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w47-collage.jpg" alt="w47-collage" /></p>

<h2 id="w46-1116---1122">W46 (11/16 - 11/22)</h2>

<ul>
  <li>工作上，也许是整个下半年最开心的一周了。不断思考、实验、讨论，最终找到解决方案，和同事一起分享喜悦。</li>
  <li>这周读完了两本书：<a href="https://book.douban.com/subject/1944612/">The Magic of Thinking Big</a> 是本有年头的鸡汤书，算是有些帮助，哪怕是盲目的自信呢；<a href="https://book.douban.com/subject/6424727/">Six Easy Pieces</a> 来自费曼的物理讲义，选取最基础的六个篇章回顾物理学的脉络。上学时候的知识最终都成了一座座记忆的孤岛，这本书为我重新搭起了桥梁，用一个最基本的角度理解看待这个世界。</li>
  <li>周末天气放晴，骑车去 Mundy Park 在树林里穿梭，跟路上的行人微笑，看各式各样的狗狗开心的漫步。</li>
  <li>周四的 #date-night 去吃了<a href="https://goo.gl/maps/F5T2Xqb237kHoWyu6">渔人</a>烤鱼；周六的 #movie-night 看了 <a href="https://movie.douban.com/subject/1437377/">The Squid and the Whale</a>，轻松又有趣，很像另一个版本的 Woody Allen，当知识分子走近生活的琐碎，一样的局促不安。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w46-collage.jpg" alt="w46-collage" /></p>

<h2 id="w45-1109---1115">W45 (11/09 - 11/15)</h2>

<ul>
  <li>
    <p>这周的工作非常充实，花了很多时间去思考一个棘手但是有意思的问题。每天抱着期待着起床，一转眼时间就过去的感觉非常棒。</p>
  </li>
  <li>
    <p>上周日给 Nikki 喂了从饭店外带的猪骨头，结果半夜就咩咩的叫，打开房门冲到客厅，趁我一个不注意就蹲下方便了。唉，这一晚上发生了三次，后面两次我就不紧不慢，干脆穿好衣服带她出门了。第二天去看了兽医，吃了几天药终于止住了。可怜的狗子，你的传统美食也无福消受。</p>
  </li>
  <li>
    <p>每天睡前一小会儿看完了 <a href="https://movie.douban.com/subject/34960008/">The Social Dilemma</a>。即使作为业内人士，也觉着现在产品的发展思路让人恐惧。像抖音这种，定点投喂每个人想看到的东西已经成了核心竞争力，难怪世界会越发向两极分化的方向走去。</p>

    <blockquote>
      <p>We live in a world, in which a tree is worth more, financially, dead than alive, in a world which a whale is worth more dead than alive. For so long as the economy works in that way and corporations go unregulated, they are going to conitnue to destroy trees, to kill whales, to mind the earth , and to continue to pull oil out of the ground, even though we know it is destroying the plant and we know it’s going to leave a worse world for future generations. This is short-term thinking, based on this religion of profit at all costs, as if somehow, magically, each corporation acting in its selfish interest is going to produce the best result. This has been afffecting our environment for a long time.</p>

      <p>What’s frightening and what hopefully is the last straw that will make us wake up as a civilization to how flawed this theory has been in the first place is to see that now we are the trees, we are the whales. Our attention can be mined. We are more profitable to a corporation, if we are spending time staring at a screen, staring at an ad, than if we are spending that time living our life in a rich way. And so, we are seeing the results of that. We’re seeing corporations using powerful artifical intelligence to outsmart us and figure out how to pull our attention toward the things they want us to look at, rather than the things that are most consistent with our goals, our values and our lives.</p>

      <p>– Justin Rosenstein</p>
    </blockquote>
  </li>
  <li>
    <p>最近被占东安利了 espresso，买了各种设备开始化学实验。暂时只能说有迹可循，但是一天稳定两杯，失眠是当仁不让来敲门了 :slightly_smiling_face:</p>
  </li>
  <li>
    <p>周四的 #date-night 去吃了家附近的 <a href="https://goo.gl/maps/4SUm1JjinRGznMzm7">Austin Fish &amp; Chips</a>，周六的 #movie-night 喜福选了<a href="https://movie.douban.com/subject/27668250/">南方车站的聚会</a>，作为白日焰火的影迷，我很喜欢其中的美学倾向，但是桂纶镁？胡歌？:neutral_face:</p>
  </li>
  <li>
    <p>Victor 很早向我推荐了 <a href="https://book.douban.com/subject/26708996/">Originals</a>，之前看了一章觉着太文邹，周末捡起来发现非常有趣。社科类的读本写好了是会比小说好看的。</p>
  </li>
  <li>
    <p>周日是 32 岁的生日。我是个拧巴的人，每到生日就犯情绪摆臭脸。跟喜福很认真的分析了一下，我其实找不到太多原因，可能是童年记忆里只记得一次大哭的经历。另外，一个人非要在某一天特别快乐，也是个奇怪的命题。我更希望每天都平和快乐。所以，收到爸妈、好友和喜福的一句祝福我就很知足了，只是我美好生活中另一个寻常的一天。
<img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w45-collage.jpg" alt="w45-collage" /></p>
  </li>
</ul>

<h2 id="w44-1102---1108">W44 (11/02 - 11/08)</h2>

<ul>
  <li>周一和喜福一起请假，趁着好天气去 Whistler 秋游。最开心的要属 Nikki 了，在 Rainbow Park 找到了自己狗生的天堂：遥望远处的落基山脉，近处是 Alta Lake 平静的湖面。最特别的是一个为狗狗准备的专属码头。Nikki 一次次跳到湖中奋力划水，天气凉也抵不过内心火热。</li>
  <li>上周认真做的计划，这周有很好的执行。每天的工作都很充实，最重要的是相信自己走在正确的轨道上。</li>
  <li>和喜福的每月计划，因为疫情和今年的慌乱中断了大半年，这周重新捡起来。周四恢复了 #date-night，去尝试了一家很棒的泰国菜（<a href="https://goo.gl/maps/pFavist2Ae8cVgp59">Ma Now</a>）；周六恢复了 #movie-night，一起看 <a href="https://movie.douban.com/subject/27045860/">Uncut Gems</a>；自己恢复锻炼再次尝试骑行，投资了一辆单车，骑了一次才发现我也生活在山城：谷歌地图 40 分钟的路线，我花了 80 分钟，中间连续爬坡无奈只能交出黄色领骑衫，下来推车。</li>
  <li>周末去买齐了各种工具，把后院被 Nikki 咬坏的栅栏修理好，割草施肥，然后去前院整理落叶，再割草施肥。这个秋天的工作完美结束。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w44-collage.jpg" alt="w44-collage" /></p>

<h2 id="w43-1026---1101">W43 (10/26 - 11/01)</h2>

<ul>
  <li>
    <p>这周和组长 one one，总结这一年的表现。加入公司快四年，第一次只拿到 postive。虽然是在预期之内，但也没法克制心中的不爽。这一年处在各种忙碌之中：狗狗进入我们的生活，带来了欢乐也拿走了很多安静闲散时光；下半年搬家，一直在做计划和执行。除去客观因素，我自身也有很多问题：</p>

    <ul>
      <li>想去平衡工作和生活，但是没能力一碗水端平，最终来回倾斜，落在哪边都不开心</li>
      <li>每周的工作更多是赶进度，可以完成的很好，但不代表更有意义</li>
      <li>在平时的讨论中缺少参与感，没有做更多的准备和思考</li>
      <li>更多时候，我只在关注让自己变好，而不是让身边的人、让团队变好</li>
    </ul>

    <p>周末花了些思考，做了份改进和前行的计划。升职加薪不是目标，我希望明年的自我衡量我可以有信心是 exceptional。落实到具体，我希望每一天的工作开心、每一阶段的工作有成就感。加油。</p>
  </li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w43-collage.jpg" alt="w43-collage" /></p>

<h2 id="w42-1019---1025">W42 (10/19 - 10/25)</h2>

<ul>
  <li>这周重新捡起 pomodoro，帮助很大，完成了很多工作。每天四点多结束工作，处理生活琐事：拆包裹，割草，买工具，学习、安装各种小玩意，现在网线接头都会安装了。好多时候只是不懂，才想象的比较难。</li>
  <li>每天晚上散步成了一天的美好时光。和喜福带 Nikki 一起走在昏黄的路灯下，无比宁静、惬意，大口呼吸着寒冷又清爽的空气，我感到平和与幸福。Nikki 最近也特别乖，突然就到了我理想中养狗的样子：狗狗平静地走在身边，我们互不干扰，一起慵懒地前行。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w42-collage.jpg" alt="w42-collage" /></p>

<h2 id="w41-1012---1018">W41 (10/12 - 10/18)</h2>

<ul>
  <li>工作效率极其低下的一周，很难专注，导致下班后的心情也不好，就像一天什么都没做。让自己快乐真不是件容易事，好像只有所有事情都符合心意才能长舒一口气，为什么不能只对当下作最简单纯粹的反应呢？</li>
  <li>托运的十三个大箱子到了，和喜福每天拆几个，周末全部收拾完毕。第一件事就是把电饭锅找到，吃了顿香香的米饭。</li>
  <li>买了各种器材，准备在入冬前要打理一遍院子。之前都是随心所欲，这回想认真搞一搞。读说明书，上网学习，最难处理的还是后院有一堆蔓延的小红莓树，生命力极强。每周都在肉眼可见的“进步”，而且枝蔓全都是刺，literally 靳棘密布。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w41-collage.jpg" alt="w41-collage" /></p>

<h2 id="w40-1005---1011">W40 (10/05 - 10/11)</h2>

<ul>
  <li>搬入新家第一周，休假回来，很难进入工作状态。每天被各种事情打断思路，中午和晚上都要带 Nikki 出去玩，自己要想办法更加专注才行。</li>
  <li>Yinan 帮我们把家具基本选的差不多，我和喜福周末又去扫了一遍家具店，主要把各家的沙发体验好。整理了列表，应该下周就可以全部下单了。</li>
  <li>最近时常下雨，Nikki 在家附近的小操场找到了天堂。泥地蹦迪，水坑穿梭，我们连着三天给她洗了三回澡。新到这 neighbourhood 才一个礼拜就闯出了名号，好几个邻居已经认识了这条热情洋溢，甩着泥点的傻狗。另外认识了个酷爱遛狗的老头 Craig，天天带着他的拉布拉多 Daisy 在操场玩两三个小时。我们每天都去赴约，希望能坚持下去。</li>
  <li>老詹带领我湖勇夺第17冠。今年没等到非常期待的洛城德比，好像一路杀到底都没什么悬念，最终拿了冠军也心无波澜。可能我以为我是湖蜜，实际只是科粉。想念科比。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w40-collage.jpg" alt="w40-collage" /></p>

<h2 id="w39-0928---1004">W39 (09/28 - 10/04)</h2>

<ul>
  <li>这周工作两天，9.30 搬入新家，花了五天时间安顿整理，各种买买买，最后以一顿火锅开始新的生活。暂时只有生活用品，家具估计要两三个月才能陆陆续续到了。</li>
  <li>周中和喜福看完了<a href="https://movie.douban.com/subject/33447642/">沉默的真相</a>，比之前她在追的隐秘的角落和摩天大楼都强出了百倍。虽然风格上情节上能看出来有很多借鉴，但是终归是国产剧的进步。</li>
  <li>爸妈的西藏之旅几乎和我们的搬家过程同步，也在这周平安结束，一切顺利。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w39-collage.jpg" alt="w39-collage" /></p>

<h2 id="w38-0921---0927">W38 (09/21 - 09/27)</h2>

<ul>
  <li>搬入新家前的最后一周。跟喜福四处看看家居，一切貌似顺利，直到周四晚上的一封邮件：房子突然多了八万刀的税！有点吓到，周五起来赶紧联系曲总和律师。原来所有人都忽略了这个房子的特殊性，虽然不是 substantially rennovated，但是卖家作为公司，18年买入、翻修、最近卖出，而且中间没有人居住，很容易被国税局盯上，最终很可能要交税的。这个时间点也很是尬，恰巧周末。所以本来是轻松愉快有希望的周末，变成了无所事事窝家看剧。</li>
  <li>来自下周一的消息：卖家和税务律师沟通确认了交税的必要，我们的经纪从中斡旋，最终卖家同意由他们承担这部分税款。虚惊一场，和喜福相拥庆祝。这个插曲以最最满意的结果结束了。</li>
  <li>这周的高光是周中带了 Nikki 去海边的狗狗公园。那个开心的呀，各种打滚，奔跑，游泳。不知道喝了多少海水，倒是回家就鸟悄地尿了三次。一觉睡到晚上，然后出门散步拉稀。服了死狗。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w38-collage.jpg" alt="w38-collage" /></p>

<h2 id="w37-0914---0920">W37 (09/14 - 09/20)</h2>

<ul>
  <li>西海岸的山火导致这一周都烟雾缭绕，到了周末才重见阳光。这一周最的大的进展莫过于 Nikki 了。上周末带她去和 Anna &amp; Jojo 玩，然后开始看书，锁定问题在没有足够消耗她精力，所以这一周每天中午都停下工作，带上 Nikki 去狗公园玩耍。立竿见影。疯跑四十分钟，回到家就是条死狗，毛绒玩具一般躺在地上睁眼、喘气、然后睡觉。</li>
  <li>周中带设计师去看了新家，量尺寸，等着她们出方案。我和喜福周末逛了很多家居，深刻体会了边际效应。就拿床垫为例，1k 的床垫已经体验非常好，但是转眼就又出来张 8k 的，这个感受上的差别我敢保证不会有 8 倍。而且市场混乱（或是机智？），有太多东西找不到绝对价格，到最后只能同类比较，落个混乱的估计。</li>
  <li>周末看了我文新赛季揭幕战，大呼过瘾。可能是去年被喂了太多屎，没法不为这样的改变欢欣鼓舞。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w37-collage.jpg" alt="w37-collage" /></p>

<h2 id="w36-0907---0913">W36 (09/07 - 09/13)</h2>

<ul>
  <li>这周的工作很饱满，没有被生活的琐事打扰，七点工作，三点半结束，井井有条。房子的事情，敲定了一个室内设计公司，下面要详谈各种细节。周日搬到了另外一个 Airbnb，终于摆脱了之前昏暗阴冷的半地下室了。</li>
  <li>来了温哥华之后很为 Nikki 犯愁，遇到陌生环境，各种不听话变本加厉，我经历了三次彻底的苦恼，跟喜福也很认真地讨论过两次。这周开始俩人一起看 <a href="https://www.goodreads.com/book/show/42504741-zak-george-s-guide-to-a-well-behaved-dog?from_search=true&amp;from_srp=true&amp;qid=H30MYgDAKj&amp;rank=1">Zak George’s Guide to a Well-Behaved Dog</a>，找寻我们的不足与希望。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w36-collage.jpg" alt="w36-collage" /></p>

<h2 id="w35-0831---0906">W35 (08/31 - 09/06)</h2>

<ul>
  <li>两个月的四天工作周结束了，这周回归正常。最近生活变动，很早就和老板说不要安排繁复工作，只完成了很多小任务。现在只想时间过的快些，开启下一阶段的忙碌，所以工作日和周末区别不大，反倒工作会让这一天更轻松顺畅。</li>
  <li>小车运到了温哥华，换了驾照和保险，一切顺利。房子的贷款批下来了，做验房，交订金，只等月底搬家。</li>
  <li>错过了周末的 F1，但是异常惊喜 Gasly 在小牛夺冠。回看了各种集锦和采访，他独坐领奖台不忍离去的画面让我没法忘却。这不是你的巅峰，只是开始。</li>
  <li>爸妈的西藏之旅终于到达了终点拉萨，希望他们能平安返程。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w35-collage.jpg" alt="w35-collage" /></p>

<h2 id="w34-0824---0830">W34 (08/24 - 08/30)</h2>

<ul>
  <li>在纠结了两天之后，还是选择了上周日下的 offer。相比于生活便利和投资价值，我们做了舒适度更高的选择。非常开心和满意。下周会完成贷款和验房，一切顺利的话，9.30 又可以搬家了。我和喜福戏称，”一天半卖房，一周半买房” 🎉</li>
  <li>蜗居 Airbnb 不准备开火做饭。每天早餐简单解决，午餐和晚餐都在外边享受。这个月做了充足的预算，放肆吃。这一周吃了烧烤、拉面、Pho、日料、烤鱼、北京涮肉、东北铁锅炖。</li>
  <li>周末无所事事去看了诺兰的新片，<a href="https://movie.douban.com/subject/30444960/">Tenet</a>。我真是找虐啊，本来剧情就烧，说的各种英语我也完全迷失。看完只学个新词，元素周期表 241 Plutonium 🤦</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w34-collage.jpg" alt="w34-collage" /></p>

<h2 id="w33-0817---0823">W33 (08/17 - 08/23)</h2>

<ul>
  <li>来到温哥华第一周，工作，和朋友吃饭，看房子。明确了各种需求后进度很快，到现在曲总一共带我们看了二十来套房，剩下两套处在纠结之中，到最后就是一个取舍的过程。现在我们基本卡在一个点上，就是我们愿意牺牲多少房子的隐形价值（位置带来的增值和便利度）来换取房子的实用价值（舒适度）。周日晚上下了一个 offer，不知道结果会怎样。</li>
  <li>生活在 Airbnb 感受到很明显的落差，屋子略显阴冷，每天在餐桌上工作。虽然只有一个礼拜，已经开始怀念之前温馨的家。</li>
  <li>去高磊家做客，去 Jove 家做客，去和喜福的同事户外 social。</li>
  <li>8.21 占东工作升职，生活中迎来小 Jeremy，一天直达人生巅峰啊，开心。</li>
  <li>爸妈两个礼拜前开始从东北去西藏的自驾游。先是去喜福老家游玩了一圈，妈妈感动到不行。之后去张家界，现在到了四川和重庆，偏大款待。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w33-collage.jpg" alt="w33-collage" /></p>

<h2 id="w32-0810---0816">W32 (08/10 - 08/16)</h2>

<ul>
  <li>工作两天，请假两天。有点无心工作，担忧最后的整理、打包，生怕临行前有什么琐事落下。事实也证明确实需要这两天：租车送了12个箱子到快递寄存，把🚗送上卡车（等两个礼拜，火车运到温哥华），最后一次去办公室送显示器和取疫情前留在办公室的小东西，联系🐱🐶的宠物医院去拿帮助他们在飞机上安定的药丸，跟 Tim, Leonice, Michael, Stefan, David, Sarah, Alex 告别，见律师卖房签字，忙里偷闲去打了个耳洞 😉</li>
  <li>周四的晚上八点多才全部到位，和喜福提前约好了 Kinkaku 最后一餐。不用开车，喝了好大一扎啤酒，坐在路边，享受最后一个凉爽的夏日夜晚。</li>
  <li>周五出发，换登机牌的时候出了点差错，Amazon 上买的狗笼子不符合标准，不允许 Nikki 上飞机，只好把机票从早上八点改签成了晚上八点，后面的计划也全都推迟。我们赶紧叫回咪哥，跑到另外的地方买笼子，订附近的宾馆休整。终于，晚上一切顺利，把 Nikki 送上“大件行李”，带着赵四一起上机。温哥华时间十点多到达。我和喜福，四个箱子，一个滑雪板，两个小包，一猫一狗，全部建在。一点钟到达住处，简单收拾赶紧休息。漫长的一天，24小时在路上。</li>
  <li>周末打包收拾，和喜福的好朋友爱琳、Phoebe吃小龙坎，和高磊明远重逢撸狗聊天，跟着曲总开始看房之旅。</li>
  <li>忙碌的一周，最好的休闲莫过于看了几场精彩的比赛。我心心念的真蓝黑最后两分钟被巴黎逆转，拜仁天地不仁万物刍狗两个4:1横扫了巴萨。</li>
  <li>写了三年多的日记终于翻篇了，开始新的旅程。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w32-collage.jpg" alt="w32-collage" /></p>

<h2 id="w31-0803---0809">W31 (08/03 - 08/09)</h2>

<ul>
  <li>在  Waterloo 的最后一周。周三去 Raymond 家晚餐，道别。可能在 Waterloo 最没想到会遇见的朋友就是 Ray 了，两年的时间，每周去见面聊天，让我认识到很多文化、想法上的不同，也见识到他和 Rona 对这个世界美好的善意。周六去了 David 和 Sarah 在 GrandBend 的 cottage，一起还有 Alex 和 Mr. Wilson。湖边的景色很美，Nikki 第一次到海边，疯了一追逐浪花，在湖里蹦蹦跳跳放飞自我。周末和磊哥佳新一起晚餐，然后和咪哥最后一发 Fifa 20，最终难分胜负，我们都可以说是菜鸡的胜利。</li>
  <li>断断续续花了几个月时间读完 <a href="https://book.douban.com/subject/6896459/">Quiet</a>，让我更加认清自己，也算是找到一个答案：接受自己内向的性格，而不是去纠正；努力提高发挥内向性格的优势。</li>
  <li>闲暇之余也读完了<a href="https://book.douban.com/subject/25796120/">小径分叉的花园</a>。第一次读博尔赫斯，好像知道他在写什么，又好像不知道。把科学性的逻辑放在小说中，总是很可爱，从王小波身上也看到过。 七个小故事，非常喜欢《环形废墟》：“引导他到这里来的目的虽然异乎寻常，但并非不能实现。他要梦见一个人：要毫发不爽地梦见那人，使之成为现实。”</li>
  <li>每年都有这么一天丧的很稳定，就是我文欧冠出局。一年年的期望水涨船高，但是总不可得，尤其伴有这两年的退步，异常揪心。今年输给了里昂，然后萨里下课喜大普奔，但是马上皮尔洛官宣上任，直接吓掉了我的下巴。球迷终究是被动的看客，想追寻喜悦，也要顶得住这股悲伤。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w31-collage.jpg" alt="w31-collage" /></p>

<h2 id="w30-0727---0802">W30 (07/27 - 08/02)</h2>

<ul>
  <li>这周工作很认真，事情比较多，所以每天工作很饱满。卖掉了主卧的床之后，我和喜福搬到次卧住在另一块床垫上，没想到这一周的睡眠都出奇的好。早上可以起很早，又很精神，决定了一天的精神状态。</li>
  <li>最近的假期有点多，这周又是四天长周末。正好留给我们做各种琐事。喜福最近的卖卖卖颇有成效，剩下一堆不值钱的小东西，她很上心地搞了个 garage sale，非常成功。</li>
  <li>Nikki 一直在舔自己手掌，上网查了查应该是 yeast infection，亚马逊下单买药，摸了大半个月也不见好。只好又去见兽医，随便看了看开个药就 200 多刀。莫非狗狗各种小病需求人们更多关怀也是自然选择 :thinking:</li>
  <li>趁着周末玩完了 <a href="https://www.douban.com/game/25905436/">Uncharted 4: A Thief’s End</a>，非常轻松地游戏，跑酷解谜带剧情，很不错。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w30-collage.jpg" alt="w30-collage" /></p>

<h2 id="w29-0720---0726">W29 (07/20 - 07/26)</h2>

<ul>
  <li>
    <p>这周的工作效率不错，虽然还是有各种琐事，但是该工作时候能静下心来。记得之前看过一个”use procrastination against itself”的办法：</p>

    <blockquote>
      <p>So basically, when procrastinating, we tend to justify our inactions: just 1 more minute on Twitter,
just one last scroll on my newfeed, lemme just check this subreddit really quick.  With reverse
procrastination, you trick your brain into doing your intended task: Ok lemme just open Visual
Studio Code and edit this one file then im good, I’ll just change this one line of code, I’ll just
do 5 pushups then i’ll stop. Then when you’re on your 5th pushup, you say “surprise mr lazy pants,
im actually doing 10!” Once you get to do that one task, try to trick again your brain into doing
another simple, easy task and before you know it youre in “the zone”.</p>
    </blockquote>
  </li>
  <li>搬家的事情还在推进，基本打包完毕，喜福每天都在卖卖卖各种家具和小东西。我们列了一个理想房子的各种要求，周末一起跟两个 agent 视频聊了聊，对市场和我们自己的预期有了更好的了解，约定好下个月中旬开始看房。</li>
  <li>攒了半年的头发和胡子终于不耐其扰，周末去简单修理了一下，:older_man: 的青春又回来了</li>
  <li>我文的意甲联赛终于踉踉跄跄的拿到了冠军，开心，也伴着对欧冠的担忧。九连冠，想想自己应该只落下不到十场比赛，也是一个小成就了。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w29-collage.jpg" alt="w29-collage" /></p>

<h2 id="w28-0713---0719">W28 (07/13 - 07/19)</h2>

<ul>
  <li>辛苦了几个礼拜打包、清理、拍照，周一早上终于把房子<a href="https://matrix.onregional.ca/Matrix/Public/Portal.aspx?ID=5005412776">挂了出去</a>。有点不安，但是很快收到很多看房的请求。我和喜福只能带着猫狗流浪，在疫情期间，无处可去。周二有十三组人要来看房，我和喜福不耐其扰，在 Hamilton 找了个 Airbnb，想着躲掉这一周的风波。但是没想到，晚上燕姐告诉我们有了个合适的 bully offer，一起电话讨论，到半夜十一点半，敲定细节，签下合约，房子就这么卖掉了 :tada:  (Vlog <a href="https://www.youtube.com/watch?v=pGoUZeUa0KU">加拿大卖房记</a>)</li>
  <li>这两周为了不破坏家里的整洁，叫了很多外卖。疫情也逐渐好转，马上进入 stage 3，各行各业要彻底恢复了，可以出门吃吃吃了。</li>
  <li>周末和喜福把家里剩下的衣柜打包好，拍脑子定了个搬家日期：8.14。订机票，订临时住所，订箱子搬运，一切运转的很快。现在只剩下一堆家具要处理了，希望不要花太久时间。</li>
  <li>和王姨和叔叔聊天，和 Tim 一家公园遛弯，和国内的朋友线上打牌，很 chill。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w28-collage.jpg" alt="w28-collage" /></p>

<h2 id="w27-0706---0712">W27 (07/06 - 07/12)</h2>

<ul>
  <li>
    <p>搬家的事情在不断推动。和燕姐确定了周日给房子拍，照然后下周一上市。每天和喜福五点准时下班，一起搞卫生打包东西。一周下来很顺利，等到周日一切就绪，真有点不是我家的样子了，不敢乱动，生怕破坏了这份看起来的美好。</p>
  </li>
  <li>
    <p>这周最大的收获是开始做冥想，每天三点钟精神比较疲惫的时候，停下来冥想半个小时，确实会有种一天又重新开始的感觉。差了些资料，看到了一个很好的比喻：想象你一艘小船上，漂浮在大海中，海浪来袭，你也随着上下飘动。你的大脑就是这片海，表面上不时有活跃的波动，而内在却是安静平和。整体上有三种类型的冥想：</p>

    <ol>
      <li>focus detention，任何涉及到 concentration 的都是这类，大体思想就比如通过专注来使海面平静</li>
      <li>mindfulness，关于观察自身和周遭的环境，想办法设身世外不作任何评判，就像默默地去观察海面的波动</li>
      <li>transcendental，这个方法不涉及到清空思想，或者对周遭和自身保持觉醒，而是通过念诵来让头脑平静。就像做着一艘潜水艇直通大海底部，而潜水艇就是 mantra，一段无意义的声音。</li>
    </ol>

    <p>我准备从 transcendental meditation 开始，这么 fancy 的词，实际就是是念经嘛 😄 我的 mantr:  <a href="https://www.youtube.com/watch?v=Y-knD-U7_ik&amp;t=8203s">kleem</a>。</p>
  </li>
  <li>周六和咪一起 Fifa，看了我文 2:2 逼平真蓝黑的比赛。老天赏饭，靠着两个手球点球强力扳平，算是保住了最后的遮羞布。力吐槽。欧冠，难。</li>
  <li>周末和九🐯开始线上红十，哈哈哈，欢乐到不行。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w27-collage.jpg" alt="w27-collage" /></p>

<h2 id="w26-0629---0705">W26 (06/29 - 07/05)</h2>
<ul>
  <li>这周只需要工作两天，五天的 long long long weekend，主要在放松和收拾房子。燕姐周二过来仔细看了一圈，跟我们说了一些需要修补的地方，基本没有什么大问题，目测下下周就可以上市。这流程走的有点快，我们也没想到。</li>
  <li>休闲时光，看了几场球，F1 今年第一场，打了两次网球，踢了好多场 Fifa。</li>
  <li>周末和喜福打包衣服，我们秉持的原则是，过去一年没穿过就可以捐掉了。最后整理出 40% 要扔掉的衣服。有点不舍，但该是正确的决定。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w26-collage.jpg" alt="w26-collage" /></p>

<h2 id="w25-0622---0628">W25 (06/22 - 06/28)</h2>

<ul>
  <li>周一是结婚两周年纪念，没有什么特殊安排，只是延续了之前照相的传统。去年多了赵四，今年多了 Nikki，明年呢？</li>
  <li>周四是 Nikki 中班课程的最后一天，同班级的两只汪竟然都翘课了，只有我们、Nikki 和老师。顺利毕业后，老师看着傻兮兮的野狗在地上打滚，红着眼圈告诉我们，时常看着家里上岁数的狗狗，怀念这些冒着傻气的时候。训练是一方面，更要享受过程，Relish the moment!</li>
  <li>和江伟峰每周末 Fifa20，慢慢成了传统项目，到现在也有一个月了，菜鸡互啄，非常开心。</li>
  <li>每天结束工作都非常疲惫，跟最近处在工作的过渡期有关系。晚上经常和喜福开车带着 Nikki 去兜风，享受着傍晚的凉爽，穿梭在田野里，放松视野，让脑子慢慢停止运转。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w25-collage.jpg" alt="w25-collage" /></p>

<h2 id="w24-0615---0621">W24 (06/15 - 06/21)</h2>

<ul>
  <li>公司突然宣布这周开始到八月结束每周五都全员休假，周周长周末。官方的说法是，也许疫情缘故或者远程工作，大家普遍都不太请假，所以强制休息让大家享受夏天也更好的平衡工作生活。我是有点惊到了，这是资本主义的作风吗？</li>
  <li>既然每周都是长周末，想着应该学点什么🤔 想起佳新好久前送给我一把吉他，到 Cousera 上找了个课程，了解些基础也跟着老师瞎比划了一会儿，这个运动不简单啊，手疼。</li>
  <li>时隔小半年，终于又看到了我文的比赛。你以为世界熙熙攘攘，需要重现建立秩序。我文告诉你，不需要！这个夏天，还是熟悉的味道。</li>
  <li>周末是 Nikki 一周岁生日，给她血拼了一堆玩具和罐头，也买了个小粉紫色 tag 刻上她的名字，戴上之后终于有了女孩子气。傻狗呀，我们请你闯入我们的生活，不断适应，陪着你长大，也看到我们自己的成长。感谢有你。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w24-collage.jpg" alt="w24-collage" /></p>

<h2 id="w23-0608---0614">W23 (06/08 - 06/14)</h2>

<ul>
  <li>工作上比较稳定地输出，压力不大。想来已经在 Script 忙活了一年，platform 基本完成，很期待下半年开始做各种产品。</li>
  <li>周末和喜福继续对家里修修补补，然后叫江伟峰来家里 Fifa 20。</li>
  <li>晚上睡不着的时候，断断续续读完了<a href="https://book.douban.com/subject/10482102/">蒋勋说宋词</a>。上学时候完全不懂得欣赏其中的美，只留下片段机械记忆。我很喜欢作者从大的历史背景入手，介绍为什么诗衰词盛，到不同词人有怎样不同的风格。尤其在和平年代开始，大家从浪漫主义的家国情怀逐步转向更加私人和情绪化，开始关注生活的稀疏平常。我觉着很美好。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w23-collage.jpg" alt="w23-collage" /></p>

<h2 id="w22-0601---0607">W22 (06/01 - 06/07)</h2>

<ul>
  <li>天气渐好，多了很多散步的时间。最近心态调整的很好，做什么事情都不着急，心安理得地没有焦虑，享受慵懒的夏日时光。</li>
  <li>和喜福看完了 Ozark 第二季，还是很喜欢，从绝命毒师走向纸牌屋。</li>
  <li>周末结束了为期十周的 Compilers 课程，收获主要是帮我连起了很多零散的知识，对编译原理有了一套系统的认识。<a href="http://blog.ifyouseewendy.com/blog/2020/06/07/review-soe-ycscs1-compilers/">[Review] SOE-YCSCS1 Compilers</a></li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w22-collage.jpg" alt="w22-collage" /></p>

<h2 id="w21-0525---0531">W21 (05/25 - 05/31)</h2>

<ul>
  <li>这两周停止玩游戏，开始看书，练习冥想，工作和生活有了很好的起色。不看手机，减少打扰，尽可能去享受当下，认真做在做的事情。</li>
  <li>上上周开始看 <a href="https://movie.douban.com/subject/26735549/">Ozark</a>，刚刚看完了第一季，超级棒。夹缝中求生存，内外受敌，节奏非常好。和喜福每天晚上一集，非常享受。</li>
  <li>搬家去温哥华开始提上日程。联系了燕姐，明确了要为卖房做哪些准备。周末开始，修理坏掉的窗帘架，彻底清理地毯，拔掉后院的蒲公英，清除前院被狗狗尿过的死草。感谢有你，Nikki 😦</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w21-collage.jpg" alt="w21-collage" /></p>

<h2 id="w20-0518---0524">W20 (05/18 - 05/24)</h2>

<ul>
  <li>进入夏天，阳光明媚，Nikki 每天都和赵四出门疯跑，然后回来躺在地板上大声喘气，得意地笑。</li>
  <li>周四带 Nikki 去上 Level II 的课程。老师还是很负责的，户外进行，一个班级也三只🐶。Nikki 还是那个 crazy girl，见到了世界就充满好奇，对主人爱答不理。</li>
  <li>安省进入第一阶段的疫情恢复，周五出门和 David 打了一次网球，久违的自由啊。</li>
  <li>这周看完了 <a href="https://movie.douban.com/subject/30223100/">The Last Dance</a>，帮主的派头还有那么多背后的故事都很吸引我。自己的巅峰自己下，GOAT。Amy 好久前推荐双雪涛这个作家，这周看了他的中篇小说集，<a href="https://book.douban.com/subject/26803179/">平原上的摩西</a>。作者是个沈阳人，与我年龄相仿，故事里那些人物和故事，带给我很多儿时回忆。东北文学，从来不会在阳光明媚。侠义是人们心中的标杆，智慧散发市井的气息。人们都过度张扬着，人们都过度隐忍着。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w20-collage.jpg" alt="w20-collage" /></p>

<h2 id="w19-0511---0517">W19 (05/11 - 05/17)</h2>

<ul>
  <li>调整了应对 WFH 的心态，这周做了些改变：去跑了一次步，浑身酸疼；不打游戏；看书。多多少少起了些作用，心情上不会很浮躁，平静很多。周五公司强制休息，加上周一的 Victoria Day，周末有了个四天的小长假。自己设定的基调是：don’t check the time. 取消闹铃，平时也不看手机，只是随心做想做的事情，很享受。</li>
  <li>机缘巧合认识了 jasl，发现大家这几年都在专注类似的领域，做了简单的沟通，学到很多东西。</li>
  <li>周末耐着性子学习了牛肉芹菜馅饼，然后和喜福一起弄了 BBQ 烤羊排和牛肉串。专注在一件事情的感受是当时不知觉，但事后很美好。</li>
  <li>长周末读完了<a href="https://book.douban.com/subject/25742211/">上帝掷骰子吗</a>。作者的文笔非常了得，把量子论的发展史写的跟小说一般。我对此仅存的印象还停留在初中课本光的波粒二象性，但就这简简单单五个字竟然花费了最顶尖的头脑几百年的时间，而且还至今没有完全定论，叹服。</li>
  <li>对了，这周一又下雪了，winter is always coming</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w19-collage.jpg" alt="w19-collage" /></p>

<h2 id="w18-0504---0510">W18 (05/04 - 05/10)</h2>

<ul>
  <li>工作进展不多，每天下午都很快无心工作。有两天干脆放弃抵抗，跑去看了两个电影。虽然会想办法把时间补回来，但是这种带负罪感的工作，让人享受不来。周中和 Manager 聊天，我突然意识到是自己的心态出了问题，不能老想着“等疫情结束就好了”，反而应该接受这就是现实，然后才能想办法应对。不管是下个月还是下周就结束，每天都是自己的，我要做些改变。</li>
  <li>周二是喜福的三十周岁生日。今年她好像沉稳了很多，也许是这两个数字吓到了她 ​😃​，总之她只想平淡面对。我做了些不够拿手的饭菜，送了她想要的 airpods，度过了简单的一天。</li>
  <li>搬家去温哥华开始提上了日程。到真正行动还有距离，起码疫情摆在眼前。但是要准备的东西杂七杂八，和喜福开始讨论起来。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w18-collage.jpg" alt="w18-collage" /></p>

<h2 id="w17-0427--0503">W17 (04/27 / 05/03)</h2>

<ul>
  <li>继续处在 WFH 的疲惫中，不知道怎么调整状态放松心情。每天都是重复不变的日子，开始时候我还很享受，现在很明显需要一个 long break。身体上开始有反应，背部时常隐隐作痛，心理上也很慵懒，只有上午能保持积极的状态。周末和喜福一起说走就走，地图上找了个靠近休伦湖边的小镇 Bayfield。开了两个小时到地方，下去看了十分钟景色，然后返程。特殊时期的旅途。</li>
  <li>这周的最大的沉迷是 <a href="https://movie.douban.com/subject/34971810/">Tiger King</a>，看了一半时候我还不知道到底在讲什么，各色猎奇的元素，雨露均沾。很粗旷很市井文学，最神的是这是个纪录片。我活的越久，越觉着没见过世面，也充满疑问。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w17-collage.jpg" alt="w17-collage" /></p>

<h2 id="w160420---0426">W16(04/20 - 04/26)</h2>

<ul>
  <li>这周很明显的感受到了精神上的疲惫，只有每天早上精力充沛，下午就急转直下慢慢失去耐心。只能说略显便秘地解决了工作上两个小难题。</li>
  <li>入职三年多，迎来了换电脑的机会，i7 6core 32G，周二收到就迫不及待地把工作站部署了过去，非常顺畅。</li>
  <li>这周没有沉迷游戏，还剩下10%，慢慢玩耍享受就好。</li>
  <li>周末还是不知道怎么放松精神，这成了现在的主要难题。每每在家都不愿出屋，但是每次出门都感觉良好。最终我选择了没有压力地学习，享受单纯的兴趣得到满足。但是控制不好度，还是会感到精神上的疲惫。Hm，也许我只是应该接受这种状态，为什么一定要调整才好呢？</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w16-collage.jpg" alt="w16-collage" /></p>

<h2 id="w15-0413---0419">W15 (04/13 - 04/19)</h2>

<ul>
  <li>长周末打了太多游戏，回到工作中没法静下心来，尤其还遇到一个特别难搞的问题，每天都不在状态 :pensive:</li>
  <li>这周尝试了锅包肉，非常成功地还原了家里的味道，但是距离饭店水准，还有一定距离。</li>
  <li>Hollow Knight 终于见到了大 boss，不着急解决它。现在完成度 82%，基本上到了各种打怪和各种障碍跳来跳去的过程，玩的手疼。真的要歇一歇了。</li>
  <li>周末的电影选了 <a href="https://movie.douban.com/subject/26952704/">The Ballad of Buster Scruggs</a>。科恩兄弟的视角总是让人摸不着头脑，每个故事都很有意思值得琢磨，一以贯之的主题应了老子那句：天地不仁，以万物为刍狗。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w15-collage.jpg" alt="w15-collage" /></p>

<h2 id="w14-0406---0412">W14 (04/06 - 04/12)</h2>

<ul>
  <li>这周看了好几部电影。每天吃饭一起看会儿请回答1988，看了一个月终于看完了。这股暖流还没让我感到不适，比 This is us 强很多。周末看了金福南杀人事件和摄影机不要停，都很好看。</li>
  <li>喜福的炒乌冬厉害了，把一个我不喜欢吃的东西做成吃不够，还要连吃两天，点名表扬。</li>
  <li>子怡给我们发了张B超图，好神奇，非常期待呀。</li>
  <li>长周末一直在玩 Hollow Knight，本来以为就快打完了，但是发现呵呵，才刚上路。有点沉迷了，自己要量力而行，不然没有在享受这个过程。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w14-collage.jpg" alt="w14-collage" /></p>

<h2 id="w13-0330---0405">W13 (03/30 - 04/05)</h2>

<ul>
  <li>WFH 第三周，工作进展很多，花了两天时间完成了一个很大的 milestone，超级有成就感。这几个月一直在积累和学习的 Rust + WebAssembly 终于到了 inflection point，这个感觉太美妙。</li>
  <li>春天来了，阳光也明媚了很多，和喜福每天固定出门散步，吸几口空气也成了享受。</li>
  <li>闲暇时间玩了很多 Hollow Knight，可能玩过了一半了吧，很轻松治愈。</li>
  <li>上个月报名了一个线上课程，Standford <a href="https://courses.edx.org/courses/course-v1:StanfordOnline+SOE.YCSCS1+1T2020/course/">Compilers</a>。周末跟着上完了第一周的课程，很有趣，希望自己能坚持跟下去。</li>
  <li>周末拽着喜福看了想看好久的 Stalker，那张著名的海报以及塔科夫斯基的大名对我很有吸引力，但是开始看才发现，缓慢诗意的镜头用另一种方式来形容是瞌睡连连，和喜福从头到尾懵逼脸。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w13-collage.jpg" alt="w13-collage" /></p>

<h2 id="w12-0323---0329">W12 (03/23 - 03/29)</h2>

<ul>
  <li>Two weeks WFH now. I kinda over work and mess up the boundary between life and
work, but I enjoyed it so far. I’m connecting the dots on my learning over Rust
and WebAssembly. It’s really fun.</li>
  <li>暂时在家的娱乐方式是，打游戏 :smile: 上周和同事中午打 CS:GO，这周于天航推荐玩 Hollow Knight，周末又和朋友一起线上 Mario Kart。</li>
  <li>这周看了 <a href="https://movie.douban.com/subject/3718778/">Senna</a> 和 <a href="https://movie.douban.com/subject/26794701/">Hotel Mumbai</a>，都很不错。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w12-collage.jpg" alt="w12-collage" /></p>

<h2 id="w11-0316---0322">W11 (03/16 - 03/22)</h2>

<ul>
  <li>疫情影响下第一周完整的WFH，有点工作过度，但是推进了不少工作。做了一个 WebAssembly runtime 的 benchmark: <a href="https://github.com/ifyouseewendy/wasm-runtime-benchmark"> wasm-runtime-benchmark</a>，读完了<a href="https://rust-lang.github.io/async-book/01_getting_started/01_chapter.html">Asynchronous Programming in Rust</a>，很享受在家自由安静的时光。</li>
  <li>每天固定出门遛狗，呼吸新鲜空气。下午和喜福也尽可能出门散步。还好路上几乎见不到人，没有太多担心。</li>
  <li>这周跟赛聊了两次天，为他这股丧劲难过。好像最近的股市一样，你以为到了谷底，其实还没有。帮不了太多，只能希望他看到积极的一面。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w11-collage.jpg" alt="w11-collage" /></p>

<h2 id="w10-0309---0315">W10 (03/09 - 03/15)</h2>

<ul>
  <li>I’ve been working on a benchmark project for WebAssembly runtimes this week: <a href="https://github.com/ifyouseewendy/wasm-runtime-benchmark">wasm-runtime-benchmark</a></li>
  <li>周一迫不及待地看完了<a href="https://movie.douban.com/subject/34678530/">Drive to Survive 2</a>，没有让我失望。Red Bull 换车手风波和巴西站完美结合在了一起，让我有了另一个视角的认识。基本上 Gasly 的挣扎是我喜欢这个纪录片的完美体现：这个世界过于关注人们怎样从第十走到第一，但现实中的挣扎发生在每一步，从第十五到第十三是同样巨大的进步。新的赛季非常期待 Lec, Albon 和 Gas 的表现。（疫情影响，第一站澳大利亚被取消了）</li>
  <li>周三赶上了疫情侵袭前最后一场欧冠，马竞加时3:1利物浦，刺激！</li>
  <li>周四开始公司要求在家办公，形势越来越严峻了。公司给了1k的预算让大家布置在家办公的环境，本来就远程的员工也同样享受。好多次了，让我对这家公司有越来越多的认同。</li>
  <li>关于疫情，本来和喜福都是抱着无畏的心态，毕竟我们这个年龄段的死亡率非常低，老年人更受针对。直到我意识到，如果我不够注意最终得病，即使治愈也很有可能作为感染源间接导致其他人（尤其老年人）得病，那我也是有责任的。所以大家互相负责，谨慎为好。</li>
  <li>这周股市暴跌，创造历史的两次熔断。虽然我的 portofolio 无法幸免，但是总有种跃跃欲试的期待。周末买了几本书，关于之前发生的金融危机，顺着兴趣去读就好。最终并不一定非要杀入场内吧，但是希望趁着这个机会多对经济有些了解。</li>
  <li>周末和喜福看了<a href="https://movie.douban.com/subject/1305530/">收件人未详</a>。知道金基德大名这么久，才发现是看的第一部。果然有种生猛在里边。人的欲望，氤氲的气氛，特殊的年代。每个人都如此的不合理，是时代给了世界荒唐的理由。我很喜欢。</li>
  <li>冬天貌似就这么结束了，我们是怎么知道的呢 :thinking:</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w10-collage.jpg" alt="w10-collage" /></p>

<h2 id="w9-0302---0308">W9 (03/02 - 03/08)</h2>

<ul>
  <li>这周在做 WebAssembly runtime benchmark，边看边学，搞的很起劲。</li>
  <li>EST 转 EDT，时间被偷走一小时，另外周三晚上的 amber alert 完全打乱了我的睡眠。</li>
  <li>周末我文联赛 2:0 战胜国米，虽然心里暗忖输球可以看萨里下课，但是这下半场应该是我本赛季看的最好看的半场了。但是我又不敢相信这状态可以长久保持，因为夸德拉多都爆表了。还是要冷静，降低预期。</li>
  <li>周日和大宇哥聊了好久。生活很美好，也各有烦恼。一年没见，很想念国内的好朋友们。今年应该找时间回去开心玩耍。</li>
  <li>喜福的 Vlog 最近做的飞起，一只“赵四的冬季恋歌”送给大家</li>
</ul>

<iframe width="560" height="315" src="//player.bilibili.com/player.html?aid=94335334&amp;cid=161048693&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
<p><a href="https://www.youtube.com/watch?v=jkrWaiW9o1w">Youtube</a></p>

<h2 id="w8-0224---0301">W8 (02/24 - 03/01)</h2>

<ul>
  <li>最近的工作压力很大，要跟进的要学习的东西很多，不知道什么时候能熬到一个能喘息的阶段。本来下个月要去伦敦开会，上周刚刚办了签证， 但是最近疫情肆虐，所有出行都被公司取消了。好消息是落实了涨薪，新拿到了一些股票。</li>
  <li>周四的 #date-night 去吃了串串马路边边，自从开始在家研究炸盐酥鸡炸鱿鱼炸酥肉，外边的吃起来就相形见绌了。周末去大卫家看了<a href="https://movie.douban.com/subject/4280102/">能召回前世的布米叔叔</a>，有点沉闷又非常特别，那个意境有刻在脑海里。</li>
  <li>八周的滑雪课程结束了。教练是个七十岁的老爷，Paul，很慈祥也很健忘，同一个练习被他当新知识教了三遍。鉴于他的认真，我们大家都没有反驳，只是互相交换下眼神继续点头附和。课程过半的时候，我才发现学到了东西。其实要领不多，只是高速行进的过程不给你太多思考的空间，只能不断练习，慢慢这些要领内化成了下意识。
    <ul>
      <li>Lean forward</li>
      <li>Separate upper and lower body</li>
      <li>Make upper body still. Don’t turn shoulders. (bartender practice). Always look downhill, even during turning (skate stop practice).</li>
      <li>Use your outside ski and feel the inside edge. (step out practice)</li>
    </ul>
  </li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w8-collage.jpg" alt="w8-collage" /></p>

<h2 id="w7-0217---0223">W7 (02/17 - 02/23)</h2>

<ul>
  <li>工作又进入了熟悉的节奏，兴致匆匆到座位，忙忙碌碌，转眼就到了下班时间。面对干不完的活，每天推进一点点，享受这个过程，也时刻提醒自己不要焦虑。</li>
  <li>周中读完了_<a href="https://www.goodreads.com/book/show/39288400-the-subtle-art-of-not-giving-a-f-uck">The Subtle Art of Not Giving a F*uck</a>_，非常顺畅。作者用简洁的文字写了很多有趣的观点，非常受用。</li>
  <li>这周看了好几部电影：<a href="https://movie.douban.com/subject/3882427/"><em>我在雨中等你</em></a>，看的我有点愤怒。电影一味展示、拼贴世俗的美好，让人误以为那就是自己要去的地方。哭过笑过，发现还是不知道怎么迈出第一步改变生活。更多时候我们要的不是愿景，而是学会如何面对和接受生活的不幸。更难的是，找寻自己眼中的美好。<a href="https://movie.douban.com/subject/1291875/"><em>阳光灿烂的日子</em></a>。这周睡前重读了_动物凶猛_，王朔的笔触让人愉悦却也悲伤。再看电影，我更多感受到的是那个年代，它是不是这个国家的青春期呢？<a href="https://movie.douban.com/subject/1296436"><em>有话好好说</em></a>。顺着姜文，喜福说这部没看过。姜文的磕巴痴汉形象，和俩人在饭店大段大段的对话，实在是经典。<a href="https://www.imdb.com/title/tt6333072/"><em>Joshua</em></a>，这部当然是要被禁掉，再回想去年发生的，某种程度上也是必然。</li>
  <li>占东推荐了 <a href="https://www.acquired.fm/">Acquired</a> 这个播客（不知道是不是疯投圈的模版），回述这些创业公司历史，听完了 Tiktok, Shopify 和 Alibaba，超级有趣。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w7-collage.jpg" alt="w7-collage" /></p>

<h2 id="w6-0210---0216">W6 (02/10 - 02/16)</h2>

<ul>
  <li>Finally wrap up my research over the HTTP connection issue right at the Friday afternoon. Perfect ending!</li>
  <li>周四的 #date-night 去吃了家附近的中东菜 Naranj，意想不到的好吃。之后去 Princess 看了<a href="https://movie.douban.com/subject/1295647/">超时空接触</a>，应该是第四遍看了。这次注意到了年轻的马修麦康纳，没想到这哥们贯穿了两部我最喜欢的科幻（另一部是星际穿越）。周六的 #movie-night 看了<a href="https://movie.douban.com/subject/33400376/">平原上的夏洛克</a>，一般般。</li>
  <li>周六的滑雪有了长足的进步。这周做了一个关于重心的练习，真正感受到了 the inside edge of the outside ski。</li>
  <li>受国内疫情影响，每晚都坚持和国内的朋友奋战麻将，开心的一笔</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w6-collage.jpg" alt="w6-collage" /></p>

<h2 id="w5-0203---0209">W5 (02/03 - 02/09)</h2>

<ul>
  <li>Following up a weird HTTP connection issue in the whole week. I enjoy the excitement and progress everyday. I’m almost there :crossed_fingers:</li>
  <li>最近的睡眠非常好。有两天尝试了不喝咖啡，但是午饭过后困意来袭，还是有点难过。顺便也想了下要怎样戒烟。其实我对自己很有信心，只是时间的问题，还没找到，也去寻找有效的替代品。</li>
  <li>这一周的文明玩的飞起，每天晚上一个半小时，周末终于艰难地赢了一局电脑 :v:</li>
  <li>周四的 #date-night 去吃了 Bao，周六的 #movie-night 看了 Martin Scorecese 的 <a href="https://movie.douban.com/subject/1303531/">After hours</a></li>
  <li>周六享受了这个冬天最惬意的一次滑雪。蓝天白云，大太阳。没有寒风，只有在缆车上的宁静和下坡时的速度。</li>
  <li>这周看完了 Richard Bach 的 <a href="https://www.goodreads.com/book/show/29946.Illusions?from_search=true&amp;qid=QPiOBMxjKQ&amp;rank=2">Illusions</a>。非常好看的一本小书，幽默哲理版的禅师问道。想想最近看的道德经，The Power of Now, The Book of Life (Jiddu Krishnamurti)，总觉着有条隐形的线在牵连，但是我又理不清头绪，继续读下去就好。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w5-collage.jpg" alt="w5-collage" /></p>

<h2 id="w4-0127---0202">W4 (01/27 - 02/02)</h2>

<ul>
  <li>A typical great week in work. It starts by following a weird issue, falls into a rabbit hole and somehow gets resolved at the end of the week :)</li>
  <li>和喜福很好地贯彻了九点关电视的规矩，正如我们所预料，间接推动了我们早早上床。这一周的睡眠非常棒！周四的 #date-night 在 Loloan Lobby，周六的 #movie-night 看了祈祷落寞时，继续保持✊</li>
  <li>周末去滑雪，看球看小徳（17冠后无比期待啊），玩文明。喜福 carry 了各种吃吃吃吃，火锅、部队锅、排骨、酥肉，还能说什么，优秀！</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w4-collage.jpg" alt="w4-collage" /></p>

<h2 id="w3-0120---0126">W3 (01/20 - 01/26)</h2>

<ul>
  <li>周一和 Manager one one 关于 2019 年的 perf review，很开心拿到了 exponential。我也是刚刚反应过来，来到公司三年，第一年 promotion，之后的两年 exponential。有时候应该多给自己些自信和鼓励，也许自己做的比想象中要好。当然也一起深入聊了其他我更关心的话题，例如有哪些需要提高，下一步有什么打算。其实很明确，我自己也清楚：我应该更多加入大家的讨论，多提供意见，哪怕是不成熟的想法；下一步要不要做 staff，主要卡在我是否有主观的强烈意愿，然后才能指导下一步去考虑自己要做哪些改变。我想了半年还是不清楚，好在眼前的工作一直都有挑战，我也很享受。日历里定了个提醒，每个季度都提醒自己停下来想一想。</li>
  <li>周一早上送 Nikki 去做了绝育，晚上接回家里，还是一脸麻醉未醒的样子，戴着伊丽莎白圈，走路慢吞吞，偶尔看到镜子里的自己满脸疑惑。有点心疼。</li>
  <li>周五是春节，连续第二年不在老家过年，和喜福延续我们去年制定的传统：三十儿火锅初一饺子。今年没有买饺子皮，视频和妈妈学了和面，初一成功包了猪肉芹菜饺子。周末空闲，继续研究厨艺，尝试了红烧肉和炸鱿鱼须，非常成功。</li>
  <li>周日下午两点多，收到占东的消息：Kobe Bryant has died in a helicopter crash。瞬间惊到了，怎么能有这么假的新闻。之后就是漫长的下午，不断刷着 Twitter，希望能有转机，可是等来的只是不断的噩耗，他的二女儿 Gigi 也遇难身亡。心碎，无语。我多希望没看到这条消息，而你还在我见不到也许以后也不会见到的地方，但是我知道你还在。我努力寻找出口，试图平复自己去接受这一切，但是现实太魔幻，我实在接不住。当我第一次学到“偶像”两个字的时候，我在足球找到了 Del Piero，在篮球找到了你。从 98/99 开始看球，到现在二十年有余，我是多么幸运当初把目光交给了你，带我见证痛苦与喜悦，也教我明白努力与抗争。说到底，是陪伴和成长。感谢你 Kobe，R.I.P 🙏</li>
  <li>最近一个礼拜我一直在思考一个问题：如果生活里没有电视，我们的生活会变开心还是失落。和喜福一起讨论了一下：电视带来最糟糕的体验就是，没有目的的扫来扫去，一个半小时过去，根本不知道看了些啥，只记得瘫软在沙发里，随后做其他事情的动力也接近于零（这个最伤人，好像不小心点出了抖音的设计理念）。也许正确的打开方式是把电视当作电影院的那块屏幕，有明确的时间和预期。遇到想看的电影或者比赛，当然可以看，但是拒绝漫无目的和没完没了。我们定了一些简单可行的目标，准备接下来做些尝试：1. 九点之后不开电视，包括周末 2. 吃饭的时候可以打开看无聊综艺 3. 看美剧的话不要沉迷（主要针对我），每次不超过一集。总体上，我希望解锁花在电视上的暗时间，看看会给生活带来多大变化。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w3-collage.jpg" alt="w3-collage" /></p>

<h2 id="w2-0113---0119">W2 (01/13 - 01/19)</h2>

<ul>
  <li>喜福继续在温哥华出差。我发现当我完全接受要每天独自照看猫猫狗狗之后，心里也就不会有什么怨言，只是想着怎么会做的更好。“接受”是我在逐渐学会的两个字。套用 Naval 提到佛家观点：Desire is a contract you make with yourself to be unhappy until you get what you want. 我们应该 pick our battle，有那么一两件非常在乎的事情，要渴望要争取，其他就让他去，心平气和去面对。</li>
  <li>周二周三公司开新年 kickoff，其实就是换个地方鼓舞士气。我一向对这种活动不感冒，去了半场下午赶快溜回家。周末两天下了暴雪，白茫茫一片，出门扫了三次雪，舒坦。</li>
  <li>周中入坑了犹豫许久的文明六…我完全能理解大家都说玩上这游戏会发问“时间都去哪了”的疑问。里边的设定太巧妙了，正好满足了自己对历史不断加深的兴趣，边玩边查各种 wiki。然而，周六一口气玩了四个半小时之后，头昏脑涨，我准备轻易不要再碰了。</li>
  <li>周日狠狠地收拾了一下屋子，晚上带着 Nikki 去机场接了喜福，终于不用再视频面狗了。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w2-collage.jpg" alt="w2-collage" /></p>

<h2 id="w1-0106---0112">W1 (01/06 - 01/12)</h2>

<ul>
  <li>喜福这两周在温哥华出差（玩耍），我独自在家享受另一个“假期”。每天上午去公司，吃好午饭，下午回来陪 Nikki。开始几天做什么都没啥心情，叫外卖，躺沙发，工作也心不在焉；后来慢慢调整好状态，周末学习 Rust，看球，吉祥麻将，做晚饭，带 Nikki 和赵四散步，过得很充实。</li>
  <li>这一个多月很大的改变是对做饭的态度。从前我的标准很明确：能少做就不做；如果实在要做，从准备到开吃，20 分钟是我能接受的上限。所以也间接导致，为什么我如此钟爱火锅。去年爸妈在家里的一个多月，我认识到了一个不让人惊讶我却也未曾察觉（因为一直理所当然）的事实：为什么他们会做各种美味，而同时厨房又干净整洁？其实答案很简单，只是因为他们花了太多时间在厨房啊。在那之后，我试着改变对做饭的看法，耐心也不断加入思考，跟喜福刷的抖音推荐全都是菜谱。不断尝试，也不断有收获，一旦有了喜福正向的反馈，我发现自己开始享受做饭的时光了。</li>
  <li>周末闲下来，反思了一下对 Nikki 的训练。自从 level 1 课程结束后我们好像就不够再上心，生活里有几处明显的困扰，我们也没有动力去寻求改变。遛弯是最麻烦的。每次出去路上，Nikki 闻到什么感兴趣的味道，都会用力 pull；看到任何生物，人、狗、小汽车都会 bark；回来路上到了拐角黑狗 Leiney 的家门口， 都会不自觉开始发疯，growl，bite leash，最严重的是，如果喜福在还会扑她。我找了很多视频看，基本上得到了这样的结论：狗狗的听力和嗅觉都比人类敏锐，导致的问题也很显而易见，就是易受打扰。从家里到遛弯，一扇门之隔，对狗狗却是整个世界的改变。这个过程不可以是跳跃式的，而是需要循序渐进的。我开始在屋子里遛 Nikki，然后在门外边的小走廊，最后到 Driveway，只有上一步做好了，才去尝试下一步。这不是什么新奇的发现，之前的书和课程上也有提过，只是我们没有认真去做，希望接下来我们会有更多耐心。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2020/w1-collage.jpg" alt="w1-collage" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What we've done in 2019]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2020/01/03/what-weve-done-in-2019/"/>
    <updated>2020-01-03T11:54:56-05:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2020/01/03/what-weve-done-in-2019</id>
    <content type="html"><![CDATA[<svg id="gantt-2019"></svg>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on DDD Quickly]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2019/05/27/notes-on-ddd/"/>
    <updated>2019-05-27T11:43:15-04:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2019/05/27/notes-on-ddd</id>
    <content type="html"><![CDATA[<table class="custom">
  <tbody>
    <tr>
      <td><strong>Book</strong></td>
      <td>Domain Driven Design Quickly</td>
    </tr>
    <tr>
      <td><strong>Author</strong></td>
      <td>Floyd Marinescu &amp; Abel Avram</td>
    </tr>
    <tr>
      <td><strong>Link</strong></td>
      <td><a href="https://www.infoq.com/minibooks/domain-driven-design-quickly">InfoQ</a></td>
    </tr>
  </tbody>
</table>

<ul id="markdown-toc">
  <li><a href="#what-is-ddd" id="markdown-toc-what-is-ddd">What is DDD?</a></li>
  <li><a href="#the-ubiquitous-language" id="markdown-toc-the-ubiquitous-language">The Ubiquitous Language</a></li>
  <li><a href="#model-driven-design" id="markdown-toc-model-driven-design">Model-Driven Design</a>    <ul>
      <li><a href="#building-blocks" id="markdown-toc-building-blocks">building blocks</a></li>
      <li><a href="#layered-architecture" id="markdown-toc-layered-architecture">Layered Architecture</a></li>
      <li><a href="#express-model-with-entities-value-objects-and-services" id="markdown-toc-express-model-with-entities-value-objects-and-services">Express Model with Entities, Value Objects and Services</a></li>
      <li><a href="#struct-model-with-modules" id="markdown-toc-struct-model-with-modules">Struct model with Modules</a></li>
      <li><a href="#manage-a-domain-object" id="markdown-toc-manage-a-domain-object">Manage a domain object</a></li>
    </ul>
  </li>
  <li><a href="#refactoring-toward-deeper-insight" id="markdown-toc-refactoring-toward-deeper-insight">Refactoring Toward Deeper Insight</a></li>
  <li><a href="#preserving-model-integrity" id="markdown-toc-preserving-model-integrity">Preserving Model Integrity</a>    <ul>
      <li><a href="#bounded-context" id="markdown-toc-bounded-context">Bounded Context</a></li>
      <li><a href="#continuous-integration" id="markdown-toc-continuous-integration">Continuous integration</a></li>
      <li><a href="#context-map" id="markdown-toc-context-map">Context map</a></li>
      <li><a href="#shared-kernel" id="markdown-toc-shared-kernel">Shared Kernel</a></li>
      <li><a href="#customer-supplier" id="markdown-toc-customer-supplier">Customer-supplier</a></li>
      <li><a href="#conformist" id="markdown-toc-conformist">Conformist</a></li>
      <li><a href="#anticorruption-layer" id="markdown-toc-anticorruption-layer">Anticorruption layer</a></li>
      <li><a href="#separate-ways" id="markdown-toc-separate-ways">Separate ways</a></li>
      <li><a href="#open-host-service" id="markdown-toc-open-host-service">Open host service</a></li>
      <li><a href="#distillation" id="markdown-toc-distillation">Distillation</a></li>
    </ul>
  </li>
  <li><a href="#advices" id="markdown-toc-advices">Advices</a></li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/ddd/ddd-mind-map.png" alt="ddd-mind-map" /></p>

<h2 id="what-is-ddd">What is DDD?</h2>

<p>The main idea is to identify the <strong>domain model</strong> and design your system around it. Usually, a software designer will talk with the domain expert to figure out the domain.</p>

<blockquote>
  <p>You cannot create a banking software system unless you have a good understanding of what banking is all about, one must understand the domain of banking.
How can we make the software fit harmoniously with the domain? The best way to do it is to make software a reflection of the domain. Software needs to incorporate the core concepts and elements of the domain, and to precisely realize the relationships between them. Software has to <strong>model</strong> the domain.</p>
</blockquote>

<p>So, what is domain model? It’s an abstraction of the domain. It’s an internal representation of the target domain.</p>

<blockquote>
  <p>A model is an abstraction of the domain. It is not just the knowledge in a domain expert’s head; it is a rigorously organized and selective abstraction of that knowledge. The model is our internal representation of the target domain,</p>
</blockquote>

<h2 id="the-ubiquitous-language">The Ubiquitous Language</h2>

<p>A core <strong>principle</strong> of DDD is to use a language to communicate the domain. Use the model as the backbone of a language. Request that the team use the language consistently in all communications, and also in the code. While sharing knowledge and hammering out the model, the team uses speech, writing and diagrams. Make sure this language appears consistently in all the communication forms used by the team; for this reason, the language is called <strong>the Ubiquitous Language</strong>.</p>

<p>Building a language like that has a clear outcome: the model and the language are strongly interconnected with one another. A change in the language should become a change to the model.</p>

<h2 id="model-driven-design">Model-Driven Design</h2>

<h3 id="building-blocks">building blocks</h3>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/ddd/ddd-building-blocks.png" alt="ddd-building-blocks" /></p>

<h3 id="layered-architecture">Layered Architecture</h3>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/ddd/ddd-layered-architecture.png" alt="ddd-layered-architecture" /></p>

<h3 id="express-model-with-entities-value-objects-and-services">Express Model with Entities, Value Objects and Services</h3>

<p><strong>Entity</strong>: implementing entities in software means creating identity.</p>

<p><strong>Value Object</strong>: is an object that is used to describe certain aspects of a domain, being immutable, having no identity, thus can be shared.</p>

<p>It is recommended to select as entities only those objects which conform to the entity definition. And make the rest of the objects Value Objects.</p>

<p><strong>Service</strong>: without an internal state, its purpose is to simply provide functionality for the domain. There are three characters of a Service</p>

<ol>
  <li>The operation performed by the Service refers to a domain concept which does not naturally belong to an Entity or Value Object.</li>
  <li>The operation performed refers to other objects in the domain.</li>
  <li>The operation is stateless.</li>
</ol>

<p>While using Services, is important to keep the domain layer isolated. It is easy to get confused between services which belong to the domain layer, and those belonging to the infrastructure.</p>

<h3 id="struct-model-with-modules">Struct model with Modules</h3>

<p>Modules are used as a method of organizing related concepts and tasks in order to reduce complexity. Choose Modules that tell the story of the system and contain a cohesive set of concepts.</p>

<p>It is recommended to group highly related classes into modules to provide maximum cohesion possible. There are several types of cohesion. Two of the most used are <em>communicational cohesion *and *functional cohesion</em>.</p>

<ul>
  <li>Communicational cohesion is achieved when parts of the module operate on the same data. It makes sense to group them, because there is a strong relationship between them.</li>
  <li>Functional cohesion is achieved when all parts of the module work together to perform a well-defined task. This is considered the best type of cohesion.</li>
</ul>

<h3 id="manage-a-domain-object">Manage a domain object</h3>

<p><strong>Ownership &amp; Boundary: Aggregates</strong></p>

<p>Aggregate is a domain pattern used to define object ownership and boundaries.</p>

<p>An Aggregate is a group of associated objects which are considered as one unit with regard to data changes. The Aggregate is demarcated by a boundary which separates the objects inside from those outside. Each Aggregate has one root. The root is an Entity, which has global identity and it’s responsible for maintaining the invariants, and it is the only object accessible from outside.</p>

<ol>
  <li>Cluster the Entities and Value Objects into Aggregates and define boundaries around each.</li>
  <li>Choose one Entity to be the root of each Aggregate, and control all access to the objects inside the boundary through the root.</li>
</ol>

<p><strong>Creation: Factories</strong></p>

<p>Factories are used to encapsulate the knowledge necessary for object creation, and they are especially useful to create Aggregates. When the root of the Aggregate is created, all the objects contained by the Aggregate are created along with it, and all the invariants are enforced.</p>

<p>It is important for the creation process to be atomic. Another observation is that Factories need to create new objects from scratch.</p>

<p><strong>Storage: Repositories</strong></p>

<p>A client needs a practical means of acquiring references to preexisting domain objects. Use a Repository to encapsulate all the logic needed to obtain object references.</p>

<p>The Repository acts as a storage place for globally accessible objects.</p>

<ul>
  <li>For each type of object that needs global access, create an object that can provide the illusion of an in-memory collection of all objects of that type.</li>
  <li>Set up access through a well-known global interface.</li>
  <li>Provide methods to add and remove objects, which will encapsulate the actual insertion or removal of data in the data store.</li>
  <li>Provide methods that select objects based on some criteria and return fully instantiated objects or collections of objects whose attribute values meet the criteria, thereby encapsulating the actual storage and query technology. Use a Specification.</li>
  <li>Provide repositories only for Aggregate roots that actually need direct access.</li>
  <li>Keep the client focused on the model, delegating all object storage and access to the Repositories.
It can be noted that the implementation of a repository can be closely liked to the infrastructure, but that the repository interface will be pure domain model.</li>
</ul>

<p>There is a relationship between Factory and Repository. They are both patterns of the model-driven design, and they both help us to manage the life cycle of domain objects.</p>

<ul>
  <li>While the Factory should create new objects, while the Repository should find already created objects. When a new object is to be added to the Repository, it should be created first using the Factory, and then it should be given to the Repository which will store it like in the example below.</li>
  <li>Another way this is noted is that Factories are “pure domain”, but that Repositories can contain links to the infrastructure, e g the database.</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/ddd/ddd-factories-and-repositories.png" alt="ddd-factories-and-repositories" /></p>

<h2 id="refactoring-toward-deeper-insight">Refactoring Toward Deeper Insight</h2>

<p>A good model is the result of deep thinking, insight, experience, and flair.
Refactoring is done in small steps. The result is also a series of small improvements. There are times when lots of small changes add very little value to the design, and there are times when few changes make a lot of difference. It’s a Breakthrough. Each refinement adds more clarity to the design. This creates in turn the premises for a Breakthrough.</p>

<p>To reach a Breakthrough, we need to make the implicit concepts explicit.</p>

<ul>
  <li>Listen to the language</li>
  <li>Use domain literature</li>
  <li>Constraint, Process and Specification.
    <ul>
      <li>A Constraint is a simple way to express an invariant. Whatever happens to the object data, the invariant is respected. This is simply done by putting the invariant logic into a Constraint.</li>
      <li>Processes are usually expressed in code with procedures. The best way to implement processes is to use a Service.</li>
      <li>a Specification is used to test an object to see if it satisfies a certain criteria.</li>
    </ul>
  </li>
</ul>

<h2 id="preserving-model-integrity">Preserving Model Integrity</h2>

<p>It is so easy to start from a good model and progress toward an inconsistent one. The internal consistency of a model is called <strong>unification</strong>. Instead of trying to keep one big model that will fall apart later, we should consciously divide it into several models. Several models well integrated can evolve independently as long as they obey the contract they are bound to.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/ddd/ddd-data-integrity-patterns.png" alt="ddd-data-integrity-patterns" /></p>

<h3 id="bounded-context">Bounded Context</h3>

<p>The main idea is to define the scope of a model, to draw up the boundaries of its context, then do the most possible to keep the model unified. Explicitly define the context within which a model applies. Explicitly set boundaries in terms of team organization, usage within specific parts of the application, and physical manifestations such as code bases and database schemas. A model should be small enough to be assigned to one team.</p>

<p>**A Bounded Context is not a Module. **A Bounded Context provides the logical frame inside of which the model evolves. Modules are used to organize the elements of a model, so Bounded Context encompasses the Module.</p>

<h3 id="continuous-integration">Continuous integration</h3>

<p>Continuous Integration is a necessary process within a Bounded Context. Another necessary requirement is to perform automated tests.</p>

<h3 id="context-map">Context map</h3>

<p>A Context Map is a document which outlines the different Bounded Contexts and the relationships between them.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/ddd/ddd-context-map.png" alt="ddd-context-map" /></p>

<p>Each Bounded Context should have a name which should be part of the Ubiquitous Language. A common practice is to define the contexts, then create modules for each context, and use a naming convention to indicate the context each module belongs to.</p>

<h3 id="shared-kernel">Shared Kernel</h3>

<p>The purpose is to reduce duplication, but still keep two separate contexts.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/ddd/ddd-shared-kernel.png" alt="ddd-shared-kernel" /></p>

<h3 id="customer-supplier">Customer-supplier</h3>

<p>There are times when two subsystems have a special relationship: one depends a lot on the other. The contexts in which those two subsystems exist are different, and the processing result of one system is fed into the other. Establish a clear customer/supplier relationship between the two teams.</p>

<p>A Customer-Supplier relationship is viable when both teams are interested in the relationship. When two development teams have a Customer-Supplier relationship in which the supplier team has no motivation to provide for the customer team’s needs, the customer team is helpless.</p>

<p>The customer team has few options:</p>

<ul>
  <li><strong>Conform</strong> entirely to supplier team’s model</li>
  <li>Protect itself by using an <strong>Anticorruption Layer</strong></li>
  <li><strong>Separate Ways</strong>. We need to closely evaluate the benefits of integration and use it only if there is real value in doing so. If we reach the conclusion that integration is more trouble than it is worth, then we should go the Separate Ways.</li>
</ul>

<h3 id="conformist">Conformist</h3>

<p>If the customer has to use the supplier team’s model, and if that is well done, it may be time for conformity. The customer team could adhere to the supplier team’s model, conforming entirely to it.
Compared to the Shared Kernel, but there is an important difference. The customer team cannot make changes to the kernel. They can only use it as part of their model, and they can build on the existing code provided.</p>

<h3 id="anticorruption-layer">Anticorruption layer</h3>

<p>From our model’s perspective, the Anticorruption Layer is a natural part of the model; it does not look like something foreign. It operates with concepts and actions familiar to our model. But the Anticorruption Layer talks to the external model using the external language not the client one. This layer works as a two way translator between two domains and languages.</p>

<p>How should we implement the Anticorruption Layer? A very good solution is to see the layer as a Service from the client model. The Service will be done as a Façade, along with a Adapter and translator.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/ddd/ddd-anticorruption-layer.png" alt="ddd-anticorruption-layer" /></p>

<p>Adapter is to convert the interface of a class to the one understood by the client. Translator is to do object and data conversion.</p>

<h3 id="separate-ways">Separate ways</h3>

<p>Before going on Separate Ways we need to make sure that we won’t be coming back to an integrated system.</p>

<p>The Separate Ways pattern addresses the case when an enterprise application can be made up of several smaller applications which have little or nothing in common from a modeling perspective. From the user’s perspective this is one application, but from a modeling and design point of view it may done using separate models with distinct implementations.</p>

<h3 id="open-host-service">Open host service</h3>

<p>When we try to integrate two subsystems, we usually create a translation layer between them. This layer acts as a buffer between the client subsystem and the external subsystem we want to integrate with. This layer can be a consistent one, depending on the complexity of relationships and how the external subsystem was designed. If the external subsystem turns out to be used not by one client subsystem, but by several ones, we need to create translation layers for all of them.</p>

<p>The solution is to see the external subsystem as a provider of services. If we can wrap a set of Services around it, then all the other subsystems will access these Services, and we won’t need any translation layer.</p>

<p>Define a protocol that gives access to your subsystem as a set of Services. Open the protocol so that all who need to integrate with you can use it.</p>

<h3 id="distillation">Distillation</h3>

<p>A large domain has a large model even after we have refined it and created many abstractions. It can remain big even after many refactorings. In situations like this, it may be time for a distillation. The idea is to define a Core Domain which represents the essence of the domain. The byproducts of the distillation process will be Generic Subdomains which will comprise the other parts of the domain.</p>

<p>When working with a large model, we should try to separate the essential concepts from generic ones. Identify cohesive subdomains that are not the motivation for your project. Factor out generic models of these subdomains and place them in separate Modules. There are different ways to implement a Generic Subdomain:</p>

<ul>
  <li>Off-the-shelf Solution</li>
  <li>Outsourcing</li>
  <li>Existing Model</li>
  <li>In-House Implementation</li>
</ul>

<h2 id="advices">Advices</h2>

<p>Keep in mind some of the pitfalls of domain modeling:</p>

<ol>
  <li>Stay hands-on. Modelers need to code.</li>
  <li>Focus on concrete scenarios. Abstract thinking has to be anchored in concrete cases.</li>
  <li>Don’t try to apply DDD to everything. Draw a context map and decide on where you will make a push for DDD and where you will not. And then don’t worry about it outside those boundaries.</li>
  <li>Experiment a lot and expect to make lots of mistakes. Modeling is a creative process.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I've done in 2019]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2019/04/15/what-ive-done-in-2019/"/>
    <updated>2019-04-15T11:59:16-04:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2019/04/15/what-ive-done-in-2019</id>
    <content type="html"><![CDATA[<blockquote>
  <p>A weekly log on my life and personal growth</p>
</blockquote>

<h2 id="w52-53-1223---0105-vacation">W52-53 (12/23 - 01/05) Vacation</h2>

<p>12.25 - 01.01 把 Nikki 和赵四安顿好，我们踏上了🇲🇽坎昆之旅。这次完全没做计划，一切顺其自然。从冰天雪地跳到阳光沙滩，这个冲击感很美妙。每天可以不在乎时间，完全自由同样难能可贵。我们一半的时间在躺着，在酒店在沙滩，看电影看书。一半的时间在附近的景点，丛林金字塔和水上乐园。</p>

<ul>
  <li>玛雅的金字塔是我来之前最向往的，我们去了 Chichen Itza, Coba 和 Tulum。金字塔虽然不如我想象中壮观，但是了解各种细节才知道其中奥妙，尤其关于当时人们对宇宙、时间、神的理解。玛雅人以手脚数目 20 作为计数单位，随之而来的是每个月 20 天，一年 18 个月，留下 5 天禁忌日。纪年也如此，不是十进制的 2020-01-01，而是BC3000年左右的元年开始算起，以二十进制计算天数：13.0.7.2.7（这俨然是一个 IP 地址🤔）。传说中的 2012-12-21 只是大数字进一变成了 13.0.0.0.0 而已。（这个 <a href="https://maya.nmai.si.edu/calendar/maya-calendar-converter">Mayan Calendar Converter</a> 有详细的介绍）。玛雅的文字和汉字一样是方块字，但不同的是玛雅人是在田字格内画画，还涂着颜色，非常绚烂。知乎上这篇讲解很好看：<a href="https://www.zhihu.com/question/20774349/answer/41256347">破解失传的古文字（象形文字、楔形文字等）最初是如何被破译的？</a></li>
  <li>行程最后一天的 Xcaret 是最大亮点，一座建在丛林和海滩上的主题乐园。我们再次体验了快艇摩托伞，一起在天空享受宁静。对于高度近视的我，确实分不清海天是如何相接。体验最好的是里边的一条人造河，从起点到终点游泳划行一个小时，全程都是玛雅的石头建筑和绿色丛林。这是我此次旅行最美妙的时光。</li>
  <li>闲暇时间刷了一些想看好久的书和电影：
    <ul>
      <li><a href="https://movie.douban.com/subject/6981153/">爱尔兰人</a>让我回到了大学时光，猛刷罗伯特德尼罗和阿尔帕西诺的日子。四个小时的电影，如果好看是真的享受。<a href="https://movie.douban.com/subject/27202818/">婚姻故事</a>很不错，但是好像不适合两个人一起看；<a href="https://movie.douban.com/subject/30390700/">美国工厂</a>这个纪录片就有意思了，评论说的没错，这是十八世纪资本主义和二十一世纪资本主义的冲突；<a href="https://movie.douban.com/subject/15077774/">谋杀疑案</a> 是个亚当桑德勒标签化的傻逼电影。</li>
      <li><a href="https://book.douban.com/subject/26292964/">世界小史</a>是本很好的历史读物，粗糙但是有大视角；<a href="https://book.douban.com/subject/26672693/">一个叫欧维的男人决定去死</a>也很好读，故事人物典型老套，但是笔触非常幽默顺畅。看了大半本<a href="https://book.douban.com/subject/30229508/">统计学关我什么事</a>，非常浅显，我主要是来看到底什么是贝叶斯的。来时的路上开了躺了很久的<a href="https://www.amazon.cn/gp/product/B0177JL1O0/ref=ppx_yo_dt_b_d_asin_title_o01?ie=UTF8&amp;psc=1">道德经</a>（这个版本很不错），看了前四分之一，非常让我大开眼界，时间是打不破智慧的。木心的<a href="https://book.douban.com/subject/20440644/">文学回忆录</a>也走了四分之一，正好配着刚看过的世界小史，从文学的视角再捋一遍。</li>
    </ul>
  </li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w52-53-cancun-trip.jpg" alt="w52-53-cancun-trip" /></p>

<p>视频 <a href="https://youtu.be/earZfWDeeBU">YouTube</a>, <a href="https://v.youku.com/v_show/id_XNDQ5MjQyMDYzNg==.html">Youku</a></p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/earZfWDeeBU" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<h2 id="w51-1216---1222">W51 (12/16 - 12/22)</h2>

<ul>
  <li>Super happy to wrap up all the work before Christmas vacation, looking forward to our 2020.</li>
  <li>组里的年终聚会再次展现了自己的手工天赋，成功制作了唯一的圣诞危房。</li>
  <li>这周家里的厨艺争霸异常激烈，喜福的小酥肉非常完美，可能和我的怒炸排骨不相上下。</li>
  <li>接下来是 16 天的假期：在家呆四天，去坎昆度假七天，再回来休整五天。想做的事情很多，继续 Rust 学习，看爱尔兰人，找本闲书看，去海边装死，新年回来去上第一堂滑雪课。期待。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w51-collage.jpg" alt="w51-collage" /></p>

<h2 id="w50-1209---1215">W50 (12/09 - 12/15)</h2>

<ul>
  <li>Pick up my Rust learning by finishing reading and practicing <a href="https://github.com/rust-unofficial/too-many-lists">rust-unofficial/too-many-lists</a>, which is such an interesting read. What I enjoy the most is the feeling (or illusion) of getting a new or deeper understanding about something I thought I knew.</li>
  <li>Nikki 为期六周的 Level 1 课程这周二结束了，我们短暂的学生家长体验也到期了。Nikki 作为班级最调皮捣蛋的，每次上课都大声说话，开始两次课真是让我们头疼欲裂。没办法，只能硬挺保持耐心，跟喜福报团取暖。现在回看，如果以天为跨度，那多是无奈，但是如果放大到每周，那确实一直都在进步。最后一课期末考试，Nikki 让所有人刮目相看（要我说只是正常发挥在家的水准而已）获得了第三名，一旁老父亲老母亲欣慰不已。</li>
  <li>姥爷突然离世，2019年12月13日。我心里没有特别难过，伤心主要来自对妈妈和大舅的感同身受。一晚上都有点恍惚，脑子在不断搜索记忆，希望留下一些美好的画面。至此，我不曾怀疑的理应存在的爷爷奶奶姥姥姥爷全都消失在了这个世界。感谢你们给的爱和回忆。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w50-collage.jpg" alt="w50-collage" /></p>

<h2 id="w49-1202---1208">W49 (12/02 - 12/08)</h2>

<ul>
  <li>周中同事问了一个简单的 Rust 问题，发现两个月不用，脑子又基本忘光了。所以周末开始了这一年第三次阅读 <a href="https://doc.rust-lang.org/book/#the-rust-programming-language">The Rust Programming Language</a>。这回不用一章章读了，顺着脑子里的问题去寻找就好了。</li>
  <li>周四晚上和 David, Alex 去 Apollo 看了 <a href="https://www.imdb.com/title/tt0052520/">The Twilight Zone</a> 的 60 年重映，作为 59 年开播的科幻黑色故事集，可以说是当时的黑镜。有些东西真的是被时间冲不破的，或者说 60 年完全掀不起时间的波澜。我常常幻想，如果把黑白换成彩色影像，那当时和现在有什么区别？</li>
  <li>这周做了四次晚饭，还去了趟菜市场，人生巅峰，值得表扬 ☺️</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w49-collage.jpg" alt="w49-collage" /></p>

<h2 id="w48-1125---1201">W48 (11/25 - 12/01)</h2>

<ul>
  <li>I’m actively shifting my focus and time to daily life in terms of work life balance, but apparently I’m leaning over so much that I lost my balance, particularly the morning time. I just keep wondering is it worth it? To sacrifice my high productivity for dog walking and cat feeding</li>
  <li>周二课堂上刚刚欣慰见到 Nikki 的进步，就发觉她好像大步迈进了青春期，各种斗志昂扬的不听话。连着三天我都忍不住生气，只能跟喜福报团取暖，互相安慰。</li>
  <li>这一周的兴奋被迪巴拉的神奇任意球承包了</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w48-collage.jpg" alt="w48-collage" /></p>

<h2 id="w47-1118---1124">W47 (11/18 - 11/24)</h2>

<ul>
  <li>最近工作很忙碌，准备了半年的项目，Mitch 下周要去给 CEO 做 demo。大家齐心协力赶进度，很期待下周的结果。</li>
  <li>这周来回路上还有散步的时间听完了 <a href="https://serialpodcast.org/season-one">Serial 第一季</a>。基本上讲了一个发生在 99 年，怎么看都像有冤情，但就是没有关键证据洗脱罪名的案件。这个播客帮忙采访回溯了当年的各种细节，2014 年播出也收获了很多新的反馈，狱中主角得以重新开启申诉。但是我翻到网站的最后更新2019年3月，州最高法院 4:3 驳回了重新审理的申诉，心里有点失落，真相在哪里？</li>
  <li>自从干了 Power of Now 的鸡汤，有意识的告诉自己（并且相信）在工作生活中向生活倾斜，周末也过的更加精彩。和喜福一起收拾屋子，去院子捡落叶，带 Nikki 出门玩，看球看剧，吃火锅，还一起做了个 wishlist 的项目，很开心。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w47-who-is-eating-mud.jpg" alt="w47-who-is-eating-mud" /></p>

<h2 id="w46-1111---1117">W46 (11/11 - 11/17)</h2>

<ul>
  <li>Nikki 迎来了她狗生的第一场大雪，喜出望外，到各处的洁白无痕的雪堆中蹦迪。周二带她去上了第二节课，深深地感受到做熊孩子家长的无奈，已经深呼吸的耐心在课程后半段消失殆尽，信好有喜福在旁边接手救场。回来的路上不断反思，貌似在狗狗教育的上只有不进则退，不用“正确”的方式就几乎就在养成“错误”。调整好心态，继续粗发。</li>
  <li>周四是公司 eng offsite，上午一直在认真 social，嘘寒问暖搞的我口干舌燥。中午很意外地碰到一堆坐在角落吃饭的朋友，开始互相吐槽活动的无聊，成立完自闭小组后果断趁机以团队活动为由早早离场。</li>
  <li>周五是 31 岁生日，正赶上我们组团建，大家去扔斧子，然后给我和 Stephen 一起过了生日。晚上照例和喜福吃饭庆祝，很平和很美好。回想 30 岁时候，自己好像在痛苦思索寻找一个不知道问题的答案，现在已经很平静接受 31 岁的现实。突然觉着自己很傻逼，哪里是时间给我什么触动呢，不过是愚蠢的对数字的敏感罢了。</li>
  <li>Re-watch the <a href="https://movie.douban.com/subject/1291839/">Blade Runner</a> based on the story setting, in Nov 2019.</li>
  <li>Do our homework and book the trip to Cancun during Christmas time.</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w46-collage.jpg" alt="w46-collage" /></p>

<h2 id="w45-1104---1110">W45 (11/04 - 11/10)</h2>

<ul>
  <li>跟爸妈不舍告别，互以眼泪相赠，期待明年再相逢。</li>
  <li>日子又回到从前的状态，遛狗喂猫，认真工作，打球，看电影看比赛，但是我能感受到自己心态的变化。我相信我在变耐心，有意识的告诉自己不被时间影响，不因未来而焦虑。</li>
  <li>第一次带 Nikki 去上课，发现要学的好多呀。老师发了一本四五百页的讲义，课后还要温习和练习。为了狗子，这门课我不能弃。</li>
  <li>周末去看了 <a href="https://movie.douban.com/subject/27119724/">Joker</a>，没有让我失望，很期待今年 Joaquin Phoenix 会得奖。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w45-collage.jpg" alt="w45-collage" /></p>

<h2 id="w44-1028---1103">W44 (10/28 - 11/03)</h2>

<ul>
  <li>这周的节奏很稳定，白天认真工作，晚上吃饭打麻将。爸妈来玩的最后一周了，一个月的时间过得飞快。</li>
  <li>一周的阴雨绵绵，基本扫清了树上剩余的叶子，算是对这美丽的季节做了告别。今年的秋天有很多难忘的回忆，感谢大自然的美好。</li>
  <li>喜福的 PR 面试通过，这两周会拿到枫叶卡，一切顺利 ✌️</li>
  <li>在同事的带领下，第一次尝试了 pumpkin carving 🎃，比我预想的要有趣。我发现手工是能让我进入平静状态的。因为步骤简单，所以容易达到专注；因为行动大过思考，所以容易进入摒弃思考的专注状态。按照 The Power of Now 的理念，这就是人们想要的平静。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w44-collage.jpg" alt="w44-collage" /></p>

<h2 id="w43-1021---1027">W43 (10/21 - 10/27)</h2>

<ul>
  <li>Keep reading <a href="https://www.goodreads.com/book/show/6708.The_Power_of_Now">The Power of Now</a>
    <ul>
      <li>I got blown away by the main idea that “you get into presence by watching the mind”, so simple but so powerful. This is the first time that I read a spiritual book, which makes me surprised and suspicious at the same time. You can never prove it scientifically, but you can just follow the angle it provides and reflect it in your mind. I like it so far.</li>
    </ul>
  </li>
  <li>不管工作上多少事情，每天下班基本都切断了联系，享受跟爸妈在一起的时光。周中一起打麻将，周末去逛了 Niagara Fall。</li>
  <li>本来的打算是今年不买衣服，希望自己不断减少外在带来的满足感。但是喜福质问我这不是长久之计，这里的关系不应是切断，而是保持在一个稳定的低需求上。我设想了下理想的状况：所有的衣服都有最简单的颜色样式，舒服质量好，每天打开衣柜让我不花一点时间思考。周末随大家去商场买买买，搞了一堆无差别内衣裤，希望一点点迁移到外衣裤上。</li>
  <li>Nikki 长大了，开始练习一嘴叼俩球了…赵四也成熟了，继承了家里的传统，看热闹打麻将。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w43-collage.jpg" alt="w43-collage" /></p>

<h2 id="w42-1014---1020">W42 (10/14 - 10/20)</h2>

<p>这一周一直在路上，跟喜福带着爸妈东部之旅</p>

<ul>
  <li>10.12 - 10.14 Kingston</li>
  <li>10.15 - 10.17 Montreal</li>
  <li>10.18 - 10.19 Ottawa</li>
</ul>

<p>我一直很喜欢秋天，肃穆，萧瑟，每天五点钟都像星期日的晚霞，不自觉地怅然若失。来加拿大第三年，之前只在路上偶尔感叹秋天的颜色，转眼就入了冬。今年走出去，发现秋天并不短暂，只是我从未认真寻找。</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w42-collage.jpg" alt="w42-collage" /></p>

<h2 id="w41-1007---1013">W41 (10/07 - 10/13)</h2>

<ul>
  <li>Attend <a href="https://www.speakerlabs.ca/">Speaker Labs</a>. In addition to the public speaking skills, there is one takeaway particularly for me
    <ul>
      <li>No matter how much effort I put into ignoring other people’s opinion, I should admit, I do care. That’s one source of truth which makes me anxious, uncomfortable and not happy.</li>
      <li>It’s not wrong to care about other people’s opinions, which is exactly how we gain effective feedback from the world. However, the most difficult part is to show yourself to the world, be exposed, be vulnerable, and make the first step.</li>
    </ul>
  </li>
  <li>Start reading <a href="https://www.goodreads.com/book/show/6708.The_Power_of_Now">The Power of Now</a>
    <ul>
      <li>An exercise: Take any routine activity that normally is only a means to an end and give it your fullest attention, so that it becomes an end in itself. For example, every time you walk up and down the stairs in your house or place of work, pay close attention to every step, every movement, even your breathing. Be totally present.</li>
    </ul>
  </li>
  <li>周末把赵四和 Nikki 送走，跟喜福和爸妈开启一周的加东之旅。周末在 Kingston，没人的湖滨小镇，欣赏秋色。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w41-collage.jpg" alt="w41-collage" /></p>

<h2 id="w40-0930---1006">W40 (09/30 - 10/06)</h2>

<ul>
  <li>想起一年前这个时候还是独自生活，现在有了喜福，赵四，Nikki，加上爸妈最近来访，时间完全被炸开了。很难再找到一整块安静自在的时间，哪怕去浪费。我希望这会是生活中好的变化，准确来说，我需要更好的适应让它变成好的变化。暂时想到这么几点：下班不再为工作烦心；跟喜欢的人（🐱🐶）不要在意时间的得失；接受属于自己的时间多数都是琐碎的。</li>
  <li>这周的主题是每天陪爸妈大吃大喝，逮着好天气就去公园和 Trail 遛狗散步。跟喜福一起订了下下周出行的路线和酒店，非常期待。周末一起来公司打乒乓，没想到俩人竟然对这玩意感兴趣</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w40-collage.jpg" alt="w40-collage" /></p>

<h2 id="w39-0923---0929">W39 (09/23 - 09/29)</h2>

<ul>
  <li>每周的工作已有了范式。面对干不完的活，周一周二三都自带鸡血，周四开始彷徨，周五认真划水。没有太多精力回来继续之前的学习。</li>
  <li>爸妈周五晚上到达，一路奔波我都在担心出差错，但是很好，一切顺利。周末很开心，陪着他们四处闲逛。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w39-dancing-pa-ma.gif" alt="w39-dancing-pa-ma" /></p>

<h2 id="w38-0916---0922">W38 (09/16 - 09/22)</h2>

<ul>
  <li>这周没写代码，基本都在开会，讨论，写文档。比我想象中的轻松。</li>
  <li>喜福去温哥华出差，我每天下午在家办公伺候主子和狗子。与狗子斗智斗勇，好几次被搞的神烦。不断告诫自己要有耐心，狗子的表现基本是我脾气的投影</li>
  <li>周末一起带狗子去 Waterloo Park 转了一圈，其实也只公园一角。每天在家风风火火巡天入地，来了大草原就咩咩找妈妈。开玩笑，狗子请起，来嗨！</li>
  <li>Podcasts sharing
    <ul>
      <li><a href="https://dissectpodcast.com/2016/08/25/s1e2-good-kid-m-a-a-d-city/">S1E2 – good kid, m.A.A.d. city – dissect</a></li>
      <li><a href="https://30for30podcasts.com/episodes/a-queen-of-sorts/">A Queen Of Sorts - 30 for 30 Podcasts</a></li>
    </ul>
  </li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w38-cat-dog-collage.jpg" alt="w38-cat-dog-collage" /></p>

<h2 id="w37-0909---0915">W37 (09/09 - 09/15)</h2>

<ul>
  <li>周一是赵四一周岁生日！你真是越来越招人喜欢，尤其是狗子来了咱们家之后。祝你保持对这个世界的冷漠，永远年轻，永远无所事事。</li>
  <li>周二告别了魏哥，Amy 和 Molly，虽然早有准备，但还是会觉着生活断了根线。有缘再见啦！</li>
  <li>Go to St. Louis for StrangeLoop 2019. There are three talks that I really like
    <ul>
      <li><a href="https://www.youtube.com/watch?v=g1ib43q3uXQ&amp;feature=youtu.be">How to teach programming (and other things) - Felienne Hermans</a> It brings up an interesting idea that people prefer “exploration and self-taught” over “explanation and exercise” only in computer science, which worths us a second thoughts.</li>
      <li><a href="https://www.youtube.com/watch?v=ItASl4SdPO0">Towards an open and Reason(ML)able web - Parker Ziegler</a> Great intro to ReasonML. I’ve got more interest in OCaml now.</li>
      <li><a href="https://www.youtube.com/watch?v=JMZLBB_BFNg">Parser Parser Combinators for Program Transformation” by Rijnard van Tonder</a> Try this fancy tool for program transformation <a href="https://comby.live/">comby.live</a></li>
    </ul>
  </li>
  <li>去参加这个会议的私心在于能跟表格团聚。四年半不见，还是一如既往的舒服。最后一晚在 Bailey’s Range 喝的飞起，开心。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w37-strange-loop.jpg" alt="w37-strange-loop" /></p>

<h2 id="w36-0902---0908">W36 (09/02 - 09/08)</h2>

<ul>
  <li>Finish <a href="https://github.com/rust-lang/rustlings?ref=hackr.io">rustlings</a> and start reading <a href="https://rust-unofficial.github.io/too-many-lists">Too Many Lists</a>.</li>
  <li>Teach Nikki the second command, “d-o-w-n”.</li>
  <li>看了很多精彩比赛，男篮世界杯，F1 蒙扎，美网。印象最深的还是我国面对逆波兰了，疼啊疼。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w36-anjing.jpg" alt="w36-anjing" /></p>

<h2 id="w35-0826---0901">W35 (08/26 - 09/01)</h2>

<ul>
  <li>Get a basic idea on how <a href="http://mruby.org/">MRuby</a> works. Such a fun experience.</li>
  <li>Read a chapter of Super Thinking on decision making. I love the reasoning about disadvantages of pro-con list, that the cost-benefit analysis comes into play. One new thing I learnt is the <a href="https://www.wikiwand.com/en/Le_Chatelier%27s_principle">Le Chatelier’s principle</a>, aka The Equilibrium Law or homeostasis, which roughly means “system always kicks back (in some situation)”. Neat.</li>
  <li>超级开心喜福一次就通过了路试，终于结束我们互相看不顺眼的学车之旅了 🎉</li>
  <li>这个 Labour Day 长周末主要是看比赛和伺候狗子。Nikki is our brand new $2000 alarm, organic. 六点半的阳光，总能带给我希望，砥砺前行 😐</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w35-a-day-of-nikki.jpg" alt="w35-a-day-of-nikki" /></p>

<h2 id="w34-0819---0825">W34 (08/19 - 08/25)</h2>

<ul>
  <li>这周的工作，一天团建，三天 Hackday，以组织的名义认真划水。</li>
  <li>养狗第一周，我和喜福都是精力被榨干。六点半起，遛狗喂猫，不想上班。什么“从今天起，砍柴喂马，春暖花开”都是骗人的。</li>
  <li>爸妈的签证第三次申请，几近曲折，竟然有发了递签信又收回的时候，这周终于过了 ✅</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w34-nikki-at-peace.gif" alt="w34-nikki-at-peace" /></p>

<h2 id="w33-0812---0818">W33 (08/12 - 08/18)</h2>

<ul>
  <li>Work-wise, catch up after vacation and start looking into how <a href="https://github.com/artichoke/artichoke">Artichoke</a> works, which is a project on compiling mruby into Web Assembly. After reading the Go book and Rust book, finally, I start coding in C 😇</li>
  <li>Pick up our new home member, Nikki, who is a puppy girl of English type golden retriever.</li>
  <li>利用每天的失眠，看完了毛姆的<a href="https://book.douban.com/subject/26803714/">人性的枷锁</a>。主人公的故事大概在三十岁戛然而止，而我正好在这个年纪捡起这本书。看到了好多我心中的疑虑，关于人生的意义书中也给出了明确的答案。我没法认可或是怀疑，因为最终也都是要自己一点点寻找。期待下一次重读。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w33-nikki.jpg" alt="w33-nikki" /></p>

<h2 id="w31-32-0729---0811-vacation">W31-32 (07/29 - 08/11) Vacation</h2>

<p>一年一度的旅行终于到来。今年的主题是趁着下一代来临前最后一聚。地点选在温哥华，维多利亚和班芙。史称加西之旅。</p>

<p>虽然旅途是 7.31（周三）出发，但是因为周一周二公司年会，我懒得飞来飞去选了远程参加，所以实际上，我之前的周末就开始放飞自我了。擦擦 PS 的灰，买了 Fifa19 和 Call of Duty: WWII；和朋友玩 VR，吃日料，玩牌，逛公园；跟喜福吃火锅看综艺；开始读 Good Math 和人性的枷锁。好久没这么轻松了。最直接的感受是，这几天早上可以神清气爽自然醒，让我怀疑是不是脑子放下了工作就少去了紧张和压力。周二收拾行李，把赵四送走，开始旅程。</p>

<p>（写不动游记，简单记些流水好了）</p>

<ul>
  <li>7.31 - 抵达温哥华。午餐 Marutama 拉面，入住 Airbnb，到附近的 Jericho Beach 闲逛。晚上 Gyukaku 烤肉，到 Lighthouse Park 徒步，赶到海边发现太阳已经下山。</li>
  <li>8.1 - 早餐 JJ Bean，到 Tsawwassen 轮渡去 Victoria。下午 Buchart Garden，Fishhook 午餐，然后 Downtown 闲逛。晚上回来已经夜里，在宽窄巷子串串烧烤小龙虾。</li>
  <li>8.2 - A&amp;W 早餐，在家 Mario Party。中午 Lynn Canyon 徒步，然后 English Bay, Stanley Park 骑行。晚上海鲜大餐。</li>
  <li>8.3 - 中午郝记羊肉，然后 Flyover Canada，Gastown。晚上 Kokoro 日本拉面，然后在 Granville Island 看了烟花。</li>
  <li>8.4 - 早起飞去卡尔加里，中午在 OMO 日本铁板烧，开去班芙。Airbnb 超级赞，下午去 Banff Gondola，上去第一眼有点惊到我了。幅员辽阔，心旷神怡。晚上在 The Park 西餐。</li>
  <li>8.5 - Lake Louise 划船，应该是本次行程我个人眼里的高光了，像是划进了画一样。之后是梦莲湖。晚上在家 BBQ，德州。</li>
  <li>8.6 - 中午在 Tavern Pizza，然后 Fairmont 酒店下午茶，之后是 Emerald Lake。晚上回来去 High Roller 打了保龄，之后部队火锅，继续德州。</li>
  <li>8.7 - 早餐 Wild Flouver，之后开到 Peyto Lake 徒步，欣赏景色。一路美景开到 Columbia Icefield，体验 Anthabasca 冰川。晚上麦当劳，收拾行李，打牌。</li>
  <li>8.8 - 告别班芙，开回卡尔加里。逛了 Costco，在 Popeye 吃午餐。早早到机场，在候机口德州。五点飞回温哥华，晚上正宗小郡肝串串香。</li>
  <li>8.9 - 中午 Marutama 拉面，然后到渔人码头，离港观鲸。一路颠簸，好在看到了很多 Orca 和傻呵呵的海狮。回程路上听到了司机 Trevor 的传奇故事，买了他的 Natural Hy。晚上海鲜加部队火锅，最后一次德州。</li>
  <li>8.10 - 早餐 JJ Bean，十一点半拥抱，散伙。我和喜福飞机延误，十一点才飞回多伦多。</li>
  <li>8.11 - 和大舅视频，看了英超第一轮曼联 4:0 切尔西。下午出门和 Amy 魏哥午餐，接赵四和三哥回家。一起看乐队夏天最后一集。晚上和老妈视频，给大家算本次行程开销。</li>
</ul>

<p>视频 <a href="https://www.youtube.com/watch?v=GZPkZxGW_Ts&amp;feature=youtu.be">YouTube</a>, <a href="https://v.youku.com/v_show/id_XNDMyMDQ5MTk3Mg==.html">Youku</a></p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/GZPkZxGW_Ts" frameborder="0" allow="accelerometer; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<h2 id="w30-0722---0728">W30 (07/22 - 07/28)</h2>

<ul>
  <li>Good working week, by putting my most focus on wrapping up work before my two weeks vacation 😍 We made a few great improvements over our DDD-ish Rails app.</li>
  <li>Watch <a href="https://movie.douban.com/subject/1292215/">Amelie</a> again at Princess Original, still fascinated by its unrestrained delight.</li>
  <li>Start of my vacation with Fifa 19 and Call of Duty WWII</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w30-mr-bernard.jpg" alt="w30-mr-bernard" /></p>

<p>^Hectic Monday</p>

<h2 id="w29-0715---0721">W29 (07/15 - 07/21)</h2>

<ul>
  <li>Finish reading <a href="https://book.douban.com/subject/30396640/">WebAssembly 标准入门</a>, a good intro for WASM spec.</li>
  <li>Go to Leslie Ting’s <a href="https://stratfordsummermusic.ca/artist.php?id=214">Speculation</a> at Stratford with friends. I enjoy the <a href="https://www.wikiwand.com/en/4%E2%80%B233%E2%80%B3">4′33</a> part, which brings me to a meditation state.</li>
  <li>和喜福看了两部王竞导演的电影，<a href="https://movie.douban.com/subject/10537853/">万箭穿心</a>和<a href="https://movie.douban.com/subject/2363843/">一年到头</a>，真是纠结拧巴，让人无力张口辩驳（所以才有了天注定吗？）</li>
  <li>Enjoy the nice weekend with strawberry picking and VR playing.</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w29-collage.jpg" alt="w29-collage" /></p>

<h2 id="w28-0708---0714">W28 (07/08 - 07/14)</h2>

<ul>
  <li>Re-read <em>Programming WebAssembly with Rust</em>. After getting to know Rust and having a general idea about WebAssembly, it makes much more sense to me now, especially that I follow the code exercise to write some raw wat this time <a href="https://github.com/ifyouseewendy/wasm-rust-playground">ifyouseewendy/wasm-rust-playground</a></li>
  <li>Have a talk with Syrus, which definitely makes me believe recording this weekly log is worthwhile. I’m glad that we build up a connection with the wasmer team.</li>
  <li>Play a co-op PS game <a href="https://www.ea.com/games/a-way-out">A Way Out</a> with Jasmine, which is pretty fun.</li>
  <li>Watch <a href="https://movie.douban.com/subject/1308755/">Shaun of the Dead</a> on the big screen at Princess Original 😍. This might be my 8th time watching it. Once every year.</li>
  <li>Watch the sensational final between Djokovic and Federer at Wimbledon. Such a weird game that Federer outplayed Djokovic at every metric on statistics, but lost due to few big points.</li>
  <li>Ride to the company using my 🚲!!! (second time since I bought it three months ago, good job)</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w28-collage.jpg" alt="w28-collage" /></p>

<h2 id="w27-0701---0707">W27 (07/01 - 07/07)</h2>

<ul>
  <li>Finish reading <a href="https://doc.rust-lang.org/">The Rust Programming Language</a>. I cannot say I fully understand ownership and lifetime, but I think I’ve grasped the idea of it. Looking forward to jumping into the wild world.</li>
  <li>I like this article <a href="https://blog.cleancoder.com/uncle-bob/2019/06/16/ObjectsAndDataStructures.html">Classes vs. Data Structures</a> by Uncle Bob articulating the subtle difference between these two. I figured this idea out when learning Haskell out last year, which gives me another orthogonal thinking against OO in terms of data and operation. In short, “An Object is a set of functions that operate upon implied data elements. A Data Structure is a set of data elements operated upon by implied functions”.</li>
  <li>Remember the smile of Brad</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w27-brad.jpg" alt="w27-brad" /></p>

<h2 id="w26-0624---0630">W26 (06/24 - 06/30)</h2>

<ul>
  <li>Read an hour <a href="https://doc.rust-lang.org/">The Rust Programming Language</a> everyday through chapter 15. I’ll finish next week, but I need more practice.</li>
  <li>Keep implementing <a href="https://github.com/kanaka/mal">https://github.com/kanaka/mal</a>. I’m at Step 3 now.</li>
  <li>Finish watching <a href="https://movie.douban.com/subject/30465634/">Formula 1: Drive to Survive</a>. Such exciting documentary over the F1 2018 season. It shows me another angle to think about the game, especially for the racers struggling on the edge. The problem they are trying to solve is interesting, how to improve from top 15 to top 10. We also watched the Austrian Grand Prix. Such a crazy win for Max Verstappen.</li>
  <li>看了<a href="https://movie.douban.com/subject/27059130/">大佛普拉斯</a>，嵌套着画外人讲画内人的黑色幽默，好看的</li>
  <li>Trail at Shade’s Mills Conservation Area</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w26-collage.jpg" alt="w26-collage" /></p>

<h2 id="w25-0617---0623">W25 (06/17 - 06/23)</h2>

<ul>
  <li>Keep my read over <a href="https://doc.rust-lang.org/">The Rust Programming Language</a>, with practice at work.</li>
  <li>Start playing around <a href="https://github.com/kanaka/mal">https://github.com/kanaka/mal</a>, which is a practice for using different language to implement a simple Lisp. I’m working on the Ruby version now, then I’ll try the Rust one.</li>
  <li>Finish the fourth and fifth chapter of <em>Quiet</em></li>
  <li>Celebrate our first 💒 anniversary, taking a photo in the morning, having lunch at Watami, and going hiking with friends at Knutz Park.</li>
  <li>Set up our BBQ grill, and have a perfect night</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w25-anniversary.jpg" alt="w25-anniversary" /></p>

<h2 id="w24-0610---0616">W24 (06/10 - 06/16)</h2>

<ul>
  <li>Restart reading through <a href="https://doc.rust-lang.org/">The Rust Programming Language</a>. Some ideas start to make more sense to me after the recent Go learning, eg slice, rune and reference.</li>
  <li>Watch Raptors winning the title with Jasmine and David at Apollo. This might be the season I watch the most games. Such an intense journey. Besides that, finally, Sarri joined Juventus 😳 and AD joined Lakers 😊</li>
  <li>After two months searching, we finally found a favourite breeder and sent the deposit for having a female English type Golden Retriever at mid Aug. Excited.</li>
  <li>Submit the third round of application for my parents’ visitor VISA 🤞</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w24-raptors.jpg" alt="w24-raptors" /></p>

<h2 id="w23-0603---0609">W23 (06/03 - 06/09)</h2>

<ul>
  <li>Keep reading <a href="https://www.gopl.io/">The Go Programming Language</a> and finish first half of the book (Chapter 7 Interface)</li>
  <li><a href="https://nav.al/how-to-get-rich">Naval - How to Get Rich</a> This is another podcast I enjoy a lot, which is not mainly about finance, but different thoughts and angles to see the world.</li>
  <li>Finish the show <a href="https://movie.douban.com/subject/27098632/">Chernobyl</a>, a cold dark reality mixing with special politic circumstance. I can definitely not sense the similarity with my dear god country.</li>
  <li>Enjoy the French Open semi-final, at which Djokovic lost to Thiem by 5:7 at the fifth set. Sad.</li>
  <li>Have a great trip to <a href="https://www.google.ca/maps/place/African+Lion+Safari/@43.3409762,-80.1800999,17z/data=!3m1!4b1!4m5!3m4!1s0x882c7f322d46f773:0x7c093dc107321082!8m2!3d43.3409762!4d-80.1800999?hl=en">African Lion Safari</a> at the weekend. Simba is truly a big cat.</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w23-nick.jpg" alt="w23-nick" /></p>

<h2 id="w22-0527---0602">W22 (05/27 - 06/02)</h2>

<ul>
  <li>Work wise, I feel pretty good on spending one hour reading in the morning everyday. After reading through ¼ of <a href="https://blog.arkency.com/domain-driven-rails/">Domain Driven Rails</a>, (which is a pretty good book, taking Rails as example to talk about DDD), I make it a pause consciously as I need more experience (or mistakes) to digest better. To put it into practice, I start building our new service using <a href="http://hanamirb.org/">Hanami</a>, which I’ve got a pretty positive feeling for being our DDD choice. Other than that, finish reading the first two chapters of <a href="https://www.gopl.io/">GOPL</a>.</li>
  <li>I really enjoy this episode of Tim Ferris Show that I listened twice. <a href="https://tim.blog/2019/05/07/ramit-sethi/">Ramit Sethi — Automating Finances, Negotiating Prenups, Disagreeing with Tim, and More (#371)</a></li>
  <li>After two months learning and researching, I finally set up my FIRE account on May 29th, 2019 🎉</li>
  <li>Such a relief after visiting Nadine and Casey.</li>
  <li>The best weekend this year, for pushing trivial stuff forward proactively, reading books, watching sports (Liverpool 2:0 Tottenham Hotspur, Raptors 1:1 Warriors), having hotpot, watching shows, enjoying the great weather, and wasting time together with Jasmine. Everything is perfect.</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w22-just-dance.gif" alt="w22-just-dance" /></p>

<h2 id="w21-0520---0526">W21 (05/20 - 05/26)</h2>

<ul>
  <li>Finish reading <a href="https://www.infoq.com/minibooks/domain-driven-design-quickly">Domain-driven Design Quick</a> last week and concluded some <a href="http://blog.ifyouseewendy.com/blog/2019/05/27/notes-on-ddd/">notes</a> here. It makes a lot of sense to me on connecting the dots I’ve collected over time. The book is also a great one as an intro which helps me grash the main idea of DDD. The next step is to gain more insight in practice.</li>
  <li>GoT 潦草终结，没等到我的夜王反推大陆，难过。看完了<a href="https://movie.douban.com/subject/26339248/">一拳超人</a>，超级喜欢，见识了终极大招：Consecutive Normal Punch!</li>
  <li>Finally, what makes my week?</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w21-bounce-smile.gif" alt="w21-bounce-smile.gif" /></p>

<h2 id="w20-0513---0519">W20 (05/13 - 05/19)</h2>

<ul>
  <li>Keep my reading on <em>Quiet</em></li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w20-nick.jpg" alt="w20-nick" /></p>

<h2 id="w19-0506---0512">W19 (05/06 - 05/12)</h2>

<ul>
  <li>Such a busy week, for being on call at work. I didn’t have much energy on pushing personal growth stuff.
However, it’s been a fantastic week for various sports games.</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w19-collage.jpeg" alt="w19-collage" /></p>

<h2 id="w18-0429---05-05">W18 (04/29 - 05-05)</h2>

<ul>
  <li>Research on a few candidates on portfolios and start building <a href="https://quip.com/TCQjAdmOkJMR">My portfolio</a></li>
  <li>Visit Stratford to enjoy spring and celebrate Jasmine’s birthday</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w18-jasmine-birthday.jpg" alt="w18-jasmine-birthday" /></p>

<h2 id="w17-0422---0428">W17 (04/22 - 04/28)</h2>

<ul>
  <li>Start reading <a href="https://www.amazon.ca/Quiet-Power-Introverts-World-Talking/dp/0307352153/ref=sr_1_1?keywords=quiet&amp;qid=1555941549&amp;s=gateway&amp;sr=8-1">Quiet: The Power of Introverts in a World That Can’t Stop Talking</a>
    <ul>
      <li>Being an introvert has been a bittersweet journey for me. Hope this book could help know myself better. (Recommended by Mitch)</li>
    </ul>
  </li>
  <li>Start taking an online course on economics
    <ul>
      <li>薛兆丰的经济学课。作为 financial learning 的后续，本来已经开始读 Value Investing，但是发现好多普遍又根本的问题更吸引我。</li>
    </ul>
  </li>
  <li>Watch <a href="https://movie.douban.com/subject/26728669/">风中有朵雨做的云</a>
    <ul>
      <li>我很同意这个故事有“知音”体，人物关系复杂又随意，所以导演打乱了时间序是为了掩盖还是故作玄虚？我不是在乎。我喜欢这里边的人物，没有人让我出戏。最迷的还是光影，没机会去影院，但是在家就已经让我沉醉了。</li>
    </ul>
  </li>
  <li>Get my 🚲</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w17-bike.jpg" alt="w17-bike" /></p>

<h2 id="w16-0415---0421">W16 (04/15 - 04/21)</h2>

<ul>
  <li>Finish the first draft of my <a href="https://quip.com/RbITAH4Spbvt/Planning-investing">financial planning and investment</a></li>
  <li>Have a trip to Detroit with Jasmine
    <ul>
      <li>MOCA, DIA, Pistons vs Bucks game, Belle Isle</li>
    </ul>
  </li>
</ul>

<h2 id="w15-0408---0412">W15 (04/08 - 04/12)</h2>

<ul>
  <li>Listen to <a href="https://changelog.com/podcast/341?utm_medium=email&amp;utm_campaign=Weekly%20-%20Issue%20250&amp;utm_content=Weekly%20-%20Issue%20250+CID_3afe8cb9c4b1c3d53cfff50448829a21&amp;utm_source=changelog%20email&amp;utm_term=Wasmer%20is%20taking%20WebAssembly%20beyond%20the%20browser">Wasmer is taking WebAssembly beyond the browser</a>
    <ul>
      <li>Surprisingly find and listen to this new released podcast, which happens to match exactly with what we are working on.</li>
    </ul>
  </li>
  <li>Finish reading <a href="https://www.goodreads.com/book/show/23485557-the-value-of-simple?from_search=true">The Value of Simple</a>
    <ul>
      <li>A great to book to start one’s personal finance adventure, especially for Canadians. It’s to be noted that the author also provides a list of tools and book guides, which is super helpful.</li>
    </ul>
  </li>
  <li>Start my first <a href="https://quip.com/8agjAbpkTxTx/Monthly-Expense#TZHACANmrl0">Monthly Expense</a> review</li>
  <li>Research on <a href="https://quip.com/SsMFA531heag/Pay-back-mortgage-or-invest-in-bond">Pay back mortgage or invest in bond?</a> and discuss with friends</li>
  <li>House work to welcome spring</li>
</ul>

<h2 id="w14-0401---0405">W14 (04/01 - 04/05)</h2>

<ul>
  <li>Lost the basketball game in semi-final
    <ul>
      <li>继去年在半决赛一分惜败后，这次输了两分 😥</li>
    </ul>
  </li>
  <li>Watch <a href="https://movie.douban.com/subject/1294438/">Persona</a>
    <ul>
      <li>看过之后非常困惑，整个过程就是慢慢跟不上导演的节奏。即便如此，很多画面深刻地印在了我的脑海，回来的路上一直不断地回放。在豆瓣上看到了这篇影评我很赞同，基本上解释了我所有的疑问。即使单纯作为一遍散文来读，也是很有收获，<a href="https://movie.douban.com/review/1275074/">Persona (假面)：沉默的假面</a></li>
    </ul>
  </li>
  <li>Finish reading <a href="https://www.goodreads.com/book/show/23885906-wealthing-like-rabbits">Wealthing Like Rabbits</a>
    <ul>
      <li>It’s a good start for my personal financial learning. The examples in the book are really persuasive, which I appreciate the most. However, I don’t really agree with the saving part. I understand the fact that we should figure out what we truly need or what the money could buy us indeed, but what I infer from the part is kinda what the author tries to avoid, which is to sacrifice your living quality for future. Especially, to ask for used baby clothes from a friend implicitly sounds manipulative to me.</li>
    </ul>
  </li>
  <li>Finish the second chapter of <a href="https://interpreterbook.com/"><em>Writing An Interpreter In Go</em></a> for parsing techniques</li>
  <li>Skim over the <a href="https://www.goodreads.com/book/show/42977609-programming-webassembly-with-rust"><em>Programming WebAssembly with Rust</em></a>.
    <ul>
      <li>It’s an ok book that I put my main focus on WebAssembly even though half of the book are examples for using Rust to write WA modules. It gives me some context knowledge of WA, like how it’s developed over time and how it gets used inside and outside of the browser.</li>
    </ul>
  </li>
</ul>

<h2 id="w13-0325---0329">W13 (03/25 - 03/29)</h2>

<ul>
  <li>First glance at WebAssembly with my note <a href="https://quip.com/zFqEAHsgPhfs/From-Compiler-to-WebAssembly">From Compiler to WebAssembly</a>
    <ul>
      <li>Lin Clark’s <a href="https://hacks.mozilla.org/2017/02/a-cartoon-intro-to-webassembly/">A cartoon intro to WebAssembly</a> is such a good read</li>
      <li>Excited to see this happens to be an extension of my Go learning with <a href="https://interpreterbook.com/">Writing an interpreter in Golang</a></li>
    </ul>
  </li>
  <li>Start building my  <a href="https://quip.com/RpYkAB7LjzV6">Financial Knowledge Base</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Essential Difference Between OOP and FP]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2018/07/01/an-essential-difference-between-oop-and-fp/"/>
    <updated>2018-07-01T23:03:54-04:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2018/07/01/an-essential-difference-between-oop-and-fp</id>
    <content type="html"><![CDATA[<p>A few months ago, I told my friend that I was learning Haskell recently. After giving him
a quick introduction, he asked me an intuitive but hard question that I was not able to give
the answer, “What is the difference between OOP and FP?”.</p>

<p>I thought hard, I asked around and I took it on my way learning Haskell, but apparently there
are no easy answers, considering they usually appear at the opposite position on the spectrum
of programming paradgim.</p>

<p>Anyway, today when I was reviewing my notes for recapping type system in Haskell, the question
got popped up again. But this time, I think I’ve got an answer:</p>

<p>Other than the obvious language characteristics, <strong>the essential difference between OOP and FP
is how they structure values and operations</strong>. OOP groups values and operations together in the
objects, while FP separates values and operations apart strictly.</p>

<p>Seriously, is that an answer? I konw, it’s not perfect, but definitely helpful to myself. I’ll make
a detailed explanation.</p>

<h2 id="what-is-a-program">What is a program?</h2>

<p>We use programming languages to write programs, which can be considered as a series of calculations
executed in many stacks of control flows. It’s not hard to figure out that, in essence, a program is
about <strong>operating values</strong>.</p>

<p>As the definition for <em>turing complete</em> says, language is about <em>data-manipulation</em>.</p>

<blockquote>
  <p>In computability theory, a system of data-manipulation rules (such as a computer’s instruction set,
a programming language, or a cellular automaton) is said to be Turing complete or computationally
universal if it can be used to simulate any Turing machine.</p>
</blockquote>

<h2 id="what-is-a-value">What is a value?</h2>

<p><strong><em>The first question is what are basic values?</em></strong></p>

<p>No matter what language you are using, there must be</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">1
</span><span class="line">'c'
</span><span class="line">True # somehow boolean value can also be considered as a integer</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong><em>But what if I want to represent more compliated values?</em></strong></p>

<p>We use data structures:</p>

<ul>
  <li>List, <code>[1,2,3]</code>, a set of independent values</li>
  <li>Tuple, <code>(1,2,3)</code>, several values compound over each other as one value</li>
  <li>Tree, values structured with a purpose to be manipulated easily</li>
  <li>Dictionary? It seems like a combination for value and algorithm</li>
</ul>

<p><strong><em>Apparently, that’s not enough for us to carve the real world. What’s the ultimate way to represent data no matter how complicated it is?</em></strong></p>

<p>It depends on what mechanism a language supports. Here jumps in the discussion for difference between
OOP and FP language, which I’ll take Ruby and Haskell as examples.</p>

<p>In Ruby, we use class to model the real world problem and use objects to hold values, which we also call
it state in OO.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="rb"><span class="line"><span></span><span class="k">class</span> <span class="nc">Person</span>
</span><span class="line">  <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:age</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">person</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Di&quot;</span><span class="p">,</span> <span class="mi">18</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As we can see, class defines what pattern of data (<code>name</code> and <code>age</code>) we want to hold.
After initializing, an object will wrap the plain data <code>"Di"</code> and <code>18</code> together as a
whole new value.</p>

<p>In Haskell, we use type to model the real world values and everytime we create a customized type,
there will also come with a data constructor, which holds the values together.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span></span><span class="kr">data</span> <span class="kt">Person</span> <span class="ow">=</span> <span class="kt">Person</span> <span class="kt">String</span> <span class="kt">Integer</span>
</span><span class="line">
</span><span class="line"><span class="nf">person</span> <span class="ow">=</span> <span class="kt">Person</span> <span class="s">&quot;Di&quot;</span> <span class="mi">18</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As a summary, no matter how complicated the value is, we can always represent it by
applying this kind of mechanisms the language provides over and over again.</p>

<h2 id="how-to-operate-value">How to operate value?</h2>

<p>By rules, laws, or formulas. In another saying, methods or functions.</p>

<p>In Ruby, we define methods in class definition to empower the object to apply onto its states.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="rb"><span class="line"><span></span><span class="k">class</span> <span class="nc">Person</span>
</span><span class="line">  <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:age</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">gets_older</span><span class="p">;</span> <span class="n">age</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span> <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">person</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Bart&quot;</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>When we call <code>person.gets_older</code>, we’ll alter the <code>age</code> value by incrementing it by one. If we
have a peek into our memory, there will be data blobs like in below. Each object exists as
a bundle of values and operations.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span></span> <span class="o">+-----------------+</span>   <span class="o">+-----------------+</span>   <span class="o">+-----------------+</span>
</span><span class="line"> <span class="o">|</span><span class="n">_class_</span><span class="kt">:</span> <span class="kt">Person</span>  <span class="o">|</span>   <span class="o">|</span><span class="n">_class_</span><span class="kt">:</span> <span class="kt">Person</span>  <span class="o">|</span>   <span class="o">|</span><span class="n">_class_</span><span class="kt">:</span> <span class="kt">Person</span>  <span class="o">|</span>
</span><span class="line"> <span class="o">|</span>                 <span class="o">|</span>   <span class="o">|</span>                 <span class="o">|</span>   <span class="o">|</span>                 <span class="o">|</span>
</span><span class="line"> <span class="o">|</span><span class="n">name</span><span class="kt">:</span> <span class="s">&quot;Bart&quot;</span>     <span class="o">|</span>   <span class="o">|</span><span class="n">name</span><span class="kt">:</span> <span class="s">&quot;Lisa&quot;</span>     <span class="o">|</span>   <span class="o">|</span><span class="n">name</span><span class="kt">:</span> <span class="s">&quot;Maggie&quot;</span>   <span class="o">|</span>
</span><span class="line"> <span class="o">|</span><span class="n">age</span><span class="kt">:</span>  <span class="mi">10</span>         <span class="o">|</span>   <span class="o">|</span><span class="n">age</span><span class="kt">:</span>  <span class="mi">8</span>          <span class="o">|</span>   <span class="o">|</span><span class="n">age</span><span class="kt">:</span>  <span class="mi">1</span>          <span class="o">|</span>
</span><span class="line"> <span class="o">|</span>                 <span class="o">|</span>   <span class="o">|</span>                 <span class="o">|</span>   <span class="o">|</span>                 <span class="o">|</span>
</span><span class="line"> <span class="o">|#</span><span class="n">gets_older</span>      <span class="o">|</span>   <span class="o">|#</span><span class="n">gets_older</span>      <span class="o">|</span>   <span class="o">|#</span><span class="n">gets_older</span>      <span class="o">|</span>
</span><span class="line"> <span class="o">+-----------------+</span>   <span class="o">+-----------------+</span>   <span class="o">+-----------------+</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>However, in Haskell, we make use of functions to operate values, with limits put on their types.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span></span><span class="kr">data</span> <span class="kt">Person</span> <span class="ow">=</span> <span class="kt">Person</span> <span class="kt">String</span> <span class="kt">Integer</span>
</span><span class="line"><span class="nf">person</span> <span class="ow">=</span> <span class="kt">Person</span> <span class="s">&quot;Bart&quot;</span> <span class="mi">10</span>
</span><span class="line">
</span><span class="line"><span class="nf">getsOlder</span> <span class="ow">::</span> <span class="kt">Person</span> <span class="ow">-&gt;</span> <span class="kt">Person</span>
</span><span class="line"><span class="nf">getsOlder</span> <span class="p">(</span><span class="kt">Person</span> <span class="n">name</span> <span class="n">age</span><span class="p">)</span> <span class="ow">=</span> <span class="kt">Person</span> <span class="n">name</span> <span class="p">(</span><span class="n">age</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>When we call <code>getsOlder person</code>, we’ll create a new copy of person data with <code>age</code> incremented
by one, conforming to immutability. As a comparison, if we look into our memory, we’ll see what’s
in below.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span></span> <span class="o">+-----------------+</span>   <span class="o">+-----------------+</span>   <span class="o">+-----------------+</span>
</span><span class="line"> <span class="o">|</span><span class="n">_type_</span><span class="kt">:</span> <span class="kt">Person</span>   <span class="o">|</span>   <span class="o">|</span><span class="n">_type_</span><span class="kt">:</span> <span class="kt">Person</span>   <span class="o">|</span>   <span class="o">|</span><span class="n">_type_</span><span class="kt">:</span> <span class="kt">Person</span>   <span class="o">|</span>
</span><span class="line"> <span class="o">|</span>                 <span class="o">|</span>   <span class="o">|</span>                 <span class="o">|</span>   <span class="o">|</span>                 <span class="o">|</span>
</span><span class="line"> <span class="o">|</span><span class="n">name</span><span class="kt">:</span> <span class="s">&quot;Bart&quot;</span>     <span class="o">|</span>   <span class="o">|</span><span class="n">name</span><span class="kt">:</span> <span class="s">&quot;Lisa&quot;</span>     <span class="o">|</span>   <span class="o">|</span><span class="n">name</span><span class="kt">:</span> <span class="s">&quot;Maggie&quot;</span>   <span class="o">|</span>
</span><span class="line"> <span class="o">|</span><span class="n">age</span><span class="kt">:</span>  <span class="mi">10</span>         <span class="o">|</span>   <span class="o">|</span><span class="n">age</span><span class="kt">:</span> <span class="mi">8</span>           <span class="o">|</span>   <span class="o">|</span><span class="n">age</span><span class="kt">:</span> <span class="mi">1</span>           <span class="o">|</span>
</span><span class="line"> <span class="o">+-----------------+</span>   <span class="o">+-----------------+</span>   <span class="o">+-----------------+</span>
</span><span class="line">
</span><span class="line"><span class="o">+---------------------------------------------------------------+</span>
</span><span class="line">
</span><span class="line"> <span class="o">+---------------------+</span>
</span><span class="line"> <span class="o">|</span><span class="n">_type_</span><span class="kt">:</span> <span class="kt">Function</span>     <span class="o">|</span>
</span><span class="line"> <span class="o">|</span>                     <span class="o">|</span>
</span><span class="line"> <span class="o">|</span><span class="n">name</span><span class="kt">:</span> <span class="n">getsOlder</span>      <span class="o">|</span>
</span><span class="line"> <span class="o">|</span><span class="n">sig</span><span class="kt">:</span> <span class="kt">Person</span> <span class="ow">-&gt;</span> <span class="kt">Person</span><span class="o">|</span>
</span><span class="line"> <span class="o">+---------------------+</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="wrap-up">Wrap up</h2>

<p>As a conclusion, I think OOP and FP take a different approach to operating values. OOP packs up
values and permitted operations together via objects, wheras FP separates values and operations
apart strictly.</p>

<p><em>PS. How does polymorphism fit in the discussion?</em></p>

<p>We can keep following the imaginary memory snapshot above. In OOP, it’ll work as long as
objects repond to the same method, whereas in Haskell, we can loose the function to allow
more general types passed in.</p>

<p>In Ruby, it’s about duck typing.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="rb"><span class="line"><span></span><span class="k">class</span> <span class="nc">Person</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">gets_older</span><span class="p">;</span> <span class="n">age</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span> <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Duck</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">gets_older</span><span class="p">;</span> <span class="n">age</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span> <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">as_time_goes_by</span><span class="p">(</span><span class="n">a_living</span><span class="p">)</span>
</span><span class="line">  <span class="n">a_living</span><span class="o">.</span><span class="n">gets_older</span> <span class="c1"># no matter it&#39;s a person or a duck</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In Haskell, we use type to represent a set of values and typeclass to enforce rules on what kind
of operations can be applied onto the type (the set of values).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span></span><span class="kr">data</span> <span class="kt">Person</span> <span class="ow">=</span> <span class="kt">Person</span> <span class="kt">String</span> <span class="kt">Integer</span> <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Show</span><span class="p">)</span>
</span><span class="line"><span class="kr">data</span> <span class="kt">Duck</span> <span class="ow">=</span> <span class="kt">Duck</span> <span class="kt">Integer</span> <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Show</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kr">class</span> <span class="kt">Living</span> <span class="n">a</span> <span class="kr">where</span>
</span><span class="line">  <span class="n">getsOlder</span> <span class="ow">::</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">a</span>
</span><span class="line">
</span><span class="line"><span class="kr">instance</span> <span class="kt">Living</span> <span class="kt">Person</span> <span class="kr">where</span>
</span><span class="line">  <span class="n">getsOlder</span> <span class="p">(</span><span class="kt">Person</span> <span class="n">name</span> <span class="n">age</span><span class="p">)</span> <span class="ow">=</span> <span class="kt">Person</span> <span class="n">name</span> <span class="p">(</span><span class="n">age</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kr">instance</span> <span class="kt">Living</span> <span class="kt">Duck</span> <span class="kr">where</span>
</span><span class="line">  <span class="n">getsOlder</span> <span class="p">(</span><span class="kt">Duck</span> <span class="n">age</span><span class="p">)</span> <span class="ow">=</span> <span class="kt">Duck</span> <span class="p">(</span><span class="n">age</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nf">asTimeGoesBy</span> <span class="ow">::</span> <span class="kt">Living</span> <span class="n">a</span> <span class="ow">=&gt;</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">a</span>
</span><span class="line"><span class="nf">asTimeGoesBy</span> <span class="n">living</span> <span class="ow">=</span> <span class="n">getsOlder</span> <span class="n">living</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Peep at Types in Haskell]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2018/04/21/a-peep-at-types-in-haskell/"/>
    <updated>2018-04-21T10:15:19-04:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2018/04/21/a-peep-at-types-in-haskell</id>
    <content type="html"><![CDATA[<p>Functional programming is a shining and trending topic on the other side of the spectrum of programming, which has been
proven to be a better choice in some specific area of problem solving. I could still remember the mind blowing of various
ideas and thoughts in FP when I first learnt Elm two years ago. It just shows me yet another possibility of thinking
after being immersed in the world I took for granted, all kinds of the imperative languages, C, Java, Ruby, Javascript.
It’s a whole new world.</p>

<p>Recently, I picked up the FP learning by taking part in a book reading club in the company I work, for
<a href="http://haskellbook.com/">“Haskell Programming from first principles”</a>. My girlfriend was teasing me that I’ve never
showed up in a Haskell class at the university, why the heck you talk about it all the time now. I should admit that I might
still feel bored if I could jump back in time. It’s just I don’t have the mind power or experience to think about the
problem in a big picture at that time. Anyway, I’m glad it’s never too late. It’s been two months for the fun journey.
I want to share some thoughts on it.</p>

<p>I just finished reading about algebraic data types in Haskell. Basically, it’s done talking about type systems in the
book. By getting to know types in Haskell, I questioned about why type exists all the time. I cannot help myself
thinking about how would I solve the same problem in OO world, like what is the difference about how data is
structured between OO and FP. Gradually, keeping punching my head, I feel like I start to see something through. I start
to realize that, <strong>programming is all about data and operations</strong>. Different paradigms, OO and FP, are two different
approaches. Under the big picture, languages choose to implement different characteristics, like
inheritance, encapsulation, polymorphism, prototype, immutability, static and dynamic types, etc, to reach a same goal,
to represent and manipulate data in an effective way.</p>

<p>Since it’s all about data, what is data? I consider it as a general name for all possible values, like primitive ones, <code>1, 'a',
True</code>, which are usually bulit into the language, like a list <code>[]</code> and a map <code>{}</code>, working as a group of values following some basic
simple rules. To better fit the language into modeling various realistic problems, OO introduces class, which packs up the states
(data) and methods (operation) together (In some sense, class is a set of data and rules applied onto the data). In the meantime, FP
provides a different path, with type as a representation of a set of data and function (operation) as a way to transform data. For
example, in OO <code>obj</code> has a state <code>value</code>, and <code>obj.foo</code> might migrate the state. In FP, we just do <code>foo(value)</code>
directly. (The limitation or visibility of the operation comes from encapsulation in OO, but type matching in FP)</p>

<p>So what is type? Type, in short, is a set of values (data). For example, <code>Int8</code> is a built-in type in Haskell as a set of 256
numbers, starting from -128 to 127, <code>Char</code> is a set of all possible charaters, <code>String</code> is a list of <code>Char</code>. How
to represent a binary tree:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">  2
</span><span class="line">  /   \
</span><span class="line">1      3</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>What exactly do we need to know about the tree? Three nodes with three values, and the connections among them.</p>

<p>In OO, we are going to create a structure regarding the node, with a state recording the value and two links for the
connection.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span></span><span class="k">class</span> <span class="nc">Node</span>
</span><span class="line">  <span class="kp">attr_accessor</span> <span class="ss">:left</span><span class="p">,</span> <span class="n">right</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@value</span> <span class="o">=</span> <span class="n">value</span>
</span><span class="line">    <span class="n">left</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class="line">    <span class="n">right</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">root</span>        <span class="o">=</span> <span class="no">Node</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line"><span class="n">root</span><span class="o">.</span><span class="n">left</span>   <span class="o">=</span> <span class="no">Node</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line"><span class="n">root</span><span class="o">.</span><span class="n">right</span>  <span class="o">=</span> <span class="no">Node</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To make it a tree, instead of a plie of nodes, we can create a structure like</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span></span><span class="k">class</span> <span class="nc">BinaryTree</span>
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:root_node</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">root_value</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@root_node</span> <span class="o">=</span> <span class="no">Node</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">root_value</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">insert</span><span class="p">(</span><span class="n">node_value</span><span class="p">)</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>So a final representation for the binary tree in Ruby, it’ll be</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span></span><span class="n">bt</span> <span class="o">=</span> <span class="no">BinaryTree</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>What about in Haskell? At first, we create a type to represent the tree like below, which basically means a binary tree
is either a leaf, or a node with a value and two nodes, which are both binary trees.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span></span><span class="kr">data</span> <span class="kt">BinaryTree</span> <span class="n">a</span> <span class="ow">=</span> <span class="kt">Leaf</span> <span class="o">|</span> <span class="kt">Node</span> <span class="p">(</span><span class="kt">BinaryTree</span> <span class="n">a</span><span class="p">)</span> <span class="n">a</span> <span class="p">(</span><span class="kt">BinaryTree</span> <span class="n">a</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To represent the tree,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span></span><span class="nf">bt</span> <span class="ow">=</span> <span class="kt">Node</span> <span class="p">(</span><span class="kt">Node</span> <span class="kt">Leaf</span> <span class="mi">2</span> <span class="kt">Leaf</span><span class="p">)</span> <span class="mi">1</span> <span class="p">(</span><span class="kt">Node</span> <span class="kt">Leaf</span> <span class="mi">3</span> <span class="kt">Leaf</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It’s done! To be honest, I was totally blown away by the second I understand how things work here. It’s neat, elegant
and way over my thinking.</p>

<p>Cool, so how it works? Between two cases in two languages. Here is my understanding: in the perspective of a
compiler (or interpreter),</p>

<ul>
  <li>In Ruby, it sees a reference to a chunk of memory, which contains the necessary info about getting to know that, there
is an object, which has a state and maybe a reference to its parent, which contains operations allowed to do.</li>
  <li>In Haskell, it sees a sequence of tokens, literally all the data about it. According to the types definition, it
could parse out the tokens in the right pattern, thus understand it.</li>
</ul>

<p><img src="https://raw.githubusercontent.com/ifyouseewendy/ifyouseewendy.github.io/source/image-repo/binary-tree-oo-and-haskell.png" alt="binary-tree-oo-and-haskell" /></p>

<p>Bascially, this is a note of thinking while I was learning it. I’m still digesting and trying to find out a path to fit the FP ideas into my system of knowledge.</p>

<p>At last, I want to share some materials which is truly helpful to me</p>

<ul>
  <li><a href="http://www.defmacro.org/2006/06/19/fp.html">Functional Programming For The Rest of Us - Slava Akhmechet</a> Such a pleasant article as a beginner read, the history, the features, everything you need to know</li>
  <li><a href="https://youtu.be/yVuEPwNuCHw">Types, and why you should care - Ron Minsky</a> An intro video about the pros and cons
about types</li>
  <li><a href="https://youtu.be/V1po0BT7kac">Type Systems Will Make You a Better JavaScript Developer - Jared Forsyth</a> A video talking about why Facebook Flow works effectively for JS. I use it at work, but sometimes I stumble upon it and end up complaining about its stupidity. Next time, I’ll watch the video again.</li>
  <li><a href="https://flow.org/en/docs/lang/">Type Systems - Facebook Flow</a> I find it as a good supplyment after getting understand
the types in Haskell, maybe because it is a standalone type system?</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mr. Curiosity]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2018/03/18/mr-curiosity/"/>
    <updated>2018-03-18T12:18:44-04:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2018/03/18/mr-curiosity</id>
    <content type="html"><![CDATA[<p>一直很喜欢自己的 tech lead。从不在意外在穿着，一年四季几乎同一条裤子，偶尔为了绑住裤脚，直接系个软绳在上边。大胡子，大肚子，大嗓门。爽朗的笑声，经常回荡在整个办公室上空。他有十足的表达欲，对几乎所有事情都充满见解，因而也经常话语锋利。面对不喜欢的人，不喜欢的事，话会变少，表情也会变不屑，但是始终坚决捍卫自己的观点。有趣的是，相处久了，你会发现他内心分明住着个柔软的孩子。他喜欢吃糖，捧着个小碗告诉同事公司新进的酸奶葡萄干不如以前；他不吝惜赞美，直接告诉你和同事，干的漂亮；他花钱买各蝴蝶形状的键盘，乐呵呵地向每个人展示。今天本来是想翻他的 Github，结果又到了他古老的博客，翻到了他在 Flickr 的相册。我知道，好多都是用他那个老的全键盘蓝莓手机拍的照片，毫无修饰地记录着生活美好的瞬间。每次想到他，我总会觉着开心与羡慕。我不知道怎么构建一个世界，能抛开世人的眼光，自得其乐。</p>

<p>我总觉着自己的心里不够强大，怯于别人的目光，即使快到三十岁，也依旧是这个世界的一个聆听者。我害怕说错话，与人沟通越来越小心翼翼，因此交流也就成了费神的事。我害怕做错事，回想有时竟然怕有不好的结果，就不做一些事，也因此就会有错过。这些年不断地努力，一方面是自己渴望进步，一方面心中会有恐惧，如何 live up to your name。我讨厌这部分的自己，它只会给我压力，而不是快乐。要看有用的书，做有用的事，考虑时间考虑收益。慢慢的，快乐只来自成就，而不是事情本身。而我一点点贪婪地前进，活在虚荣的快乐里。认识到这个问题已经好久，自己也在慢慢改变。希望自己多追寻兴趣，享受简单的快乐。</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/ryZeSZEvcck" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen=""></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Review] You Don't Know JS: this &amp; Object Prototypes]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2017/07/03/review-you-dont-know-js-this-and-object-prototypes/"/>
    <updated>2017-07-03T14:01:05-04:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2017/07/03/review-you-dont-know-js-this-and-object-prototypes</id>
    <content type="html"><![CDATA[<table class="custom">
  <tbody>
    <tr>
      <td><strong>Book</strong></td>
      <td>You Don’t Know JS: this &amp; Object Prototypes</td>
    </tr>
    <tr>
      <td><strong>Author</strong></td>
      <td><a href="https://github.com/getify">Kyle Simpson</a></td>
    </tr>
    <tr>
      <td><strong>Link</strong></td>
      <td><a href="https://github.com/getify/You-Dont-Know-JS/blob/master/this%20&amp;%20object%20prototypes/README.md#you-dont-know-js-this--object-prototypes">https://github.com/getify/You-Dont-Know-JS/blob/master/this &amp; object prototypes/README.md</a></td>
    </tr>
  </tbody>
</table>

<ul id="markdown-toc">
  <li><a href="#objects-in-js" id="markdown-toc-objects-in-js">Objects in JS</a>    <ul>
      <li><a href="#type" id="markdown-toc-type">1. Type</a></li>
      <li><a href="#contents" id="markdown-toc-contents">2. Contents</a>        <ul>
          <li><a href="#properties" id="markdown-toc-properties">Properties</a></li>
          <li><a href="#computed-property-names" id="markdown-toc-computed-property-names">Computed Property Names</a></li>
          <li><a href="#arrays" id="markdown-toc-arrays">Arrays</a></li>
          <li><a href="#duplicating-objects" id="markdown-toc-duplicating-objects">Duplicating Objects</a></li>
          <li><a href="#property-descriptors" id="markdown-toc-property-descriptors">Property Descriptors</a></li>
          <li><a href="#get--" id="markdown-toc-get--">[ [ Get ] ]</a></li>
          <li><a href="#existence" id="markdown-toc-existence">Existence</a></li>
        </ul>
      </li>
      <li><a href="#iteration" id="markdown-toc-iteration">3. Iteration</a></li>
    </ul>
  </li>
  <li><a href="#prototypes" id="markdown-toc-prototypes">Prototypes</a>    <ul>
      <li><a href="#my-understanding" id="markdown-toc-my-understanding">1. My understanding</a></li>
      <li><a href="#what-is-a-prototype" id="markdown-toc-what-is-a-prototype">2. What is a prototype?</a></li>
      <li><a href="#how-to-get-an-objects-prototype" id="markdown-toc-how-to-get-an-objects-prototype">3. How to get an object’s prototype?</a></li>
      <li><a href="#what-is-the-prototype-" id="markdown-toc-what-is-the-prototype-">4. What is the <code>prototype</code> ?</a></li>
      <li><a href="#whats-the-difference-between-proto-and-prototype" id="markdown-toc-whats-the-difference-between-proto-and-prototype">5. What’s the difference between <code>__proto__</code> and <code>prototype</code>?</a></li>
      <li><a href="#whats-process-of-method-lookup-via-prototype-chain" id="markdown-toc-whats-process-of-method-lookup-via-prototype-chain">6. What’s process of method lookup via prototype chain?</a></li>
    </ul>
  </li>
  <li><a href="#class" id="markdown-toc-class">“Class”</a>    <ul>
      <li><a href="#misconception" id="markdown-toc-misconception">1. Misconception</a></li>
      <li><a href="#constructors" id="markdown-toc-constructors">2. “Constructors”</a>        <ul>
          <li><a href="#does-constructor-mean-was-constructed-by-no" id="markdown-toc-does-constructor-mean-was-constructed-by-no">Does “constructor” mean “was constructed by”? NO!</a></li>
          <li><a href="#what-is-exactly-a-constructor" id="markdown-toc-what-is-exactly-a-constructor">What is exactly a “constructor”?</a></li>
          <li><a href="#do-we-have-to-capitalize-the-constructor-function-no" id="markdown-toc-do-we-have-to-capitalize-the-constructor-function-no">Do we have to capitalize the constructor function? NO!</a></li>
          <li><a href="#is-constructorreliable-to-be-used-as-a-reference-no" id="markdown-toc-is-constructorreliable-to-be-used-as-a-reference-no">Is <code>.constructor</code>reliable to be used as a reference? NO!</a></li>
        </ul>
      </li>
      <li><a href="#what-happened-when-we-callnew-" id="markdown-toc-what-happened-when-we-callnew-">3. What happened when we call<code>new</code> ?</a></li>
      <li><a href="#introspection" id="markdown-toc-introspection">4. Introspection</a>        <ul>
          <li><a href="#instanceof" id="markdown-toc-instanceof"><code>instanceof</code></a></li>
          <li><a href="#objectprototypeisprototypeof" id="markdown-toc-objectprototypeisprototypeof"><code>Object.prototype.isPrototypeOf()</code></a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#behavior-delegation" id="markdown-toc-behavior-delegation">Behavior Delegation</a>    <ul>
      <li><a href="#my-understanding-1" id="markdown-toc-my-understanding-1">1. My understanding</a></li>
      <li><a href="#background" id="markdown-toc-background">2. Background</a>        <ul>
          <li><a href="#compared-to-traditional-inheritance" id="markdown-toc-compared-to-traditional-inheritance">Compared to traditional inheritance</a></li>
          <li><a href="#prototypal-inheritance--differential-inheritance" id="markdown-toc-prototypal-inheritance--differential-inheritance">Prototypal Inheritance &amp;&amp; Differential Inheritance</a></li>
        </ul>
      </li>
      <li><a href="#create-delegations-by-objectcreate" id="markdown-toc-create-delegations-by-objectcreate">3. Create delegations by <code>Object.create</code></a>        <ul>
          <li><a href="#how-to-make-plain-object-delegations" id="markdown-toc-how-to-make-plain-object-delegations">How to make plain object delegations?</a></li>
          <li><a href="#how-to-make-delegations-to-perform-prototypal-inheritance" id="markdown-toc-how-to-make-delegations-to-perform-prototypal-inheritance">How to make delegations to perform “prototypal inheritance”?</a></li>
          <li><a href="#how-to-envision-your-own-objectcreate" id="markdown-toc-how-to-envision-your-own-objectcreate">How to envision your own <code>Object.create</code>?</a></li>
        </ul>
      </li>
      <li><a href="#towards-delegation-oriented-design" id="markdown-toc-towards-delegation-oriented-design">4. Towards Delegation-Oriented Design</a>        <ul>
          <li><a href="#avoid-shadowing-naming-things-the-same-if-at-all-possible" id="markdown-toc-avoid-shadowing-naming-things-the-same-if-at-all-possible">Avoid shadowing (naming things the same) if at all possible</a></li>
          <li><a href="#save-state-on-delegators" id="markdown-toc-save-state-on-delegators">Save state on delegators</a></li>
          <li><a href="#comparison" id="markdown-toc-comparison">Comparison</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h1 id="objects-in-js">Objects in JS</h1>

<p>Source: <a href="https://github.com/getify/You-Dont-Know-JS/blob/master/this %26 object prototypes/ch3.md">You Don’t Know JS: this &amp; Object Prototypes - Chapter 3: Objects</a></p>

<h2 id="type">1. Type</h2>

<p>Primary types (language types)</p>

<ul>
  <li>number</li>
  <li>boolean</li>
  <li>string</li>
  <li>null</li>
  <li>undefined</li>
  <li>object</li>
</ul>

<p>Many people mistakenly claim “everything in JavaScript is an object”, but this is incorrect. Objects are one of the 6 (or 7, depending on your perspective) primitive types. Objects have sub-types, including<code>function</code>, and also can be behavior-specialized, like<code>[object Array]</code>as the internal label representing the array object sub-type.</p>

<p><img src="https://raw.githubusercontent.com/ifyouseewendy/ifyouseewendy.github.io/source/image-repo/you-dont-know-js/types.png" alt="types" /></p>

<p>What are object sub-types?</p>

<p>In JS, object sub-types are actually just built-in functions. Each of these built-in functions can be used as a constructor (that is, a function call with the new operator), with the result being a newly constructed object of the sub-type.</p>

<p>Why do we need object sub-types?</p>

<p>The primitive value <code>"I am a string"</code>is not an object, it’s a primitive literal and immutable value. To perform operations on it, such as checking its length, accessing its individual character contents, etc, a<code>String</code>object is required.the language automatically coerces a<code>"string"</code>primitive to a<code>String</code>object when necessary, which means you almost never need to explicitly create the Object form.</p>

<p>What is exactly the function?</p>

<p>Functions are callable objects which are special in that they have an optional name property and a code property (which is the body of the function that actually does stuff).</p>

<p>How to remember?</p>

<p>Excluding from the self-defined object, we can always use <code>typeof</code> first to check out the primary types and then use <code>instanceof</code> to find out its object sub-types.</p>

<h2 id="contents">2. Contents</h2>

<p>Objects are collections of key/value pairs. The values can be accessed as properties, via<code>.propName</code>or<code>["propName"]</code>syntax. Whenever a property is accessed, the engine actually invokes the internal default<code>[[Get]]</code>operation (and<code>[[Put]]</code>for setting values), which not only looks for the property directly on the object, but which will traverse the<code>[[Prototype]]</code>chain (see Chapter 5) if not found.</p>

<p>Properties have certain characteristics that can be controlled through property descriptors, such as<code>writable</code>and<code>configurable</code>. In addition, objects can have their mutability (and that of their properties) controlled to various levels of immutability using<code>Object.preventExtensions(..)</code>,<code>Object.seal(..)</code>, and<code>Object.freeze(..)</code>.</p>

<p>Properties don’t have to contain values – they can be “accessor properties” as well, with getters/setters. They can also be either <em>enumerable</em> or not, which controls if they show up in<code>for..in</code>loop iterations, for instance.</p>

<h3 id="properties">Properties</h3>

<p>In objects, property names are **always **strings. If you use any other value besides a <code>string</code>(primitive) as the property, it will first be converted to a string.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="kd">var</span> <span class="nx">myObject</span> <span class="o">=</span> <span class="p">{</span> <span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="nx">myObject</span><span class="p">[</span><span class="kc">true</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;foo&quot;</span><span class="p">;</span>
</span><span class="line"><span class="nx">myObject</span><span class="p">[</span><span class="mf">3</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;bar&quot;</span><span class="p">;</span>
</span><span class="line"><span class="nx">myObject</span><span class="p">[</span><span class="nx">myObject</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;baz&quot;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="nx">myObject</span><span class="p">[</span><span class="s2">&quot;true&quot;</span><span class="p">];</span>                <span class="c1">// &quot;foo&quot;</span>
</span><span class="line"><span class="nx">myObject</span><span class="p">[</span><span class="s2">&quot;3&quot;</span><span class="p">];</span>                    <span class="c1">// &quot;bar&quot;</span>
</span><span class="line"><span class="nx">myObject</span><span class="p">[</span><span class="s2">&quot;[object Object]&quot;</span><span class="p">];</span>                  <span class="c1">// &quot;baz&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="computed-property-names">Computed Property Names</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="kd">var</span> <span class="nx">prefix</span> <span class="o">=</span> <span class="s2">&quot;foo&quot;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">myObject</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="p">[</span><span class="nx">prefix</span> <span class="o">+</span> <span class="s2">&quot;bar&quot;</span><span class="p">]</span><span class="o">:</span> <span class="s2">&quot;hello&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="p">[</span><span class="nx">prefix</span> <span class="o">+</span> <span class="s2">&quot;baz&quot;</span><span class="p">]</span><span class="o">:</span> <span class="s2">&quot;world&quot;</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="nx">myObject</span><span class="p">[</span><span class="s2">&quot;foobar&quot;</span><span class="p">];</span> <span class="c1">// hello</span>
</span><span class="line"><span class="nx">myObject</span><span class="p">[</span><span class="s2">&quot;foobaz&quot;</span><span class="p">];</span> <span class="c1">// world</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="arrays">Arrays</h3>

<p>Arrays are objects. <strong>Be careful</strong>: If you try to add a property to an array, but the property name looks like a number, it will end up instead as a numeric index (thus modifying the array contents):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="kd">var</span> <span class="nx">myArray</span> <span class="o">=</span> <span class="p">[</span> <span class="s2">&quot;foo&quot;</span><span class="p">,</span> <span class="mf">42</span><span class="p">,</span> <span class="s2">&quot;bar&quot;</span> <span class="p">];</span>
</span><span class="line">
</span><span class="line"><span class="nx">myArray</span><span class="p">[</span><span class="s2">&quot;3&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;baz&quot;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="nx">myArray</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>    <span class="c1">// 4</span>
</span><span class="line">
</span><span class="line"><span class="nx">myArray</span><span class="p">[</span><span class="mf">3</span><span class="p">];</span>        <span class="c1">// &quot;baz&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="duplicating-objects">Duplicating Objects</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="kd">function</span> <span class="nx">anotherFunction</span><span class="p">()</span> <span class="p">{</span> <span class="cm">/*..*/</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">anotherObject</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">c</span><span class="o">:</span> <span class="kc">true</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">anotherArray</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">myObject</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">a</span><span class="o">:</span> <span class="mf">2</span><span class="p">,</span>
</span><span class="line">    <span class="nx">b</span><span class="o">:</span> <span class="nx">anotherObject</span><span class="p">,</span>    <span class="c1">// reference, not a copy!</span>
</span><span class="line">    <span class="nx">c</span><span class="o">:</span> <span class="nx">anotherArray</span><span class="p">,</span>    <span class="c1">// another reference!</span>
</span><span class="line">    <span class="nx">d</span><span class="o">:</span> <span class="nx">anotherFunction</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="nx">anotherArray</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span> <span class="nx">anotherObject</span><span class="p">,</span> <span class="nx">myObject</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It’s hard to tell which of shallow and deep copy is right without the use case.</p>

<p>One subset solution is that objects which are JSON-safe (that is, can be serialized to a JSON string and then re-parsed to an object with the same structure and values) can easily be <em>duplicated</em> with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="kd">var</span> <span class="nx">newObj</span> <span class="o">=</span> <span class="nb">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span> <span class="nb">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span> <span class="nx">someObj</span> <span class="p">)</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>A shallow copy is fairly understandable and has far less issues, so ES6 has now defined <code>Object.assign(..)</code> for this task. <code>Object.assign(..)</code> takes a target object as its first parameter, and one or more source objects as its subsequent parameters. It iterates over all the <em>enumerable</em> (see below), <em>owned keys (immediately present)</em> on the source object(s) and copies them (via = assignment only) to target.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="kd">var</span> <span class="nx">newObj</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span> <span class="p">{},</span> <span class="nx">myObject</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nx">newObj</span><span class="p">.</span><span class="nx">a</span><span class="p">;</span>                        <span class="c1">// 2</span>
</span><span class="line"><span class="nx">newObj</span><span class="p">.</span><span class="nx">b</span> <span class="o">===</span> <span class="nx">anotherObject</span><span class="p">;</span>        <span class="c1">// true</span>
</span><span class="line"><span class="nx">newObj</span><span class="p">.</span><span class="nx">c</span> <span class="o">===</span> <span class="nx">anotherArray</span><span class="p">;</span>        <span class="c1">// true</span>
</span><span class="line"><span class="nx">newObj</span><span class="p">.</span><span class="nx">d</span> <span class="o">===</span> <span class="nx">anotherFunction</span><span class="p">;</span>    <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="property-descriptors">Property Descriptors</h3>

<p>Prior to ES5, the JavaScript language gave no direct way for your code to inspect or draw any distinction between the characteristics of properties, such as whether the property was read-only or not. But as of ES5, all properties are described in terms of a <strong>property descriptor</strong>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="kd">var</span> <span class="nx">myObject</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">a</span><span class="o">:</span> <span class="mf">2</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="p">(</span> <span class="nx">myObject</span><span class="p">,</span> <span class="s2">&quot;a&quot;</span> <span class="p">);</span>
</span><span class="line"><span class="c1">// {</span>
</span><span class="line"><span class="c1">//    value: 2,</span>
</span><span class="line"><span class="c1">//    writable: true,</span>
</span><span class="line"><span class="c1">//    enumerable: true,</span>
</span><span class="line"><span class="c1">//    configurable: true</span>
</span><span class="line"><span class="c1">// }</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We can use<code>Object.defineProperty(..)</code>to add a new property, or modify an existing one (if it’s<code>configurable</code>!), with the desired characteristics.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="kd">var</span> <span class="nx">myObject</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class="line">
</span><span class="line"><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span> <span class="nx">myObject</span><span class="p">,</span> <span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">value</span><span class="o">:</span> <span class="mf">2</span><span class="p">,</span>
</span><span class="line">    <span class="nx">writable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class="line">    <span class="nx">configurable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class="line">    <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">true</span>
</span><span class="line"><span class="p">}</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nx">myObject</span><span class="p">.</span><span class="nx">a</span><span class="p">;</span> <span class="c1">// 2</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I consider this as something about plumbing facts, which features some higher level operations. Like</p>

<p><strong>Seal</strong>: <code>Object.seal(..)</code> creates a “sealed” object, which means it takes an existing object and essentially calls <code>Object.preventExtensions(..)</code> on it, but also marks all its existing properties as <code>configurable:false</code>.</p>

<p><strong>Freeze</strong>: <code>Object.freeze(..)</code> creates a frozen object, which means it takes an existing object and essentially calls <code>Object.seal(..)</code> on it, but it also marks all “data accessor” properties as <code>writable:false</code>, so that their values cannot be changed.</p>

<p>For details, check <a href="https://github.com/getify/You-Dont-Know-JS/blob/master/this %26 object prototypes/ch3.md#property-descriptors">this section</a></p>

<h3 id="get--">[ [ Get ] ]</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="kd">var</span> <span class="nx">myObject</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">a</span><span class="o">:</span> <span class="mf">2</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="nx">myObject</span><span class="p">.</span><span class="nx">a</span><span class="p">;</span> <span class="c1">// 2</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The<code>myObject.a</code>is a property access, but it doesn’t <em>just</em> look in <code>myObject</code>for a property of the name <code>a</code>, as it might seem. According to the spec, the code above actually performs a<code>[[Get]]</code>operation (kinda like a function call:<code>[[Get]]()</code>) on the<code>myObject</code>. The default built-in<code>[[Get]]</code>operation for an object <em>first</em> inspects the object for a property of the requested name, and if it finds it, it will return the value accordingly.</p>

<p>One important result of this<code>[[Get]]</code>operation is that if it cannot through any means come up with a value for the requested property, it instead returns the value<code>undefined</code>(instead of a<code>ReferenceError</code>).</p>

<p>Define an **accessor descriptor **(getter and putter)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="kd">var</span> <span class="nx">myObject</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// define a getter for `a`</span>
</span><span class="line">    <span class="nx">get</span> <span class="nx">a</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_a_</span><span class="p">;</span>
</span><span class="line">    <span class="p">},</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// define a setter for `a`</span>
</span><span class="line">    <span class="nx">set</span> <span class="nx">a</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">this</span><span class="p">.</span><span class="nx">_a_</span> <span class="o">=</span> <span class="nx">val</span> <span class="o">*</span> <span class="mf">2</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="nx">myObject</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="mf">2</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="nx">myObject</span><span class="p">.</span><span class="nx">a</span><span class="p">;</span> <span class="c1">// 4</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="existence">Existence</h3>

<p>We showed earlier that a property access like<code>myObject.a</code>may result in an<code>undefined</code>value if either the explicit<code>undefined</code>is stored there or the<code>a</code>property doesn’t exist at all. So, if the value is the same in both cases, how else do we distinguish them?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="kd">var</span> <span class="nx">myObject</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">a</span><span class="o">:</span> <span class="mf">2</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="s2">&quot;a&quot;</span> <span class="ow">in</span> <span class="nx">myObject</span><span class="p">);</span>                <span class="c1">// true</span>
</span><span class="line"><span class="p">(</span><span class="s2">&quot;b&quot;</span> <span class="ow">in</span> <span class="nx">myObject</span><span class="p">);</span>                <span class="c1">// false</span>
</span><span class="line">
</span><span class="line"><span class="nx">myObject</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span> <span class="s2">&quot;a&quot;</span> <span class="p">);</span>    <span class="c1">// true</span>
</span><span class="line"><span class="nx">myObject</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span> <span class="s2">&quot;b&quot;</span> <span class="p">);</span>    <span class="c1">// false</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The<code>in</code>operator will check to see if the property is <em>in</em> the object, or if it exists at any higher level of the <em><code>[[Prototype]]</code></em> chain object traversal (see Chapter 5). By contrast, <em><code>hasOwnProperty(..)</code></em> checks to see if <em>only</em> <code>myObject</code>has the property or not, and will <em>not</em> consult the<code>[[Prototype]]</code>chain.</p>

<p><code>hasOwnProperty(..)</code>is accessible for all normal objects via delegation to<code>Object.prototype</code>(see Chapter 5). But it’s possible to create an object that does not link to<code>Object.prototype</code>(via<code>Object.create(null)</code>– see Chapter 5). In this case, a method call like<code>myObject.hasOwnProperty(..)</code>would fail.</p>

<p>In that scenario, a more robust way of performing such a check is<code>Object.prototype.hasOwnProperty.call(myObject,"a")</code>, which borrows the base<code>hasOwnProperty(..)</code>method and uses_explicit_<code>this</code><em>binding</em>(see Chapter 2) to apply it against our<code>myObject</code>.</p>

<h2 id="iteration">3. Iteration</h2>

<p>The<code>for..in</code>loop iterates over the list of enumerable properties on an object (including its<code>[[Prototype]]</code>chain). But what if you instead want to iterate over the values?</p>

<p><code>for..in</code>loops applied to arrays can give somewhat unexpected results, in that the enumeration of an array will include not only all the numeric indices, but also any enumerable properties. It’s a good idea to use<code>for..in</code>loops <em>only</em> on objects, and traditional<code>for</code>loops with numeric index iteration for the values stored in arrays.</p>

<p>ES5 also added several iteration helpers for arrays, including <code>forEach(..)</code>, <code>every(..)</code>, and <code>some(..)</code>.</p>

<ul>
  <li><code>forEach(..)</code>will iterate over all values in the array, and ignores any callback return values.</li>
  <li><code>every(..)</code>keeps going until the end <em>or</em> the callback returns a<code>false</code>(or “falsy”) value, whereas</li>
  <li><code>some(..)</code>keeps going until the end <em>or</em> the callback returns a <code>true</code>(or “truthy”) value.</li>
</ul>

<p>As contrasted with iterating over an array’s indices in a numerically ordered way (<code>for</code>loop or other iterators), the order of iteration over an object’s properties is **not guaranteed **and may vary between different JS engines. **Do not rely **on any observed ordering for anything that requires consistency among environments, as any observed agreement is unreliable.</p>

<p>You can also iterate over **the values **in data structures (arrays, objects, etc) using the ES6<code>for..of</code>syntax, which looks for either a built-in or custom<code>@@iterator</code>object consisting of a<code>next()</code>method to advance through the data values one at a time.</p>

<h1 id="prototypes">Prototypes</h1>

<p>Source: <a href="https://github.com/getify/You-Dont-Know-JS/blob/master/this %26 object prototypes/ch5.md">You Don’t Know JS: this &amp; Object Prototypes - Chapter 5: Prototypes</a></p>

<h2 id="my-understanding">1. My understanding</h2>

<p>After reading this part, I realize that <code>Arary</code>, <code>Function</code>, <code>Object</code>are all functions. I should admit that this refreshes my impression on JS. I know functions are first-class citizen in JS but it seems that it is all built on functions. Every object is created by functions:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="c1">// simple primitives are auto boxing: new Number(1)</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">number</span> <span class="o">=</span> <span class="mf">1</span>
</span><span class="line">
</span><span class="line"><span class="c1">// object created by constructor</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">date</span> <span class="o">=</span> <span class="ow">new</span> <span class="nb">Date</span><span class="p">(</span><span class="s2">&quot;2017-07-01&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// object literal</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{}</span> <span class="c1">// is equivalent to: Object.create(Object.prototype);</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">foo</span><span class="o">:</span> <span class="s2">&quot;hello&quot;</span> <span class="p">}</span> <span class="c1">// is equivalent to</span>
</span><span class="line">
</span><span class="line"><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span>
</span><span class="line"><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="nx">foo</span><span class="o">:</span> <span class="p">{</span>
</span><span class="line">            <span class="nx">writable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class="line">            <span class="nx">configurable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class="line">            <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;hello&#39;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="what-is-a-prototype">2. What is a prototype?</h2>

<p>Objects in JavaScript have an internal property, denoted in the specification as<code>[[Prototype]]</code>, which is simply a reference to another object. Almost all objects are given a non-<code>null</code>value for this property, at the time of their creation.</p>

<h2 id="how-to-get-an-objects-prototype">3. How to get an object’s prototype?</h2>

<p>via <code>__proto__</code>or <code>Object.getPrototypeOf</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;wendi&quot;</span> <span class="p">};</span>
</span><span class="line"><span class="nx">a</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// true</span>
</span><span class="line"><span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// true</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">Foo</span><span class="p">()</span> <span class="p">{};</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="ow">new</span> <span class="nx">Foo</span><span class="p">();</span>
</span><span class="line"><span class="nx">b</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span>
</span><span class="line"><span class="nx">b</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>So where is <code>__proto__</code>defined? <code>Object.prototype.__proto__</code></p>

<p>We could roughly envision <code>__proto__</code> implemented like this</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="s2">&quot;__proto__&quot;</span><span class="p">,</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">get</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span> <span class="k">this</span> <span class="p">);</span>
</span><span class="line">    <span class="p">},</span>
</span><span class="line">    <span class="nx">set</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="c1">// setPrototypeOf(..) as of ES6</span>
</span><span class="line">        <span class="nb">Object</span><span class="p">.</span><span class="nx">setPrototypeOf</span><span class="p">(</span> <span class="k">this</span><span class="p">,</span> <span class="nx">o</span> <span class="p">);</span>
</span><span class="line">            <span class="k">return</span> <span class="nx">o</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>**Note: **The JavaScript community unofficially coined a term for the double-underscore, specifically the leading one in properties like<code>__proto__</code>: “dunder”. So, the “cool kids” in JavaScript would generally pronounce<code>__proto__</code>as “dunder proto”.</p>

<h2 id="what-is-the-prototype-">4. What is the <code>prototype</code> ?</h2>

<p><code>prototype</code> is an object automatically created as a special property of a <strong>function</strong>, which is used to establish the delegation (inheritance) chain, aka prototype chain.</p>

<p>When we create a function <code>a</code>, <code>prototype</code> is automatically created as a special property on <code>a</code> and saves the function code on as the <code>constructor</code> on <code>prototype</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="kd">function</span> <span class="nx">Foo</span><span class="p">()</span> <span class="p">{};</span>
</span><span class="line"><span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// Object {constructor: function}</span>
</span><span class="line"><span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="kr">constructor</span> <span class="o">===</span> <span class="nx">Foo</span> <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I’d love to consider this property as the place to store the properties (including methods) of a function object. That’s also the reason why utility functions in JS are defined like <code>Array.prototype.forEach()</code> , <code>Function.prototype.bind()</code>, <code>Object.prototype.toString().</code></p>

<p>Why to emphasize the property of a <strong>function</strong>?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="p">{}.</span><span class="nx">prototype</span> <span class="c1">// undefined;</span>
</span><span class="line"><span class="p">(</span><span class="kd">function</span><span class="p">(){}).</span><span class="nx">prototype</span> <span class="c1">// Object {constructor: function}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// The example above shows object does not have the prototype property.</span>
</span><span class="line"><span class="c1">// But we have Object.prototype, which implies an interesting fact that</span>
</span><span class="line"><span class="ow">typeof</span> <span class="nb">Object</span> <span class="o">===</span> <span class="s2">&quot;function&quot;</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="ow">new</span> <span class="nb">Object</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="whats-the-difference-between-proto-and-prototype">5. What’s the difference between <code>__proto__</code> and <code>prototype</code>?</h2>

<p><code>__proto__</code>a reference works on every <strong>object</strong> to refer to its <code>[[Prototype]]</code>property.</p>

<p><code>prototype</code> is an object automatically created as a special property of a <strong>function</strong>, which is used to store the properties (including methods) of a function object.</p>

<p>With these two, we could mentally map out the prototype chain. Like this picture illustrates:</p>

<p><img src="https://raw.githubusercontent.com/ifyouseewendy/ifyouseewendy.github.io/source/image-repo/you-dont-know-js/__proto__-vs-prototype.png" alt="__proto__-vs-prototype.png" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="kd">function</span> <span class="nx">Foo</span><span class="p">()</span> <span class="p">{}</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="ow">new</span> <span class="nx">Foo</span><span class="p">();</span>
</span><span class="line">
</span><span class="line"><span class="nx">b</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// true</span>
</span><span class="line"><span class="nx">Foo</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// true</span>
</span><span class="line"><span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Refer to: <a href="https://stackoverflow.com/questions/9959727/proto-vs-prototype-in-javascript">__proto__ VS. prototype in JavaScript</a></p>

<h2 id="whats-process-of-method-lookup-via-prototype-chain">6. What’s process of method lookup via prototype chain?</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="nb">Object</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">);</span> <span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">Foo</span><span class="p">()</span> <span class="p">{}</span>
</span><span class="line"><span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">bar</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">foo</span><span class="p">();</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;bar&quot;</span><span class="p">);</span> <span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="ow">new</span> <span class="nx">Foo</span><span class="p">();</span>
</span><span class="line"><span class="nx">a</span><span class="p">.</span><span class="nx">baz</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span> <span class="k">this</span><span class="p">.</span><span class="nx">bar</span><span class="p">();</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;baz&quot;</span><span class="p">);</span> <span class="p">};</span>
</span><span class="line"><span class="nx">a</span><span class="p">.</span><span class="nx">baz</span><span class="p">();</span>
</span><span class="line">
</span><span class="line"><span class="c1">// foo</span>
</span><span class="line"><span class="c1">// bar</span>
</span><span class="line"><span class="c1">// baz</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The top-end of every _normal _<code>[[Prototype]]</code>chain is the built-in <code>Object.prototype</code>. This object includes a variety of common utilities used all over JS.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span>
</span><span class="line">
</span><span class="line"><span class="kr">constructor</span><span class="o">:</span> <span class="kd">function</span> <span class="nb">Object</span><span class="p">()</span>
</span><span class="line"><span class="nx">hasOwnProperty</span><span class="o">:</span> <span class="kd">function</span> <span class="nx">hasOwnProperty</span><span class="p">()</span>
</span><span class="line"><span class="nx">isPrototypeOf</span><span class="o">:</span> <span class="kd">function</span> <span class="nx">isPrototypeOf</span><span class="p">()</span>
</span><span class="line"><span class="nx">propertyIsEnumerable</span><span class="o">:</span> <span class="kd">function</span> <span class="nx">propertyIsEnumerable</span><span class="p">()</span>
</span><span class="line"><span class="nx">toLocaleString</span><span class="o">:</span> <span class="kd">function</span> <span class="nx">toLocaleString</span><span class="p">()</span>
</span><span class="line"><span class="nx">toString</span><span class="o">:</span> <span class="kd">function</span> <span class="nx">toString</span><span class="p">()</span>
</span><span class="line"><span class="nx">valueOf</span><span class="o">:</span> <span class="kd">function</span> <span class="nx">valueOf</span><span class="p">()</span>
</span><span class="line"><span class="nx">__defineGetter__</span><span class="o">:</span> <span class="kd">function</span> <span class="nx">__defineGetter__</span><span class="p">()</span>
</span><span class="line"><span class="nx">__defineSetter__</span><span class="o">:</span> <span class="kd">function</span> <span class="nx">__defineSetter__</span><span class="p">()</span>
</span><span class="line"><span class="nx">__lookupGetter__</span><span class="o">:</span> <span class="kd">function</span> <span class="nx">__lookupGetter__</span><span class="p">()</span>
</span><span class="line"><span class="nx">__lookupSetter__</span><span class="o">:</span> <span class="kd">function</span> <span class="nx">__lookupSetter__</span><span class="p">()</span>
</span><span class="line"><span class="nx">get</span> <span class="nx">__proto__</span><span class="o">:</span> <span class="kd">function</span> <span class="nx">__proto__</span><span class="p">()</span>
</span><span class="line"><span class="nx">set</span> <span class="nx">__proto__</span><span class="o">:</span> <span class="kd">function</span> <span class="nx">__proto__</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="class">“Class”</h1>

<p>Source: <a href="https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch4.md">You Don’t Know JS: this &amp; Object Prototypes - Chapter 4: Mixing (Up) “Class” Objects</a></p>

<h2 id="misconception">1. Misconception</h2>

<p>There’s a peculiar kind of behavior in JavaScript that has been shamelessly abused for years to <em>hack</em> something that <em>looks</em> like “classes”. JS developers have strived to simulate as much as they can of class-orientation.</p>

<p>JS has had <em>some</em> class-like syntactic elements (like<code>new</code>and<code>instanceof</code>) for quite awhile, and more recently in ES6, some additions, like the<code>class</code>keyword (see Appendix A). But does that mean JavaScript actually <em>has</em> classes? Plain and simple: <strong>No.</strong></p>

<p>**Classes mean copies. **JavaScript **does not automatically **create copies (as classes imply) between objects.</p>

<p>Read <a href="https://github.com/getify/You-Dont-Know-JS/blob/master/this %26 object prototypes/ch4.md">You Don’t Know JS: this &amp; Object Prototypes - Chapter 4: Mixing (Up) “Class” Objects</a> for details:</p>

<ul>
  <li>Why does JavaScript not feature class inheritance?</li>
  <li>Why does mixin pattern (both explicit and implicit) as the common sort of emulating class copy behavior, not work in JavaScript?</li>
</ul>

<h2 id="constructors">2. “Constructors”</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="kd">function</span> <span class="nx">Foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// ...</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="kr">constructor</span> <span class="o">===</span> <span class="nx">Foo</span><span class="p">;</span> <span class="c1">// true</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="ow">new</span> <span class="nx">Foo</span><span class="p">();</span>
</span><span class="line"><span class="nx">a</span><span class="p">.</span><span class="kr">constructor</span> <span class="o">===</span> <span class="nx">Foo</span><span class="p">;</span> <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The<code>Foo.prototype</code>object by default (at declaration time on line 1 of the snippet!) gets a public, non-enumerable property called<code>.constructor</code>, and this property is a reference back to the function (<code>Foo</code>in this case) that the object is associated with.</p>

<h3 id="does-constructor-mean-was-constructed-by-no">Does “constructor” mean “was constructed by”? NO!</h3>

<p>The fact is,<code>.constructor</code>on an object arbitrarily points, by default, at a function who, reciprocally, has a reference back to the object – a reference which it calls<code>.prototype</code>. The words “constructor” and “prototype” only have a loose default meaning that might or might not hold true later. The best thing to do is remind yourself, “constructor does not mean constructed by”.</p>

<h3 id="what-is-exactly-a-constructor">What is exactly a “constructor”?</h3>

<p>In other words, in JavaScript, it’s most appropriate to say that a “constructor” is <strong>any function called with the</strong><code>new</code><strong>keyword</strong> in front of it. Functions aren’t constructors, but function calls are “constructor calls” if and only if<code>new</code>is used.</p>

<h3 id="do-we-have-to-capitalize-the-constructor-function-no">Do we have to capitalize the constructor function? NO!</h3>

<p>By convention in the JavaScript world, “class”es are named with a capital letter, so the fact that it’s <code>Foo</code> instead of <code>foo</code> is a strong clue that we intend it to be a “class”. But the capital letter doesn’t mean <strong>anything</strong> at all to the JS engine.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{}</span>
</span><span class="line">
</span><span class="line"><span class="ow">new</span> <span class="nx">foo</span><span class="p">()</span> <span class="c1">// foo {}</span>
</span><span class="line">
</span><span class="line"><span class="nx">foo</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// Object {constructor: function}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In reality,<code>Foo</code>is no more a “constructor” than any other function in your program. Functions themselves are <strong>not</strong> constructors. However, when you put the<code>new</code>keyword in front of a normal function call, that makes that function call a “constructor call”. In fact,<code>new</code>sort of hijacks any normal function and calls it in a fashion that constructs an object, <strong>in addition to whatever else it was going to do</strong>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="kd">function</span> <span class="nx">NothingSpecial</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="s2">&quot;Don&#39;t mind me!&quot;</span> <span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="ow">new</span> <span class="nx">NothingSpecial</span><span class="p">();</span>
</span><span class="line"><span class="c1">// &quot;Don&#39;t mind me!&quot;</span>
</span><span class="line">
</span><span class="line"><span class="nx">a</span><span class="p">;</span> <span class="c1">// {}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>NothingSpecial</code>is just a plain old normal function, but when called with<code>new</code>, it constructs an object, almost as a side-effect, which we happen to assign to <em><code>a</code></em>. The <strong>call</strong> was a constructor call, but <code>NothingSpecial</code> is not, in and of itself, a constructor.</p>

<h3 id="is-constructorreliable-to-be-used-as-a-reference-no">Is <code>.constructor</code>reliable to be used as a reference? NO!</h3>

<p>Some arbitrary object-property reference like<code>a1.constructor</code>cannot actually be <em>trusted</em> to be the assumed default function reference. Moreover, as we’ll see shortly, just by simple omission,<code>a1.constructor</code>can even end up pointing somewhere quite surprising and insensible.<code>a1.constructor</code>is extremely unreliable, and an unsafe reference to rely upon in your code.<strong>Generally, such references should be avoided where possible.</strong></p>

<p><code>.constructor</code>is not a magic immutable property. It <em>is</em> non-enumerable (see snippet above), but its value is writable (can be changed), and moreover, you can add or overwrite (intentionally or accidentally) a property of the name<code>constructor</code>on any object in any<code>[[Prototype]]</code>chain, with any value you see fit.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="kd">function</span> <span class="nx">Foo</span><span class="p">()</span> <span class="p">{}</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="ow">new</span> <span class="nx">Foo</span><span class="p">();</span>
</span><span class="line"><span class="nx">a</span><span class="p">.</span><span class="kr">constructor</span>  <span class="o">===</span> <span class="nx">Foo</span> <span class="c1">// true</span>
</span><span class="line">
</span><span class="line"><span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="kr">constructor</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line"><span class="nx">a</span><span class="p">.</span><span class="kr">constructor</span> <span class="o">===</span> <span class="nx">Foo</span> <span class="c1">// false</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If you create a new object, and replace a function’s default<code>.prototype</code>object reference, the new object will not by default magically get a<code>.constructor</code>on it.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="kd">function</span> <span class="nx">Foo</span><span class="p">()</span> <span class="p">{</span> <span class="cm">/* .. */</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span> <span class="cm">/* .. */</span> <span class="p">};</span> <span class="c1">// create a new prototype object</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">a1</span> <span class="o">=</span> <span class="ow">new</span> <span class="nx">Foo</span><span class="p">();</span>
</span><span class="line"><span class="nx">a1</span><span class="p">.</span><span class="kr">constructor</span> <span class="o">===</span> <span class="nx">Foo</span><span class="p">;</span> <span class="c1">// false!</span>
</span><span class="line"><span class="nx">a1</span><span class="p">.</span><span class="kr">constructor</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">;</span> <span class="c1">// true!</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>What’s happening?<code>a1</code>has no<code>.constructor</code>property, so it delegates up the<code>[[Prototype]]</code>chain to<code>Foo.prototype</code>. But that object doesn’t have a<code>.constructor</code>either (like the default<code>Foo.prototype</code>object would have had!), so it keeps delegating, this time up to<code>Object.prototype</code>, the top of the delegation chain.<em>That</em> object indeed has a<code>.constructor</code>on it, which points to the built-in<code>Object(..)</code>function.</p>

<p>Of course, you can add<code>.constructor</code>back to the<code>Foo.prototype</code>object, but this takes manual work, especially if you want to match native behavior and have it be non-enumerable.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="kd">function</span> <span class="nx">Foo</span><span class="p">()</span> <span class="p">{</span> <span class="cm">/* .. */</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span> <span class="cm">/* .. */</span> <span class="p">};</span> <span class="c1">// create a new prototype object</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Need to properly &quot;fix&quot; the missing `.constructor`</span>
</span><span class="line"><span class="c1">// property on the new object serving as `Foo.prototype`.</span>
</span><span class="line"><span class="c1">// See Chapter 3 for `defineProperty(..)`.</span>
</span><span class="line"><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span> <span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="s2">&quot;constructor&quot;</span> <span class="p">,</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class="line">    <span class="nx">writable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class="line">    <span class="nx">configurable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class="line">    <span class="nx">value</span><span class="o">:</span> <span class="nx">Foo</span>    <span class="c1">// point `.constructor` at `Foo`</span>
</span><span class="line"><span class="p">}</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>That’s a lot of manual work to fix<code>.constructor</code>. Moreover, all we’re really doing is perpetuating the misconception that “constructor” means “was constructed by”. That’s an <em>expensive</em> illusion.</p>

<h2 id="what-happened-when-we-callnew-">3. What happened when we call<code>new</code> ?</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="kd">function</span> <span class="nx">New</span><span class="p">(</span><span class="nx">func</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">res</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="nx">func</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">res</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">func</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">ret</span> <span class="o">=</span> <span class="nx">func</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span> <span class="mf">1</span><span class="p">));</span>
</span><span class="line">    <span class="k">if</span> <span class="p">((</span><span class="ow">typeof</span> <span class="nx">ret</span> <span class="o">===</span> <span class="s2">&quot;object&quot;</span> <span class="o">||</span> <span class="ow">typeof</span> <span class="nx">ret</span> <span class="o">===</span> <span class="s2">&quot;function&quot;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">ret</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="nx">ret</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">res</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nx">New</span><span class="p">(</span><span class="nx">A</span><span class="p">,</span> <span class="mf">1</span><span class="p">,</span> <span class="mf">2</span><span class="p">);</span>
</span><span class="line"><span class="c1">// equals to</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="ow">new</span> <span class="nx">A</span><span class="p">(</span><span class="mf">1</span><span class="p">,</span> <span class="mf">2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>It creates a new object. The type of this object, is simply <em>object</em></li>
  <li>It sets this new object’s internal, inaccessible, <em>[[prototype]]</em>(i.e. <strong>__proto__</strong>) property to be the constructor function’s external, accessible, <em>prototype</em> object (every function object automatically has a <em>prototype</em> property).</li>
  <li>It makes the <code>this</code>variable point to the newly created object.</li>
  <li>It executes the constructor function, using the newly created object whenever <code>this</code>is mentioned.</li>
  <li>It returns the newly created object, unless the constructor function returns a non-<code>null</code>object reference. In this case, that object reference is returned instead.</li>
</ol>

<p>Reference</p>

<ul>
  <li><a href="https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript">What is the ‘new’ keyword in JavaScript?</a></li>
  <li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new">new operator - MDN</a></li>
</ul>

<h2 id="introspection">4. Introspection</h2>

<h3 id="instanceof"><code>instanceof</code></h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="nx">a</span> <span class="ow">instanceof</span> <span class="nx">Foo</span><span class="p">;</span> <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The<code>instanceof</code>operator takes a plain object as its left-hand operand and a<strong>function</strong>as its right-hand operand. The question<code>instanceof</code>answers is:<strong>in the entire</strong><code>[[Prototype]]</code><strong>chain of</strong><code>a</code><strong>, does the object arbitrarily pointed to by</strong><code>Foo.prototype</code><strong>ever appear?</strong></p>

<p>What if you have two arbitrary objects, say<code>a</code>and<code>b</code>, and want to find out if <em>the objects</em> are related to each other through a<code>[[Prototype]]</code>chain?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="c1">// helper utility to see if `o1` is</span>
</span><span class="line"><span class="c1">// related to (delegates to) `o2`</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">isRelatedTo</span><span class="p">(</span><span class="nx">o1</span><span class="p">,</span> <span class="nx">o2</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">function</span> <span class="nx">F</span><span class="p">(){}</span>
</span><span class="line">    <span class="nx">F</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">o2</span><span class="p">;</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">o1</span> <span class="ow">instanceof</span> <span class="nx">F</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span> <span class="nx">a</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nx">isRelatedTo</span><span class="p">(</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">a</span> <span class="p">);</span> <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="objectprototypeisprototypeof"><code>Object.prototype.isPrototypeOf()</code></h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">isPrototypeOf</span><span class="p">(</span> <span class="nx">a</span> <span class="p">);</span> <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The question<code>isPrototypeOf(..)</code>answers is:<strong>in the entire</strong><code>[[Prototype]]</code><strong>chain of</strong><code>a</code><strong>, does</strong><code>Foo.prototype</code><strong>ever appear?</strong></p>

<p>What if you have two arbitrary objects, say<code>a</code>and<code>b</code>, and want to find out if <em>the objects</em> are related to each other through a<code>[[Prototype]]</code>chain?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="c1">// Simply: does `a` appear anywhere in</span>
</span><span class="line"><span class="c1">// `b`s [[Prototype]] chain?</span>
</span><span class="line"><span class="nx">a</span><span class="p">.</span><span class="nx">isPrototypeOf</span><span class="p">(</span> <span class="nx">b</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="behavior-delegation">Behavior Delegation</h1>

<p>Source: <a href="https://github.com/getify/You-Dont-Know-JS/blob/master/this %26 object prototypes/ch6.md">You Don’t Know JS: this &amp; Object Prototypes - Chapter 6: Behavior Delegation</a></p>

<h2 id="my-understanding-1">1. My understanding</h2>

<p>Considering we don’t actually have <code>class</code> in JavaScript, but we want the benefit of behaviour sharing around code entities. JavaScript employs behaviour delegation as the <code>[[Prototype]]</code>mechanism. It kinda differs from the traditional class-instance  thinking, but it’s still in the spectrum of OO, as a form of plain objects linking (delegation) instead of inheritance.</p>

<p>Classical inheritance is a code arrangement technique. For the cost of arranging objects in a hierarchy, you get message delegation for free. Delegation arranges objects in a horizontal space (side-by-side as peers) instead of a vertical hierarchy. So, can I say one outweighs another between behaviour delegation and traditional class theory? No, they are different assumptions that we don’t have true <code>class</code> in JavaScript.</p>

<p>Behavior delegation looks like a side-effect outcome on the way JavaScript strives to simulate class-oriented code to meet the expectations of most OO developers. For instance, <code>new</code> creates an automatic message delegation just like inheritance, name of <code>constructor</code> , introducing <code>class</code>in ES6. It’s probable that people added <code>prototype</code> aiming to simulate class behaviours.</p>

<p>Anyway, behaviour delegation works and I consider it as the right mental model to illustrate the chaos in JavaScript, which is much better than the contrived class thinking.</p>

<h2 id="background">2. Background</h2>

<p>JavaScript is <strong>almost unique</strong> among languages as perhaps the only language with the right to use the label “object oriented”, because it’s one of a very short list of languages where <strong>an object can be created directly, without a class at all.</strong></p>

<p>In JavaScript, there are no abstract patterns/blueprints for objects called “classes” as there are in class-oriented languages. <strong>JavaScript just has objects</strong>. In JavaScript, we don’t make <em>copies</em> from one object (“class”) to another (“instance”). <strong>We make links between objects.</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="kd">function</span> <span class="nx">Foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// ...</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="ow">new</span> <span class="nx">Foo</span><span class="p">();</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="ow">new</span> <span class="nx">Foo</span><span class="p">();</span>
</span><span class="line">
</span><span class="line"><span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span> <span class="nx">a</span> <span class="p">)</span> <span class="o">===</span> <span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span> <span class="c1">// true</span>
</span><span class="line"><span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span> <span class="nx">b</span> <span class="p">)</span> <span class="o">===</span> <span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span> <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>When<code>a</code>is created by calling<code>new Foo()</code>, one of the things (see Chapter 2 for all four steps) that happens is that<code>a</code>gets an internal<code>[[Prototype]]</code>link to the object that<code>Foo.prototype</code>is pointing at. <strong>We end up with two objects, linked to each other.</strong></p>

<p>The actual mechanism, the essence of what’s important to the functionality we can leverage in JavaScript, is <strong>all about objects being linked to other objects.</strong></p>

<h3 id="compared-to-traditional-inheritance">Compared to traditional inheritance</h3>

<p>In class-oriented languages, multiple copies (aka, “instances”) of a class can be made, like stamping something out from a mold. But in JavaScript, there are no such copy-actions performed. You don’t create multiple instances of a class. You can create multiple objects that <code>[[Prototype]]</code>link to a common object. But by default, no copying occurs, and thus these objects don’t end up totally separate and disconnected from each other, but rather, quite <strong>linked</strong>.</p>

<p>“inheritance” (and “prototypal inheritance”) and all the other OO terms just do not make sense when considering how JavaScript <em>actually</em> works (not just applied to our forced mental models).</p>

<p>Instead, “delegation” is a more appropriate term, because <strong>these relationships are not **<em>copies</em></strong> but delegation <strong><em>links</em></strong>.</p>

<h3 id="prototypal-inheritance--differential-inheritance">Prototypal Inheritance &amp;&amp; Differential Inheritance</h3>

<p>This mechanism is often called “<strong>prototypal inheritance</strong>” (we’ll explore the code in detail shortly), which is commonly said to be the dynamic-language version of “classical inheritance”. The word “inheritance” has a very strong meaning (see Chapter 4), with plenty of mental precedent. Merely adding “prototypal” in front to distinguish the <em>actually nearly opposite</em> behavior in JavaScript has left in its wake nearly two decades of miry confusion.”Inheritance” implies a <em>copy</em> operation, and JavaScript doesn’t copy object properties (natively, by default). Instead, JS creates a link between two objects, where one object can essentially <em>delegate</em> property/function access to another object. “<strong>Delegation</strong>” is a much more accurate term for JavaScript’s object-linking mechanism.</p>

<p>Another term which is sometimes thrown around in JavaScript is “<strong>differential inheritance</strong>”. The idea here is that we describe an object’s behavior in terms of what is <em>different</em> from a more general descriptor. For example, you explain that a car is a kind of vehicle, but one that has exactly 4 wheels, rather than re-describing all the specifics of what makes up a general vehicle (engine, etc).</p>

<p>But just like with “prototypal inheritance”, “differential inheritance” pretends that your mental model is more important than what is physically happening in the language. It overlooks the fact that object <code>B</code>is not actually differentially constructed, but is instead built with specific characteristics defined, alongside “holes” where nothing is defined. It is in these “holes” (gaps in, or lack of, definition) that delegation <em>can</em> take over and, on the fly, “fill them in” with delegated behavior.</p>

<h2 id="create-delegations-by-objectcreate">3. Create delegations by <code>Object.create</code></h2>

<p><code>Object.create(..)</code> creates a “new” object out of thin air, and links that new object’s internal <code>[[Prototype]]</code>to the object you specify.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;wendi&quot;</span> <span class="p">};</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nx">b</span><span class="p">.</span><span class="nx">name</span> <span class="c1">// &quot;wendi&quot;</span>
</span><span class="line"><span class="nx">b</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nx">a</span> <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="how-to-make-plain-object-delegations">How to make plain object delegations?</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">something</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="s2">&quot;Tell me something good...&quot;</span> <span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">bar</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span> <span class="nx">foo</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nx">bar</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nx">foo</span> <span class="c1">// true</span>
</span><span class="line"><span class="nx">bar</span><span class="p">.</span><span class="nx">something</span><span class="p">();</span> <span class="c1">// Tell me something good...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="how-to-make-delegations-to-perform-prototypal-inheritance">How to make delegations to perform “prototypal inheritance”?</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="kd">function</span> <span class="nx">Foo</span><span class="p">()</span> <span class="p">{};</span>
</span><span class="line"><span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">);</span> <span class="p">};</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">Bar</span><span class="p">()</span> <span class="p">{};</span>
</span><span class="line">
</span><span class="line"><span class="nx">Bar</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span>
</span><span class="line"><span class="nx">Bar</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// true</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="ow">new</span> <span class="nx">Bar</span><span class="p">();</span>
</span><span class="line"><span class="nx">b</span><span class="p">.</span><span class="nx">foo</span><span class="p">();</span> <span class="c1">// foo</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Inspection: <code>Bar.prototype</code> has changed</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="kd">function</span> <span class="nx">Foo</span><span class="p">()</span> <span class="p">{};</span>
</span><span class="line"><span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">);</span> <span class="p">};</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">Bar</span><span class="p">()</span> <span class="p">{};</span>
</span><span class="line">
</span><span class="line"><span class="nx">Bar</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// Object {constructor: function}</span>
</span><span class="line"><span class="nx">Bar</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span>
</span><span class="line"><span class="nx">Bar</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// Foo {}</span>
</span><span class="line"><span class="nx">Bar</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">bar</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;bar&quot;</span><span class="p">);</span> <span class="p">};</span>
</span><span class="line"><span class="nx">Bar</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// Foo {bar: function}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Inspection: <code>Bar.prototype</code> is not a reference (separated) to <code>Foo.prototype</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="kd">function</span> <span class="nx">Foo</span><span class="p">()</span> <span class="p">{};</span>
</span><span class="line"><span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">);</span> <span class="p">};</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">Bar</span><span class="p">()</span> <span class="p">{};</span>
</span><span class="line">
</span><span class="line"><span class="nx">Bar</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span>
</span><span class="line"><span class="nx">Bar</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">bar</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;bar&quot;</span><span class="p">);</span> <span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// Object {foo: function, constructor: function}</span>
</span><span class="line"><span class="nx">Bar</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// Function {bar: function}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Why not?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="nx">Bar</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)</span>
</span><span class="line"><span class="c1">// Cause it ends up Bar is no longer a function object.</span>
</span><span class="line">
</span><span class="line"><span class="nx">Bar</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">Foo</span><span class="p">)</span>
</span><span class="line"><span class="c1">// This links Bar.prototype to Foo, which is the function object. Foo.foo() is not a function.</span>
</span><span class="line">
</span><span class="line"><span class="nx">Bar</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span>
</span><span class="line"><span class="c1">// It just makes Bar.prototype be another reference to Foo.prototype</span>
</span><span class="line">
</span><span class="line"><span class="nx">Bar</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="ow">new</span> <span class="nx">Foo</span><span class="p">();</span>
</span><span class="line"><span class="c1">// It creates a new object, but Foo might have unexpected behaviours in constructor calling</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>ES6-standardized techniques</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="c1">// pre-ES6</span>
</span><span class="line"><span class="c1">// throws away default existing `Bar.prototype`</span>
</span><span class="line"><span class="nx">Bar</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span> <span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// ES6+</span>
</span><span class="line"><span class="c1">// modifies existing `Bar.prototype`</span>
</span><span class="line"><span class="nb">Object</span><span class="p">.</span><span class="nx">setPrototypeOf</span><span class="p">(</span> <span class="nx">Bar</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="how-to-envision-your-own-objectcreate">How to envision your own <code>Object.create</code>?</h3>

<p>This polyfill shows a very basic idea without handling the second parameter <code>propertiesObject</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="kd">function</span> <span class="nx">createAndLinkObject</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">function</span> <span class="nx">F</span><span class="p">(){}</span>
</span><span class="line">    <span class="nx">F</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">o</span><span class="p">;</span>
</span><span class="line">    <span class="k">return</span> <span class="ow">new</span> <span class="nx">F</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Polyfill on <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create">Object.create - MDN</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="k">if</span> <span class="p">(</span><span class="ow">typeof</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span> <span class="o">!=</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">Temp</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{};</span>
</span><span class="line">    <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">prototype</span><span class="p">,</span> <span class="nx">propertiesObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="k">if</span><span class="p">(</span><span class="nx">prototype</span> <span class="o">!==</span> <span class="nb">Object</span><span class="p">(</span><span class="nx">prototype</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">        <span class="k">throw</span> <span class="ne">TypeError</span><span class="p">(</span>
</span><span class="line">          <span class="s1">&#39;Argument must be an object, or null&#39;</span>
</span><span class="line">        <span class="p">);</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">      <span class="nx">Temp</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">prototype</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class="line">      <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="ow">new</span> <span class="nx">Temp</span><span class="p">();</span>
</span><span class="line">      <span class="nx">Temp</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class="line">      <span class="k">if</span> <span class="p">(</span><span class="nx">propertiesObject</span> <span class="o">!==</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperties</span><span class="p">(</span><span class="nx">result</span><span class="p">,</span> <span class="nx">propertiesObject</span><span class="p">);</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">
</span><span class="line">      <span class="c1">// to imitate the case of Object.create(null)</span>
</span><span class="line">      <span class="k">if</span><span class="p">(</span><span class="nx">prototype</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">         <span class="nx">result</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">      <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">  <span class="p">})();</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="towards-delegation-oriented-design">4. Towards Delegation-Oriented Design</h2>

<p>Pseudo-code for class theory</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="kd">class</span> <span class="nx">Task</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">id</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// constructor `Task()`</span>
</span><span class="line">    <span class="nx">Task</span><span class="p">(</span><span class="nx">ID</span><span class="p">)</span> <span class="p">{</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">ID</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">    <span class="nx">outputTask</span><span class="p">()</span> <span class="p">{</span> <span class="nx">output</span><span class="p">(</span> <span class="nx">id</span> <span class="p">);</span> <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">class</span> <span class="nx">XYZ</span> <span class="nx">inherits</span> <span class="nx">Task</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">label</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// constructor `XYZ()`</span>
</span><span class="line">    <span class="nx">XYZ</span><span class="p">(</span><span class="nx">ID</span><span class="p">,</span><span class="nx">Label</span><span class="p">)</span> <span class="p">{</span> <span class="k">super</span><span class="p">(</span> <span class="nx">ID</span> <span class="p">);</span> <span class="nx">label</span> <span class="o">=</span> <span class="nx">Label</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">    <span class="nx">outputTask</span><span class="p">()</span> <span class="p">{</span> <span class="k">super</span><span class="p">();</span> <span class="nx">output</span><span class="p">(</span> <span class="nx">label</span> <span class="p">);</span> <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">class</span> <span class="nx">ABC</span> <span class="nx">inherits</span> <span class="nx">Task</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// ...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pseudo-code for delegation theory</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="kd">var</span> <span class="nx">Task</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">setID</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ID</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="nx">ID</span><span class="p">;</span> <span class="p">},</span>
</span><span class="line">    <span class="nx">outputID</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">id</span> <span class="p">);</span> <span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="c1">// make `XYZ` delegate to `Task`</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">XYZ</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span> <span class="nx">Task</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nx">XYZ</span><span class="p">.</span><span class="nx">prepareTask</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ID</span><span class="p">,</span><span class="nx">Label</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">this</span><span class="p">.</span><span class="nx">setID</span><span class="p">(</span> <span class="nx">ID</span> <span class="p">);</span>
</span><span class="line">    <span class="k">this</span><span class="p">.</span><span class="nx">label</span> <span class="o">=</span> <span class="nx">Label</span><span class="p">;</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="nx">XYZ</span><span class="p">.</span><span class="nx">outputTaskDetails</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">this</span><span class="p">.</span><span class="nx">outputID</span><span class="p">();</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">label</span> <span class="p">);</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="c1">// ABC = Object.create( Task );</span>
</span><span class="line"><span class="c1">// ABC ... = ...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="avoid-shadowing-naming-things-the-same-if-at-all-possible">Avoid shadowing (naming things the same) if at all possible</h3>

<p>With the class design pattern, we intentionally named<code>outputTask</code>the same on both parent (<code>Task</code>) and child (<code>XYZ</code>), so that we could take advantage of overriding (polymorphism). In behavior delegation, we do the opposite: <strong>we avoid if at all possible naming things the same</strong> at different levels of the<code>[[Prototype]]</code>chain (called <strong>shadowing</strong>), because having those name collisions creates awkward/brittle syntax to disambiguate references, and we want to avoid that if we can.</p>

<p>This design pattern calls for less of general method names which are prone to overriding and instead more of descriptive method names, specific to the type of behavior each object is doing.<strong>This can actually create easier to understand/maintain code</strong>, because the names of methods (not only at definition location but strewn throughout other code) are more obvious (self documenting).</p>

<p>Setting properties on an object was more nuanced than just adding a new property to the object or changing an existing property’s value. Usually, shadowing is more complicated and nuanced than it’s worth, <strong>so you should try to avoid it if possible</strong>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="kd">var</span> <span class="nx">anotherObject</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">a</span><span class="o">:</span> <span class="mf">2</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">myObject</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span> <span class="nx">anotherObject</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nx">anotherObject</span><span class="p">.</span><span class="nx">a</span><span class="p">;</span> <span class="c1">// 2</span>
</span><span class="line"><span class="nx">myObject</span><span class="p">.</span><span class="nx">a</span><span class="p">;</span> <span class="c1">// 2</span>
</span><span class="line">
</span><span class="line"><span class="nx">anotherObject</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span> <span class="s2">&quot;a&quot;</span> <span class="p">);</span> <span class="c1">// true</span>
</span><span class="line"><span class="nx">myObject</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span> <span class="s2">&quot;a&quot;</span> <span class="p">);</span> <span class="c1">// false</span>
</span><span class="line">
</span><span class="line"><span class="nx">myObject</span><span class="p">.</span><span class="nx">a</span><span class="o">++</span><span class="p">;</span> <span class="c1">// oops, implicit shadowing!</span>
</span><span class="line">
</span><span class="line"><span class="nx">anotherObject</span><span class="p">.</span><span class="nx">a</span><span class="p">;</span> <span class="c1">// 2</span>
</span><span class="line"><span class="nx">myObject</span><span class="p">.</span><span class="nx">a</span><span class="p">;</span> <span class="c1">// 3</span>
</span><span class="line">
</span><span class="line"><span class="nx">myObject</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span> <span class="s2">&quot;a&quot;</span> <span class="p">);</span> <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Though it may appear that<code>myObject.a++</code>should (via delegation) look-up and just increment the<code>anotherObject.a</code>property itself <em>in place</em>, instead the<code>++</code>operation corresponds to<code>myObject.a = myObject.a + 1</code>.</p>

<p>That’s the reason why we use delegation on prototype chain, we should avoid using the same name as traditional class inheritance would do.</p>

<h3 id="save-state-on-delegators">Save state on delegators</h3>

<p>In general, with<code>[[Prototype]]</code>delegation involved, <strong>you want state to be on the delegators</strong>(<code>XYZ</code>,<code>ABC</code>), not on the delegate (<code>Task</code>). We benefit it from the implicit call-site <code>this</code>binding rules.</p>

<h3 id="comparison">Comparison</h3>

<p>OO style</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="kd">function</span> <span class="nx">Foo</span><span class="p">(</span><span class="nx">who</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">this</span><span class="p">.</span><span class="nx">me</span> <span class="o">=</span> <span class="nx">who</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">identify</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="s2">&quot;I am &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">me</span><span class="p">;</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">Bar</span><span class="p">(</span><span class="nx">who</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">Foo</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span> <span class="k">this</span><span class="p">,</span> <span class="nx">who</span> <span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nx">Bar</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span> <span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nx">Bar</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">speak</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">alert</span><span class="p">(</span> <span class="s2">&quot;Hello, &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">identify</span><span class="p">()</span> <span class="o">+</span> <span class="s2">&quot;.&quot;</span> <span class="p">);</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">b1</span> <span class="o">=</span> <span class="ow">new</span> <span class="nx">Bar</span><span class="p">(</span> <span class="s2">&quot;b1&quot;</span> <span class="p">);</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">b2</span> <span class="o">=</span> <span class="ow">new</span> <span class="nx">Bar</span><span class="p">(</span> <span class="s2">&quot;b2&quot;</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nx">b1</span><span class="p">.</span><span class="nx">speak</span><span class="p">();</span>
</span><span class="line"><span class="nx">b2</span><span class="p">.</span><span class="nx">speak</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>OO style features <code>constructor</code> which introduces a lot of extra details that you don’t <em>technically</em> need to know at all times.</p>

<p><img src="https://raw.githubusercontent.com/ifyouseewendy/ifyouseewendy.github.io/source/image-repo/you-dont-know-js/OO.png" alt="OO.png" /></p>

<p>OLOO style</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="kd">var</span> <span class="nx">Foo</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">init</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">who</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">this</span><span class="p">.</span><span class="nx">me</span> <span class="o">=</span> <span class="nx">who</span><span class="p">;</span>
</span><span class="line">    <span class="p">},</span>
</span><span class="line">    <span class="nx">identify</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="s2">&quot;I am &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">me</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">Bar</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span> <span class="nx">Foo</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nx">Bar</span><span class="p">.</span><span class="nx">speak</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">alert</span><span class="p">(</span> <span class="s2">&quot;Hello, &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">identify</span><span class="p">()</span> <span class="o">+</span> <span class="s2">&quot;.&quot;</span> <span class="p">);</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">b1</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span> <span class="nx">Bar</span> <span class="p">);</span>
</span><span class="line"><span class="nx">b1</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span> <span class="s2">&quot;b1&quot;</span> <span class="p">);</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">b2</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span> <span class="nx">Bar</span> <span class="p">);</span>
</span><span class="line"><span class="nx">b2</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span> <span class="s2">&quot;b2&quot;</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nx">b1</span><span class="p">.</span><span class="nx">speak</span><span class="p">();</span>
</span><span class="line"><span class="nx">b2</span><span class="p">.</span><span class="nx">speak</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>OLOO-style code has <em>vastly less stuff</em> to worry about, because it embraces the <strong>fact **that the only thing we ever really cared about was the **objects linked to other objects</strong>.</p>

<p><img src="https://raw.githubusercontent.com/ifyouseewendy/ifyouseewendy.github.io/source/image-repo/you-dont-know-js/OLOO.png" alt="OLOO.png" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Review] 学习乐观]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2016/08/30/review-xue-xi-le-guan/"/>
    <updated>2016-08-30T22:03:04+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2016/08/30/review-xue-xi-le-guan</id>
    <content type="html"><![CDATA[<table class="custom">
  <tbody>
    <tr>
      <td><strong>Book</strong></td>
      <td>学习乐观</td>
    </tr>
    <tr>
      <td><strong>Author</strong></td>
      <td><a href="https://en.wikipedia.org/wiki/Martin_Seligman">Martin Seligman</a></td>
    </tr>
    <tr>
      <td><strong>Link</strong></td>
      <td><a href="https://book.douban.com/subject/4934590/">book.douban.com/subject/4934590/</a></td>
    </tr>
  </tbody>
</table>

<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">前言</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">第1章 - 悲观者与乐观者的画像</a></li>
  <li><a href="#section-2" id="markdown-toc-section-2">第2章 - 悲观者的无助源自何处</a></li>
  <li><a href="#section-3" id="markdown-toc-section-3">第3章 - 悲观者严重的挫折</a></li>
  <li><a href="#section-4" id="markdown-toc-section-4">第4章 - 从悲观滑向抑郁</a></li>
  <li><a href="#section-5" id="markdown-toc-section-5">第5章 - 想法决定悲喜人生</a></li>
  <li><a href="#section-6" id="markdown-toc-section-6">第6~11章 - 乐观的好处</a></li>
  <li><a href="#section-7" id="markdown-toc-section-7">第6章 - 乐观奠定成功的事业</a></li>
  <li><a href="#section-8" id="markdown-toc-section-8">第7~8章 - 解释风格对孩子的影响</a></li>
  <li><a href="#section-9" id="markdown-toc-section-9">第12章 - 怎样习得乐观</a></li>
  <li><a href="#section-10" id="markdown-toc-section-10">第15章 - 乐观可以有弹性</a></li>
  <li><a href="#section-11" id="markdown-toc-section-11">总结</a></li>
</ul>

<h3 id="section">前言</h3>

<p>前两天，看了占东分享的这个关于 Optimism 的演讲 <a href="https://github.com/raganwald/presentations/blob/master/optimism.md">raganwald/presentations</a>。有点感触，一直自认为是悲观主义者。所以在这个演讲的介绍下，找到了 Martin Seligman 博士的这本书 Learned Optimism，中文名为《活出最乐观的自己/学习乐观》。</p>

<p>如果感兴趣，可以尝试下这个在线测试 <a href="https://www.authentichappiness.sas.upenn.edu/questionnaires/optimism-test">optimism-test</a>。如果已经足够乐观，那大可不必阅读这本书。</p>

<p><strong>思维导图</strong></p>

<p><img src="https://raw.githubusercontent.com/ifyouseewendy/ifyouseewendy.github.io/source/image-repo/learned_optimism.png" alt="learned_optimism" /></p>

<h3 id="section-1">第1章 - 悲观者与乐观者的画像</h3>

<blockquote>
  <p>悲观的人的特征是，他相信坏事都是因为自己的错，这件事会毁掉他的一切，会持续很久。而乐观的人在遇到同样的厄运时，会认为现在的失败是暂时性的，每个失败都有它的原因，不是自己的错，可能是环境、运气或其他人为原因的后果。这种人不会被失败击倒。在面对恶劣环境时，他们会把它看成是一种挑战，更努力地去克服它。</p>
</blockquote>

<p>心理学在过去20年最显著的发现就是：人可以选择他想要的思维模式。</p>

<p>我们从个人控制理论开始，主要涉及两个彼此交错的概念：</p>

<ul>
  <li>习惯性无助 Learned helplessness 是一个放弃的反应，是源自『无论你怎么努力都于事无补』的想法的行为。</li>
  <li>解释风格 Explanatory style 是习惯性无助的核心，是你对为什么这件事会发生的习惯性的解释方式。（每个人在碰到不如意的事情时，第一件事就是去解释这个不如意。这些解释决定了我们下一步怎么做。我们的解释风格和想法不仅影响着我们的行动，也影响着我们的感觉和情绪。）</li>
</ul>

<h3 id="section-2">第2章 - 悲观者的无助源自何处</h3>

<p>关于心理学简史：</p>

<ul>
  <li>心理分析学派、佛洛依德派，强调精神活动的隐意识方面，并大胆的以性为切入点，将人的精神问题归因为童年的心理创伤（佛洛依德认为梦到牙齿掉下来代表着阉割以及手淫的罪恶感，做梦的人害怕他的父亲用阉割的方式惩罚他手淫的罪恶。）</li>
  <li>行为主义学派，坚持一个人的所有行为只受他得到的奖励和惩罚所决定：一个被奖励的行为可能会重复，而一个被惩罚的行为则可能会被压抑，如此是已。</li>
  <li>认知心理学，它保留了对改变的乐观信念，认为『自我』可以改进自己。</li>
</ul>

<h3 id="section-3">第3章 - 悲观者严重的挫折</h3>

<p>解释风格有三种维度——永久性、普遍性和人格化。普遍性和永久性控制着你的行为，你的无助感的持久性，以及无助感涉及的层面；人格化控制着你如何看待自己，对自己的感受。当不好的事情发生时，悲观的人怪罪自己，乐观的人怪罪旁人或环境；当好事情发生时，悲观的人归功于旁人或环境，而乐观的人归功于自己。</p>

<p>根据书中第3章的调查问卷，自己做了如下笔记：</p>

<p><img src="https://raw.githubusercontent.com/ifyouseewendy/ifyouseewendy.github.io/source/image-repo/learned_optimism_questionaire_0826.jpeg" alt="learned_optimism_questionaire_0826" /></p>

<p>将最后的总结内容誊写在这：</p>

<ul>
  <li>总体上，我得到了『中等悲观』的分数。</li>
  <li>我只在 PvB 上表现出了乐观，即我不会认为事情会普遍的不好。</li>
  <li>但是我在其他『解释风格』，即永久性和人格化上，我的表现非常糟糕。这说明了
    <ul>
      <li>我惯于把坏的事情当做永久、一成不变的状态，而好的事情只作一时之幸</li>
      <li>我的自尊非常低，关于将错误归咎自己，而将成功归因环境与他人</li>
    </ul>
  </li>
  <li>我理解自己的得分，不禁对自己一直以来希望秉承的『谦虚』和『客观』表示强烈怀疑！</li>
</ul>

<h3 id="section-4">第4章 - 从悲观滑向抑郁</h3>

<p>抑郁的人通常会在思想、情绪、行为和身体四个方面发生消极的变化。</p>

<blockquote>
  <p>抑郁症患者通常在刚醒来时情绪处于最低潮，你躺在床上想着过去种种的失败，想着今天可能要面临的失败，假如你躺在床上不起身，这些失败的想法就像一床棉被一样把你包裹着，如果你爬起床，开始一天的活动，通常情绪会变好些。到了下午3点到6点，情绪又会低落下去。晚上通常是一天中最不抑郁的时间，清晨3点到5点，如果你没睡着，则是情绪最差的时候，情绪在一天中是有所变化的。</p>
</blockquote>

<p>看到这段话，惊得我一身冷汗，好像回到曾经大学宿舍那个冰冷的小屋。回想那段日子，只是觉着自己从悬崖边走过，今天找到了背后真正的含义。</p>

<h3 id="section-5">第5章 - 想法决定悲喜人生</h3>

<p>认知疗法有五种策略</p>

<ul>
  <li>学会去认识在情绪最低沉时自动冒出来的想法</li>
  <li>学会与这个自动冒出来的想法抗争</li>
  <li>学会用不同的解释——重新归因（reattribution）去对抗原有的想法</li>
  <li>学会如何把自己从抑郁的思绪中引开</li>
  <li>学会去认识并且质疑那些控制你并引起你抑郁的假设</li>
</ul>

<blockquote>
  <p>男人碰到事情会去做，而不会反复去想；而女人喜欢钻牛角尖，把事情翻来覆去的想——反刍（rumination），去分析它为什么是这样。女性看待事情的方式造成女性得抑郁症的比例是男性的两倍。</p>
</blockquote>

<h3 id="section-6">第6~11章 - 乐观的好处</h3>

<p>作者从个人事业、身体、孩子、体育赛事、企业组织、竞选几个角度阐释了，乐观的人相对表现更好。</p>

<blockquote>
  <p>你可能会想，谁会碰到较多不幸的事件呢？答案是悲观的人。因为他们比较被动，较少主动采取行动来避免不好的事，而且在事情发生之后也较少采取行动来终止这些事。</p>
</blockquote>

<p>但是我们需要找到平衡点，即『不盲目乐观』。</p>

<ul>
  <li>习惯性乐观不是教你自私、自大，让别人不能忍受，它要教你在遇到失败挫折时如何与自己对话。你要学会如何在收到打击时，从更具鼓励性的角度来考虑挫折或困境。</li>
  <li>使用乐观技术的基本原则是先问，在某一个特定情况下失败的代价是什么。如果失败的代价很高，那么就不应该乐观。</li>
</ul>

<h3 id="section-7">第6章 - 乐观奠定成功的事业</h3>

<p>之前的阅读，让我提出怀疑：自己暂时偏悲观的人格，一定是坏的吗？如果我是个乐观的人，会比现在活得更好吗？一直以来我要求自己『谦虚』和『客观』，但是这同样部分导致了我在测试中体现的悲观分数。</p>

<p>这一章的阅读可以回答我之前的疑问，主要有以下几个观点：</p>

<ul>
  <li>传统的成功观点并不完善。要成功，除了具备能力和动机之外，还需要坚持，遇到挫折也不放弃的坚持，而乐观的解释风格则是坚持的灵魂。</li>
  <li>成功的生活需要大部分时间的乐观和偶尔的悲观。我理解这个平衡点位于『不盲目乐观』。</li>
  <li>悲观不是一无是处，就像头脑特工队里试图阐释忧忧（sadness）存在的意义一样，悲观让我们更冷静、对事情有更清楚的判断。所以轻度悲观是可以接受的状态。</li>
</ul>

<p>这一章同样回答了心中另一个问题，国家动用百万资金支持心理研究，除了为解决各体的心理问题外，有什么更实际（物质层面）的意义？</p>

<p>由于销售是个时常遭受挫折的职业，公司花费大量的人力物力对新人进行培训，但是高离职率导致公司需要承担不菲的损失。大都会保险，就是这样一家企业。Seligman 博士帮助大都会筛选入职人员时，将乐观悲观的人格作为一项新的考量，降低了离职率，为公司在财务层面节省了不菲的资金。</p>

<h3 id="section-8">第7~8章 - 解释风格对孩子的影响</h3>

<ul>
  <li>孩子8岁时，乐观或悲观的解释风格基本定型了。</li>
  <li>孩子的解释风格会受到三种因素的影响：
    <ul>
      <li>孩子从父母身上学到的各种事件的因果分析，尤其是妈妈的</li>
      <li>孩子听到的批评方式，即如果这些批评是永久的、普遍的、内在的，那么他对自己的看法就会转向悲观</li>
      <li>孩子早期生活经验中的生离死别和巨大变故。如果这个事故是永久和普遍的，那么绝望的种子会深埋孩子心中；如果这些事件好转了，他会比较乐观。父母离异或经常争吵是最容易引发孩子抑郁的时间。</li>
    </ul>
  </li>
  <li>失去乐观，传统意义上的聪明才智对成功没有没有什么意义。</li>
</ul>

<h3 id="section-9">第12章 - 怎样习得乐观</h3>

<p>改变悲观的解释风格有两种方法：</p>

<ul>
  <li>转移注意。当不好的事情发生时，安排一个时间去想它；当消极的想法一出现，就立刻把它写下来。</li>
  <li>反驳。从长远来看，反驳更有效
    <ul>
      <li>保持距离。我们一般都会和别人无理的指责保持一个距离。但是要我们与自己的指责保持距离就很困难，因为我们会认为，如果这个指责来自内心，那么它一定是真的。大错特错！我们在遭受挫折时对自己说的话可能和不怀好意的人说的一样毫无根据。</li>
      <li>反驳的四个过程
        <ul>
          <li>寻找证据</li>
          <li>其他可能性</li>
          <li>暗示。即使我的消极想法是对的，那么这个想法的暗示是什么？</li>
          <li>用处。有时候，这些想法的后果比想法的真实性更重要。回问自己，这些想法是否有破坏性？</li>
        </ul>
      </li>
      <li>记录整个过程，找朋友说出自己的反驳，不断练习。</li>
    </ul>
  </li>
</ul>

<h3 id="section-10">第15章 - 乐观可以有弹性</h3>

<p>依作者观点，抑郁症在美国泛滥的机制是习惯性无助，主要原因则是：</p>

<ul>
  <li>个人主义的兴起，即『特大号』的自我。这是一个强调个人控制的时代，自我膨胀已经到了危险的地步，个体的无助需要被治疗。我们的欲望、奢求越来越多，失望、无助便随之而来。</li>
  <li>公共意识的消失。人类需要生活在意义和希望中。关于生命的无意义感，有意义的一个必要条件就是它必须依附到一个比自我更大的东西上去。你可以依附的东西越大，你所拥有的意义越多。而不断发生的政治事件削弱了人们对国家的期望，社会趋势也减弱了人们对神袛和家庭的依赖。公共意识即指对国家、神袛和家庭的看法。</li>
  <li>简要来说，即对自己的过度关怀和对团体的不够关心。</li>
</ul>

<p>出路何在：</p>

<ul>
  <li>找出特大号自我的优势，运用习惯性乐观。</li>
  <li>改变个人与团体之间的关系，寻找新的平衡点。</li>
</ul>

<p>如何实践，作者提到了一个词『道德慢跑』，基于这样的观点：我们慢跑是因为我们期望用用每一天的自我牺牲去换取长远的自我利益。同样，我们可以利用增加公共意识来平衡自我和团体的关系，做一场道德慢跑：</p>

<ul>
  <li>放弃一些享乐行为，把一周中的一个晚上用于从事一件对团体、社区有利的活动</li>
  <li>当你读到某个领你感动的事迹时，写信给那个人。写信去鼓励那些值得你尊敬的人。一个星期花三个小时来写这种信，惩恶扬善</li>
  <li>教导你的孩子如何施舍。叫他们把自己零用钱的1/4留下来捐出去，让他们自己去找值得捐的人或事情。</li>
</ul>

<blockquote>
  <p>如果你为社区、为团体服务得够久的话，你就会找到生命的意义，你会发现你越来越不容易抑郁，也变得不容易得感冒，你越来越喜欢参加团体的活动而不是关起门来独乐乐。更重要的是，你心灵中的那块空虚，那个个人主义所滋养的无意义感会被填的满满的。</p>
</blockquote>

<h3 id="section-11">总结</h3>

<p>女朋友发现我在看这本书，一脸坏笑，闪烁其词。『少年，你心理有病啊？』说实话，我确实觉着自己心理有点问题。我的常态是偏失落的，没有大喜大悲，但总是对自己不满。『读鸡汤文有用吗？』每个人看到的不一样吧。我相信，好多时候我们的行为都是处于”the zombie mode”，习惯的行为模式，或者说心理上的条件反射。不经过思考与剖析，有太多想法不可察觉。这本书至于我最大的意义在于提供了一个全新的角度，让我更加了解自己。它说服我让我真正相信乐观是一个优点，而不是一句口号。我也愿意自此调整，摆脱现在『中度悲观』的心理状态。作者最后给出的调节办法，我不觉着深刻有效，本质上还是在认可乐观的前提条件下，进行观察、反思、自我调节的良性循环。书中关于如何培养孩子的乐观心态，如何将乐观应用在企业管理以及预测总统等活动的事例，都非常耐人寻味。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Name Driven Development]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2016/05/26/name-driven-development/"/>
    <updated>2016-05-26T18:53:08+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2016/05/26/name-driven-development</id>
    <content type="html"><![CDATA[<blockquote>
  <p>“Any fool can write code that a computer can understand. Good programmers write code that humans can understand.” - Martin Fowler</p>
</blockquote>

<blockquote>
  <p>“There are only two hard things in Computer Science: cache invalidation and naming things.” — Phil Karlton</p>
</blockquote>

<p>“Name Driven Development”, this is a ghost topic you can’t find on wiki. I just use it to remind me how much importance a good name can give. Maybe it’s just another bad name😂.</p>

<p>In a nutshell, why naming matters a lot is that it’s so closely related to refactoring. Here are some basic ideas I conclude</p>

<ul>
  <li>Good name reveals intention, shows legibility, and keeps clarity.</li>
  <li>Keep refactoring, until the name reveals the intention in an easy way.</li>
  <li>Don’t bother about naming too much when developing. Let the test and implementation help reveal it’s purpose. Then make a good name.</li>
</ul>

<p>To tackle this non-existing topic, I’ve googled around, reading and thinking. Here are some notes I made (to be updated).</p>

<hr />

<blockquote>
  <p><a href="https://ilinkuo.wordpress.com/2013/05/07/whats-in-a-name/#more-137">What’s in a Name? - ilinkuo</a></p>
</blockquote>

<p>Your Names Tell a Story about Your Design</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/name-drive-development/your_names_tell_a_story_about_your_design.png" alt="your_names_tell_a_story_about_your_design" /></p>

<blockquote>
  <p><a href="http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882">Clean Code: Chapter 2, “Meaningful Names” - Uncle Bob</a></p>

  <p>The “definitive” guide</p>
</blockquote>

<p><em>Good</em></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/name-drive-development/meaningful_names_basic.png" alt="meaningful_names_basic" /></p>

<p><em>Better</em></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/name-drive-development/meaningful_names_advanced.png" alt="meaningful_names_advanced" /></p>

<blockquote>
  <p><a href="http://arlobelshee.com/good-naming-is-a-process-not-a-single-step/">Good naming is a process, not a single step - Arlo Belshee</a></p>

  <p>This serial posts provide a methodology, which explains the naming process in a clear and specific way. The first four steps aim at how to better name considering implementation, then move to thinking of intent, and domain abstraction.</p>
</blockquote>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/name-drive-development/good_naming_is_a_process.png" alt="good_naming_is_a_process" /></p>

<h3 id="summary">Summary</h3>

<ul>
  <li>Missing</li>
  <li>Nonsense</li>
  <li>Honest</li>
  <li>Honest and Complete</li>
  <li>Does the Right Thing</li>
  <li>Intent</li>
  <li>Domain Abstraction</li>
</ul>

<h3 id="why">Why</h3>

<p>The answer to that question lies at the heart of understanding, preventing, and paying off technical debt.</p>

<ul>
  <li>Indebted code is any code that is hard to scan.</li>
  <li>Technical debt is anything that increases the difficulty of reading code.</li>
</ul>

<p><em>Shouldn’t the definition of technical debt be something about the cost and risk of changing code?</em></p>

<p>It turns out that the largest single thing developers <strong>spend time doing is reading code</strong>. More than design, more than writing code, more than scanning, even more than meetings (well, probably).</p>

<p><strong>Bugs come from incomplete understanding</strong>. Incomplete understanding arises when the system is harder to understand than we can store in our heads at once.</p>

<p>So if our definition of technical debt is code that is difficult, expensive, or risky to change, then the root cause of that is code that is hard to scan. And how do we make code easy to scan? Use good names to encapsulate details.</p>

<h3 id="how">How</h3>

<p>If we want to make code more scannable, we need to increase the percentage of relevant information that it screams at you. Which also means hiding the irrelevant information.</p>

<p>The process of reducing debt is simple:</p>

<ul>
  <li>Look at something.</li>
  <li>Have an insight.</li>
  <li>Write it down.
    <ul>
      <li>Ccomment. But <strong>comments</strong> aren’t actually part of the code. They duplicate the code, which causes all the usual duplication problems.</li>
      <li>If your insight is structural then it belongs in a <strong>name</strong>. If it is a runtime insight then use an <strong>assertion</strong>.</li>
      <li>Assertions need to be easy to find. So don’t litter them around your core code. Express your insight as an example and write it down in a test. And name the test about the insight (not about what code it happens to execute).</li>
      <li>So, insights belong in names.</li>
    </ul>
  </li>
  <li>Check it in.
    <ul>
      <li>Express your intent by naming your commit using a message.</li>
    </ul>
  </li>
</ul>

<p>The insight loop is all there is</p>

<ul>
  <li>Refactoring legacy code is running this loop and writing stuff down in names.</li>
  <li>Understanding legacy code is running this loop and writing stuff down as examples in tests.</li>
  <li>TDD is running this loop three times:
    <ul>
      <li>First a loop where we look at the customer interview and we write it down as one example in a test.</li>
      <li>Second a loop where we look at the test and we write it down in names in the code.</li>
      <li>Third a loop of refactoring the (new) legacy code.</li>
    </ul>
  </li>
  <li>Design is a loop where the place you look is “how hard was it to write this test” and you write down insights by changing names (usually fixing the Does the Right Thing step).</li>
</ul>

<h3 id="steps">Steps</h3>

<p>Each transition is about refactoring.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/name-drive-development/good_naming_is_a_process_table.png" alt="good_naming_is_a_process_table" /></p>

<blockquote>
  <p><a href="https://stackoverflow.com/posts/422093/revisions">krosenvold</a> answer on <a href="https://stackoverflow.com/questions/421965/anyone-else-find-naming-classes-and-methods-one-of-the-most-difficult-part-in-pr/423140#423140">Stack Overflow - Anyone else find naming classes and methods one of the most difficult part in programming?</a></p>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">function programming_job(){
</span><span class="line">    while (i make classes){
</span><span class="line">         Give each class a name quickly; always fairly long and descriptive.
</span><span class="line">         Implement and test each class to see what they really are.
</span><span class="line">         while (not satisfied){
</span><span class="line">            Re-visit each class and make small adjustments
</span><span class="line">         }
</span><span class="line">    }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <p><a href="http://programmers.stackexchange.com/users/31260/gnat">gnat</a> answered on <a href="http://programmers.stackexchange.com/questions/129961/are-there-good-techniques-or-tests-for-naming-types">Stack Exchange - Are there good techniques or tests for naming types?</a></p>
</blockquote>

<p>For naming, there are six techniques that were proven to work for me:</p>

<ul>
  <li>spend a lot of time on inventing names</li>
  <li>use code reviews</li>
  <li>don’t hesitate to rename</li>
  <li>spend a lot of time on inventing names</li>
  <li>use code reviews</li>
  <li>don’t hesitate to rename</li>
</ul>

<blockquote>
  <p><a href="http://www.gameproducer.net/2008/11/11/the-7-worst-verbs-programmers-use-in-function-calls/">The 7 Worst Verbs Programmers Use In Function Calls - Juuso Hietalahti</a></p>
</blockquote>

<ul>
  <li>dispatch</li>
  <li>do</li>
  <li>resolve</li>
  <li>handle</li>
  <li>manage</li>
  <li>perform</li>
  <li>populate</li>
</ul>

<blockquote>
  <p><a href="http://objology.blogspot.com/2011/09/one-of-best-bits-of-programming-advice.html">One of the Best Bits of Programming Advice I ever Got</a></p>
</blockquote>

<p>Don’t make objects that end with ‘er’.</p>

<ul>
  <li>Managers - Every time I see one of these, I cringe. People will usually tell me what it does, long before they can tell me what it is. Is it a registry? Fine call it a registry. Is it a history or a log? Call it that. Is it a factory? Call it that.</li>
  <li>Controllers - Only good controller object I’ve made in the last 20 years was an interface to a BallastVoltageController that represented a real world object. The fact that every single MVC implementation in the world has had a different role for Controller ought to tell us something about how well that idea fit.</li>
  <li>Organizer (and many like them) - Focus is on what it does. This is a great example of how easy it is to turn many of these ‘ers’ into nouns. Call it an Organization. Now we’re focusing on what it is.</li>
  <li>Analyzer/Renderer/etc - Definitely examples of “worker” objects. What if they had been Analysis/Rendering/etc.</li>
  <li>Builder/Loader/Reader/Writer/etc - Remove the focus from the objects being manipulated, and tend assume to much responsibility themselves.</li>
</ul>

<blockquote>
  <p><a href="http://www.carlopescio.com/2011/04/your-coding-conventions-are-hurting-you.html">Your coding conventions are hurting you - Carlo Pescio</a></p>

  <p>Great article explaining four harmful conventions with obvious examples. There is a following post, <a href="http://www.carlopescio.com/2012/03/life-without-controller-case-1.html">Life without a controller</a></p>
</blockquote>

<p>From a distance, everything is object oriented, extra-cool, modern-flexible-etc, but as you get closer, you realize it’s just a thin veneer over procedural thinking (and don’t even get me started about being “modern”).</p>

<p>Fake OO names and harmful conventions</p>

<ul>
  <li>the -er suffix</li>
  <li>the -able suffix</li>
  <li>the -Object suffix</li>
  <li>the I- prefix</li>
</ul>

<p><strong>Manager, Helper, Handler…</strong></p>

<p>Good ol’ Peter Coad used to say: Challenge any class name that ends in “-er” (e.g. Manager or Controller). If it has no parts, change the name of the class to what each object is managing. If it has parts, put as much work in the parts that the parts know enough to do themselves (that was the “<strong>er-er Principle</strong>”).</p>

<ul>
  <li>Manager. When you need a Manager, it’s often a sign that the Managed are just plain old data structures, and that the Manager is the smart procedure doing the real work.</li>
  <li>Handler, again, is an obvious resurrection of procedural thinking. What is an handler if not a damn procedure?</li>
</ul>

<p><strong>Something-able</strong></p>

<p>It’s like calling a nail “Hammerable”, because you known, that’s what you do with a nail, you hammer it. It encourages procedural thinking, and leads to ineffective abstractions.</p>

<p><strong>Something-Object</strong></p>

<p>When you don’t know how to name something, pick some dominant trait and add Object to the end. Again, the problem is that the “dominant trait” is moving us away from the concept of an object. Object is dropped in just to avoid more careful thinking about the underlying concept.</p>

<p><strong>ISomething</strong></p>

<p>The problem is that it’s too easy to fall into the trap, and just take a concrete class name, put an I in front of it, and lo and behold!, you got an interface name. Sort of calling a concept IDollar instead of Currency.</p>

<p>Eg.</p>

<ul>
  <li>IList to RandomAccessContainer</li>
  <li>IEnumerable to Sequence.
    <ul>
      <li>A List is an IEnumerable (what??)</li>
      <li>A List is a Sequence (well, all right!)</li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>How to Name Things: the solution to the hardest problem in programming - Peter Hilton <a href="https://skillsmatter.com/skillscasts/5747-how-to-name-things-the-solution-to-the-hardest-problem-in-programming">video</a>, <a href="http://www.slideshare.net/pirhilton/how-to-name-things-the-hardest-problem-in-programming">slide</a></p>

  <p>Taking advice from writers, funny quotes, like Stephen King on refactoring, Hemingway on modelling with personas, .etc.</p>
</blockquote>

<p>Remember: “rename” is the simplest but most effective refactoring. Use it.</p>

<p><strong>Gater domain-specific vocabulary</strong>. Scan the domain model entities Wikipedia pages for names of related concepts. Read novels set in your customer’s domain to learn their jargon. Find out what they really mean.</p>

<p>Comments: the basics</p>

<ul>
  <li>Don’t say what the code does (because the code already says that)</li>
  <li>Don’t explain awkward logic (improve the code to make it clear)</li>
  <li>Don’t add too many comments (it’s messy and they’ll get out of date)</li>
  <li>Explain why the code exists
    <ul>
      <li>When should I use this code?</li>
      <li>When shouldn’t I use it?</li>
      <li>What are the alternatives to this code?</li>
    </ul>
  </li>
</ul>

<p>How to write good comments</p>

<ul>
  <li>Try to write good code first</li>
  <li>Try to write a one-sentence comment</li>
  <li>Refactor the code until the comment is easy to write</li>
  <li>Now write a good comment</li>
  <li>Don’t forget the rules of good writing. (eg. remove unnecessary comments)</li>
</ul>

<p>P.S. Peter also has several posts talking about commenting, check <a href="http://hilton.org.uk/blog/how-to-comment-code">How to comment code</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Concurrency Article Collection]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2016/02/16/ruby-concurrency-article-collection/"/>
    <updated>2016-02-16T20:04:50+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2016/02/16/ruby-concurrency-article-collection</id>
    <content type="html"><![CDATA[<p>This an article collection about concurrency in Ruby, which benefits me a lot and to be continued.</p>

<blockquote>
  <p><a href="http://www.jstorimer.com/blogs/workingwithcode/7766063-threads-not-just-for-optimizations">Threads, Not Just for Optimisations - Jesse Storimer</a></p>
</blockquote>

<p>Threads can help us organize our programs.</p>

<p>When a signal is delivered to a multithreaded process that has established a signal handler, the kernel arbitrarily selects one thread in the process to which to deliver the signal and invokes the handler in that thread. So Ruby uses a dedicated thread to handle incoming Unix signals. This has nothing to do with speeding things up, it’s just good programming practice.</p>

<p>When you spawn a new Unix process using fork, you really should either wait for it to finish using Process.wait, or detach from it using Process.detach. The reason is that when the process exits, it leaves behind some information about its exit status. This status info can’t be cleaned up until it’s been consumed by the parent process using Process.wait. When you use something like Process.spawn or backticks, Process.wait is called internally to cleanup the aforementioned status info. So Process.detach is just a thin wrapper around Process.wait, using a background thread to wait for the return value of Process.wait, while the main thread continues execution concurrently. Again, this has nothing to do with speed, but allows the proper housekeeping to be done without burdening the program with extra state.</p>

<blockquote>
  <p><a href="http://concur.rspace.googlecode.com/hg/talk/concur.html#title-slide">Concurrency is not Parallelism (it’s better) - Rob Pike</a></p>
</blockquote>

<p>Go provides</p>

<ul>
  <li>concurrent execution (coroutines. They’re a bit like threads, but they’re much cheaper. Goroutines are multiplexed onto OS threads as required. When a goroutine blocks, that thread blocks but no other goroutine blocks.)</li>
  <li>synchronization and messaging (channels)</li>
  <li>multi-way concurrent control (select)</li>
</ul>

<p>Concurrency vs. Paralelism</p>

<ul>
  <li>Concurrency is about dealing with lots of things at once.</li>
  <li>Parallelism is about doing lots of things at once.</li>
  <li>Not the same, but related.</li>
  <li>One is about structure (design), one is about execution.</li>
  <li>Concurrency provides a way to structure a solution to solve a problem that may (but not necessarily) be parallelizable.</li>
</ul>

<p>Concurrency plus communication</p>

<ul>
  <li>Concurrency is a way to structure a program by breaking it into pieces that can be executed independently.</li>
  <li>Communication is the means to coordinate the independent executions.</li>
  <li>This is the Go model and (like Erlang and others) it’s based on CSP (Communicating Sequential Processes)</li>
</ul>

<blockquote>
  <p><a href="https://blog.engineyard.com/2011/ruby-concurrency-and-you">Ruby, Concurrency, and You - Engine Yard</a></p>
</blockquote>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/RCAC-ruby_support.png" alt="RCAC-ruby_support.png" /></p>

<blockquote>
  <p><a href="https://github.com/jruby/jruby/wiki/Concurrency-in-jruby">Concurrency in JRuby</a></p>
</blockquote>

<p>In general, the safest path to writing concurrent code in JRuby is the same as on any other platform:</p>

<ul>
  <li>Don’t do it, if you can avoid it.</li>
  <li>If you must do it, don’t share data across threads.</li>
  <li>If you must share data across threads, don’t share mutable data.</li>
  <li>If you must share mutable data across threads, synchronize access to that data.</li>
</ul>

<p>Thread Safety refers to the ability to perform operations against a shared structure across multiple threads and know there will be no resulting errors or data integrity issues.</p>

<p>Volatility refers to the visibility of changes across threads on multi-core systems that may have thread or core-specific views of system memory.</p>

<p>Atomicity refers to the ability to perform a write to memory based on some view of that memory and to know the write happens before the view is invalid.</p>

<blockquote>
  <ul>
    <li><a href="http://www.jstorimer.com/blogs/workingwithcode/8085491-nobody-understands-the-gil%0A">Nobody understands the GIL - Part 1 - Jesse Storimer</a></li>
    <li><a href="http://www.jstorimer.com/blogs/workingwithcode/8100871-nobody-understands-the-gil-part-2-implementation">Nobody understands the GIL - Part 2: Implementation - Jesse Storimer</a></li>
    <li><a href="http://www.rubyinside.com/does-the-gil-make-your-ruby-code-thread-safe-6051.html">Does the GIL Make Your Ruby Code Thread-Safe? - Jesse Storimer</a></li>
  </ul>
</blockquote>

<p>It’s possible for all of the Ruby implementations to provide thread-safe data structures, but that requires extra overhead that would make single-threaded code slower.</p>

<p>For the MRI core team, the GIL protects the internal state of the system. With a GIL, they don’t require any locks or synchronization around the internal data structures. If two threads can’t be mutating the internals at the same time, then no race conditions can occur. For you, the developer, this will severely limit the parallelism you get from running your Ruby code on MRI.</p>

<p>All that the GIL guarantees is that MRI’s native C implementations of Ruby methods will be executed atomically (but even this has caveats). This behaviour can sometimes help us as Ruby developers, but the GIL is really there for the protection of MRI internals, not as a dependable API for Ruby developers. So the GIL doesn’t ‘solve’ thread-safety issues.</p>

<p>Don’t communicate by sharing state; share state by communicating.</p>

<blockquote>
  <p><a href="https://www.igvita.com/2008/11/13/concurrency-is-a-myth-in-ruby/">Parallelism is a Myth in Ruby - Ilya Grigorik</a></p>
</blockquote>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/RCAC-ruby_gil.png" alt="RCAC-ruby_gil.png" /></p>

<blockquote>
  <p><a href="https://github.com/jdantonio/Everything-You-Know-About-the-GIL-is-Wrong-RubyConf-2015">Everything You Know About GIL is Wrong - Jerry D’Antonio</a></p>
</blockquote>

<p>Summary</p>

<ul>
  <li>Concurrency is not parallelism</li>
  <li>The GIL protects Ruby’s internal state when the operating system context switches
    <ul>
      <li>The GIL does not provide thread safety guarantees to user code</li>
      <li>But it imposes an implicit memory model</li>
    </ul>
  </li>
  <li>The GIL prevents true parallelism in Ruby</li>
  <li>But Ruby is pretty good at multiplexing threads performing blocking I/O</li>
</ul>

<p>Concurrency vs. Parallelism</p>

<p>Non-concurrent programs gain no benefit from running on multiple processors. Concurrent programs get parallelism for free when the runtime supports it.</p>

<ul>
  <li>Parallelism requires two processor cores. No matter the language/runtime, a processor core can only execute one instruction at a time.</li>
  <li>Concurrency can happen when there is only one core. Concurrency is about design, improved performance is a side effect</li>
</ul>

<p>Ruby is selfish</p>

<ul>
  <li>Ruby is an interpreted language
    <ul>
      <li>Ruby is compiled to bytecode within the interpreter</li>
      <li>Ruby is free to optimize and reorder your code</li>
    </ul>
  </li>
  <li>Every Ruby operation is implemented in C</li>
  <li>The Ruby runtime is just another program; it is under the control of the compiler and the operating system
    <ul>
      <li>The C compiler is free to optimize and reorder instructions during compilation</li>
      <li>An operating system context switch can occur at any point in the running C code</li>
    </ul>
  </li>
  <li>The GIL protects Ruby, not your code</li>
</ul>

<p>Ruby is thread safe, your code isn’t.</p>

<ul>
  <li>Every individual read and write to memory is guaranteed to be thread-safe in Ruby
    <ul>
      <li>The GIL prevents interleaved access to memory used by the runtime</li>
      <li>The GIL prevents interleaved access to individual variables</li>
      <li>Ruby itself will never become corrupt</li>
    </ul>
  </li>
  <li>Ruby makes no guarantees about your code</li>
</ul>

<p><a href="https://www.wikiwand.com/en/Memory_model_(programming)">Memory model</a></p>

<ul>
  <li>“In computing, a memory model describes the interactions of threads through memory and their shared use of the data.” Wikipedia</li>
  <li>Defines visibility, volatility, atomicity, and synchronization barriers
    <ul>
      <li>Java’s current memory model was adopted in 2004 as part of Java</li>
      <li>The C and C++ memory models were adopted in 2011 with C11 and C++11</li>
      <li><a href="https://golang.org/ref/mem">The Go Memory Model</a></li>
    </ul>
  </li>
  <li>Ruby does NOT have a documented memory model. The GIL provides an implied memory model but no guarantees</li>
</ul>

<p>I/O</p>

<p>Ruby programs which perform significant I/O generally benefit from concurrency.</p>

<ul>
  <li>I/O in Ruby programs is blocking</li>
  <li>I/O within Ruby is asynchronous</li>
</ul>

<p>You can’t spell GIL without I/O. The GIL exists to maintain the internal consistency of the Ruby runtime. I/O operations are slow, which is why asynchronous I/O was invented. While I/O is in progress the Ruby thread is blocked so it cannot change the internal state, so Ruby allows other threads to do useful work. All Ruby I/O calls unlock the GIL, as do backtick and <code>system</code> calls. When Ruby thread is waiting on I/O it does not block other threads.</p>

<blockquote>
  <p><a href="http://merbist.com/2011/02/22/concurrency-in-ruby-explained/">Ruby concurrency explained - Matt Aimonetti</a></p>
</blockquote>

<p>The thing to keep in mind is that the concurrency models are often defined by the programming language you use. The advantage of the Java threaded approach is that the memory is shared between the threads so you are saving in memory (and startup time), each thread can easily talk to each other via the shared memory. The advantage of PHP is that you don’t have to worry about locks, deadlocks, threadsafe code and all that mess hidden behind threads.</p>

<p>Others programming languages like Erlang and Scala use a third approach: the actor model. The actor model is somewhat a bit of a mix of both solutions, the difference is that actors are a like threads which don’t share the same memory context. Communication between actors is done via exchanged messages ensuring that each actor handles its own state and therefore avoiding corrupt data (two threads can modify the same data at the same time, but an actor can’t receive two messages at the exact same time).</p>

<p>Actors/Fibers</p>

<p>Ruby 1.9, developers now have access to a new type of “lightweight” threads called Fibers. Fibers are not actors and Ruby doesn’t have a native Actor model implementation but some people wrote some actor libs on top of fibers. A fiber is like a simplified thread which isn’t scheduled by the VM but by the programmer. Fibers are like blocks which can be paused and resumed from the outside of from within themselves.</p>

<p>How do fibers help with concurrency? The answer is that they are part of a bigger solution. Ruby 1.9 gave us fibers which allow for a more granular control over the concurrency scheduling, combined with non-blocking IO, high concurrency can be achieved. Fiber allow developers to manually control the scheduling of “concurrent” code but also to have the code within the fiber to auto schedule itself.  Well, the only problem is that if you are doing any type of blocking IO in a fiber, the entire thread is blocked and the other fibers aren’t running. So avoid blocking IOs.</p>

<p>Non blocking IOs/Reactor pattern</p>

<p>The reactor pattern is quite simple to understand really. The heavy work of making blocking IO calls is delegated to an external service (reactor) which can receive concurrent requests. The service handler (reactor) is given callback methods to trigger asynchronously based on the type of response received.</p>

<p>When a request comes in and your code makes a DB query, you are blocking any other requests from being processed. To avoid that, we could wrap our request in a fiber, trigger an async DB call and pause the fiber so another request can get processed as we are waiting for the DB. Once the DB query comes back, it wakes up the fiber it was trigger from, which then sends the response back to the client. Technically, the server can still only send one response at a time, but now fibers can run in parallel and don’t block the main tread by doing blocking IOs (since it’s done by the reactor).</p>

<p>This is the approach used by Twisted, EventMachine and Node.js. Ruby developers can use EventMachine or an EventMachine based webserver like Thin as well as EM clients/drivers to make non blocking async calls.</p>

<blockquote>
  <p><a href="https://www.quora.com/Node-js/What-is-a-good-comparison-of-the-reactor-pattern-vs-actor-model">Node.js: What is a good comparison of the reactor pattern vs actor model? - Sean Byrnes</a></p>
</blockquote>

<p>The reactor model follows a purely event driven system where the entire system can be implemented as a single-threaded process with a series of event generators and event handlers. In most implementations there is a “event loop” that continues to run which takes all of the generated events, sends them to all registered event handles and then starts over again.</p>

<p>An actor model is a more abstract method of breaking up execution into different processes that interact with each other. While it is possible to do this similarly to the reactor model, I see this mostly as a series of processes running in different threads and exchanging information through messages or protocols.</p>

<blockquote>
  <p><a href="http://www.toptal.com/ruby/ruby-concurrency-and-parallelism-a-practical-primer?utm_source=rubyweekly&amp;utm_medium=email">Ruby Concurrency and Parallelism: A Practical Tutorial</a></p>
</blockquote>

<ul>
  <li>Ruby concurrency is when two tasks can start, run, and complete in overlapping time periods. It doesn’t necessarily mean, though, that they’ll ever both be running at the same instant (e.g., multiple threads on a single-core machine).</li>
  <li>Parallelism is when two tasks literally run at the same time.</li>
</ul>

<blockquote>
  <p><a href="http://oldmoe.blogspot.jp/2008/08/ruby-fibers-vs-ruby-threads.html">Ruby Fibers Vs Ruby Threads</a></p>
</blockquote>

<p>Fibers are much faster to create than threads, they eat much less memory too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Concurrency In Practice]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2016/02/16/ruby-concurrency-in-practice/"/>
    <updated>2016-02-16T19:58:54+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2016/02/16/ruby-concurrency-in-practice</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#guidance" id="markdown-toc-guidance">Guidance</a>    <ul>
      <li><a href="#safest-path-to-concurrency" id="markdown-toc-safest-path-to-concurrency">Safest path to concurrency</a></li>
      <li><a href="#writing-thread-safe-code" id="markdown-toc-writing-thread-safe-code">Writing Thread-safe Code</a></li>
    </ul>
  </li>
  <li><a href="#into-the-wild" id="markdown-toc-into-the-wild">Into the Wild</a></li>
</ul>

<h2 id="guidance">Guidance</h2>

<h3 id="safest-path-to-concurrency">Safest path to concurrency</h3>

<blockquote>
  <p>from <a href="https://github.com/jruby/jruby/wiki/Concurrency-in-jruby">JRuby wiki</a></p>
</blockquote>

<ol>
  <li>Don’t do it.</li>
  <li>If you must do it, don’t share data across threads.</li>
  <li>If you must share data across threads, don’t share mutable data.</li>
  <li>If you must share mutable data across threads, synchronize access to that data.</li>
</ol>

<p>Do not communicate by sharing data; instead, share data by communicating</p>

<h3 id="writing-thread-safe-code">Writing Thread-safe Code</h3>

<p><strong>Avoid mutating globals</strong></p>

<ul>
  <li>Constants</li>
  <li>The AST</li>
  <li>Class variables/methods</li>
</ul>

<p><strong>Create more objects, rather than sharing one</strong></p>

<ul>
  <li>Thread-locals</li>
  <li>Connection pools</li>
</ul>

<p><strong>Avoid lazy loading</strong></p>

<ul>
  <li>No autoload</li>
</ul>

<p><strong>Prefer data structures over mutexes</strong></p>

<p>Mutexes are notoriously hard to use correctly. For better or worse, you have a lot of things to decide when using a mutex.</p>

<ul>
  <li>How coarse or fine should this mutex be?</li>
  <li>Which lines of code need to be in the critical section?</li>
  <li>Is a deadlock possible here?</li>
  <li>Do I need a per-instance mutex? Or a global one?</li>
</ul>

<p>By leaning on a data structure, you remove the burden of correct synchronization from your code and depend on the semantics of the data structure to keep things consistent.</p>

<p><strong>Wrap your threads in an abstraction</strong></p>

<ul>
  <li>Actor model</li>
  <li>Reactor Pattern, event-driven I/O</li>
</ul>

<h2 id="into-the-wild">Into the Wild</h2>

<p><strong>Primitives</strong></p>

<ul>
  <li><a href="http://ruby-doc.org/core-2.2.2/Thread.html">Thread</a></li>
  <li><a href="http://ruby-doc.org/core-2.2.2/Mutex.html">Mutex</a></li>
  <li><a href="http://ruby-doc.org/core-2.2.2/ConditionVariable.html">ConditionVariable</a></li>
</ul>

<p><strong>Thread-safe Data Structure</strong></p>

<ul>
  <li><a href="https://github.com/hamstergem/hamster">hamster</a> - Efficient, Immutable, Thread-Safe Collection classes for Ruby</li>
  <li><a href="https://github.com/ruby-concurrency/thread_safe">thread_safe</a> - Thread-safe collections for Ruby</li>
  <li><a href="https://github.com/ruby-concurrency/atomic">atomic</a> - Atomic references for Ruby (merged with concurrent-ruby)</li>
  <li><a href="https://github.com/mperham/connection_pool">connection_pool</a> - Generic connection pooling for Ruby</li>
</ul>

<p><strong>Abstraction / Framework</strong></p>

<p><a href="https://github.com/celluloid/celluloid">celluloid</a></p>

<p>Actor-based concurrent object framework for Ruby.</p>

<ul>
  <li><a href="https://github.com/celluloid/reel/">Reel</a> - An “evented” web server based on Celluloid::IO</li>
  <li><a href="https://github.com/kenichi/angelo">angelo</a> - Sinatra-like DSL for Reel that supports WebSockets and SSE</li>
</ul>

<p><a href="https://github.com/eventmachine/eventmachine">eventmachine</a></p>

<p>EventMachine is an event-driven I/O and lightweight concurrency library for Ruby. It provides event-driven I/O using the Reactor pattern.</p>

<ul>
  <li><a href="http://code.macournoyer.com/thin/">Thin</a>, <a href="https://github.com/postrank-labs/goliath/">Goliath</a> - Scalable event-driven servers. Examples:</li>
  <li><a href="https://github.com/igrigorik/em-http-request">em-http-request</a> - Asynchronous HTTP Client (EventMachine + Ruby)</li>
  <li><a href="https://github.com/igrigorik/em-synchrony">em-synchrony</a> - Fiber aware EventMachine clients and convenience classes</li>
</ul>

<p><a href="https://github.com/puma/puma">puma</a></p>

<p>A ruby web server built for concurrency</p>

<p><a href="https://github.com/ruby-concurrency/concurrent-ruby">concurrent-ruby</a></p>

<p>Modern concurrency tools including agents, futures, promises, thread pools, supervisors, and more. Inspired by Erlang, Clojure, Scala, Go, Java, JavaScript, and classic concurrency patterns.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Concurrency In Theory]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2016/02/16/ruby-concurrency-in-theory/"/>
    <updated>2016-02-16T19:35:19+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2016/02/16/ruby-concurrency-in-theory</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#what-is-concurrency" id="markdown-toc-what-is-concurrency">What is concurrency?</a>    <ul>
      <li><a href="#concurrency-vs-paralelism" id="markdown-toc-concurrency-vs-paralelism">Concurrency vs. Paralelism</a></li>
      <li><a href="#concurrency-plus-communication" id="markdown-toc-concurrency-plus-communication">Concurrency plus communication</a></li>
    </ul>
  </li>
  <li><a href="#what-does-ruby-support" id="markdown-toc-what-does-ruby-support">What does Ruby support?</a>    <ul>
      <li><a href="#gil" id="markdown-toc-gil">GIL</a></li>
      <li><a href="#ruby-support" id="markdown-toc-ruby-support">Ruby Support</a></li>
      <li><a href="#fiber" id="markdown-toc-fiber">Fiber</a></li>
    </ul>
  </li>
  <li><a href="#how-to-enhance-concurrency-by-ruby" id="markdown-toc-how-to-enhance-concurrency-by-ruby">How to enhance concurrency by Ruby?</a>    <ul>
      <li><a href="#basics" id="markdown-toc-basics">Basics</a></li>
      <li><a href="#concurrency-model-software-transactional-memory" id="markdown-toc-concurrency-model-software-transactional-memory">Concurrency Model: Software Transactional Memory</a></li>
      <li><a href="#concurrency-model-actor-model" id="markdown-toc-concurrency-model-actor-model">Concurrency Model: Actor Model</a></li>
    </ul>
  </li>
</ul>

<h2 id="what-is-concurrency">What is concurrency?</h2>

<h3 id="concurrency-vs-paralelism">Concurrency vs. Paralelism</h3>

<ul>
  <li>Concurrency is about dealing with lots of things at once.</li>
  <li>Parallelism is about doing lots of things at once.</li>
  <li>Not the same, but related.</li>
  <li>One is about structure (design), one is about execution.</li>
  <li>Concurrency provides a way to structure a solution to solve a problem that may (but not necessarily) be parallelizable.</li>
</ul>

<h3 id="concurrency-plus-communication">Concurrency plus communication</h3>

<ul>
  <li>Concurrency is a way to structure a program by breaking it into pieces that can be executed independently.</li>
  <li>Communication is the means to coordinate the independent executions.</li>
  <li>This is the Go model and (like Erlang and others) it’s based on CSP (Communicating Sequential Processes)</li>
</ul>

<p><em>Reference</em></p>

<ul>
  <li><a href="http://concur.rspace.googlecode.com/hg/talk/concur.html#title-slide">Concurrency is not Parallelism (it’s better) - Rob Pike</a></li>
</ul>

<h2 id="what-does-ruby-support">What does Ruby support?</h2>

<h3 id="gil">GIL</h3>

<p>A global interpreter lock (GIL) is a mutual-exclusion lock held by a programming language interpreter thread to avoid sharing code that is not thread-safe with other threads. In implementations with a GIL, there is always one GIL for each interpreter process.</p>

<p>Global interpreter lock (GIL) is a mechanism used in computer language interpreters to synchronize the execution of threads so that only one native thread can execute at a time. An interpreter that uses GIL always allows exactly one thread to execute at a time, even if run on a multi-core processor.</p>

<p><strong>Benefits</strong></p>

<ul>
  <li>increased speed of single-threaded programs (no necessity to acquire or release locks on all data structures separately)</li>
  <li>easy integration of C libraries that usually are not thread-safe</li>
  <li>ease of implementation</li>
</ul>

<p><strong>Drawbacks</strong></p>

<p>Limits the amount of parallelism reachable through concurrency of a single interpreter process with multiple threads. Hence a significant slowdown for CPU-bound thread.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/RCIT-native_threads.png" alt="RCIT-native_threads.png" /></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/RCIT-threads_with_GIL.png" alt="RCIT-threads_with_GIL.png" /></p>

<p><em>Reference</em></p>

<ul>
  <li><a href="https://en.wikipedia.org/wiki/Global_interpreter_lock">Global Interpreter Lock - Wikipedia</a></li>
</ul>

<h3 id="ruby-support">Ruby Support</h3>

<p>Ruby 1.8, uses only a single native thread and runs all Ruby threads within that one native thread. A single OS thread is allocated for the Ruby interpreter, a GIL lock is instantiated, and Ruby threads (‘Green Threads’), are spooled up by our program. This means that threads can never run in parallel, even on multicore CPUs.</p>

<p>Ruby 1.9, allocates a native thread for each Ruby thread. But because some of the C libraries used in this implementation are not themselves thread-safe. Ruby never allows more than one of its native threads to run at the same time. Now the GIL is the bottleneck, and Ruby will never take advantage of multiple cores!</p>

<p>Ruby 1.9, also provides Fiber.</p>

<p>Ruby concurrency without parallelism can still be very useful, though, for tasks that are IO-heavy (e.g., network I/O, disk I/O).  Ruby can release the lock on the GIL on that thread while it blocks on I/O. There is a reason threads were, after all, invented and used even before multi-core servers were common.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/RCIT-ruby_support.png" alt="RCIT-ruby_support.png" /></p>

<p><em>Reference</em></p>

<ul>
  <li><a href="https://blog.engineyard.com/2011/ruby-concurrency-and-you">Ruby, Concurrency, and You - Engine Yard</a></li>
</ul>

<h3 id="fiber">Fiber</h3>

<p>Fibers are primitives for implementing light weight cooperative concurrency in Ruby (think lightweight threads, minus the thread scheduler and less overhead). Basically they are a means of creating code blocks that can be paused and resumed, much like threads. A fiber is a unit of execution that must be manually scheduled by the application. Fibers run in the context of the threads that schedule them. Each thread can schedule multiple fibers.</p>

<p>As opposed to other stackless light weight concurrency models, each fiber comes with a small 4KB stack. This enables the fiber to be paused from deeply nested function calls within the fiber block.</p>

<p>Normal usage: start an async operation, yield the fiber, and then make the callback resume the fiber once the operation is complete.</p>

<p><strong>Compered to Thread</strong></p>

<p>Fibers are never preempted, the scheduling must be done by the programmer and not the VM.</p>

<p><strong>Why Fiber?</strong></p>

<p>In general, fibers do not provide advantages over a well-designed multithreaded application. However, using fibers can make it easier to port applications that were designed to schedule their own threads. The availability of Fibers allows Actor-style programming, without having to worry about overhead.</p>

<p><strong>Why Fiber is called a semi-coroutine?</strong></p>

<p>Coroutines (cooperative multitasking) are computer program components that generalize subroutines for nonpreemptive multitasking, by allowing multiple entry points for suspending and resuming execution at certain locations. Coroutines are well-suited for implementing more familiar program components such as cooperative tasks, exceptions, event loop, iterators, infinite lists and pipes.</p>

<p>Asymmetric Coroutines can only transfer control back to their caller, where Coroutines are free to transfer control to any other Coroutine, as long as they have a handle to it.</p>

<p>We may infer that Ruby encapsulate a Fiber::Core which supports coroutine, and only expose Fiber as a semi-coroutine data structure.</p>

<p><strong>What’s the performance of Fiber?</strong></p>

<p>Fibers are much faster to create than threads, they eat much less memory too.</p>

<p><em>Reference</em></p>

<ul>
  <li><a href="http://ruby-doc.org/core-2.2.2/Fiber.html">Fiber - Ruby Doc</a></li>
  <li><a href="http://www.infoq.com/news/2007/08/ruby-1-9-fibers">Ruby 1.9 adds Fibers for lightweight concurrency - Werner Schuster</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Coroutine#Implementations_for_Ruby">Coroutine - Wikipedia</a></li>
  <li><a href="http://oldmoe.blogspot.jp/2008/08/ruby-fibers-vs-ruby-threads.html">Ruby Fibers Vs Ruby Threads - oldmoe</a></li>
</ul>

<h2 id="how-to-enhance-concurrency-by-ruby">How to enhance concurrency by Ruby?</h2>

<h3 id="basics">Basics</h3>

<p><strong>How to provide more concurrency?</strong></p>

<ul>
  <li>Multi processing (parallelism), like Resque, Unicorn. Simply to fork a running process to multiply its processing power.</li>
  <li>Multi threading, like Sidekiq, Puma and Thin. Lighter than processes, requiring less overhead. At some point, you may find it necessary to use a thread pool.</li>
  <li>Background processing</li>
  <li>Rely on other concurrency models (event, actor, message-passing)</li>
</ul>

<p><strong>Multi-processing vs. Multi-threading</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/RCIT-multi_processing_vs_multi_threading.png" alt="RCIT-multi_processing_vs_multi_threading.png" /></p>

<p><strong>Thread Pooling</strong></p>

<p>A key configuration parameter for a thread pool is typically the number of threads in the pool. These threads can either be instantiated all at once (i.e., when the pool is created) or lazily (i.e., as needed until the maximum number of threads in the pool has been created).</p>

<p><code>Queue</code> and <code>SizedQueue</code> are thread-safe data structures in Ruby, maybe the only two.</p>

<p><a href="https://gist.github.com/ifyouseewendy/a8fc663ae575843f9e8f">demo snippet</a></p>

<p><em>Reference</em></p>

<ul>
  <li><a href="https://www.igvita.com/2010/08/18/multi-core-threads-message-passing/">Multi-core, Threads &amp; Message Passing - Ilya Grigorik</a></li>
  <li><a href="http://adam.herokuapp.com/past/2009/8/13/threads_suck/">Threads Suck -  Adam Wiggins</a></li>
  <li><a href="https://www.usenix.org/legacy/events/hotos03/tech/full_papers/vonbehren/vonbehren_html/index.html">Why Events Are A Bad Idea - Rob von Behren, Jeremy Condit and Eric Brewer</a></li>
</ul>

<h3 id="concurrency-model-software-transactional-memory">Concurrency Model: Software Transactional Memory</h3>

<p>Software transactional memory (STM) is a concurrency control mechanism analogous to database transactions for controlling access to shared memory in concurrent computing. It is an alternative to lock-based synchronization. STM is a strategy implemented in software, rather than as a hardware component.</p>

<ul>
  <li>A thread completes modifications to shared memory without regard for what other threads might be doing, recording every read and write that it is performing in a log.</li>
  <li>Instead of placing the onus on the writer to make sure it does not adversely affect other operations in progress, it is placed on the reader, who after completing an entire transaction verifies that other threads have not concurrently made changes to memory that it accessed in the past.</li>
  <li>This final operation, in which the changes of a transaction are validated and, if validation is successful, made permanent, is called a commit. A transaction may also abort at any time, causing all of its prior changes to be rolled back or undone. If a transaction cannot be committed due to conflicting changes, it is typically aborted and re-executed from the beginning until it succeeds.</li>
</ul>

<p>Clojure has STM support built into the core language.</p>

<p><em>Reference</em></p>

<ul>
  <li><a href="https://en.wikipedia.org/wiki/Software_transactional_memory">Software transactional memory - Wikipedia</a></li>
</ul>

<h3 id="concurrency-model-actor-model">Concurrency Model: Actor Model</h3>

<p>The actor model has its theoretical roots in concurrency modelling and message passing concepts.</p>

<p>The basic operation of an Actor is easy to understand: like a thread, it runs concurrently with other Actors. However, unlike threads it is not pre-emptable. Instead, each Actor has a mailbox and can call a routine named “receive” to check its mailbox for new messages. The “receive” routine takes a filter, and if no messages in an Actor’s mailbox matches the filter, the Actor sleeps until it receives new messages, at which time it’s rescheduled for execution.</p>

<p>Well, that’s a bit of a naive description. In reality the important part about Actors is that they cannot mutate shared state simultaneously. That means there are no race conditions or deadlocks because there are no mutexes, conditions, and semaphores, only messages and mailboxes.</p>

<p>Actors are an approach to concurrency which has proven remarkably successful in languages like Erlang and Scala. They emphasize message passing as the only means of exchanging state, as opposed to threaded approaches like mutexes, conditions, and semaphores which hopefully guard access and mutation of any shared state, emphasis on the hopefully. Using messaging eliminates several problems in multithreaded programming, including many types of race conditions and deadlocks which result from hope dying in the cold light of reality.</p>

<p><strong>Message Passing</strong></p>

<p>The fundamental idea of the actor model is to use actors as concurrent primitives that can act upon receiving messages in different ways:</p>

<ul>
  <li>Send a finite number of messages to other actors.</li>
  <li>Spawn a finite number of new actors.</li>
  <li>Change its own internal behavior, taking effect when the next incoming message is handled.</li>
</ul>

<p>For communication, the actor model uses asynchronous message passing. In particular, it does not use any intermediate entities such as channels. Instead, each actor possesses a mailbox and can be addressed. These addresses are not to be confused with identities, and each actor can have no, one or multiple addresses. When an actor sends a message, it must know the address of the recipient. In addition, actors are allowed to send messages to themselves, which they will receive and handle later in a future step.</p>

<p>Messages are sent asynchronously and can take arbitrarily long to eventually arrive in the mailbox of the receiver. Also, the actor models makes no guarantees on the ordering of messages. Queuing and dequeuing of messages in a mailbox are atomic operations, so there cannot be a race condition.</p>

<p>There is no shared state and the interaction between actors is purely based on asynchronous messages.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/RCIT-actor_message_passing.png" alt="RCIT-actor_message_passing.png" /></p>

<p><strong>Implementation</strong></p>

<ul>
  <li>Thread-based Actors - the actor is internally backed by a dedicated thread. This obviously limits scalability and requires the thread to suspend and block when waiting for new messages.</li>
  <li>Event-driven Actors - which does not directly couple actors to threads. Instead, a thread pool can be used for a number of actors. This approach uses a continuation closure to encapsulate the actor and its state. Conceptually, this implementation is very similar to an event loop backed by a threadpool.</li>
</ul>

<p><strong>Reactor Pattern</strong></p>

<p>The reactor design pattern is an event handling pattern for handling service requests delivered concurrently to a service handler by one or more inputs. The service handler then demultiplexes the incoming requests and dispatches them synchronously to the associated request handlers.</p>

<p>The reactor pattern completely separates application specific code from the reactor implementation, which means that application components can be divided into modular, reusable parts. Also, due to the synchronous calling of request handlers, the reactor pattern allows for simple coarse-grain concurrency while not adding the complexity of multiple threads to the system.</p>

<p><em>Reference</em></p>

<ul>
  <li><a href="https://en.wikipedia.org/wiki/Actor_model">Actor Model - Wikipedia</a></li>
  <li><a href="http://revactor.github.io/philosophy/">Philosophy - Revactor</a></li>
  <li><a href="http://on-ruby.blogspot.jp/2008/01/ruby-concurrency-with-actors.html">Ruby Concurrency with Actors - Pat Eyler</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Reactor_pattern">Reactor Pattern - Wikipedia</a></li>
  <li><a href="http://berb.github.io/diploma-thesis/original/054_actors.html#02">Actor-based Concurrency - Benjamin Erb</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Review] Working With Ruby Threads]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2016/02/16/review-working-with-ruby-threads/"/>
    <updated>2016-02-16T13:07:05+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2016/02/16/review-working-with-ruby-threads</id>
    <content type="html"><![CDATA[<table class="custom">
  <tbody>
    <tr>
      <td><strong>Book</strong></td>
      <td>Working With Ruby Threads</td>
    </tr>
    <tr>
      <td><strong>Author</strong></td>
      <td><a href="http://www.jstorimer.com/">Jesse Storimer</a></td>
    </tr>
    <tr>
      <td><strong>Link</strong></td>
      <td><a href="http://www.jstorimer.com/products/working-with-ruby-threads">www.jstorimer.com/products/working-with-ruby-threads</a></td>
    </tr>
  </tbody>
</table>

<ul id="markdown-toc">
  <li><a href="#concurrent--parallel" id="markdown-toc-concurrent--parallel">Concurrent != Parallel</a></li>
  <li><a href="#the-gil-and-mri" id="markdown-toc-the-gil-and-mri">The GIL and MRI</a></li>
  <li><a href="#thread-execution" id="markdown-toc-thread-execution">Thread Execution</a></li>
  <li><a href="#mutual-exclusion" id="markdown-toc-mutual-exclusion">Mutual Exclusion</a></li>
  <li><a href="#signaling-threads-with-condition-variables" id="markdown-toc-signaling-threads-with-condition-variables">Signaling Threads with Condition Variables</a></li>
  <li><a href="#thread-safe-data-structures" id="markdown-toc-thread-safe-data-structures">Thread-safe Data Structures</a></li>
  <li><a href="#writing-thread-safe-code" id="markdown-toc-writing-thread-safe-code">Writing Thread-safe Code</a></li>
  <li><a href="#wrap-your-threads-in-an-abstraction" id="markdown-toc-wrap-your-threads-in-an-abstraction">Wrap Your Threads in an Abstraction</a></li>
  <li><a href="#into-the-wild" id="markdown-toc-into-the-wild">Into The Wild</a></li>
  <li><a href="#closing" id="markdown-toc-closing">Closing</a></li>
</ul>

<h2 id="concurrent--parallel">Concurrent != Parallel</h2>

<ul>
  <li>Making it execute in parallel is out of your hands. That responsibility is left to the underlying thread scheduler.</li>
  <li>Making it concurrent, you enable it to be parallelized when the underlying system allows it.</li>
</ul>

<p>Example</p>

<ol>
  <li>You could complete Project A today, then complete Project B tomorrow. (Serial)</li>
  <li>You could work on Project A for a few hours this morning, then switch to Project B for a few hours this afternoon, and then do the same thing tomorrow. Both projects will be finished at the end of the second day. (Concurrent)</li>
  <li>Your agency could hire another programmer. He could work on Project B and you could work on Project A. Both projects will be finished at the end of the first day. (Concurrent &amp;&amp; Parallel)</li>
</ol>

<h2 id="the-gil-and-mri">The GIL and MRI</h2>

<p><strong>MRI allows concurrent execution of Ruby code, but prevents parallel execution of Ruby code.</strong></p>

<p>The GIL prevents parallel execution of Ruby code, but it doesn’t prevent concurrent execution of Ruby code. Remember that concurrent code execution is possible even on a single core CPU by giving each thread a turn with the resources.</p>

<p>MRI doesn’t let a thread hog the GIL when it hits blocking IO. This is a no-brainer optimization for MRI. When a thread is blocked waiting for IO, it won’t be executing any Ruby code. Hence, when a thread is blocking on IO, it releases the GIL so another thread can execute Ruby code.</p>

<p>Example</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span></span><span class="nb">require</span> <span class="s1">&#39;open-uri&#39;</span>
</span><span class="line"><span class="mi">3</span><span class="o">.</span><span class="n">times</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span>
</span><span class="line">  <span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span><span class="line">    <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;http://zombo.com&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:value</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Thread A gets the GIL. It starts executing Ruby code. It gets down to Ruby’s Socket APIs and attempts to open a connection to zombo.com. At this point, while Thread A is waiting for its response, it releases the GIL. Now Thread B acquires the GIL and goes through the same steps.</p>

<p>Meanwhile, Thread A is still waiting for its response. Remember that the threads can execute in parallel, so long as they’re not executing Ruby code. So it’s quite possible for Thread A and Thread B to both have initiated their connections, and both be waiting for a response.</p>

<p>Under the hood, each thread is using a ppoll(2) system call to be notified when their connection attempt succeeds or fails. When the ppoll(2) call returns, the socket will have some data ready for consumption. At this point, the threads will need to execute Ruby code to process the data. So now the whole process starts over again.</p>

<p><strong>Why GIL Exists?</strong></p>

<p>MRI core developers have been calling the GIL a feature for some time now, rather than a bug. There are three reasons that the GIL exists:</p>

<ul>
  <li>To protect MRI internals from race conditions. The same issues that can happen in your Ruby code can happen in MRI’s C code. When it’s running in a multithreaded context, it will need to protect critical parts of the internals with some kind of synchronization mechanism.</li>
  <li>To facilitate the C extension API</li>
  <li>To reduce the likelihood of race conditions in your Ruby code. It’s important to note that the GIL only reduces entropy here; it can’t rule it out all together. It’s a bit like wearing fully body armour to walk down the street: it really helps if you get attacked, but most of the time it’s just confining.</li>
</ul>

<p><strong>MRI with blocking IO encourages a context switch while waiting for the thread to print to stdout</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span></span><span class="vi">@counter</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">
</span><span class="line"><span class="mi">5</span><span class="o">.</span><span class="n">times</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span>
</span><span class="line">  <span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span><span class="line">    <span class="n">temp</span> <span class="o">=</span> <span class="vi">@counter</span>
</span><span class="line">    <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line">    <span class="vi">@counter</span> <span class="o">=</span> <span class="n">temp</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:join</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nb">puts</span> <span class="vi">@counter</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>With no synchronization, even with a GIL, it’s possible that a context switch happens between incrementing temp and assigning it back to counter. If this is the case, it’s possible that two threads assign the same value to counter. In the end the result of this little snippet could be less than 5.</p>

<p>It’s rare to get an incorrect answer using MRI with this snippet, but almost guaranteed if you use JRuby or Rubinius. If you insert a puts in the middle of the block passed to Thread.new, then it’s very likely that MRI will produce an incorrect result. Its behaviour with blocking IO encourages a context switch while waiting for the thread to print to stdout.</p>

<p><strong>Compare to JRuby, and Rubinius</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/WWRT-multi_thread_prime_number_generation.png" alt="WWRT-multi_thread_prime_number_generation.png" /></p>

<p>GIL makes MRI run faster in single-threaded way, as no need to accquire or release locks for data structures. But also makes MRI run slower in multi-threaded way, as disabling on parellelism.</p>

<p>JRuby and Rubinius do indeed protect their internals from race conditions. But rather than wrapping a lock around the execution of all Ruby code, they protect their internal data structures with many fine-grained locks. Rubinius, for instance, replaced their GIL with about 50 fine-grained locks.</p>

<h2 id="thread-execution">Thread Execution</h2>

<p><strong>Threads in Ruby</strong></p>

<p>There’s always at least one: the main thread. The main thread has one special property that’s different from other threads. When the main thread exits, all other threads are immediately terminated and the Ruby process exits.</p>

<p>The most important concept to grasp is that threads have a shared address space. A race condition involves two threads racing to perform an operation on some shared state.</p>

<p><code>Thread#join</code></p>

<p>When one thread raises an unhandled exception, it terminates the thread where the exception was raised, but doesn’t affect other threads. Similarly, a thread that crashes from an unhandled exception won’t be noticed until another thread attempts to join it.</p>

<p><code>Thread#status</code></p>

<ul>
  <li>run: Threads currently running have this status.</li>
  <li>sleep: Threads currently sleeping, blocked waiting for a mutex, or waiting on IO, have this status.</li>
  <li>false: Threads that finished executing their block of code, or were successfully killed, have this status.</li>
  <li>nil: Threads that raised an unhandled exception have this status.</li>
  <li>aborting: Threads that are currently running, yet dying, have this status.</li>
</ul>

<p><code>Thread.stop</code></p>

<p>This method puts the current thread to sleep and tells the thread scheduler to schedule some other thread. It will remain in this sleeping state until its alternate, Thread#wakeup is invoked.</p>

<p><code>Thread.pass</code></p>

<p>It asks the thread scheduler to schedule some other thread. Since the current thread doesn’t sleep, it can’t guarantee that the thread scheduler will take the hint.</p>

<p>Avoid <code>Thread#raise</code> and <code>Thread#kill</code></p>

<p>It doesn’t properly respect ensure blocks, which can lead to nasty problems in your code.</p>

<p><strong>How Many Threads Are Too Many?</strong></p>

<p>It depends, there will be a sweet spot between utilizing available resources and context switching overhead.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/WWRT-io_bound.png" alt="WWRT-io_bound.png" />
<img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/WWRT-cpu_bound.png" alt="WWRT-cpu_bound.png" /></p>

<p>CPU-bound code is inherently bound by the rate at which the CPU can execute instructions. Creating more threads isn’t necessarily faster. On the other hand, introducing more threads improved performance in these two examples by anywhere between 100% and 600%. Finding that sweet spot is certainly worth it.</p>

<p><strong>Thread safety</strong></p>

<p>When your code isn’t thread-safe, the worst that can happen is that your underlying data becomes incorrect, yet your program continues as if it were correct.</p>

<p>The computer is unaware of thread-safety issues. The onus is on you to notice these problems and deal with them. This is one of the hardest problems when it comes to thread safety. There are no exceptions raised or alarm bells rung when the underlying data is no longer correct. Even worse, sometimes it takes a heavy load to expose a race condition like this.</p>

<p>Any concurrent modifications to the same object are not thread-safe.</p>

<h2 id="mutual-exclusion">Mutual Exclusion</h2>

<p><strong>Demo Snippet</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span></span><span class="c1"># This class represents an ecommerce order</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Order</span>
</span><span class="line">  <span class="kp">attr_accessor</span> <span class="ss">:amount</span><span class="p">,</span> <span class="ss">:status</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">amount</span><span class="p">,</span> <span class="n">status</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@amount</span><span class="p">,</span> <span class="vi">@status</span> <span class="o">=</span> <span class="n">amount</span><span class="p">,</span> <span class="n">status</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">pending?</span>
</span><span class="line">    <span class="n">status</span> <span class="o">==</span> <span class="s1">&#39;pending&#39;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">collect_payment</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s2">&quot;Collecting payment...&quot;</span>
</span><span class="line">    <span class="nb">self</span><span class="o">.</span><span class="n">status</span> <span class="o">=</span> <span class="s1">&#39;paid&#39;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Create a pending order for $100</span>
</span><span class="line"><span class="n">order</span> <span class="o">=</span> <span class="no">Order</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">100</span><span class="o">.</span><span class="mo">00</span><span class="p">,</span> <span class="s1">&#39;pending&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">mutex</span> <span class="o">=</span> <span class="no">Mutex</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Ask 5 threads to check the status, and collect</span>
</span><span class="line"><span class="c1"># payment if it&#39;s &#39;pending&#39;</span>
</span><span class="line"><span class="mi">5</span><span class="o">.</span><span class="n">times</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span>
</span><span class="line">  <span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span><span class="line">    <span class="n">mutex</span><span class="o">.</span><span class="n">synchronize</span> <span class="k">do</span>
</span><span class="line">      <span class="k">if</span> <span class="n">order</span><span class="o">.</span><span class="n">pending?</span>
</span><span class="line">        <span class="n">order</span><span class="o">.</span><span class="n">collect_payment</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:join</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The block of code inside of a <code>Mutex#synchronize</code> call is often called a critical section, pointing to the fact that this code accesses a shared resource and must be handled correctly.</p>

<p><strong>Memory Visibility (Volatility)</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span></span><span class="c1"># With this line, it&#39;s possible that another thread</span>
</span><span class="line"><span class="c1"># updated the status already and this value is stale</span>
</span><span class="line"><span class="n">status</span> <span class="o">=</span> <span class="n">order</span><span class="o">.</span><span class="n">status</span>
</span><span class="line">
</span><span class="line"><span class="c1"># With this line, it&#39;s guaranteed that this value is</span>
</span><span class="line"><span class="c1"># consistent with any changes in other threads</span>
</span><span class="line"><span class="n">status</span> <span class="o">=</span> <span class="n">mutex</span><span class="o">.</span><span class="n">synchronize</span> <span class="p">{</span> <span class="n">order</span><span class="o">.</span><span class="n">status</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The reason for this is due to low-level details. The kernel can cache in, for instance, L2 cache before it’s visible in main memory. It’s possible that after the status has been set to ‘paid,’ by one thread, another thread could still see the Order#status as ‘pending’ by reading the value from main memory before the change has propagated there.</p>

<p>The solution to this is something called a memory barrier. Mutexes are implemented with memory barriers, such that when a mutex is locked, a memory barrier provides the proper memory visibility semantics.</p>

<p>Scenarios around memory visibility are difficult to understand and reason about. That’s one reason other programming languages have defined something called a memory model, a well-defined specification describing how and when changes to memory are visible in other threads.</p>

<p>Ruby has no such specification yet, so situations like this are tricky to reason about and may even yield different results with different runtimes. That being said, <strong>mutexes carry an implicit memory barrier</strong>. So, if one thread holds a mutex to write a value, other threads can lock the same mutex to read it and they will see the correct, most recent value.</p>

<p><strong>Performance</strong></p>

<p>Mutexes inhibit parallelism. Restrict the critical section to be as small as possible, while still preserving the safety of your data.</p>

<p><strong>The dreaded deadlock</strong></p>

<p>The <code>try_lock</code> method attempts to acquire the mutex, just like the lock method. But unlike lock, try_lock will not wait if the mutex isn’t available. If another thread already owns the mutex, try_lock will return false. If it successfully acquires the mutex, try_lock will return true.</p>

<p>The downside to this approach is that another kind of issue can arise: <strong>livelocking</strong>. A livelock is similar to a deadlock in that the system is not progressing, but rather than threads stuck sleeping, they would be stuck in some loop with each other with none progressing.</p>

<p>A better solution is to define a mutex hierarchy. In other words, <strong>any time that two threads both need to acquire multiple mutexes, make sure they do it in the same order</strong>.</p>

<h2 id="signaling-threads-with-condition-variables">Signaling Threads with Condition Variables</h2>

<p>Condition variables provide an inter-thread control flow mechanism. A classic usage pattern is Producer-Consumer.</p>

<p><strong>Demo Snippet</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span></span><span class="nb">require</span> <span class="s1">&#39;thread&#39;</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;net/http&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">mutex</span>    <span class="o">=</span> <span class="no">Mutex</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="n">condvar</span>  <span class="o">=</span> <span class="no">ConditionVariable</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="n">results</span>  <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">
</span><span class="line"><span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span><span class="line">  <span class="mi">10</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class="line">    <span class="n">response</span> <span class="o">=</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">.</span><span class="n">get_response</span><span class="p">(</span><span class="s1">&#39;dynamic.xkcd.com&#39;</span><span class="p">,</span> <span class="s1">&#39;/random/comic/&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="n">random_comic_url</span> <span class="o">=</span> <span class="n">response</span><span class="o">[</span><span class="s1">&#39;Location&#39;</span><span class="o">]</span>
</span><span class="line">
</span><span class="line">    <span class="n">mutex</span><span class="o">.</span><span class="n">synchronize</span> <span class="k">do</span>
</span><span class="line">      <span class="n">results</span> <span class="o">&lt;&lt;</span> <span class="n">random_comic_url</span>
</span><span class="line">      <span class="nb">puts</span> <span class="s1">&#39;Produced result&#39;</span>
</span><span class="line">      <span class="n">condvar</span><span class="o">.</span><span class="n">signal</span> <span class="c1"># Signal the ConditionVariable</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">comics_received</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">
</span><span class="line"><span class="k">until</span> <span class="n">comics_received</span> <span class="o">&gt;=</span> <span class="mi">10</span>
</span><span class="line">  <span class="n">mutex</span><span class="o">.</span><span class="n">synchronize</span> <span class="k">do</span>
</span><span class="line">    <span class="k">while</span> <span class="n">results</span><span class="o">.</span><span class="n">empty?</span>
</span><span class="line">      <span class="n">condvar</span><span class="o">.</span><span class="n">wait</span><span class="p">(</span><span class="n">mutex</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="n">url</span> <span class="o">=</span> <span class="n">results</span><span class="o">.</span><span class="n">shift</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s2">&quot;You should check out </span><span class="si">#{</span><span class="n">url</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="n">comics_received</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li><code>ConditionVariable#signal</code> will wake up exactly one thread that’s waiting on this ConditionVariable.</li>
  <li><code>ConditionVariable#broadcast</code> will wake up all threads currently waiting on this ConditionVariable.</li>
</ol>

<h2 id="thread-safe-data-structures">Thread-safe Data Structures</h2>

<p><strong>Implementing a thread-safe, blocking queue</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span></span><span class="nb">require</span> <span class="s1">&#39;thread&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">BlockingQueue</span>
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:queue</span><span class="p">,</span> <span class="ss">:mutex</span><span class="p">,</span> <span class="ss">:cv</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="vi">@queue</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">    <span class="vi">@mutex</span> <span class="o">=</span> <span class="no">Mutex</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">    <span class="vi">@cv</span>    <span class="o">=</span> <span class="no">ConditionVariable</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">push</span><span class="p">(</span><span class="n">ele</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@mutex</span><span class="o">.</span><span class="n">synchronize</span> <span class="k">do</span>
</span><span class="line">      <span class="vi">@queue</span><span class="o">.</span><span class="n">push</span> <span class="n">ele</span>
</span><span class="line">      <span class="vi">@cv</span><span class="o">.</span><span class="n">signal</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">pop</span>
</span><span class="line">    <span class="vi">@mutex</span><span class="o">.</span><span class="n">synchronize</span> <span class="k">do</span>
</span><span class="line">      <span class="k">while</span> <span class="vi">@queue</span><span class="o">.</span><span class="n">empty?</span>
</span><span class="line">        <span class="vi">@cv</span><span class="o">.</span><span class="n">wait</span><span class="p">(</span><span class="vi">@mutex</span><span class="p">)</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">
</span><span class="line">      <span class="vi">@queue</span><span class="o">.</span><span class="n">pop</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">bq</span> <span class="o">=</span> <span class="no">BlockingQueue</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">
</span><span class="line"><span class="n">bq</span><span class="o">.</span><span class="n">push</span> <span class="s1">&#39;a&#39;</span>
</span><span class="line"><span class="n">bq</span><span class="o">.</span><span class="n">push</span> <span class="s1">&#39;b&#39;</span>
</span><span class="line">
</span><span class="line"><span class="kp">loop</span> <span class="k">do</span>
</span><span class="line">  <span class="nb">puts</span> <span class="n">bq</span><span class="o">.</span><span class="n">pop</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Queue, from the standard lib</strong></p>

<p>This is the only thread-safe data structure that ships with Ruby. Queue is very useful because of its blocking behaviour. Typically, you would use a Queue to distribute workloads to multiple threads, with one thread pushing to the queue, and multiple threads popping.</p>

<p><strong>Array and Hash</strong></p>

<p>Ruby doesn’t ship with any thread-safe Array or Hash implementations. Thread-safety concerns would add overhead to their implementation, which would hurt performance for single-threaded use cases.</p>

<p>You might be thinking: “With all of the great concurrency support available to Java on the JVM, surely the JRuby Array and Hash are thread-safe?” They’re not. For the exact reason mentioned above, using a thread-safe data structure in a single-threaded context would reduce performance.</p>

<p><strong>Immutable data structures</strong></p>

<p>When you need to share objects between threads, share immutable objects. It’s very easy to pass out immutable objects to share, but if you need to have multiple threads modifying an immutable object you still need some form of synchronization.</p>

<p>Immutability is a nice guarantee to have, it’s the simplest path to thread safety when sharing objects.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span></span><span class="nb">require</span> <span class="s1">&#39;hamster/queue&#39;</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;atomic&#39;</span>
</span><span class="line">
</span><span class="line"><span class="vi">@queue_wrapper</span> <span class="o">=</span> <span class="no">Atomic</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Hamster</span><span class="o">::</span><span class="no">Queue</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="mi">30</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class="line">  <span class="vi">@queue_wrapper</span><span class="o">.</span><span class="n">update</span> <span class="p">{</span> <span class="o">|</span><span class="n">queue</span><span class="o">|</span>
</span><span class="line">    <span class="n">queue</span><span class="o">.</span><span class="n">enqueue</span><span class="p">(</span><span class="nb">rand</span><span class="p">(</span><span class="mi">100</span><span class="p">))</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">consumers</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">
</span><span class="line"><span class="mi">3</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class="line">  <span class="n">consumers</span> <span class="o">&lt;&lt;</span> <span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span><span class="line">    <span class="mi">10</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class="line">      <span class="n">number</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class="line">      <span class="vi">@queue_wrapper</span><span class="o">.</span><span class="n">update</span> <span class="p">{</span> <span class="o">|</span><span class="n">queue</span><span class="o">|</span>
</span><span class="line">        <span class="n">number</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="n">head</span>
</span><span class="line">        <span class="n">queue</span><span class="o">.</span><span class="n">dequeue</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">
</span><span class="line">      <span class="nb">puts</span> <span class="s2">&quot;The cubed root of </span><span class="si">#{</span><span class="n">number</span><span class="si">}</span><span class="s2"> is </span><span class="si">#{</span><span class="no">Math</span><span class="o">.</span><span class="n">cbrt</span><span class="p">(</span><span class="n">number</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">consumers</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:join</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="writing-thread-safe-code">Writing Thread-safe Code</h2>

<p>Any guideline has exceptions, but it’s good to know when you’re breaking one, and why.</p>

<p>Idiomatic Ruby code is most often thread-safe Ruby code.</p>

<p><strong>Avoid mutating globals</strong></p>

<p>Any time there is only one shared instance (aka. singleton), it’s a global.</p>

<p>There are other things that fit this definition in Ruby:</p>

<ul>
  <li>Constants</li>
  <li>The AST</li>
  <li>Class variables/methods</li>
</ul>

<p>A slightly more nefarious example is the AST. Ruby, being such a dynamic language, allows you to change this at runtime. I don’t imagine this would be a common problem, but I saw it come up as an issue with the kaminari rubygem. Some part of the code was defining a method dynamically, then calling alias_method with that method, then removing it.</p>

<p>Again, this has to be a rare example, but it’s good to keep in mind that modifying the AST at runtime is almost always a bad idea, especially when multiple threads are involved. When I say ‘runtime’, I mean during the course of the lifecycle of the application. In other words, it’s expected that the AST will be modified at startup time, most Ruby libraries depend on this behaviour in some way. However, in the case of a Rails application, once it’s been initialized, changes to the AST shouldn’t happen at runtime, just as it’s rare to require new files in the midst of a controller action.</p>

<p><strong>Create more objects, rather than sharing one</strong></p>

<ul>
  <li>Thread-locals</li>
  <li>Connection pools</li>
</ul>

<p>A thread-local lets you define a variable that is global to the scope of the current thread. In other words, it’s a global variable that is locally scoped on a per-thread basis.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span></span><span class="c1"># Instead of</span>
</span><span class="line"><span class="vg">$redis</span> <span class="o">=</span> <span class="no">Redis</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="c1"># use</span>
</span><span class="line"><span class="no">Thread</span><span class="o">.</span><span class="n">current</span><span class="o">[</span><span class="ss">:redis</span><span class="o">]</span> <span class="o">=</span> <span class="no">Redis</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It’s perfectly acceptable to tell users of your API that they should create one object for each thread, rather than trying to write difficult, thread-safe code that will increase your maintainenace costs.</p>

<p>This N:N connection mapping is fine for small numbers of threads, but gets out of hand when the number of threads starts to increase. For connections, a pool is often a better abstraction.</p>

<p>Resource pool still ensures that your threads aren’t sharing a single connection, but doesn’t require each thread to have its own. Implementing a connection pool is a good exercise in thread-safe programming, you’ll probably need to make use of both thread-locals and mutexes to do it safely.</p>

<p><strong>Avoid lazy loading</strong></p>

<p>A common idiom in Ruby on Rails applications is to lazily load constants at runtime, using something similar to Ruby’s <code>autoload</code>. But <code>autoload</code> in MRI is not thread-safe. It is thread-safe in recent versions of JRuby, but the best practice is simply to eager load files before spawning worker threads. This is done implicitly in Rails 4+, and can be enabled in Rails 3.x using the ` config.threadsafe!` configuration setting.</p>

<p><strong>Prefer data structures over mutexes</strong></p>

<p>Mutexes are notoriously hard to use correctly. For better or worse, you have a lot of things to decide when using a mutex.</p>

<ul>
  <li>How coarse or fine should this mutex be?</li>
  <li>Which lines of code need to be in the critical section?</li>
  <li>Is a deadlock possible here?</li>
  <li>Do I need a per-instance mutex? Or a global one?</li>
</ul>

<p>By leaning on a data structure, you remove the burden of correct synchronization from your code and depend on the semantics of the data structure to keep things consistent.</p>

<p>This only works if you choose not to share objects between threads directly. Rather than letting threads access shared objects and implementing the necessary synchronization, you pass shared objects through data structures.</p>

<p><strong>Finding bugs</strong></p>

<p>Like most bugs, if you can reproduce the issue, you can almost certainly track it down and fix it. However, some thread-safety issues may appear in production under heavy load, but can’t be reproduced locally. In this case, there’s no better solution than grokking the code.</p>

<p>Look at the code and assume that 2 threads will be accessing it simulatneously. Step through the possible scenarios. It can be helpful to jot these things down somewhere.</p>

<p><strong>Thread-safety on Rails</strong></p>

<ul>
  <li>Gem dependencies</li>
  <li>The request is the boundary. Don’t share objects between requests.</li>
</ul>

<p>A good example of this is something like a <code>User.current</code> reference.</p>

<p>If you really need a global reference, follow the guidelines from the last chapter. Try using a thread-local, or else a thread-aware object that will preserve data correctness.</p>

<p>The same heuristic is applicable to a background job processor. Each job will be handled by a separate thread. A thread may process multiple jobs in its lifetime, but a job will only be processed by a single thread in its lifecycle.</p>

<p>Again, the path to thread safety is clear: create the necessary objects that you need in the body of the job, rather than sharing any global state.</p>

<h2 id="wrap-your-threads-in-an-abstraction">Wrap Your Threads in an Abstraction</h2>

<p><strong>Single level of abstraction</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span></span><span class="k">module</span> <span class="nn">Enumerable</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">concurrent_each</span>
</span><span class="line">    <span class="n">threads</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">    <span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">element</span><span class="o">|</span>
</span><span class="line">      <span class="n">threads</span> <span class="o">&lt;&lt;</span> <span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="k">end</span> <span class="k">yield</span> <span class="n">element</span> <span class="p">}</span>
</span><span class="line">      <span class="n">threads</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:join</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This is a simple wrapper around Enumerable#each that will spawn a thread for each element being iterated over. It wouldn’t be wise to use this code in production yet because it has no upper bound on the number of threads it will spawn.</p>

<p><strong>Actor model</strong></p>

<p>At a high level, an Actor is a long-lived ‘entity’ that communicates by sending messages.</p>

<p>In the Actor model, each Actor has an ‘address’. If you know the address of an Actor, you can send it a message. These messages go to the Actor’s mailbox, where they’re processed asynchronously when the Actor gets around to it.</p>

<p>What sets Celluloid apart is that it takes this conceptual idea of the Actor model and marries it to Ruby’s object model.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span></span><span class="nb">require</span> <span class="s1">&#39;celluloid/autostart&#39;</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;net/http&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">XKCDFetcher</span>
</span><span class="line">  <span class="kp">include</span> <span class="no">Celluloid</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">next</span>
</span><span class="line">    <span class="n">response</span> <span class="o">=</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">.</span><span class="n">get_response</span><span class="p">(</span><span class="s1">&#39;dynamic.xkcd.com&#39;</span><span class="p">,</span> <span class="s1">&#39;/random/comic/&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="n">random_comic_url</span> <span class="o">=</span> <span class="n">response</span><span class="o">[</span><span class="s1">&#39;Location&#39;</span><span class="o">]</span>
</span><span class="line">
</span><span class="line">    <span class="n">random_comic_url</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Including the Celluloid module into any Ruby class will turn instances of that class into full-fledged Celluloid actors. When you create a new actor, you immediately know its ‘address’. So long as you hold a reference to that object, you can send it messages. In Celluloid, sending messages to an actor equates to calling methods on an object.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span></span><span class="c1"># this spawns a new thread containing a Celluloid actor</span>
</span><span class="line"><span class="n">fetcher</span> <span class="o">=</span> <span class="no">XKCDFetcher</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">
</span><span class="line"><span class="c1"># these behave like regular method calls</span>
</span><span class="line"><span class="n">fetcher</span><span class="o">.</span><span class="n">object_id</span>
</span><span class="line"><span class="n">fetcher</span><span class="o">.</span><span class="n">inspect</span>
</span><span class="line">
</span><span class="line"><span class="c1"># this will fire the `next` method without</span>
</span><span class="line"><span class="c1"># waiting for its result</span>
</span><span class="line"><span class="n">fetcher</span><span class="o">.</span><span class="n">async</span><span class="o">.</span><span class="n">next</span>
</span><span class="line"><span class="n">fetcher</span><span class="o">.</span><span class="n">async</span><span class="o">.</span><span class="n">next</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Celluloid kicks off that method asynchronously and returns you a Celluloid::Future object.</span>
</span><span class="line"><span class="n">futures</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line"><span class="mi">10</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class="line">  <span class="n">futures</span> <span class="o">&lt;&lt;</span> <span class="n">fetcher</span><span class="o">.</span><span class="n">future</span><span class="o">.</span><span class="n">next</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Calling #value on that future object will block until the value has been computed.</span>
</span><span class="line"><span class="n">futures</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">future</span><span class="o">|</span>
</span><span class="line">  <span class="nb">puts</span> <span class="s2">&quot;You should check out </span><span class="si">#{</span><span class="n">future</span><span class="o">.</span><span class="n">value</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="into-the-wild">Into The Wild</h2>

<p><strong>How Sidekiq Uses Celluloid</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/WWRT-how_sidekiq_uses_celluloid.png" alt="WWRT-how_sidekiq_uses_celluloid.png" /></p>

<p>The most obvious difference I see between the Sidekiq codebase and a more traditional Ruby codebase is the lack of dependence upon return values.</p>

<p><strong>Puma’s Thread Pool Implementation</strong></p>

<p>At Puma’s multi-threaded core is a thread pool implementation. Once initialized, the pool is responsible for receiving work and feeding it to an available worker thread. The ThreadPool also has an auto-trimming feature, whereby the number of active threads is kept to a minimum, but more threads can be spawned during times of high load. Afterwards, the thread pool would be trimmed down to the minimum again.</p>

<h2 id="closing">Closing</h2>

<p>The safest path to concurrency: (from JRuby wiki)</p>

<ol>
  <li>Don’t do it.</li>
  <li>If you must do it, don’t share data across threads.</li>
  <li>If you must share data across threads, don’t share mutable data.</li>
  <li>If you must share mutable data across threads, synchronize access to that data.</li>
</ol>
]]></content>
  </entry>
  
</feed>
