<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Wendi's Blog]]></title>
  <link href="http://blog.ifyouseewendy.com/atom.xml" rel="self"/>
  <link href="http://blog.ifyouseewendy.com/"/>
  <updated>2015-12-26T11:43:49+08:00</updated>
  <id>http://blog.ifyouseewendy.com/</id>
  <author>
    <name><![CDATA[wendi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Review] Concurrency - Operating Systems Three Easy Pieces]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2015/12/26/review-concurrency-operating-systems-three-easy-pieces/"/>
    <updated>2015-12-26T11:33:57+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2015/12/26/review-concurrency-operating-systems-three-easy-pieces</id>
    <content type="html"><![CDATA[<table class="custom">
  <tbody>
    <tr>
      <td><strong>Book</strong></td>
      <td>Operating Systems: Three Easy Pieces</td>
    </tr>
    <tr>
      <td><strong>Author</strong></td>
      <td><a href="http://www.cs.wisc.edu/~remzi">Remzi H. Arpaci-Dusseau</a> and <a href="http://www.cs.wisc.edu/~dusseau">Andrea C. Arpaci-Dusseau</a></td>
    </tr>
    <tr>
      <td><strong>Link</strong></td>
      <td><a href="http://pages.cs.wisc.edu/~remzi/OSTEP/">pages.cs.wisc.edu/~remzi/OSTEP</a></td>
    </tr>
  </tbody>
</table>

<ul id="markdown-toc">
  <li><a href="#concurrency">Concurrency</a>    <ul>
      <li><a href="#chapter-26---introduction">Chapter 26 - Introduction</a></li>
      <li><a href="#chapter-27---interlude-thread-api">Chapter 27 - Interlude: Thread API</a></li>
      <li><a href="#chapter-28---locks">Chapter 28 - Locks</a></li>
    </ul>
  </li>
</ul>

<h1 id="concurrency">Concurrency</h1>

<h2 id="chapter-26---introduction">Chapter 26 - Introduction</h2>

<p><strong>Background</strong></p>

<p>With time sharing, we can take a single physical CPU and turn it into multiple virtual CPUs, thus enabling the illusion of multiple programs running at the same time, through time sharing.</p>

<p>With paging (base and bounds, segmentation), we can create the illusion of a large, private virtual memory for each process; this abstraction of the address space enables each program to behave as if it has its own memory when indeed the OS is secretly multiplexing address spaces across physical memory (and sometimes, disk).</p>

<p>But the abstraction of running program we use along is the process, and it’s a classic view of a single point of execution within a program. Now we introduce a new abstraction, thread. And  a <strong>multi-threaded</strong> program has more than one point of execution.</p>

<p>Perhaps another way to think of this is that each thread is very much like a separate process, except for one difference: they share the same address space and thus ca access the same data.</p>

<p><strong>Thread vs. Process</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-thread_vs_process.png" alt="os-thread_vs_process.png" /></p>

<p>Address space</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-thread_address_space.png" alt="os-thread_address_space.png" /></p>

<p><strong>Advantage</strong></p>

<p>Efficiency, as they share the same address space.</p>

<ul>
  <li>Save storage</li>
  <li>Easy context switching (no need to change page)</li>
</ul>

<p><strong>Issues</strong></p>

<ul>
  <li><strong>Sharing data</strong>, that of accessing shared variables and the need to support atomicity for critical sections.</li>
  <li><strong>Waiting for another</strong>, sleeping and waking interaction, where one thread must wait for another to complete some action before it continues.</li>
</ul>

<p><strong>Shared Data</strong></p>

<p>The heart of the problem is <strong>uncontrolled scheduling</strong>.</p>

<p>It is a wonderful and hard problem, and should make your mind hurt (a bit). If it doesn’t, then you don’t understand! Keep working until your head hurts; you then know you’re headed in the right directinn.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-thread_sharing_data.png" alt="os-thread_sharing_data.png" /></p>

<p><strong>Key Concurrency Terms</strong> (from Edsger Dijkstra)</p>

<p>A <strong>critical section</strong> is a piece of code that accesses a shared resource, usually a variable or data structure.</p>

<p>A <strong>race condition</strong> arises if multiple threads of execution enter the critical section at roughly the same time; both attempt to update the shared data structure, leading to a surprising (and perhaps un- desirable) outcome. The results depend on the timing execution of the code.</p>

<p>An <strong>indeterminate</strong> program consists of one or more races onditions; the output of the program varies from run to run, depending on which threads ran when. The outcome is thus not deterministic, something we usually expect from computer systems.</p>

<p>To avoid these problems, threads should use some kind of <strong>mutual exclusion primitives</strong>; doing so guarantees that only a single thread ever enters a critical section, thus avoiding racoes, and resulting in deterministic program outputs.</p>

<p><strong>Atomic</strong></p>

<p>Atomic operations are one of the most powerful underlying techniques in building computer systems.</p>

<p>The idea behind making a series of actions <strong>atomic</strong> is simply expressed with the phrase “all or nothing”; it should either appear as if all of the actions you wish to group together occurred, or that none of them occurred, with no in-between state visible. Sometimes, the grouping of many actions into a single atomic action is called a <strong>transaction</strong>.</p>

<p>In our theme of exploring concurrency, we’ll be using synchronization primitives to turn short sequences of instructions into atomic blocks of execution.</p>

<p><strong>The Wish For Atomicity</strong></p>

<p>Hardware guarantees the instructions is atomic, and provide a general set we call <strong>synchronisation primitives</strong> to ensure atomicity.</p>

<p>Hardware guarantees that the instructions execute atomically. It could not be interrupted mid-instruction, because that is precisely the guarantee we receive from the hardware: when an interrupt occurs, either the instruction has not run at all, or it has run to completion; there is no in-between state.</p>

<p>But, would we really want the hardware to support an “atomic update of B-tree” instruction?</p>

<p>No. Thus, what we will instead do is ask the hardware for a few useful instructions upon which we can build a general set of what we call <strong>synchronization primitives</strong>. By using these hardware synchronization primitives, in combination with some help from the operating system, we will be able to build multi-threaded code that accesses critical sections in a synchronized and controlled manner, and thus reliably produces the correct result despite the challenging nature of concurrent execution.</p>

<p><strong>Why in OS Class?</strong></p>

<p>“History” is the one-word answer; the OS was the first concurrent program, and many techniques were created for use within the OS. Later, with multi-threaded processes, application programmers also had to consider such things.</p>

<p>OS designers, from the very beginning of the introduction of the interrupt, had to worry about how the OS updates internal structures. Not surprisingly, page tables, process lists, file system structures, and virtually every kernel data structure has to be carefully accessed, with the proper synchronization primitives, to work correctly.</p>

<h2 id="chapter-27---interlude-thread-api">Chapter 27 - Interlude: Thread API</h2>

<p><strong>Guidelines</strong></p>

<p>There are a number of small but important things to remember when you use the POSIX thread library.</p>

<ul>
  <li><strong>Keep it simple</strong>. Above all else, any code to lock or signal between threads should be as simple as possible. Tricky thread interactions lead to bugs.</li>
  <li>Minimize thread interactions. Try to keep the number of ways in which threads interact to a minimum.</li>
  <li><strong>Each thread has its own stack</strong>. If you have a locally-allocated variable inside of some function a thread is exe- cuting, it is essentially private to that thread; no other thread can (easily) access it. To share data between threads, the values must be in the heap or otherwise some locale that is globally accessible.</li>
  <li><strong>Be careful with how you pass arguments to, and return values from, threads.</strong> In particular, any time you are passing a reference to a variable allocated on the stack, you are probably doing something wrong.</li>
  <li><strong>Check your return codes.</strong> Of course, in any C and UNIX program- ming you do, you should be checking each and every return code, and it’s true here as well.</li>
  <li><strong>Always use condition variables to signal between threads.</strong> While it is often tempting to use a simple flag, don’t do it.</li>
  <li><strong>Initialize locks and condition variables.</strong> Failure to do so will lead to code that sometimes works and sometimes fails in very strange ways.</li>
  <li><strong>Use the manual pages.</strong> On Linux, in particular, the pthread man pages (man -k pthread) are highly informative and discuss much of the nuances pre- sented here, often in even more detail.</li>
</ul>

<p><strong>Thread Creation</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#include &lt;pthread.h&gt;</span>
</span><span class="line"><span class="kt">int</span> <span class="nf">pthread_create</span><span class="p">(</span><span class="n">pthread_t</span> <span class="o">*</span> <span class="kr">thread</span><span class="p">,</span>
</span><span class="line">                     <span class="k">const</span> <span class="n">pthread_attr_t</span> <span class="o">*</span>  <span class="n">attr</span><span class="p">,</span>
</span><span class="line">                     <span class="kt">void</span> <span class="o">*</span> <span class="p">(</span><span class="o">*</span><span class="n">start_routine</span><span class="p">)(</span><span class="kt">void</span><span class="o">*</span><span class="p">),</span>
</span><span class="line">                     <span class="kt">void</span> <span class="o">*</span>  <span class="n">arg</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li><code>thread</code>, is a pointer to a structure of type pthread t; we’ll use this structure to interact with this thread</li>
  <li><code>attr</code>, is used to specify any attributes this thread might have. Some examples include setting the stack size or perhaps in- formation about the scheduling priority of the thread.</li>
  <li>The third argument is the most complex, but is really just asking: which function should this thread start running in? In C, we call this a function pointer, and this one tells us the following is expected: a function name (<code>start routine</code>), which is passed a single argument of type void * (as indicated in the parentheses after start routine), and which returns a value of type void * (i.e., a void pointer).</li>
  <li><code>arg</code>, is exactly the argument to be passed to the function where the thread begins execution.</li>
</ul>

<p><strong><em>Why do we need these void pointers?</em></strong></p>

<p>Having a void pointer as an argument to the function start routine allows us to pass in any type of argument; having it as a return value allows the thread to return any type of result.</p>

<p><strong>Thread Completion</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span> <span class="nf">pthread_join</span><span class="p">(</span><span class="n">pthread_t</span> <span class="kr">thread</span><span class="p">,</span> <span class="kt">void</span> <span class="o">**</span><span class="n">value_ptr</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li><code>thread</code> is used to specify which thread to wait for</li>
  <li><code>value_ptr</code> is a pointer to the return value you expect to get back. Because the routine can return anything, it is defined to return a pointer to void; because the pthread join() routine changes the value of the passed in argument, you need to pass in a pointer to that value, not just the value itself.</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-thread_waiting_demo.png" alt="os-thread_waiting_demo.png" /></p>

<p>Note that one has to be extremely careful with how values are returned from a thread. In particular, never return a pointer which refers to something allocated on the thread’s call stack.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/s-thread_waiting_demo_wrong.png" alt="os-thread_waiting_demo_wrong.png" /></p>

<p>However, when it returns, the value is automatically deallocated (that’s why the stack is so easy to use, after all!), and thus, passing back a pointer to a now deallocated variable will lead to all sorts of bad results.</p>

<p>Not all code that is multi-threaded uses the join routine. For example, a multi-threaded web server might create a number of worker threads, and then use the main thread to accept requests and pass them to the workers, indefinitely. Such long-lived programs thus may not need to join.</p>

<p><strong>Locks</strong></p>

<p>Providing mutual exclusion to a critical section via locks.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span> <span class="nf">pthread_mutex_lock</span><span class="p">(</span><span class="n">pthread_mutex_t</span> <span class="o">*</span><span class="n">mutex</span><span class="p">);</span>
</span><span class="line"><span class="kt">int</span> <span class="nf">pthread_mutex_unlock</span><span class="p">(</span><span class="n">pthread_mutex_t</span> <span class="o">*</span><span class="n">mutex</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>When you have a region of code you realize is a critical section, and thus needs to be pro- tected by locks in order to operate as desired.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">pthread_mutex_t</span> <span class="n">lock</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="n">Pthread_mutex_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="n">Pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">);</span>
</span><span class="line"><span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// or whatever your critical section is</span>
</span><span class="line"><span class="n">Pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">olock</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Always check for failure</span>
</span><span class="line"><span class="kt">void</span> <span class="nf">Pthread_mutex_init</span><span class="p">(</span><span class="n">pthread_mutex_t</span> <span class="o">*</span><span class="n">mutex</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">rc</span> <span class="o">=</span> <span class="n">pthread_mutex_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span> <span class="c1">// dynamic initialisation, or PTHREAD_MUTEX_INITIALIZER</span>
</span><span class="line">    <span class="n">assert</span><span class="p">(</span><span class="n">rc</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span> <span class="c1">// always check success!</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="kt">void</span> <span class="nf">Pthread_mutex_lock</span><span class="p">(</span><span class="n">pthread_mutex_t</span> <span class="o">*</span><span class="n">mutex</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">rc</span> <span class="o">=</span> <span class="n">pthread_mutex_lock</span><span class="p">(</span><span class="n">mutex</span><span class="p">);</span>
</span><span class="line">    <span class="n">assert</span><span class="p">(</span><span class="n">rc</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="kt">void</span> <span class="nf">Pthread_mutex_unlock</span><span class="p">(</span><span class="n">pthread_mutex_t</span> <span class="o">*</span><span class="n">mutex</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">rc</span> <span class="o">=</span> <span class="n">pthread_mutex_unlock</span><span class="p">(</span><span class="n">mutex</span><span class="p">);</span>
</span><span class="line">    <span class="n">assert</span><span class="p">(</span><span class="n">rc</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Condition Variables</strong></p>

<p>Condition variables are useful when some kind of signaling must take place between threads, if one thread is waiting for another to do something before it can continue.</p>

<p>To use a condition variable, one has to in addition have a lock that is associated with this condition. When calling either of the above routines, this lock should be held.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span> <span class="nf">pthread_cond_wait</span><span class="p">(</span><span class="n">pthread_cond_t</span> <span class="o">*</span><span class="n">cond</span><span class="p">,</span> <span class="n">pthread_mutex_t</span> <span class="o">*</span><span class="n">mutex</span><span class="p">);</span>
</span><span class="line"><span class="kt">int</span> <span class="nf">pthread_cond_signal</span><span class="p">(</span><span class="n">pthread_cond_t</span> <span class="o">*</span><span class="n">cond</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>pthread_cond_wait(), puts the calling thread to sleep, ad thus waits for some other thread to signal it, usually when something in the program has changed that the now-sleeping thread might care about.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">pthread_mutex_t</span> <span class="n">lock</span> <span class="o">=</span> <span class="n">PTHREAD_MUTEX_INITIALIZER</span><span class="p">;</span>
</span><span class="line"><span class="n">pthread_cond_t</span>  <span class="n">cond</span> <span class="o">=</span> <span class="n">PTHREAD_COND_INITIALIZER</span><span class="p">;</span>
</span><span class="line"><span class="n">Pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">);</span>
</span><span class="line"><span class="k">while</span> <span class="p">(</span><span class="n">ready</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">    <span class="n">Pthread_cond_wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cond</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">lock</span><span class="p">);</span>
</span><span class="line"><span class="n">Pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>After initialization of the relevant lock and condition, a thread checks to see if the variable ready has yet been set to something other than zero. If not, the thread simply calls the wait routine in order to sleep until some other thread wakes it.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">Pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">);</span>
</span><span class="line"><span class="n">ready</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="n">Pthread_cond_signal</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cond</span><span class="p">);</span>
</span><span class="line"><span class="n">Pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Notice 1</p>

<p>When signaling (as well as when modifying the global variable ready), we always make sure to have the lock held. This ensures that we don’t accidentally introduce a race condition into our code.</p>

<p>Notice 2</p>

<p>Notice that the wait call takes a lock as its second parameter, whereas the signal call only takes a condition. The reason for this difference is that the wait call, in addition to putting the calling thread to sleep, releases the lock when putting said caller to sleep.</p>

<p>Imagine if it did not: how could the other thread acquire the lock and signal it to wake up? However, before returning after being woken, the pthread_cond_wait() re-acquires the lock, thus ensuring that any time the waiting thread is running between the lock acquire at the beginning of the wait sequence, and the lock release at the end, it holds the lock.</p>

<p>Notice 3</p>

<p>The waiting thread re-checks the condition in a while loop, instead of a simple if statement. Although it rechecks the condition (perhaps adding a little overhead), there are some pthread implementations that could spuriously wake up a waiting thread; in such a case, without rechecking, the waiting thread will continue thinking that the condition has changed even though it has not.</p>

<p>Notice 4</p>

<p>Don’t ever use these ad hoc synchronisations.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="c1">// waitingnwhile (ready == 0)</span>
</span><span class="line">    <span class="p">;</span> <span class="c1">// spin</span>
</span><span class="line">
</span><span class="line"><span class="c1">// signaling</span>
</span><span class="line"><span class="n">ready</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>First, it performs poorly in many cases (spinning for a long time just wastes CPU cycles). Second, it is error prone.</p>

<p><strong>Others</strong></p>

<p>On the link line, you must also explicitly link with the pthreads library, by adding the -pthread flag.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">prompt&gt; gcc -o main main.c -Wall -pthread
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="chapter-28---locks">Chapter 28 - Locks</h2>

<p><strong>The Basic Idea</strong></p>

<p>Programmers annotate source code with locks, putting them around critical sections, and thus ensure that any such critical section executes as if it were a single atomic instruction.</p>

<p>This lock variable (or just “lock” for short) holds the state of the lock at any instant in time. It is either available (or unlocked or free) and thus no thread holds the lock, or acquired (or locked or held), and thus exactly one thread holds the lock and presumably is in a critical section.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-lock_demo.png" alt="os-lock_demo.png" /></p>

<p>In general, we view thre
ads as entities created by the programmer but scheduled by the OS, in any fashion that the OS chooses. Locks yield some of that control back to the programmer; by putting a lock around a section of code, the programmer can guarantee that no more than a single thread can ever be active within that code.</p>

<p>The name that the <strong>POSIX</strong> library uses for a lock is a <strong>mutex</strong>, as it is used to provide <strong>mutual exclusion</strong> between threads.</p>

<p><strong>Building A Lock</strong></p>

<p>Some hardware support (in the form of a more powerful instruction) plus some operating system support (e.g., in the form of park() and unpark() primitives on Solaris, or futex on Linux).</p>

<p><strong>Evaluating Locks</strong></p>

<ul>
  <li>The first is whether the lock does its basic task, which is to provide <strong>mutual exclusion</strong>. Basically, does the lock work, preventing multiple threads from entering a critical section?</li>
  <li>The second is <strong>fairness</strong>. Does each thread contending for the lock get a fair shot at acquiring it once it is free?</li>
  <li>The final criterion is <strong>performance</strong>, specifically the time overheads added by using the lock.</li>
</ul>

<p><strong>Controlling Interrupts</strong></p>

<p>Turning off interrupts is only used in limited contexts as a mutual-exclusion primitive. For example, in some cases an operating system itself will use interrupt masking to guarantee atomicity when accessing its own data structures, or at least to prevent certain messy interrupt handling situations from arising. This usage makes sense, as the trust issue disappears inside the OS, which always trusts itself to perform privileged operations anyhow.</p>

<p><strong>Plain Solution</strong></p>

<p>Without hardware support, just use a flag.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-lock_plain_solution.png" alt="os-lock_plain_solution.png" /></p>

<p>The core issue is that the testing and setting part can be interrupted by context switch, and both thread enters the critical section.</p>

<p>You should get used to this thinking about concurrent programming. Maybe pretend yourself as a <strong>malicious scheduler</strong> to understand the concurrent execution.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-lock_no_mutal_exclusion.png" alt="os-lock_no_mutal_exclusion.png" /></p>

<p><strong>Test And Set (Atomic Exchange)</strong></p>

<p>Let hardware provides a transaction-like instrument to ensure the sequence of operations is performed <strong>atomically</strong>.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-lock_test_and_set.png" alt="os-lock_test_and_set.png" /></p>

<p>The key, of course, is that this sequence of operations is performed atomically. The reason it is called “test and set” is that it enables you to “test” the old value (which is what is returned) while simultaneously “setting” the memory location to a new value; as it turns out, this slightly more powerful instruction is enough to build a simple spin lock</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-lock_spin_lock_by_test_and_set.png" alt="os-lock_spin_lock_by_test_and_set.png" /></p>

<p>By making both the test (of the old lock value) and set (of the new value) a single atomic operation, we ensure that only one thread acquires the lock.</p>

<p><strong>Compare-And-Swap</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-lock_compare_and_swap.png" alt="os-lock_compare_and_swap.png" />
<img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-lock_spin_lock_by_compare_and_swap.png" alt="os-lock_spin_lock_by_compare_and_swap.png" /></p>

<p>compare-and-swap is a more powerful instruction than test-and-set. We will make some use of this power in the future when we briefly delve into <strong>wait-free synchronisation</strong>.</p>

<p><strong>Load-Linked and Store-Conditional</strong></p>

<p>Some platforms provide a pair of instructions that work in concert to help build critical sections. On the MIPS architecture, for example, the load-linked and store-conditional instructions can be used in tandem to build locks and other concurrent structures.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-lock_load_linked_store_conditional.png" alt="os-lock_load_linked_store_conditional.png" />
<img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-lock_spin_lock_by_load_linked_store_conditional.png" alt="os-lock_spin_lock_by_load_linked_store_conditional.png" /></p>

<p><strong>Fetch-And-Add</strong></p>

<p>Fetch-and-add atomically increments a value while returning the old value at a particular address.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-lock_fetch_and_add.png" alt="os-lock_fetch_and_add.png" /></p>

<p>Fetch-and-add could build a <em>ticket lock</em>, this solution uses a ticket and turn variable in combination to build a lock. The basic operation is pretty simple: when a thread wishes to acquire a lock, it first does an atomic fetch-and-add on the ticket value; that value is now considered this thread’s “turn” (myturn). The globally shared lock-&gt;turn is then used to determine which thread’s turn it is; when (myturn == turn) for a given thread, it is that thread’s turn to enter the critical section. It has the advantage of the fairness, ensures progress for all threads. Once a thread is assigned its ticket value, it will be scheduled at some point in the future</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-lock_ticket_lock_by_fetch_and_add.png" alt="os-lock_ticket_lock_by_fetch_and_add.png" /></p>

<p><strong>Spin Lock</strong></p>

<p>We use a while loop to endlessly check the value of a flag, this technique is known as <strong>spin-waiting</strong>. Spin-waiting wastes time waiting for another thread to release a lock. The waste is exceptionally high on a uniprocessor, where the thread that the waiter is waiting for cannot even run (at least, until a context switch occurs)!</p>

<p><strong>Spin lock</strong> is the simplest type of lock to build, and simply spins, using CPU cycles, until the lock becomes available. To work correctly on a single processor, it requires a <strong>preemptive scheduler</strong>. (Remember that SJF is non-preemptive, but STCF is preemptive, which means permitting one thread to be interrupted).</p>

<p>Evaluating</p>

<ul>
  <li>√ correctness, the spin lock only allows a single thread to enter the critical section at a time.</li>
  <li>X fairness, spin locks don’t provide any fairness guarantees. Indeed, a thread spinning may spin forever, under contention. Spin locks are not fair and may lead to starvation.</li>
  <li>X performance, bad in the single CPU case. The problem gets worse with N threads contending for a lock; N − 1 time slices may be wasted in a similar manner, simply spinning and waiting for a single thread to release the lock.</li>
</ul>

<p><strong>Avoid Spinning by Yield</strong></p>

<blockquote>
  <p>“just yield, baby!”</p>
</blockquote>

<p>Hardware support alone cannot solve the problem. We’ll need OS support too! Assume an operating system primitive <strong>yield()</strong> which a thread can call when it wants to give up the CPU and let another thread run. A thread can be in one of three states (running, ready, or blocked); yield is simply a system call that moves the caller from the <strong>running</strong> state to the <strong>ready</strong> state, and thus promotes another thread to running. Thus, the yielding process essentially <strong>deschedules</strong> itself.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-lock_with_test_and_set_and_yield.png" alt="os-lock_with_test_and_set_and_yield.png" /></p>

<p>This approach eliminates the spinning time, but still costly when context switching. And we have not tackled the starvation problem at all. A thread may get caught in an endless yield loop while other threads repeatedly enter and exit the critical section.</p>

<p><strong>Avoid Spnning by Queues</strong></p>

<p>The scheduler determines which thread runs next; if the scheduler makes a bad choice, a thread runs that must either spin waiting for the lock (our first approach), or yield the CPU immediately (our second approach). Either way, there is potential for waste and no prevention of starvation.</p>

<p>Thus, we must explicitly exert some control over who gets to acquire the lock next after the current holder releases it.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-lock_with_test_and_set_and_yield_and_queue.png" alt="os-lock_with_test_and_set_and_yield_and_queue.png" /></p>

<p>This approach thus doesn’t avoid spin-waiting entirely; a thread might be interrupted while acquiring or releasing the lock, and thus cause other threads to spin-wait for this one to run again. However, the time spent spinning is quite limited (just a few instructions inside the lock and unlock code, instead of the user-defined critical section), and thus this approach may be reasonable.</p>

<p>With just the wrong timing, a thread will be about to park, assuming that it should sleep until the lock is no longer held. A switch at that time to another thread (say, a thread holding the lock) could lead to trouble, for example, if that thread then released the lock. The subsequent park by the first thread would then sleep forever (potentially). This problem is sometimes called the <strong>wakeup/waiting race</strong>.</p>

<p>Solaris solves this problem by adding a third system call: <strong>setpark()</strong>. By calling this routine, a thread can indicate it is about to park. If it then happens t be interrupted and another thread calls unpark before park is actually called, the subsequent park returns immediately instead of sleeping.</p>

<p>You might also notice the interesting fact that the flag does not get set back to 0 when another thread gets woken up. Why is this? Well, it is not an error, but rather a necessity! When a thread is woken up, it will be as if it is returning from park(); however, it does not hold the guard at that point in the code and thus cannot even try to set the flag to 1. Thus, we just pass the lock directly from the thread releasing the lock to the next thread acquiring it; flag is not set to 0 in-between.</p>

<p><strong>Linux Support</strong></p>

<p>Linux provides something called a <strong>futex</strong> which is similar to the Solaris interface but provides a bit more in-kernel functionality. Specifically, each futex has associated with it a specific physical memory location; associated with each such memory location is an in-kernel queue.</p>

<ul>
  <li><code>futex_wait(address, expected)</code> puts the calling thread to sleep, assouming the value at address is equal to expected. If it is not equal, the call returns immediately.</li>
  <li><code>futex_wake(address)</code> wakes one thread that is wait- ing on the queue.</li>
</ul>

<p>Linux approach has the flavor of an old approach that has been used on and off for years, , and is now referred to as a <strong>two-phase lock</strong>. A two-phase lock realizes that spinning can be useful, particularly if the lock is about to be released. So in the first phase, the lock spins for a while, hoping that it can acquire the lock. However, if the lock is not acquired during the first spin phase, a second phase is entered, where the caller is put to sleep, and only woken up when the lock becomes free later.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Review] Website Performance Optimization]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2015/12/19/web-performance-optimization/"/>
    <updated>2015-12-19T15:21:58+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2015/12/19/web-performance-optimization</id>
    <content type="html"><![CDATA[<p>After several years working, I’ve learned many lessons like how to write HTML, how to minify and compress CSS and JavaScript files, where to put the CSS and JavaScript reference, how to do the cache control and etc.. But all the knowledge are scattered, and the real mechanism, like the HTML rendering, seems like a mysterious process to me. So I spent some time digging and learning, the things finally got clear.</p>

<p><strong><em>For short, what’s the basic idea of web performance optimization?</em></strong></p>

<ul>
  <li>Minimize the number of critical resources, like optimizing CSS (inline, or specify media query), and optimizing JavaScript (defer execution).</li>
  <li>Minimize the number of critical bytes, like optimizing content efficiency, minify, compress and HTTP cache control.</li>
  <li>Minimize the critical path length, like preload scanner.</li>
</ul>

<p><strong>Materials</strong></p>

<ul>
  <li><a href="https://www.udacity.com/course/website-performance-optimization--ud884">Udacity - Website Performance Optimization</a></li>
  <li><a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/?hl=en">Google Developer - Critical Rendering Path</a></li>
</ul>

<p><strong>TOC</strong></p>

<ul id="markdown-toc">
  <li><a href="#optimizing-content-efficiency">Optimizing content efficiency</a>    <ul>
      <li><a href="#eliminating-unnecessary-downloads">Eliminating unnecessary downloads</a></li>
      <li><a href="#optimizing-encoding-and-transfer-size-of-text-based-assets">Optimizing encoding and transfer size of text-based assets</a></li>
      <li><a href="#image-optimization">Image optimization</a></li>
      <li><a href="#web-font-optimization">Web font optimization</a></li>
      <li><a href="#http-caching">HTTP caching</a></li>
    </ul>
  </li>
  <li><a href="#critical-rendering-path">Critical Rendering Path</a>    <ul>
      <li><a href="#critical-rendering-path-1">Critical Rendering Path</a></li>
      <li><a href="#analysing-critical-rendering-path-performance">Analysing Critical Rendering Path Performance</a></li>
      <li><a href="#optimizing-the-critical-rendering-path">Optimizing the critical rendering path</a></li>
    </ul>
  </li>
  <li><a href="#browser-rendering-optimization">Browser Rendering Optimization</a></li>
</ul>

<h2 id="optimizing-content-efficiency">Optimizing content efficiency</h2>

<ul>
  <li>Apply content-specific optimizations first: CSS, JS, and HTML minifiers.</li>
  <li>Apply GZIP to compress the minified output.</li>
</ul>

<h3 id="eliminating-unnecessary-downloads">Eliminating unnecessary downloads</h3>

<p>The fastest and best optimized resource is a resource not sent.</p>

<ul>
  <li>Inventory all own and third party assets on your pages</li>
  <li>Measure the performance of each asset: its value and its technical performance</li>
  <li>Determine if the resources are providing sufficient value</li>
</ul>

<p>For best results you should periodically inventory and revisit these questions for each and every asset on your pages.</p>

<h3 id="optimizing-encoding-and-transfer-size-of-text-based-assets">Optimizing encoding and transfer size of text-based assets</h3>

<p><strong>Data Compression</strong></p>

<p>Compression is the process of encoding information using fewer bits. Eliminating unnecessary data always yields the best results.</p>

<p><strong>Minification: preprocessing &amp; context-specific optimizations</strong></p>

<ul>
  <li>Remove comments</li>
  <li>Remove inefficient ways of defining CSS rules</li>
  <li>Strip out all the whitespaces (tabs and spaces).</li>
</ul>

<p>We can keep the original page as our “development version” and then apply the steps above whenever we are ready to release the page on our website.</p>

<blockquote>
  <p>Case in point, the uncompressed development version of the JQuery library is now approaching ~300KB. The same library, but minified (removed comments, etc.) is about 3x smaller: ~100KB.</p>
</blockquote>

<p><strong>Text compression with GZIP</strong></p>

<p>GZIP is a generic compressor that can be applied to any stream of bytes. In practice, GZIP performs best on text-based content, often achieving compression rates of as high as 70-90% for larger files.</p>

<p>All modern browsers support and automatically negotiate GZIP compression for all HTTP requests.</p>

<p>A quick and simple way to see GZIP in action is to open Chrome DevTools and inspect the “Size / Content” column in the Network panel: “Size” indicates the transfer size of the asset, and “Content” the uncompressed size of the asset.</p>

<ul>
  <li><a href="http://www.whatsmyip.org/http-compression-test/">HTTP Compression Test</a></li>
  <li><a href="https://github.com/h5bp/server-configs-nginx">Nginx HTTP server boilerplate configs</a></li>
</ul>

<h3 id="image-optimization">Image optimization</h3>

<ul>
  <li>Prefer vector formats: vector images are resolution and scale independent, which makes them a perfect fit for the multi-device and high-resolution world.</li>
  <li>Minify and compress SVG assets: XML markup produced by most drawing applications often contains unnecessary metadata which can be removed; ensure that your servers are configured to apply GZIP compression for SVG assets.</li>
  <li>Pick best raster image format: determine your functional requirements and select the one that suits each particular asset.</li>
  <li>Experiment with optimal quality settings for raster formats: don’t be afraid to dial down the “quality” settings, the results are often very good and byte savings are significant.</li>
  <li>Remove unnecessary image metadata: many raster images contain unnecessary metadata about the asset: geo information, camera information, and so on. Use appropriate tools to strip this data.</li>
  <li>Serve scaled images: resize images on the server and ensure that the “display” size is as close as possible to the “natural” size of the image. Pay close to attention to large images in particular, as they account for largest overhead when resized!</li>
  <li>Automate, automate, automate: invest into automated tools and infrastructure that will ensure that all of your image assets are always optimized.</li>
</ul>

<p><strong>Eliminating and replacing images</strong></p>

<ul>
  <li>Eliminate unnecessary image resources</li>
  <li>Leverage CSS3 effects where possible</li>
  <li>Use web fonts instead of encoding text in images</li>
</ul>

<p><strong>Vector vs. Raster images</strong></p>

<ul>
  <li>Vector images are ideal for images that consist of geometric shapes</li>
  <li>Vector images are zoom and resolution-independent</li>
  <li>Raster images should be used for complex scenes with lots of irregular shapes and details</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/vector_vs_raster_image.png" alt="vector_vs_raster_image.png" /></p>

<ul>
  <li>Vector graphics use lines, points, and polygons to represent an image.</li>
  <li>Raster graphics represent an image by encoding the individual values of each pixel within a rectangular grid.</li>
</ul>

<p><strong>Implications of high-resolution screens</strong></p>

<ul>
  <li>High resolution screens have multiple device pixels per CSS pixel</li>
  <li>High resolution images require significantly higher number of pixels and bytes</li>
  <li>Image optimization techniques are the same regardless of resolution</li>
</ul>

<p>High resolution screens also require high-resolution images: prefer vector images whenever possible as they are resolution independent and always deliver sharp results, and if a raster image is required, deliver and optimize multiple variants of each imagewith the help of srcset and picture.</p>

<p><strong>Optimizing vector images</strong></p>

<ul>
  <li>SVG is an XML-based image format</li>
  <li>SVG files should be minified to reduce their size</li>
  <li>SVG files should be compressed with GZIP</li>
</ul>

<p>All modern browsers support Scalable Vector Graphics (SVG), which is an XML-based image format for two-dimensional graphics: we can embed the SVG markup directly on the page, or as an external resource.</p>

<p><strong>Optimizing raster images</strong></p>

<p>Image optimization boils down to two criteria: optimizing the number of bytes used to encode each image pixel, and optimizing the total number of pixels: the filesize of the image is simply the total number of pixels times the number of bytes used to encode each pixel.</p>

<ul>
  <li>A raster image is a grid of pixels</li>
  <li>Each pixel encodes color and transparency information</li>
  <li>Image compressors use a variety of techniques to reduce the number of required bits per pixel to reduce file size of the image</li>
</ul>

<p>A raster image is simply a 2-dimensional grid of individual “pixels” - e.g. a 100x100 pixel image is a sequence of 10,000 pixels. In turn, each pixel stores the “RGBA” values: (R) red channel, (G) green channel, (B) blue channel, and (A) alpha (transparency) channel.</p>

<p>Internally, the browser allocates 256 values (shades) for each channel, which translates to 8 bits per channel (2 ^ 8 = 256), and 4 bytes per pixel (4 channels x 8 bits = 32 bits = 4 bytes).</p>

<p>So, a 100 x 100px image, is 39 KB size without losing any information.</p>

<blockquote>
  <p>100 x 100px image is composed of 10,000 pixels<br />
10,000 pixels x 4 bytes = 40,000 bytes<br />
40,000 bytes / 1024 = 39 KB  </p>
</blockquote>

<p><strong>Lossless vs lossy image compression</strong></p>

<ul>
  <li>Due to how our eyes work, images are great candidates for lossy compression</li>
  <li>Image optimization is a function of lossy and lossless compression</li>
  <li>Differences in image formats are due to the difference in how and which lossy and lossless algorithms are used to optimize the image</li>
  <li>There is no single best format or “quality setting” for all images: each combination of particular compressor and image contents produce a unique output</li>
</ul>

<p>In fact, the difference between various image formats, such as GIF, PNG, JPEG, and others, is in the combination of the specific algorithms they use (or omit) when applying the lossy and lossless steps.</p>

<p><strong><em>What is the “optimal” configuration of lossy and lossless optimization?</em></strong></p>

<p>The answer depends on the image contents and your own criteria such as the tradeoff between filesize and artifacts introduced by lossy compression.</p>

<p><strong>Selecting the right image format</strong></p>

<ul>
  <li>Start by selecting the right universal format: GIF, PNG, JPEG</li>
  <li>Experiment and select the best settings for each format: quality, palette size, etc.</li>
  <li>Consider adding WebP and JPEG XR assets for modern clients</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/select_the_right_image.png" alt="select_the_right_image.png" /></p>

<ul>
  <li><strong>GIF</strong> limits the color palette to at most 256 colors, which makes it a poor choice for most images.</li>
  <li><strong>PNG</strong> does not apply any lossy compression algorithms beyond the choice of the size of the color palette. As a result, it will produce the highest quality image, but at a cost of significantly higher filesize than other formats. Use judiciously.</li>
  <li>If the image asset contains imagery composed of geometric shapes, consider converting it to a vector (<strong>SVG</strong>) format!</li>
  <li>If the image asset contains text, stop and reconsider. Text in images is not selectable, searchable, or “zoomable”. If you need to convey a custom look (for branding or other reasons), use a <strong>web font</strong> instead.</li>
  <li><strong>JPEG</strong> uses a combination of lossy and lossless optimization to reduce filesize of the image asset.</li>
  <li>Also consider adding an additional variant encoded in <strong>WebP</strong> and <strong>JPEG XR</strong>. WebP delivers a 30% filesize decrease over a comparable JPEG image.</li>
</ul>

<p><strong>Tools and parameter tuning</strong></p>

<ul>
  <li><a href="http://www.lcdf.org/gifsicle/">gifsicle</a>, create and optimize GIF images</li>
  <li><a href="http://jpegclub.org/jpegtran/">jpegqran</a>, optimize JPEG images</li>
  <li><a href="http://optipng.sourceforge.net/">optpng</a>, lossless PNG optimization</li>
  <li><a href="http://pngquant.org/">pngquant</a>, lossy PNG optimization</li>
</ul>

<p><strong>Delivering scaled image assets</strong></p>

<p>One of the simplest and most effective image optimization techniques is to ensure that we are not shipping any more pixels than needed to display the asset at its intended size in the browser. Most pages fail this test for many of their image assets: typically, they ship larger assets and rely on the browser to rescale them - which also consumes extra CPU resources - and display them at a lower resolution.</p>

<p>You should ensure that the number of unnecessary pixels is minimal, and that your large assets in particular are delivered as close as possible to their display size.</p>

<h3 id="web-font-optimization">Web font optimization</h3>

<p>Use of webfonts does not need to delay page rendering or have negative impact on other performance metrics. Well optimized use of fonts can deliver a much better overall user experience:</p>

<ul>
  <li>Audit and monitor your font use: do not use too many fonts on your pages, and for each font, minimize the number of used variants. This will assist in delivering a more consistent and a faster experience for your users.</li>
  <li>Subset your font resources: many fonts can be subset, or split into multiple unicode-ranges to deliver just the glyphs required by a particular page - this reduces the filesize and improves download speed of the resource. However, when defining the subsets be careful to optimize for font re-use - e.g. you don’t want to download a different but overlapping set of characters on each page. A good practice is to subset based on script - e.g. Latin, Cyrillic, and so on.</li>
  <li>Deliver optimized font formats to each browser: each font should be provided in WOFF2, WOFF, EOT, and TTF formats. Make sure to apply GZIP compression to EOT and TTF formats, as they are not compressed by default.</li>
  <li>Specify revalidation and optimal caching policies: fonts are static resources that are infrequently updated. Make sure that your servers provide a long-lived max-age timestamp, and a revalidation token, to allow for efficient font re-use between different pages.</li>
  <li>Use Font Loading API to optimize the Critical Rendering Path: default lazyloading behavior may result in delayed text rendering. Font Loading API allows us to override this behavior for particular fonts, and to specify custom rendering and timeout strategies for different content on the page. For older browsers that do not support the API, you can use the webfontloader JavaScript library or use the CSS inlining strategy.</li>
</ul>

<p><strong>Anatomy of a webfont</strong></p>

<p>A webfont is a collection of glyphs, and each glyph is a vector shape that describes a letter or symbol. As a result, the size of a particular font file is determined by two simple variables:</p>

<ul>
  <li>the complexity of the vector paths of each glyph</li>
  <li>the number of glyphs in a particular font</li>
</ul>

<p>Today there are four font container formats in use on the web: EOT, TTF, WOFF, and WOFF2.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/fonts.png" alt="fonts.png" /></p>

<p>Consider using <a href="http://en.wikipedia.org/wiki/Zopfli">Zopfli compression</a> for EOT, TTF, and WOFF formats. Zopfli is a zlib compatible compressor that delivers ~5% filesize reduction over gzip.</p>

<p><strong>Defining font family with @font-face</strong></p>

<p>format selection</p>

<p>A “full” webfont that includes all stylistic variants, which we may not need, plus all the glyphs, which may go unused, can easily result in a multi-megabyte download. To address this, the @font-face CSS rule is specifically designed to allow us to split the font family into a collection of resources: unicode subsets, distinct style variants, and so on.</p>

<p>The @font-face CSS at-rule allows us to define the location of a particular font resource, its style characteristics, and the Unicode codepoints for which it should be used. A combination of such @font-face declarations can be used to construct a “font family”, which the browser will use to evaluate which font resources need to be downloaded and applied to the current page.</p>

<p>Each @font-face declaration provides the name of the font family, which acts as a logical group of multiple declarations, font properties such as style, weight, and stretch, and the src descriptor that specifies a prioritized list of locations for the font resource.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/font_face_1.png" alt="font_face_1.png" /></p>

<p>The browser figures out which resources are required and will select the optimal format on our behalf.</p>

<p>Unicode-range subsetting</p>

<p>In addition to font properties such as style, weight, and stretch, the @font-face rule allows us to define a set of Unicode codepoints supported by each resource. This enables us to split a large Unicode font into smaller subsets (e.g. Latin, Cyrillic, Greek subsets) and only download the glyphs required to render the text on a particular page.</p>

<p>The use of unicode range subsets, and separate files for each stylistic variant of the font allows us to define a composite font family that is both faster and more efficient to download - the visitor will only download the variants and subsets it needs, and they are not forced to download subsets that they may never see or use on the page.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/font_face_2.png" alt="font_face_2.png" /></p>

<p>Unicode-range subsetting is particularly important for Asian languages, where the number of glyphs is much larger than in western languages and a typical ‘full’ font is often measured in megabytes, instead of tens of kilobytes!</p>

<p>There is one small gotcha with unicode-range: <a href="http://caniuse.com/#feat=font-unicode-range">not all browser support it</a>. We have to fallback to providing a single font resource that contains all necessary subsets, and hide the rest from the browser. We can use the open-source <a href="https://github.com/behdad/fonttools/blob/master/Lib/fontTools/subset.py#L16">pyftsubset</a> tool to subset and optimize your fonts.</p>

<p>Font selection and synthesis</p>

<p>Each font family is composed of multiple stylistic variants (regular, bold, italic) and multiple weights for each style, each of which, in turn, may contain very different glyph shapes - e.g. different spacing, sizing, or a different shape altogether.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/font_size.png" alt="font_size.png" /></p>

<p>All other in-between variants (indicated in gray) are automatically mapped to the closest variant by the browser. Similar logic applies to italic variants. it’s a good idea to keep the number of variants small!</p>

<p>What happens if one of our CSS rules specifies a different font weight, or sets the font-style property to italic?</p>

<ul>
  <li>If an exact font match is not available the browser will substitute the closest match.</li>
  <li>If no stylistic match is found (e.g. we did not declare any italic variants in example above), then the browser will <strong>synthesize</strong> its own font variant.</li>
</ul>

<p>For best consistency and visual results you should not rely on font synthesis. Instead, minimize the number of used font variants and specify their locations, such that the browser can download them when they are used on the page.</p>

<p><strong>Optimizing loading and rendering</strong></p>

<p>Font requests are delayed until the render tree is constructed, which can result in delayed text rendering.</p>

<p>Lazy loading of fonts carries an important hidden implication that may delay text rendering: the browser must construct the render tree, which is dependent on the DOM and CSSOM trees, before it will know which font resources it will need to render the text. As a result, font requests are delayed well after other critical resources, and the browser may be blocked from rendering text until the resource is fetched.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/font_rendering.png" alt="font_rendering.png" /></p>

<p>Font requests are dispatched once render tree indicates which font variants are needed to render the specified text on the page</p>

<p>The “race” between the first paint of page content, which can be done shortly after the render tree is built, and the request for the font resource is what creates the “blank text problem” where the browser may render page layout but omits any text.</p>

<ul>
  <li>Safari hold text rendering until the font download is complete.</li>
  <li>Chrome and Firefox hold font rendering for up to 3 seconds, after which they use a fallback font, and once the font download has finished they re-render the text once more with the downloaded font.</li>
  <li>IE immediately renders with the fallback font if the request font is not yet available, and re-renders it once the font download is complete.</li>
</ul>

<p>Optimizing font rendering with the Font Loading API</p>

<p>Font Loading API provides a scripting interface to define and manipulate CSS font faces, track their download progress, and override their default lazyload behavior.</p>

<p>If we’re certain that a particular font variant will be required, we can define it and tell the browser to initiate an immediate fetch of the font resource:</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/font_loading_api.png" alt="font_loading_api.png" /></p>

<ul>
  <li>We can hold all text rendering until the font is available.</li>
  <li>We can implement a custom timeout for each font.</li>
  <li>We can use the fallback font to unblock rendering and inject a new style that uses desired font once the font is available.</li>
</ul>

<p>Optimizing font rendering with inlining</p>

<p>To inline the font contents into a CSS stylesheet:</p>

<ul>
  <li>CSS stylesheets with matching media queries are automatically downloaded by the browser with high priority as they are required to construct the CSSOM.</li>
  <li>Inlining the font data into CSS stylesheet forces the browser to download the font with high priority and without waiting for the render tree - i.e. this acts as a manual override to the default lazyload behavior.</li>
</ul>

<p>Optimizing font reuse with HTTP Caching</p>

<p>Font resources are, typically, static resources that don’t see frequent updates. As a result, they are ideally suited for a long max-age expiry.</p>

<p>There is no need to store fonts in localStorage or via other mechanisms - each of those has their set of performance gotchas. The browser’s HTTP cache, in combination with Font Loading API or the webfontloader library, provides the best and most robust mechanism to deliver font resources to the browser.</p>

<h3 id="http-caching">HTTP caching</h3>

<p>The combination of ETag, Cache-Control, and unique URLs allows us to deliver the best of all worlds: long-lived expiry times, control over where the response can be cached, and on-demand updates.</p>

<ul>
  <li>Use consistent URLs: if you serve the same content on different URLs, then that content will be fetched and stored multiple times. Tip: note that URLs are case sensitive!</li>
  <li>Ensure the server provides a validation token (ETag): validation tokens eliminate the need to transfer the same bytes when a resource has not changed on the server.</li>
  <li>Identify which resources can be cached by intermediaries: those with responses that are identical for all users are great candidates to be cached by a CDN and other intermediaries.</li>
  <li>Determine the optimal cache lifetime for each resource: different resources may have different freshness requirements. Audit and determine the appropriate max-age for each one.</li>
  <li>Determine the best cache hierarchy for your site: the combination of resource URLs with content fingerprints, and short or no-cache lifetimes for HTML documents allows you to control how quickly updates are picked up by the client.</li>
  <li>Minimize churn: some resources are updated more frequently than others. If there is a particular part of resource (e.g. JavaScript function, or set of CSS styles) that are often updated, consider delivering that code as a separate file. Doing so allows the remainder of the content (e.g. library code that does not change very often), to be fetched from cache and minimizes the amount of downloaded content whenever an update is fetched.</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/http_caching.png" alt="http_caching.png" /></p>

<p><strong>Validating cached responses with ETags</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/http_caching_with_ETags.png" alt="http_caching_with_ETags.png" /></p>

<ul>
  <li>Validation token is communicated by the server via the ETag HTTP header</li>
  <li>Validation token enables efficient resource update checks: no data transfer if the resource has not changed.</li>
</ul>

<p><strong>Cache-Control</strong></p>

<ul>
  <li>Each resource can define its caching policy via Cache-Control HTTP header</li>
  <li>Cache-Control directives control who can cache the response, under which conditions, and for how long</li>
</ul>

<p>Cache-Control header was defined as part of the HTTP/1.1 specification and supersedes previous headers (e.g. Expires) used to define response caching policies. All modern browsers support Cache-Control, hence that is all we will need.</p>

<p>“no-cache” indicates that the returned response cannot be used to satisfy a subsequent request to the same URL without first checking with the server if the response has changed. As a result, if a proper validation token (ETag) is present, no-cache will incur a roundtrip to validate the cached response, but can eliminate the download if the resource has not changed.</p>

<p>“no-store” is much simpler, as it simply disallows the browser and all intermediate caches to store any version of the returned response - e.g. one containing private personal or banking data.</p>

<p>If the response is marked as “public” then it can be cached, even if it has HTTP authentication associated with it, and even when the response status code isn’t normally cacheable. Most of the time, “public” isn’t necessary, because explicit caching information (like “max-age”) indicates that the response is cacheable anyway.</p>

<p>“private” responses can be cached by the browser but are typically intended for a single user and hence are not allowed to be cached by any intermediate cache - e.g. an HTML page with private user information can be cached by that user’s browser, but not by a CDN.</p>

<p>“max-age” specifies the maximum time in seconds that the fetched response is allowed to be reused for from the time of the request.</p>

<p><strong>Defining optimal Cache-Control policy</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/http_cache_control_policy.png" alt="http_cache_control_policy.png" /></p>

<p><strong>Invalidating and updating cached responses</strong></p>

<p>What if we want to update or invalidate a cached response? For example, let’s say we’ve told our visitors to cache a CSS stylesheet for up to 24 hours (max-age=86400), but our designer has just committed an update that we would like to make available to all users. How do we notify all the visitors with what is now a “stale” cached copy of our CSS to update their caches? It’s a trick question - we can’t, at least not without changing the URL of the resource.</p>

<p>Simple, we can change the URL of the resource and force the user to download the new response whenever its content changes. Typically, this is done by embedding a fingerprint of the file, or a version number, in its filename - e.g. style.x234dff.css.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/http_update_cache_by_fingerprints.png" alt="http_update_cache_by_fingerprints.png" /></p>

<p>The ability to define per-resource caching policies allows us to define “cache hierarchies” that allow us to control not only how long each is cached for, but also how quickly new versions are seen by visitor.</p>

<p>The HTML is marked with “no-cache”, which means that the browser will always revalidate the document on each request and fetch the latest version if the contents change. Also, within the HTML markup we embed fingerprints in the URLs for CSS and JavaScript assets: if the contents of those files change, then the HTML of the page will change as well and new copy of the HTML response will be downloaded.</p>

<h2 id="critical-rendering-path">Critical Rendering Path</h2>

<h3 id="critical-rendering-path-1">Critical Rendering Path</h3>

<p>Optimizing for performance is all about understanding what happens in these intermediate steps between receiving the HTML, CSS, and JavaScript bytes and the required processing to turn them into rendered pixels - that’s the critical rendering path.</p>

<p>By optimizing the critical rendering path we can significantly improve the time to first render of our pages. Further, understanding the critical rendering path will also serve as a foundation for building well performing interactive applications. It turns out, the process for processing interactive updates is the same, just done in a continuous loop and ideally at 60 frames per second!</p>

<ul>
  <li>Process HTML markup and build the <strong>DOM tree</strong>.</li>
  <li>Process CSS markup and build the <strong>CSSOM tree</strong>.</li>
  <li>Combine the DOM and CSSOM into a <strong>render tree</strong>.</li>
  <li>Run <strong>layout</strong> on the render tree to compute geometry of each node.</li>
  <li><strong>Paint</strong> the individual nodes to the screen.</li>
</ul>

<p>Optimizing the critical rendering path is the process of minimizing the total amount of time spent in steps 1 through 5 in the above sequence. Doing so enables us to render content to the screen as soon as possible and also to reduces the amount of time between screen updates after the initial render.</p>

<p><strong>DOM</strong></p>

<p>The Document Object Model (DOM) is an application programming interface (API) for valid HTML and well-formed XML documents. It defines the logical structure of documents and the way a document is accessed and manipulated.</p>

<p>from <a href="http://www.w3.org/TR/DOM-Level-2-Core/introduction.html">http://www.w3.org/TR/DOM-Level-2-Core/introduction.html</a></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/dom_construction.png" alt="dom_construction.png" /></p>

<p>Every time the browser has to process HTML markup it has to step through all of the steps above: convert bytes to characters, identify tokens, convert tokens to nodes, and build the DOM tree.</p>

<p><strong>CSSOM</strong></p>

<p>The DOM tree captures the properties and relationships of the document markup, but it does not tell us anything about how the element should look when rendered. That’s the responsibility of the CSSOM.</p>

<p>The CSS bytes are converted into characters, then to tokens and nodes, and finally are linked into a tree structure known as the “CSS Object Model”, or CSSOM for short:</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/cssom_construction.png" alt="cssom_construction.png" /></p>

<p><strong><em>Is this the complete CSSOM?</em></strong></p>

<p>No. Note that the above tree is not the complete CSSOM tree and only shows the styles we decided to
override in our stylesheet. Every browser provides a default set of styles also known as “user agent styles” – that’s what we see when we don’t provide any of our own – and our styles simply override these defaults.</p>

<p><strong><em>Why does the CSSOM have a tree structure?</em></strong></p>

<p>When computing the final set of styles for any object on the page, the browser starts with the most general rule applicable to that node (e.g. if it is a child of body element, then all body styles apply) and then recursively refines the computed styles by applying more specific rules - i.e. the rules “cascade down”.</p>

<p><strong><em>Curious to know how long the CSS processing took?</em></strong></p>

<p>Record a timeline in DevTools and look for “Recalculate Style” event: unlike DOM parsing, the timeline doesn’t show a separate “Parse CSS” entry, and instead captures parsing and CSSOM tree construction, plus the recursive calculation of computed styles under this one event.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/css_render_timeline.png" alt="css_render_timeline.png" /></p>

<p><strong><em>Why we say that CSS is render blocking?</em></strong></p>

<p>Review the rendering process, DOM and CSSOM construct the render tree, then calculate layout, and paint. So CSS is a rendering blocking resource which blocks on rendering process.</p>

<p><strong><em>Why do browsers match CSS selectors from right to left?</em></strong></p>

<p>It sounds like that it is done this way to avoid having to look at all the children of parent (which could be many) rather than all the parents of a child which must be one. Even if the DOM is deep it would only look at one node per level rather than multiple in the RTL matching. </p>

<p>from <a href="http://stackoverflow.com/questions/5797014/why-do-browsers-match-css-selectors-from-right-to-left">Why do browsers match CSS selectors from right to left?</a></p>

<p><strong>Render Blocking CSS</strong></p>

<ul>
  <li>Get it down to the client as soon and as quickly as possible to optimize the time to first render</li>
  <li>Use media types and queries to unblock rendering</li>
</ul>

<p>By default CSS is treated as a render blocking resource, which means that the browser will hold rendering of any processed content until the CSSOM is constructed. Note that “render blocking” only refers to whether the browser will have to hold the initial rendering of the page on that resource. In either case, the CSS asset is still downloaded by the browser, albeit with a lower priority for non-blocking resources (like images).</p>

<p><strong><em>How to make it non-blocking?</em></strong></p>

<p>By using media queries, our presentation can be tailored to specific use cases such as display vs. print, and also to dynamic conditions such as changes in screen orientation, resize events, and more. When declaring your stylesheet assets, pay close attention to the media type and queries, as they will have big performance impact on the critical rendering path!</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;style.css&quot;</span>    <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span><span class="nt">&gt;</span>
</span><span class="line"><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;style.css&quot;</span>    <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">media=</span><span class="s">&quot;all&quot;</span><span class="nt">&gt;</span>
</span><span class="line"><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;portrait.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">media=</span><span class="s">&quot;orientation:portrait&quot;</span><span class="nt">&gt;</span>
</span><span class="line"><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;print.css&quot;</span>    <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">media=</span><span class="s">&quot;print&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The third declaration has a dynamic media query which will be evaluated when the page is being loaded. Depending on the orientation of the device when the page is being loaded, portrait.css may or may not be render blocking.</p>

<p>The last declaration is only applied when the page is being printed, hence it is not render blocking when the page is first loaded in the browser.</p>

<p><strong>Render Tree</strong></p>

<p>The CSSOM and DOM trees are combined into a render tree, which is then used to</p>

<ul>
  <li>compute the layout of each visible element</li>
  <li>serves as an input to the paint process which renders the pixels to screen</li>
</ul>

<p>Render tree contains only the nodes required to render the page.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/render_tree_construction.png" alt="render_tree_construction.png" /></p>

<p><strong>Layout Stage</strong></p>

<p>The layout stage calculates the exact position and size within the viewport of the device.</p>

<p>The output of the layout process is a “box model” which precisely captures the exact position and size of each element within the viewport: all of the relative measures are converted to absolute pixels positions on the screen, and so on.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/layout_timeline.png" alt="layout_timeline.png" /></p>

<p><strong>Painting Stage</strong></p>

<p>Now that we know which nodes are visible, their computed styles, and geometry, we can finally pass this information to our final stage which will convert each node in the render tree to actual pixels on the screen - this step is often referred to as “painting” or “rasterizing.”</p>

<p><strong><em>Can painting happen in the meantime dom is parsing?</em></strong></p>

<p>This is a gradual process: browsers won’t wait until all HTML is parsed. Parts of the content will be parsed and displayed, while the process continues with the rest of the contents that keeps coming from the network.</p>

<p>from <a href="http://stackoverflow.com/questions/34269416/when-does-parsing-html-dom-tree-happen">pesla’s answer</a> in SO</p>

<p><strong>Image</strong></p>

<p>Not all resources are critical to deliver the fast first paint. Images do not block the initial render of the page - although, of course, we should try to make sure that we get the images painted as soon as possible also.</p>

<p>Image don’t block on domContentLoaded, but blocks “load” event.</p>

<p><strong>Javascript</strong></p>

<ul>
  <li>The location of the script in the document is significant.</li>
  <li>JavaScript can query and modify DOM and CSSOM.</li>
  <li>JavaScript execution blocks on CSSOM.</li>
  <li>JavaScript blocks DOM construction unless explicitly declared as async or defer</li>
</ul>

<p>The location of the script in the document is significant. The script is executed at the exact point where it is inserted in the document. When the HTML parser encounters a script tag, it pauses its process of constructing the DOM and yields control over to the JavaScript engine; once the JavaScript engine has finished running, the browser then picks up from where it left off and resumes the DOM construction.</p>

<p><strong><em>Why we say that JavaScript is parser blocking?</em></strong></p>

<p>It means JavaScript will block the DOM tree parsing process. And also, as it has dependency on CSSOM, so the total process is, DOM parsing blocks on JavaScript execution, and JavaScript execution blocks on CSSOM construction. That’s why we put the CSS link ref in head, and put the JavaScript link just before the close body tag.</p>

<p><strong><em>What if the browser hasn’t finished downloading and building the CSSOM when we want to run our script?</em></strong></p>

<p>The browser will delay script execution until it has finished downloading and constructing the CSSOM, and while we’re waiting, the DOM construction is also blocked!</p>

<p><strong><em>What’s the difference between inline script and external script?</em></strong></p>

<p>Javascript is the same as the CSS and images, being a resource of the HTML, which all need a process of downloading and executing.</p>

<p>The inline script has no extra downloading time, compared to external script, but has the same execution time.</p>

<p><strong><em>Where is the best place to put JavaScript?</em></strong></p>

<p>Library may place in the head, and application logic js is better placed right before closing body tag.</p>

<p>You don’t improve the total parsing time by including <code>&lt;script&gt;</code> at the end of the document. It does enhance the user experience, as the process of parsing and painting isn’t interrupted by <code>&lt;script&gt;</code> that need to be executed.</p>

<p><strong>Navigation Timing API</strong> (Measuring the Critical Rendering Path)</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/navigation_timing_api.png" alt="navigation_timing_api.png" /></p>

<ul>
  <li><em>domLoading</em>: this is the starting timestamp of the entire process, the browser is about to start parsing the first received bytes of the HTML document.</li>
  <li><em>domInteractive</em>: marks when DOM is ready.</li>
  <li><em>domContentLoaded</em>: marks the point when both the DOM is ready and there are no stylesheets that are blocking JavaScript execution - meaning we can now (potentially) construct the render tree. Typically marks when both the DOM and CSSOM are ready. The sooner the domContentLoaded event fires, the sooner other application logic can begin executing. jQuery’s $(document).ready() is hooked on domContentLoaded.</li>
  <li><em>loadEvent</em>: as a final step in every page load the browser fires an onload event which can trigger additional application logic.</li>
</ul>

<h3 id="analysing-critical-rendering-path-performance">Analysing Critical Rendering Path Performance</h3>

<ul>
  <li><strong>Critical Resource</strong>: resource that may block initial rendering of the page.</li>
  <li><strong>Critical Path Length</strong>: number of roundtrips, or the total time required to fetch all of the critical resources.</li>
  <li><strong>Critical Bytes</strong>: total amount of bytes required to get to first render of the page, which is the sum of the transfer filesizes of all critical resources. Our first example with a single HTML page contained a single critical resource (the HTML document), the critical path length was also equal to 1 network roundtrip (assuming file is small), and the total critical bytes was just the transfer size of the HTML document itself.</li>
</ul>

<p><strong>Without Javascript and CSS</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/without_js_and_css_timeline.png" alt="without_js_and_css_timeline.png" /></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/without_js_and_css_crp_diagram.png" alt="without_js_and_css_crp_diagram.png" /></p>

<ul>
  <li>1 critical resource</li>
  <li>1 roundtrip</li>
  <li>5 KB of critical bytes</li>
</ul>

<p><strong>With Only CSS</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/with_only_css_crp_diagram.png" alt="with_only_css_crp_diagram.png" /></p>

<ul>
  <li>2 critical resources</li>
  <li>2 or more roundtrips for the minimum critical path length</li>
  <li>9 KB of critical bytes</li>
</ul>

<p><strong>With JavaScript and CSS</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/with_js_and_css_timeline.png" alt="with_js_and_css_timeline.png" /></p>

<p>As Javascript blocks the DOM construction, also depends on the CSSOM, so the domContentLoaded event is blocked until the CSS file is downloaded and parsed.</p>

<p>I’m confusing on the image for a long long time! Finally, when I’m making this note, I get things through. Watch closely to the blue and red line. Blue line fires when the CSSOM has been created. And then Javascript executes, image downloads over, there fires the red line.</p>

<p>Remember, what does domContentLoaded mean? Marks the point when both the DOM is ready and there are no stylesheets that are blocking JavaScript execution - meaning we can now (potentially) construct the render tree. Typically marks when both the DOM and CSSOM are ready.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/with_js_and_css_crp_diagram.png" alt="with_js_and_css_crp_diagram.png" /></p>

<ul>
  <li>3 critical resources</li>
  <li>2 or more roundtrips for the minimum critical path length</li>
  <li>11 KB of critical bytes</li>
</ul>

<p><strong>With JavaScript (inline) and CSS</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/with_js_inline_and_css_timeline.png" alt="with_js_inline_and_css_timeline.png" /></p>

<p>Same time as the external Javascript, only without downloading process.</p>

<p><strong>With Javascript (inline) and CSS (inline)</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/with_js_inline_and_css_inline_timeline.png" alt="with_js_inline_and_css_inline_timeline.png" /></p>

<p><strong>With JavaScript (async) and CSS</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/with_js_async_and_css_timeline.png" alt="with_js_async_and_css_timeline.png" /></p>

<p>Much better! The domContentLoaded event fires shortly after the HTML is parsed: the browser knows not to block on JavaScript and since there are no other parser blocking scripts the CSSOM construction can also proceed in parallel.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/with_js_async_and_css_crp_diagram.png" alt="with_js_async_and_css_crp_diagram.png" /></p>

<ul>
  <li>2 critical resources (HTML and CSS)</li>
  <li>2 or more roundtrips for the minimum critical path length</li>
  <li>9 KB of critical bytes</li>
</ul>

<p><strong>With Javascript (async) and CSS (non-blocking)</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/with_js_async_and_css_non_block_crp_diagram.png.png" alt="with_js_async_and_css_non_block_crp_diagram.png.png" /></p>

<ul>
  <li>1 critical resource</li>
  <li>1 or more roundtrips for the minimum critical path length</li>
  <li>5 KB of critical bytes</li>
</ul>

<p>Demo and CRP diagram</p>

<p>Code from <a href="https://github.com/igrigorik/udacity-webperf/blob/master/assets/ex2-diagram.html">https://github.com/igrigorik/udacity-webperf/blob/master/assets/ex2-diagram.html</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;html&gt;</span>
</span><span class="line">  <span class="nt">&lt;head&gt;</span>
</span><span class="line">    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=device-width&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;style.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;print.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">media=</span><span class="s">&quot;print&quot;</span><span class="nt">&gt;</span>
</span><span class="line">  <span class="nt">&lt;/head&gt;</span>
</span><span class="line">  <span class="nt">&lt;body&gt;</span>
</span><span class="line">    <span class="nt">&lt;p&gt;</span>
</span><span class="line">      Hello <span class="nt">&lt;span&gt;</span>web performance<span class="nt">&lt;/span&gt;</span> students!
</span><span class="line">    <span class="nt">&lt;/p&gt;</span>
</span><span class="line">    <span class="nt">&lt;div&gt;&lt;img</span> <span class="na">src=</span><span class="s">&quot;awesome-photo.jpg&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class="line">    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;app.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line">    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;analytics.js&quot;</span> <span class="na">async</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line">  <span class="nt">&lt;/body&gt;</span>
</span><span class="line"><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>CRP diagram by <a href="https://discussions.udacity.com/t/quiz-crp-diagrams/16162/11?u=ifyouseewendy">connie_273453529</a></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/demo_crp_diagram_by_connie.png" alt="demo_crp_diagram_by_connie.png" /></p>

<ul>
  <li>3 critical resources</li>
  <li>total (HTML file + style.css + app.js) critical bytes</li>
  <li>2 roundtrip for the minimum critical path length</li>
</ul>

<h3 id="optimizing-the-critical-rendering-path">Optimizing the critical rendering path</h3>

<p><strong>Basic idea</strong></p>

<ul>
  <li>Minimize the number of critical resources.</li>
  <li>Minimize the number of critical bytes.</li>
  <li>Minimize the critical path length.</li>
</ul>

<p>To reduce the number of bytes we can reduce the number of resources (eliminate them or make them non-critical), and also ensure that we minimize the transfer size by compressing and optimizing each resource.</p>

<p>The fewer of these resources there are on the page, the less work the browser has to do to get content on the screen, and the less contention there is for CPU and other resources.</p>

<p>The critical path length is a function of the dependency graph between all the critical resources required by the page and their bytesize: some resource downloads can only be initiated once a previous resource has been processed, and the larger the resource the more roundtrips it will take us to download it.</p>

<p>The general sequence of steps to optimize the critical rendering path is:</p>

<ul>
  <li>Analyze and characterize your critical path: number of resources, bytes, length.</li>
  <li>Minimize number of critical resources: eliminate them, defer their download, mark them as async, etc.</li>
  <li>Optimize the order in which the remaining critical resources are loaded: you want to download all critical assets as early as possible to shorten the critical path length.</li>
  <li>Optimize the number of critical bytes to reduce the download time (number of roundtrips).</li>
</ul>

<p>The cardinal rule of web performance is, measure first, then optimize.</p>

<p><strong>Optimize JavaScript Use</strong></p>

<ul>
  <li>Prefer async JavaScript resources</li>
  <li>Defer parsing JavaScript</li>
  <li>Avoid synchronous server calls</li>
  <li>Avoid long running JavaScript</li>
</ul>

<p>Any initialization logic and functionality that is non-essential for the first render should be deferred until later. If a long initialization sequence needs to be run, consider splitting it into several stages to allow the browser to process other events in between.</p>

<p>async vs. defer</p>

<p>from <a href="http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html">async vs defer attributes</a></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/async_vs_defer.png" alt="async_vs_defer.png" /></p>

<p><strong>Optimize CSS Use</strong></p>

<ul>
  <li>Put CSS in the document head</li>
  <li>Avoid CSS imports. CSS import (@import) directive enables one stylesheet to import rules from another stylesheet file. However, these directives should be avoided because they introduce additional roundtrips into the critical path: the imported CSS resources are discovered only after the CSS stylesheet with the @import rule itself has been received and parsed.</li>
  <li>Inline render-blocking CSS</li>
</ul>

<p><strong>The Preload Scanner</strong></p>

<p>from <a href="http://andydavies.me/blog/2013/10/22/how-the-browser-pre-loader-makes-pages-load-faster/">How the Browser Pre-loader Makes Pages Load Faster</a></p>

<p>Internet Explorer, WebKit and Mozilla all implemented pre-loaders in 2008 as a way of overcoming the low network utilisation while waiting for scripts to download and execute.</p>

<p>When the browser is blocked on a script, a second lightweight parser scans the rest of the markup looking for other resources e.g. stylesheets, scripts, images etc., that also need to be retrieved.</p>

<p>The pre-loader then starts retrieving these resources in the background with the aim that by the time the main HTML parser reaches them they may have already been downloaded and so reduce blocking later in the page.</p>

<p><strong>Others</strong></p>

<ul>
  <li><a href="http://www.stevesouders.com/blog/2009/05/18/flushing-the-document-early/">Flushing the Document Early</a></li>
  <li><a href="http://blog.cowchimp.com/chunk-scatter-http-chunked-response-analysis-tool/">Chunk Scatter, a fantastic tool for visualizing chunked HTTP responses</a></li>
  <li><a href="https://developer.chrome.com/devtools/docs/timeline">Performance profiling with the Timeline</a></li>
  <li><a href="http://www.webpagetest.org/forums/showthread.php?tid=10990">Record a Chrome dev tools timeline by webpagetest</a></li>
</ul>

<p><strong><em>Why should I profile the site on my phone?</em></strong></p>

<p>Chances are, you are developing your site on a fast laptop or a desktop machine. Mobile phones on the other hand are much more resource constrained: slower CPUs, less RAM and GPU memory, higher connection latencies, and so on. As a result, you should always try to profile and debug your site on mobile hardware to get a better and closer picture of how your users will experience your site on their handset.</p>

<h2 id="browser-rendering-optimization">Browser Rendering Optimization</h2>

<blockquote>
  <p>TODO <a href="https://www.udacity.com/course/browser-rendering-optimization--ud860">https://www.udacity.com/course/browser-rendering-optimization–ud860</a></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Hash Tricks in Ruby]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2015/11/30/some-hash-tricks-in-ruby/"/>
    <updated>2015-11-30T16:17:38+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2015/11/30/some-hash-tricks-in-ruby</id>
    <content type="html"><![CDATA[<blockquote>
  <p>from <a href="http://blog.honeybadger.io/advanced-ruby-hash-techniques/">http://blog.honeybadger.io/advanced-ruby-hash-techniques/</a></p>
</blockquote>

<h3 id="strict-fetching">Strict fetching</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">h</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="o">|</span><span class="nb">hash</span><span class="p">,</span> <span class="n">key</span><span class="o">|</span> <span class="k">raise</span> <span class="no">ArgumentError</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;No hash key: </span><span class="si">#{</span> <span class="n">key</span> <span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line"><span class="n">h</span><span class="o">[</span><span class="ss">:a</span><span class="o">]=</span><span class="mi">1</span>
</span><span class="line"><span class="n">h</span><span class="o">[</span><span class="ss">:a</span><span class="o">]</span> <span class="c1"># 1</span>
</span><span class="line"><span class="n">h</span><span class="o">[</span><span class="ss">:x</span><span class="o">]</span> <span class="c1"># raises ArgumentError: No hash key: x</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="modifying-defaults-after-initialization">Modifying defaults after initialization</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">h</span><span class="o">=</span><span class="p">{}</span>
</span><span class="line"><span class="n">h</span><span class="o">[</span><span class="ss">:a</span><span class="o">]</span> <span class="c1"># nil</span>
</span><span class="line"><span class="n">h</span><span class="o">.</span><span class="n">default</span> <span class="o">=</span> <span class="s2">&quot;new default&quot;</span>
</span><span class="line"><span class="n">h</span><span class="o">[</span><span class="ss">:a</span><span class="o">]</span> <span class="c1"># &quot;new default&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">h</span><span class="o">.</span><span class="n">default_proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">to_i</span> <span class="p">}</span>
</span><span class="line"><span class="n">h</span><span class="o">[</span><span class="ss">:a</span><span class="o">]</span> <span class="c1"># 1435684014</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="factorial-using-hash">Factorial using Hash</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">factorial</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">{</span><span class="o">|</span><span class="n">h</span><span class="p">,</span><span class="n">k</span><span class="o">|</span> <span class="n">k</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">?</span> <span class="n">h</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="n">h</span><span class="o">[</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="o">]*</span><span class="n">k</span> <span class="p">:</span> <span class="n">h</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class="line"><span class="no">Factorail</span><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="c1"># =&gt; 24</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="a-game-of-lazily-infinite-nested-hashes">A game of lazily infinite nested hashes</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">generator</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="nb">hash</span><span class="p">,</span> <span class="n">key</span><span class="o">|</span>
</span><span class="line">  <span class="nb">hash</span><span class="o">[</span><span class="n">key</span><span class="o">]</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">&amp;</span><span class="n">generator</span><span class="p">)</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span> <span class="o">[</span><span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;s&#39;</span><span class="p">,</span> <span class="s1">&#39;e&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="o">][</span><span class="nb">rand</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">]</span> <span class="o">=&gt;</span> <span class="s1">&#39;You found me&#39;</span> <span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line"><span class="n">dungeon</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span> <span class="o">&amp;</span><span class="n">generator</span>
</span><span class="line"><span class="n">dungeon</span><span class="o">[</span><span class="s1">&#39;n&#39;</span><span class="o">]</span>            <span class="c1"># =&gt; { &quot;s&quot; =&gt; &quot;You found me&quot; }</span>
</span><span class="line"><span class="n">dungeon</span><span class="o">[</span><span class="s1">&#39;n&#39;</span><span class="o">][</span><span class="s1">&#39;w&#39;</span><span class="o">]</span>       <span class="c1"># =&gt; { &quot;e&quot; =&gt; &quot;You found me&quot; }</span>
</span><span class="line"><span class="n">dungeon</span><span class="o">[</span><span class="s1">&#39;n&#39;</span><span class="o">][</span><span class="s1">&#39;w&#39;</span><span class="o">][</span><span class="s1">&#39;e&#39;</span><span class="o">]</span>  <span class="c1"># =&gt; &quot;You found me&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <p>from <a href="https://endofline.wordpress.com/2010/12/24/hash-tricks/">https://endofline.wordpress.com/2010/12/24/hash-tricks</a></p>
</blockquote>

<h3 id="hash-returns-hashes-to-build-a-tree-structure">Hash returns hashes, to build a tree structure</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">tree_block</span> <span class="o">=</span> <span class="o">-&gt;</span><span class="p">(</span><span class="nb">hash</span><span class="p">,</span><span class="n">k</span><span class="p">){</span> <span class="nb">hash</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tree_block</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line"><span class="n">opts</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tree_block</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">opts</span><span class="o">[</span><span class="s1">&#39;dev&#39;</span><span class="o">][</span><span class="s1">&#39;db&#39;</span><span class="o">][</span><span class="s1">&#39;host&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;localhost:2828&quot;</span>
</span><span class="line"><span class="n">opts</span><span class="o">[</span><span class="s1">&#39;dev&#39;</span><span class="o">][</span><span class="s1">&#39;db&#39;</span><span class="o">][</span><span class="s1">&#39;user&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;me&quot;</span>
</span><span class="line"><span class="n">opts</span><span class="o">[</span><span class="s1">&#39;dev&#39;</span><span class="o">][</span><span class="s1">&#39;db&#39;</span><span class="o">][</span><span class="s1">&#39;password&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;secret&quot;</span>
</span><span class="line"><span class="n">opts</span><span class="o">[</span><span class="s1">&#39;test&#39;</span><span class="o">][</span><span class="s1">&#39;db&#39;</span><span class="o">][</span><span class="s1">&#39;host&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;localhost:2828&quot;</span>
</span><span class="line"><span class="n">opts</span><span class="o">[</span><span class="s1">&#39;test&#39;</span><span class="o">][</span><span class="s1">&#39;db&#39;</span><span class="o">][</span><span class="s1">&#39;user&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;test_user&quot;</span>
</span><span class="line"><span class="n">opts</span><span class="o">[</span><span class="s1">&#39;test&#39;</span><span class="o">][</span><span class="s1">&#39;db&#39;</span><span class="o">][</span><span class="s1">&#39;password&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;test_secret&quot;</span>
</span><span class="line"><span class="n">opts</span>
</span><span class="line"><span class="c1"># =&gt; {</span>
</span><span class="line">  <span class="s2">&quot;dev&quot;</span>  <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class="line">    <span class="s2">&quot;db&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class="line">      <span class="s2">&quot;host&quot;</span>     <span class="o">=&gt;</span> <span class="s2">&quot;localhost:2828&quot;</span><span class="p">,</span>
</span><span class="line">      <span class="s2">&quot;user&quot;</span>     <span class="o">=&gt;</span> <span class="s2">&quot;me&quot;</span><span class="p">,</span>
</span><span class="line">      <span class="s2">&quot;password&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;secret&quot;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">},</span>
</span><span class="line">  <span class="s2">&quot;test&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class="line">    <span class="s2">&quot;db&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class="line">      <span class="s2">&quot;host&quot;</span>     <span class="o">=&gt;</span> <span class="s2">&quot;localhost:2828&quot;</span><span class="p">,</span>
</span><span class="line">      <span class="s2">&quot;user&quot;</span>     <span class="o">=&gt;</span> <span class="s2">&quot;test_user&quot;</span><span class="p">,</span>
</span><span class="line">      <span class="s2">&quot;password&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;test_secret&quot;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="use-hash-as-a-method">Use hash as a method</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;net/http&#39;</span>
</span><span class="line"><span class="n">http</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">h</span><span class="p">,</span><span class="n">k</span><span class="o">|</span>
</span><span class="line">  <span class="n">h</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="ss">Net</span><span class="p">:</span><span class="ss">:HTTP</span><span class="o">.</span><span class="n">get_response</span><span class="p">(</span><span class="no">URI</span><span class="p">(</span><span class="n">k</span><span class="p">))</span><span class="o">.</span><span class="n">body</span>
</span><span class="line">  <span class="n">h</span><span class="o">.</span><span class="n">delete</span> <span class="n">h</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">first</span> <span class="k">if</span> <span class="n">h</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">3</span> <span class="c1"># a caching layer</span>
</span><span class="line">  <span class="n">h</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <p>from Amadan posted on <a href="https://www.reddit.com/r/ruby/comments/29hr4x/whats_youre_favorite_ruby_trick_or_quirk_thata">https://www.reddit.com/r/ruby/comments/29hr4x/whats_youre_favorite_ruby_trick_or_quirk_thata</a></p>
</blockquote>

<h3 id="autovivifying-hashes-are-cool">Autovivifying hashes are cool</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">autohash</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="o">|</span><span class="n">h</span><span class="p">,</span> <span class="n">k</span><span class="o">|</span> <span class="n">h</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">&amp;</span><span class="n">h</span><span class="o">.</span><span class="n">default_proc</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line"><span class="n">autohash</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">2</span><span class="o">][</span><span class="mi">3</span><span class="o">][</span><span class="mi">4</span><span class="o">][</span><span class="mi">5</span><span class="o">][</span><span class="mi">6</span><span class="o">][</span><span class="mi">7</span><span class="o">]</span> <span class="o">=</span> <span class="mi">8</span>
</span><span class="line"><span class="n">autohash</span> <span class="c1"># =&gt; {1=&gt;{2=&gt;{3=&gt;{4=&gt;{5=&gt;{6=&gt;{7=&gt;8}}}}}}}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <p>from The Buckblog <a href="http://weblog.jamisbuck.org/2015/11/14/little-things-refactoring-with-hashes.html">http://weblog.jamisbuck.org/2015/11/14/little-things-refactoring-with-hashes.html</a></p>
</blockquote>

<h3 id="refactor-case-statement">Refactor case statement</h3>

<p>before</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">klass</span> <span class="o">=</span> <span class="k">case</span> <span class="n">params</span><span class="o">[</span><span class="ss">:student_level</span><span class="o">]</span>
</span><span class="line">  <span class="k">when</span> <span class="ss">:freshman</span><span class="p">,</span> <span class="ss">:sophomore</span> <span class="k">then</span>
</span><span class="line">    <span class="ss">Student</span><span class="p">:</span><span class="ss">:Underclassman</span>
</span><span class="line">  <span class="k">when</span> <span class="ss">:junior</span><span class="p">,</span> <span class="ss">:senior</span> <span class="k">then</span>
</span><span class="line">    <span class="ss">Student</span><span class="p">:</span><span class="ss">:Upperclassman</span>
</span><span class="line">  <span class="k">when</span> <span class="ss">:graduate</span>
</span><span class="line">    <span class="ss">Student</span><span class="p">:</span><span class="ss">:Graduate</span>
</span><span class="line">  <span class="k">else</span>
</span><span class="line">    <span class="ss">Student</span><span class="p">:</span><span class="ss">:Unregistered</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="n">student</span> <span class="o">=</span> <span class="n">klass</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">birthdate</span><span class="p">,</span> <span class="n">address</span><span class="p">,</span> <span class="n">phone</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>after</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">STUDENT_LEVELS</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">Student</span><span class="p">:</span><span class="ss">:Unregistered</span><span class="p">)</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span>
</span><span class="line">  <span class="ss">freshman</span><span class="p">:</span> <span class="ss">Student</span><span class="p">:</span><span class="ss">:Underclassman</span><span class="p">,</span>
</span><span class="line">  <span class="ss">sophomore</span><span class="p">:</span> <span class="ss">Student</span><span class="p">:</span><span class="ss">:Underclassman</span><span class="p">,</span>
</span><span class="line">  <span class="ss">junior</span><span class="p">:</span>    <span class="ss">Student</span><span class="p">:</span><span class="ss">:Upperclassman</span><span class="p">,</span>
</span><span class="line">  <span class="ss">senior</span><span class="p">:</span>    <span class="ss">Student</span><span class="p">:</span><span class="ss">:Upperclassman</span><span class="p">,</span>
</span><span class="line">  <span class="ss">graduate</span><span class="p">:</span>  <span class="ss">Student</span><span class="p">:</span><span class="ss">:Graduate</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">klass</span> <span class="o">=</span> <span class="no">STUDENT_LEVELS</span><span class="o">[</span><span class="n">params</span><span class="o">[</span><span class="ss">:student_level</span><span class="o">]]</span>
</span><span class="line"><span class="n">student</span> <span class="o">=</span> <span class="n">klass</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">birthdate</span><span class="p">,</span> <span class="n">address</span><span class="p">,</span> <span class="n">phone</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Review] Virtualization - Operating Systems Three Easy Pieces]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2015/11/22/review-virtualization-operating-systems-three-easy-pieces/"/>
    <updated>2015-11-22T13:44:38+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2015/11/22/review-virtualization-operating-systems-three-easy-pieces</id>
    <content type="html"><![CDATA[<table class="custom">
  <tbody>
    <tr>
      <td><strong>Book</strong></td>
      <td>Operating Systems: Three Easy Pieces</td>
    </tr>
    <tr>
      <td><strong>Author</strong></td>
      <td><a href="http://www.cs.wisc.edu/~remzi">Remzi H. Arpaci-Dusseau</a> and <a href="http://www.cs.wisc.edu/~dusseau">Andrea C. Arpaci-Dusseau</a></td>
    </tr>
    <tr>
      <td><strong>Link</strong></td>
      <td><a href="http://pages.cs.wisc.edu/~remzi/OSTEP/">pages.cs.wisc.edu/~remzi/OSTEP</a></td>
    </tr>
  </tbody>
</table>

<ul id="markdown-toc">
  <li><a href="#introduction">Introduction</a></li>
  <li><a href="#cpu-virtualisation">CPU Virtualisation</a>    <ul>
      <li><a href="#process">Process</a>        <ul>
          <li><a href="#chapter-4---the-abstraction-the-process">Chapter 4 - The Abstraction: The Process</a></li>
          <li><a href="#chapter-5---interlude-process-api">Chapter 5 - Interlude: Process API</a></li>
        </ul>
      </li>
      <li><a href="#mechanism">Mechanism</a>        <ul>
          <li><a href="#chapter-6---mechanism-limited-direct-execution">Chapter 6 - Mechanism: Limited Direct Execution</a></li>
        </ul>
      </li>
      <li><a href="#scheduling">Scheduling</a>        <ul>
          <li><a href="#chapter-7---scheduling-introduction">Chapter 7 - Scheduling: Introduction</a></li>
          <li><a href="#chapter-8---scheduling-the-multi-level-feedback-queue">Chapter 8 - Scheduling: The Multi-Level Feedback Queue</a></li>
          <li><a href="#chapter-9---scheduling-proportional-share">Chapter 9 - Scheduling: Proportional Share</a></li>
          <li><a href="#chapter-10---multiprocessor-scheduling">Chapter 10 - Multiprocessor Scheduling</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#memory-virtualisation">Memory Virtualisation</a>    <ul>
      <li><a href="#address-space">Address Space</a>        <ul>
          <li><a href="#chapter-13---the-abstraction-address-spaces">Chapter 13 - The Abstraction: Address Spaces</a></li>
          <li><a href="#chapter-14---interlude-memory-api">Chapter 14 - Interlude: Memory API</a></li>
        </ul>
      </li>
      <li><a href="#dynamic-allocation-and-segmentation">Dynamic Allocation and Segmentation</a>        <ul>
          <li><a href="#chapter-15---mechanism-address-translation">Chapter 15 - Mechanism: Address Translation</a></li>
          <li><a href="#chapter-16-segmentation">Chapter 16 Segmentation</a></li>
          <li><a href="#chapter-17---free-space-management">Chapter 17 - Free-Space Management</a></li>
        </ul>
      </li>
      <li><a href="#paging">Paging</a>        <ul>
          <li><a href="#chapter-18---paging-introduction">Chapter 18 - Paging: Introduction</a></li>
          <li><a href="#chapter-19---paging-faster-translations-tlbs">Chapter 19 - Paging: Faster Translations (TLBs)</a></li>
          <li><a href="#note-on-cache-management">Note on Cache Management</a></li>
          <li><a href="#chapter-20---paging-smaller-tables">Chapter 20 - Paging: Smaller Tables</a></li>
        </ul>
      </li>
      <li><a href="#beyond-physical-memory">Beyond Physical Memory</a>        <ul>
          <li><a href="#chapter-21---beyond-physical-memory-mechanisms">Chapter 21 - Beyond Physical Memory: Mechanisms</a></li>
          <li><a href="#chapter-22---beyond-physical-memory-policies">Chapter 22 - Beyond Physical Memory: Policies</a></li>
          <li><a href="#chapter-23---the-vaxvms-virtual-memory-system">Chapter 23 - The VAX/VMS Virtual Memory System</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h1 id="introduction">Introduction</h1>

<p><strong>The Crux of the whole book</strong></p>

<p>How does the operating system virtualize resources?
What mechanisms and policies are implemented by the OS to attain virtualization?
How does the OS do so efficiently?</p>

<p><strong>The Von Neumann model of computing</strong></p>

<p>Many millions (and these days, even billions) of times every second, the processor <strong>fetches</strong> an instruction from memory, <strong>decodes</strong> it (i.e., figures out which instruction this is), and <strong>executes</strong> it.</p>

<p><strong>The OS is sometimes known as a resource manager</strong></p>

<p>The primary way the OS does this is through a general technique that we call virtualization. That is, the OS takes a physical resource (such as the processor, or memory, or a disk) and transforms it into a more general, powerful, and easy-to-use virtual form of itself. Thus, we sometimes refer to the operating system as a <strong>virtual machine</strong>.</p>

<p><strong>Virtualizing the CPU</strong></p>

<p>Turning a single CPU (or small set of them) into a seemingly infinite number of CPUs and thus allowing many programs to seemingly run at once is what we call virtualizing the CPU.</p>

<p><strong>Virtualizing the Memory</strong></p>

<p>Memory is just an array of bytes; to <strong>read</strong> memory, one must specify an <strong>address</strong> to be able to access the data stored there; to <strong>write</strong> (or update) memory, one must also specify the data to be written to the given address.</p>

<p>The OS is virtualizing memory. Each process accesses its own private <strong>virtual address space</strong> (sometimes just called its address space)</p>

<p><strong>Concurrency</strong></p>

<p>Three instructions: one to <strong>load</strong> the value of the counter from memory into a register, one to <strong>increment</strong> it, and one to <strong>store</strong> it back into memory. Because these three instructions do not execute atomically (all at once), strange things can happen.</p>

<p><strong>Persistence</strong></p>

<p>The software in the operating system that usually manages the disk is called the <strong>file system</strong>; it is thus responsible for storing any files the user creates in a reliable and efficient manner on the disks of the system.</p>

<p>For performance reasos, most file systems first <strong>delay</strong> such writes for a while, hoping to batch them into larger groups. To handle the problems of system crashes during writes, most file systems incorporate some kind of intricate write protocol, such as <strong>journaling</strong> or <strong>copy-on-write</strong>, carefully ordering writes to disk to ensure that if a failure occurs during the write sequence, the system can recover to reasonable state afterwards.</p>

<p><strong>Design Goals</strong></p>

<p>What an OS actually does: it takes physical <strong>resources</strong>, such as a CPU, memory, or disk, and <strong>virtualizes</strong> them. It handles tough and tricky issues related to <strong>concurrency</strong>. And it stores files <strong>persistently</strong>, thus making them safe over the long-term.</p>

<ol>
  <li>To build up some <strong>abstractions</strong> in order to make the system convenient and easy to use.</li>
  <li>To provide high <strong>performance</strong>, another way to say this is our goal is to minimize the overheads of the OS.</li>
  <li>To provide <strong>protection</strong> between applications, as well as between the OS and applications. Protection is at nthe heart of one of the main principles underlying an operating system, which is that of <strong>isolation</strong>; isolating processes from one another is the key to protection and thus underlies much of what an OS must do.</li>
</ol>

<p><strong>Some History</strong></p>

<ol>
  <li>Early Operating Systems: Just Libraries.  This mode of computing was known as <strong>batch</strong> processing.</li>
  <li>Beyond Libraries: Protection. The idea of a system call was invented. The key difference between a <strong>system call</strong> and a <strong>procedure call</strong> is that a system call transfers control (i.e., jumps) into the OS while simultaneously raising the hardware privilege level. User applications run in what is referred to as user mode which means the hardware restricts what applications can do; When a system call is initiated (usually through a special hardware instruction called a trap), the hardware transfers control to a pre-specified trap handler (that the OS set up previously) and simultaneously raises the privilege level to kernel mode.</li>
  <li>The Era of Multiprogramming by minicomputer. In particular, multiprogramming became commonplace due to the desire to make better use of machine resources. One of the major practical advances of the time was the introduction of the <strong>UNIX</strong> operating system, primarily thanks to <strong>Ken Thompson</strong> (and <strong>Dennis Ritchie</strong>) at Bell Labs (yes, the phone company). <strong>Bill Joy</strong>, made a wonderful distribution (the Berkeley Systems Distribution, or <strong>BSD</strong>) which had some advanced virtual memory, file system, and networking subsystems. Joy later co-founded Sun Microsystems.</li>
  <li>The Modern Era by PC with DOS, Mac OS.</li>
</ol>

<h1 id="cpu-virtualisation">CPU Virtualisation</h1>

<h2 id="process">Process</h2>

<h3 id="chapter-4---the-abstraction-the-process">Chapter 4 - The Abstraction: The Process</h3>

<p><strong>Process</strong></p>

<p>The definition of a process, informally, is quite simple: it is a running program.</p>

<p><strong>How to provide the illusion of many CPUs?</strong></p>

<p>This basic technique, known as <strong>time sharing</strong> of the CPU, allows users to run as many concurrent processes as they would like; the potential cost is performance, as each will run more slowly if the CPU(s) must be shared.</p>

<p><strong>Mechanisms</strong></p>

<p>Mechanisms are low-level methods or protocols that implement a needed piece of functionality.</p>

<p><strong>Policies</strong></p>

<p>On top of these mechanisms resides some of the intelligence in the OS, in the form of policies.</p>

<p><strong>Tip: Separate policy and mechanism</strong></p>

<p>In many operating systems, a common design paradigm is to separate high-level policies from their low-level mechanisms. You can think of the mechanism as providing the answer to a <strong>how</strong> question about a system; for example, how does an operating system perform a context switch? The policy provides the answer
 to a <strong>which</strong> question; for example, which process should the operating system run right now?</p>

<p><strong>Machine State</strong></p>

<p>To understand what constitutes a process, we thus have to understand its <strong>machine state</strong>: what a program can read or update when it is running. At any given time, what parts of the machine are important to the execution of this program?</p>

<ol>
  <li>Memory. The memory that the process can address (called its <strong>address space</strong>) is part of the process.</li>
  <li>Registry. There are some particularly special registers that form part of this machine state. For example, the <strong>program counter</strong> (PC) (sometimes called the instruction pointer or IP). similarly a stack pointer and associated <strong>frame pointer</strong> are used to manage the stack for function parameters, local variables, and return addresses.</li>
  <li>I/O information. Programs often access persistent storage devices too. Such I/O information might include a list of the files the process currently has open.</li>
</ol>

<p><strong>Process API</strong></p>

<ol>
  <li>Create</li>
  <li>Destroy</li>
  <li>Wait</li>
  <li>Miscellaneous Control (suspend, resume)</li>
  <li>Status</li>
</ol>

<p><strong>How does the OS get a program up and running?</strong></p>

<ol>
  <li>To <strong>load</strong> its code and any static data (e.g., initialized variables) into memory, into the <strong>address space</strong> of the process. In early (or simple) operating systems, the loading process is done <strong>eagerly</strong>; modern OSes perform the process <strong>lazily</strong>, i.e., by loading pieces of code or data only as they are needed during program execution. To truly understand how lazy loading of pieces of code and data works, you’ll have to understand more about the machinery of <strong>paging</strong> and <strong>swapping</strong>.</li>
  <li>Once the code and static data are loaded into memory, there are a few other things the OS needs to do before running the process. Some memory must be allocated for the program’s <strong>run-time stack</strong> (or just stack). As you should likely already know, C programs use the stack for local variables, function parameters, and return addresses; the OS allocates this memory and gives it to the process.</li>
  <li>The OS may also allocate some memory for the program’s <strong>heap</strong>. In C programs, the heap is used for explicitly requested dynamically-allocated data; programs request such space by calling malloc() and free it explicitly by calling free(). The heap is needed for data structures such as linked lists, hash tables, trees, and other interesting data structures.</li>
  <li>The OS will also do some other initialization tasks, particularly as related to input/output (I/O). For example, in UNIX systems, each process by default has three open <strong>file descriptors</strong>.</li>
  <li>To start the program running at the entry point, namely main(), the OS transfers control of the CPU to the newly-created process, and thus the program begins its execution.</li>
</ol>

<p><strong>Process States</strong></p>

<ol>
  <li>Running</li>
  <li>Ready</li>
  <li>Blocked</li>
</ol>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-process_state_transitions.png" alt="os-process_state_transitions.png" /></p>

<p><strong>Data Structures</strong></p>

<p>To track the state of each process, for example, the OS likely will keep some kind of <strong>process list</strong> for all processes that are ready, as well as some additional information to track which process is currently running.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-the_xv6_proc_structure.png" alt="os-the_xv6_proc_structure.png" /></p>

<p>The <strong>register context</strong> will hold, for a stopped process, the contents of its registers. When a process is stopped, its registers will be saved to this memory location; by restoring these registers (i.e., placing their values back into the actual physical registers), the OS can resume running the process.</p>

<p>Sometimes people refer to the individual structure that stores information about a process as a <strong>Process Control Block (PCB)</strong>.</p>

<h3 id="chapter-5---interlude-process-api">Chapter 5 - Interlude: Process API</h3>

<p>UNIX presents one of the most intriguing ways to create a new process with a pair of system calls:</p>

<p><strong>fork()</strong></p>

<p>The newly-created process (called the <strong>child</strong>, in contrast to the creating <strong>parent</strong>) desn’t start running at main(), like you might expect (note, the “hello, world” message only got printed out once); rather, it just comes into life as if it had called fork() itself. You might have noticed: the child isn’t an exact copy. Specifically, al- though it now has its own copy of the address space (i.e., its own private memory), its own registers, its own PC, and so forth, the value it returns to the caller of fork() is different.</p>

<p>The output is <strong>not deterministic</strong>. When the child process is created, there are now two active processes in the system that we care about: the parent and the child.</p>

<p><strong>wait()</strong></p>

<p>Adding a wait() call to the code above makes the output <strong>deterministic</strong>.</p>

<p><strong>exec()</strong></p>

<p>It does not create a new process; rather, it transforms the currently running program (formerly p3) into a different running program (wc). After the exec() in the child, it is almost as if p3.c never ran; a successful call to exec() never returns.</p>

<p><strong>Why? Motivating The API</strong></p>

<p>Why would we build sucho an odd interface to what should be the simple act of creating a new process? Well, as it turns out, the separation of fork() and exec() is essential in building a UNIX shell, because it lets the shell run code after the call to fork() but before the call to exec(); this code can alter the environment of the about-to-be-run program, and thus enables a variety of interesting features to be readily built.</p>

<p><strong>How Does Shell Utilise The API?</strong></p>

<p>The shell is just a user program.</p>

<ol>
  <li>It shows you a prompt and then waits for you to type something into it.</li>
  <li>You then type a command (i.e., the name of an executable program, plus any arguments) into it;</li>
  <li>In most cases, the shell then figures out where in the file system the executable resides</li>
  <li>calls fork() to create a new child process to run the command</li>
  <li>calls some variant of exec() to run the command</li>
  <li>waits for the command to complete by calling wait().</li>
  <li>When the child completes, the shell returns from wait() and prints out a prompt again, ready for your next command.</li>
</ol>

<p>eg. prompt&gt; wc p3.c &gt; newfile.txt</p>

<p>When the child is created, before calling exec(), the shell closes standard output and opens the file newfile.txt.</p>

<h2 id="mechanism">Mechanism</h2>

<h3 id="chapter-6---mechanism-limited-direct-execution">Chapter 6 - Mechanism: Limited Direct Execution</h3>

<p><strong>The Crux</strong></p>

<ul>
  <li>performance: how can we implement virtualization without adding excessive overhead to the system?</li>
  <li>control: how can we run processes efficiently while retaining control over the CPU?</li>
</ul>

<p>Attaining performance while maintaining control is thus one of the central challenges in building an operating system.</p>

<p><strong>Basic Technique: Limited Direct Execution</strong></p>

<p>The basic idea is straightforward: just run the program you want to run on the CPU, but first make sure to set up the hardware so as to limit what the process can do without OS assistance.</p>

<p>In an analogous manner, the OS “baby proofs” the CPU, by first (during boot time) setting up the <strong>trap handlers</strong> and starting an <strong>interrupt timer</strong>, and then by only running processes in a restricted mode. By doing so, the OS can feel quite assured that processes can run efficiently, only requir- ing OS intervention to perform privileged operations or when they have monopolized the CPU for too long and thus need to be switched out.</p>

<p><strong>Problem #1: Restricted Operations</strong></p>

<p>Use Protected Control Transfer</p>

<p>The hardware assists the OS by providing different modes of execution. In <strong>user mode</strong>, applications do not have full access to hardware resources. In <strong>kernel mode</strong>, the OS has access to the full resources of the machine. When the user process wants to perform some kinds of privileged operation, it can perform a <strong>system call</strong>.</p>

<p><strong>System Call</strong></p>

<p>To execute a system call, a program must execute a special <strong>trap</strong> instruction. This instruction simultaneously jumps into the kernel and raises the privilege level to kernel mode; once in the kernel, the system can now per- form whatever privileged operations are needed (if allowed), and thus do the required work for the calling process. When finished, the OS calls a special <strong>return-from-trap</strong> instruction</p>

<p><strong>Why System Calls Look Like Procedure Calls?</strong></p>

<p>It is a procedure call, but hidden inside that procedure call is the famous trap instruction. More specifically, when you call open() (for example), you are executing a procedure call into the C library. The parts of the C library that make system calls are hand-coded in assembly, as they need to carefully follow convention in order to process arguments and return values correctly, as well as execute the hardware-specific trap instruction. And now you know why you personally don’t have to write assembly code to trap into an OS; somebody has already written that assembly for you.</p>

<p><strong>How does the trap know which code to run inside the OS?</strong></p>

<p>The kernel does so by setting up a <strong>trap table</strong> at boot time. When the machine boots up, it does so in privileged (kernel) mode, and thus is free to configure machine hardware as need be. The OS informs the hardware of the locations of these <strong>trap handlers</strong>.</p>

<p><strong>Limited Direct Execution Protocol</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-limited_directed_execution_protocol.png" alt="os-limited_directed_execution_protocol.png" /></p>

<p>There are two phases in the LDE protocol:</p>

<p>In the first (at boot time), the kernel initializes the <strong>trap table</strong>, and the CPU remembers its location for subsequent use.</p>

<p>In the second (when running a process), the kernel sets up a few things (e.g., allocating a node on the process list, allocating memory) before using a <strong>return-from-trap</strong> instruction to start the execution of the process; this switches the CPU to user mode and begins running the process.</p>

<p>Normal flow:</p>

<p>When the process wishes to issue a system call, it traps back into the OS, which handles it and once again returns control via a return-from-trap to the process. The process then completes its work, and returns from main(); this usually will return into some stub code which will properly exit the program (say, by calling the exit() system call, which traps into the OS).</p>

<p><strong>Problem #2: Switching Between Processes</strong></p>

<p>How can the operating system regain control of the CPU so that it can switch between processes?</p>

<p>In a <strong>cooperative</strong> scheduling system, the OS regains control of the CPU by waiting for a system call or an illegal operation of some kind to take place.</p>

<p>How can the OS gain control of the CPU even if processes are not being cooperative? What can the OS do to ensure a rogue process does not take over the machine?</p>

<p><strong>Timer Interrupt</strong></p>

<p>A timer device can be programmed to raise an interrupt every so many milliseconds; when the interrupt is raised, the currently running process is halted, and a pre-configured interrupt handler in the OS runs. At this point, the OS has regained control of the CPU, and thus can do what it pleases: stop the current process, and start a different one.</p>

<p>The OS must inform the hardware of which code to run when the timer interrupt occurs; thus, at boot time, the OS does exactly that. Second, also during the boot sequence, the OS must start the timer, which is of course a privileged operation.</p>

<p><strong>Scheduler</strong></p>

<p>Whether to continue running the currently-running process, or switch to a different one. This decision is made by a part of the operating system known as the scheduler.</p>

<p>If the decision is made to switch, the OS then executes a low-level piece of code which we refer to as a <strong>context switch</strong>. A context switch is conceptually simple: all the OS has to do is save a few register values for the currently-executing process (onto its kernel stack, for example) and restore a few for the soon-to-be-executing process (from its kernel stack).</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-timer_interrupt.png" alt="os-timer_interrupt.png" /></p>

<h2 id="scheduling">Scheduling</h2>

<h3 id="chapter-7---scheduling-introduction">Chapter 7 - Scheduling: Introduction</h3>

<p><strong>Scheduling Metrics</strong></p>

<ul>
  <li>performance
    <ul>
      <li>turnaround = T(completion) - T(arrival)</li>
      <li>responsive time = T(first run) - T(arrival)</li>
    </ul>
  </li>
  <li>fairness</li>
</ul>

<p>Performance and fairness are often at odds in scheduling.</p>

<p>The introduction of time-shared machines changed all that. Now users would sit at a terminal and demand interactive performance from the system as well. And thus, a new metric was born: response time.</p>

<p><strong>Assumption</strong></p>

<ol>
  <li>Each job runs for the same amount of time.</li>
  <li>All jobs arrive at the same time.</li>
  <li>Once started, each job runs to completion.</li>
  <li>All jobs only use the CPU (i.e., they perform no I/O)</li>
  <li>The run-time (length) of each job is known.</li>
</ol>

<p><strong>Policy 1-1 FIFO</strong></p>

<p>under assumption: 1,2,3,4,5</p>

<p>Given our assumptions about jobs all arriving at the same time, we could prove that SJF is indeed an optimal scheduling algorithm.</p>

<p><strong>Policy 1-2 SJF (Shortest Job First)</strong></p>

<p>under assumption: <del>1,</del>2,3,4,5</p>

<p>Why is FIFO not good?</p>

<p>If Assumption(1) is false, there will be the <strong>convoy effect</strong>, where a number of relatively-short potential consumers of a resource get queued behind a heavyweight resource consumer.</p>

<p>Is SJF preemptive?</p>

<p>No, it’s <strong>non-preemptive</strong>. In the old days of batch computing, a number of non-preemptive scheulers were developed; such systems would run each job to completi before considering whether to run a new job. Virtually all modern schedulers are <strong>preemptive</strong>, and quite willing to stop one process from running in order to run another.</p>

<p><strong>Policy 1-3 STCF (Shortest Time-to-Completion First) or PSJF (Preemptive Shortest Job First)</strong></p>

<p>under assumption: <del>1,2,3,</del>4,5</p>

<p>Notice that there a significant difference between SJF and STCF. As SJF is non-preemptive, system would run each job to completion before running other jobs. But STCF prefers the shortest time-to-completion jobs, which should preempt CPU to make sense. That’s why STCF also has another name, PSFJ, Preemptive Shortest Job First.</p>

<p><strong>Policy 2 RR (Round-Robin)</strong></p>

<p>The basic idea is simple: instead of running jobs to completion, RR runs a job for a <strong>time slice</strong> (sometimes called a scheduling quantum) and then switches to the next job in the run queue.</p>

<p>The length of the time slice is critical for RR. The shorter it is, the better the performance of RR under the response-time metric. However, making the time slice too short is problematic: suddenly the cost of context switching will dominate overall performance. Thus, de- ciding on the length of the time slice presents a trade-off to a system de- signer, making it long enough to amortize the cost of switching without making it so long that the system is no longer responsive.</p>

<p>RR, with a reonasonable time slice, is thus an excellent scheduler if response time is our only metric. It is not surprising, then, that RR is indeed one of the worst policies if turnaround time is our metric.</p>

<p><strong>Policy 1 vs. Policy 2</strong></p>

<p>There is an inherent trade-off: if you are willing to be unfair, you can run shorter jobs to com- pletion, but at the cost of response time; if you instead value fairness, response time is lowered, but at the cost of turnaround time. This type of trade-off is common in systems</p>

<p><strong>Incorporate I/O by overlap</strong></p>

<p>under assumption: 4</p>

<p>We see how a scheduler might incorporate I/O. By treating each CPU burst as a job, the scheduler makes sure processes that are “interactive” get run frequently. While those interactive jobs are performing I/O, other CPU-intensive jobs run, thus better utilizing the processor.</p>

<h3 id="chapter-8---scheduling-the-multi-level-feedback-queue">Chapter 8 - Scheduling: The Multi-Level Feedback Queue</h3>

<p><strong>MLFQ</strong></p>

<p>it has <strong>multiple levels of queues</strong>, and <strong>uses feedback to determine the priority</strong> of a given job.</p>

<p>Instead of demanding a priori knowledge of the nature of a job, it observes the execution of a job and prioritizes it accordingly. In this way, it manages to achieve the best of both worlds: it can deliver excellent overall performance (similar to SJF/STCF) for short-running interactive jobs, and is fair and makes progress for long-running CPU-intensive workloads.</p>

<p><em>Multi-Level</em></p>

<p>The MLFQ has a number of distinct queues, each assigned a different <strong>priority level</strong>. At any given time, a job that is ready to run is on a single queue. MLFQ uses priorities to decide which job should run at a given time: a job with higher priority (i.e., a job on a higher queue) is chosen to run. Of course, more than one job may be on a given queue, and thus have the same priority. In this case, we will just use round-robin scheduling among those jobs.</p>

<p><em>Feedback</em></p>

<p>Thus, the key to MLFQ scheduling lies in how the scheduler sets priorities. Rather than giving a fixed priority to each job, MLFQ varies the priority of a job based on its observed behavior.</p>

<p><strong>How To Change Priority</strong></p>

<p>Rule 3: When a job enters the system, it is placed at the highest priority (the topmost queue).
Rule 4a: If a job uses up an entire time slice while running, its priority is reduced (i.e., it moves down one queue).
Rule 4b: If a job gives up the CPU before the time slice is up, it stays at the same priority level.</p>

<p><em>Problems</em></p>

<ol>
  <li>Starvation</li>
  <li>Smart user could rewrite their program to game the scheduler.</li>
  <li>A program may change its behavior over time; what was CPU-bound may transition to a phase of interactivity.</li>
</ol>

<p><strong>How to prevent gaming of our scheduler?</strong></p>

<p>Rules 4a and 4b, let a job retain its priority by relinquishing the CPU before the time slice expires. The solution here is to perform better <strong>accounting</strong> of CPU time at each level of the MLFQ. Instead of forgetting how much of a time slice a process used at a given level, the scheduler should keep track; once a process has used its allotment, it is demoted to the next priority queue.</p>

<p>Rule 4: Once a job uses up its time allotment at a given level (regardless of how many times it has given up the CPU), its priority is reduced (i.e., it moves down one queue).</p>

<p><strong>Priority Boost</strong></p>

<p>The simple idea here is to periodically boost the priority of all the jobs in system.</p>

<p>Rule 5: After some time period S, move all the jobs in the system to the topmost queue.</p>

<p><strong>Tuning MLFQ</strong></p>

<p>One big question is how to <strong>parameterize</strong> such a scheduler.</p>

<ul>
  <li>How many queues should there be?</li>
  <li>How big should the time slice be per queue?</li>
  <li>How often should priority be boosted in order to avoid starvation and account for changes in behavior?</li>
</ul>

<p><em>Some Variants</em></p>

<p>Most MLFQ variants allow for <strong>varying time-slice length</strong> across different queues. The high-priority queues are usually given short time slices; the low-priority queues, in contrast, contain long-running jobs that are CPU-bound; hence, longer time slices work well.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-lower_priority_longer_quanta.png" alt="os-lower_priority_longer_quanta.png" /></p>

<p>The FreeBSD scheduler (version 4.3) uses a formula to calculate the current priority level of a job, basing it on how much CPU the process has used.</p>

<p>Some schedulers reserve the highest priority levels for operating system work; thus typical user jobs can never obtain the highest levels of priority in the system. Some systems also allow some user advice to help set priorities; for example, by using the command-line utility nice.</p>

<p><strong>Refined Rules</strong></p>

<ul>
  <li>Rule 1: If Priority(A) &gt; Priority(B), A runs (B doesn’t).</li>
  <li>Rule 2: If Priority(A) = Priority(B), A &amp; B run in RR.</li>
  <li>Rule 3: When a job enters the system, it is placed at the highest priority (the topmost queue).</li>
  <li>Rule 4: Once a job uses up its time allotment at a given level (re- gardless of how many times it has given up the CPU), its priority is reduced (i.e., it moves down one queue).</li>
  <li>Rule 5: After some time period S, move all the jobs in the system to the topmost queue.</li>
</ul>

<h3 id="chapter-9---scheduling-proportional-share">Chapter 9 - Scheduling: Proportional Share</h3>

<p><strong>0. Basic Idea</strong></p>

<p><strong>Proportional-share scheduler</strong>, also sometimes referred to as a <strong>fair-share scheduler</strong>. Proportional-share is based around a simple concept: instead of optimizing for turnaround or response time, a scheduler might instead try to guarantee that each job obtain a certain percentage of CPU time.</p>

<p><strong>Implementations</strong></p>

<ul>
  <li><strong>lottery</strong> scheduling, lottery uses randomness in a clever way to achieve proportional share</li>
  <li><strong>stride</strong> scheduling, stride does so deterministically</li>
</ul>

<p><strong>Application</strong></p>

<p>One is that such approaches do not particularly mesh well with I/O [AC97]; another is that they leave open the hard problem of ticket assignment, i.e., how do you know how many tickets your browser should be allocated?</p>

<p>As a result, proportional-share schedulers are more useful in domains where some of these problems (such as assignment of shares) are rela- tively easy to solve. For example, in a virtualized data centre.</p>

<p><strong>1. Lottery Scheduling</strong></p>

<p>The basic idea is quite simple: every so often, hold a lottery to determine which process should get to run next; processes that should run more often should be given more chances to win the lottery. One of the most beautiful aspects of lottery scheduling is its use of randomness.</p>

<p><strong>Advantage</strong></p>

<ul>
  <li>randomness
    <ul>
      <li>First, random often avoids strange corner-case behaviors that a more traditional algorithm may have trouble handling.</li>
      <li>Second, random also is lightweight, requiring little state to track alternatives.</li>
      <li>Finally, random can be quite fast.</li>
    </ul>
  </li>
  <li>simplicity of implementation</li>
  <li>no global state</li>
</ul>

<p><strong>Disadvantage</strong></p>

<ul>
  <li>Hard to assign tickets to jobs</li>
  <li>Not deterministic. Only as the jobs run for a significant number of time slices does the lottery scheduler approach the desired outcome.</li>
</ul>

<p><strong>Ticket</strong></p>

<p>Tickets, which are used to represent the share of a resource that a process (or user or whatever) should receive. The percent of tickets that a process has represents its share of the system resource in question.</p>

<p><strong>Ticket Mechanisms</strong></p>

<p>Lottery scheduling also provides a number of mechanisms to manipulate tickets in different and sometimes useful ways.</p>

<ul>
  <li>ticket currency</li>
  <li>ticket transfer</li>
  <li>ticket inflation</li>
</ul>

<p><strong>Implementation</strong></p>

<p>Probably the most amazing thing about lottery scheduling is the simplicity of its implementation.</p>

<ul>
  <li>a good random number generator to pick the winning ticket</li>
  <li>a data structure to track the processes of the system (e.g., a list)</li>
  <li>the total number of tickets.</li>
</ul>

<p><strong>2. Stride Scheduling</strong></p>

<p>a <strong>deterministic</strong> fair-share scheduler.</p>

<p>Respectively, we can compute the stride of each by dividing some large number by the number of tickets each process has been assigned. We call this value the <strong>stride</strong> of each process.</p>

<p>Jobs A, B, and C, with 100, 50, and 250 tickets. if we divide 10,000 by each of those ticket values, we obtain the following stride values for A, B, and C: 100, 200, and 40.</p>

<p>Every time a process runs, we will increment a counter for it (called its <strong>pass</strong> value) by its stride to track its global progress. The scheduler then uses the stride and pass to determine which process should run next.</p>

<p>The basic idea is simple: at any given time, pick the process to run that has the lowest pass value so far; when you run a process, increment its pass counter by its stride.</p>

<p><strong>Advantage</strong></p>

<p>Lottery scheduling achieves the proportions probabilistically over time; stride scheduling gets them exactly right at the end of each scheduling cycle.</p>

<p><strong>Disadvantage</strong></p>

<p>Well, lottery scheduling has one nice property that stride scheduling does not: no global state. Imagine a new job enters in the middle of our stride scheduling example above; what should its pass value be? Should it be set to 0? If so, it will monopolize the CPU. With lottery scheduling, there is no global state per process; we simply add a new process with whatever tickets it has, update the single global variable to track how many total tickets we have, and go from there. In this way, lottery makes it much easier to incorporate new processes in a sensible manner.</p>

<h3 id="chapter-10---multiprocessor-scheduling">Chapter 10 - Multiprocessor Scheduling</h3>

<p><em>TODO after reading Concurrency</em></p>

<h1 id="memory-virtualisation">Memory Virtualisation</h1>

<h2 id="address-space">Address Space</h2>

<h3 id="chapter-13---the-abstraction-address-spaces">Chapter 13 - The Abstraction: Address Spaces</h3>

<p><strong>Multiprogramming</strong> (多道程序), in which multiple processes were ready to run at a given time, and the OS would switch between them.</p>

<p><strong>Time sharing</strong>, One way to implement time sharing would be to run one process for a short while, giving it full access to all memory, then stop it, save all of its state to some kind of disk (including all of physical memory), load some other process’s state, run it for a while, and thus implement some kind of crude sharing of the machine. Unfortunately, this approach has a big problem: it is way too slow, particularly as memory grows.</p>

<p><strong>Address space</strong></p>

<p>Address space, easy to use abstraction of physical memory, and it is the running program’s view of memory in the system. Understanding this fundamental OS ab- straction of memory is key to understanding how memory is virtualized.</p>

<p>When the OS does this, we say the OS is <strong>virtualizing memory</strong>.</p>

<p><strong>Goals</strong></p>

<p>The VM system is responsible for providing the illusion of a large, sparse, private address space to programs, which hold all of their instructions and data therein.</p>

<ul>
  <li>transparency</li>
  <li>efficiency</li>
  <li>protection (isolation)</li>
</ul>

<p><strong>EVERY ADDRESS YOU SEE IS VIRTUAL</strong></p>

<p>Any address you can see as a programmer of a user-level program is a virtual address, if you print out an address in a program, it’s a virtual one.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-every_address_you_see_is_virtual.png" alt="os-every_address_you_see_is_virtual.png" /></p>

<h3 id="chapter-14---interlude-memory-api">Chapter 14 - Interlude: Memory API</h3>

<p><strong>Types of Memory</strong></p>

<ul>
  <li><strong>stack memory</strong>, allocations and deallocations of it are managed implicitly by the compiler for you, the programmer.</li>
  <li><strong>heap memory</strong>, it is this need for long-lived memory, where all allocations and deallocations are explicitly handled by you, the programmer.</li>
</ul>

<p>Example</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">func</span><span class="p">()</span> <span class="p">{</span>     <span class="kt">int</span> <span class="o">*</span><span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>     <span class="p">...</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>First, you might no- tice that both stack and heap allocation occur on this line: first the com- piler knows to make room for a pointer to an integer when it sees your declaration of said pointer (int *x); subsequently, when the program calls malloc(), it requests space for an integer on the heap; the routine returns the address of such an integer (upon success, or NULL on failure), which is then stored on the stack for use by the program.</p>

<p><strong>API</strong></p>

<ul>
  <li><strong>malloc()</strong></li>
  <li><strong>free()</strong></li>
</ul>

<p>There are really two levels of memory management in the system. The first is level of memory management is performed by the OS, which hands out memory to processes when they run, and takes them back when processes exit (or otherwise die). The second level of management is within each process, for example within the heap when you call malloc() and free().</p>

<p>They are not system calls, but rather library calls. Thus the malloc library manages space within your virtual address space, but itself is built on top of some system calls.</p>

<ul>
  <li><strong>mmap()</strong></li>
</ul>

<p>You can also obtain memory from the operating system via the <code>mmap()</code> call. By passing in the correct arguments, mmap() can create an anonymous memory region within your program — a region which is not associated with any particular file but rather with swap space. This memory can then also be treated like a heap and managed as such.</p>

<ul>
  <li><strong>calloc()</strong></li>
</ul>

<p>Allocates memory and also zeroes it before returning; this prevents some errors where you assume that memory is zeroed and forget to initialize it yourself.</p>

<ul>
  <li><strong>realloc()</strong></li>
</ul>

<p>when you’ve allocated space for something (say, an array), and then need to add something to it: realloc() makes a new larger region of memory, copies the old region into it, and returns the pointer to the new region.</p>

<p><strong>Common Errors</strong></p>

<ul>
  <li>Forgetting To Allocate Memory - <strong>segmentation fault</strong>, which is a fancy term for YOU DID SOMETHING WRONG WITH MEMORY YOU FOOLISH PROGRAMMER AND I AM ANGRY. Forget to allocate memory.</li>
  <li>Not Allocating Enough Memory - <strong>buffer overflow</strong></li>
  <li>Forgetting to Initialize Allocated Memory - <strong>uninitialized read</strong></li>
  <li>Forgetting To Free Memory - <strong>memory leak</strong></li>
  <li>Freeing Memory Before You Are Done With It - <strong>dangling pointer</strong></li>
  <li>Freeing Memory Repeatedly - <strong>double free</strong></li>
</ul>

<p><strong>Tools</strong></p>

<ul>
  <li><strong>gdb</strong>, add -g flag to gcc, then run it with gdb. eg. gcc -g null.c -o null -Wall &amp;&amp; gdb null</li>
  <li><strong>valgrind</strong>, eg. valgrind —leak-check=yes null</li>
</ul>

<h2 id="dynamic-allocation-and-segmentation">Dynamic Allocation and Segmentation</h2>

<h3 id="chapter-15---mechanism-address-translation">Chapter 15 - Mechanism: Address Translation</h3>

<p><strong>hardware-based address translation</strong></p>

<p>With address translation, the hardware transforms each memory access (e.g., an instruction fetch, load, or store), changing the <strong>virtual</strong> address provided by the instruction to a <strong>physical</strong> address where the desired information is actually located.</p>

<p>Transforming a virtual address into a physical address is exactly the technique we refer to as address translation.</p>

<p>Key to the efficiency of this technique is hardware support, which performs the translation quickly for each access, turning virtual addresses (the process’s view of memory) into physical ones (the actual view).</p>

<p><strong>Static (Software-based) Relocation</strong></p>

<p>A piece of software known as the loader takes an executable that is about to be run and rewrites its addresses to the desired offset in physical memory.</p>

<p><strong>Dynamic (Hardware-based) Relocation</strong></p>

<p>The <strong>base and bounds</strong> technique is also referred to as dynamic relocation. With dynamic relocation, a little hardware goes a long way. Namely, a <strong>base</strong> register is used to transform virtual addresses (generated by the program) into physical addresses. A <strong>bounds</strong> (or <strong>limit</strong>) register ensures that such addresses are within the confines of the address space. Together they provide a simple and efficient virtualization of memory.</p>

<p>Because this relocation of the address happens at runtime, and because we can move address spaces even after the process has started running, the technique is often referred to as dynamic relocation.</p>

<p>We should note that the base and bounds registers are hardware stru tures kept on the chip (one pair per CPU). Sometimes people call the part of the processor that helps with address translation the <strong>memory management unit (MMU)</strong>.</p>

<p><strong>Disadvantage</strong></p>

<p>The simple approach of using a base and bounds register pair to virtualize memory is wasteful. It also makes it quite hard to run a program when the entire address space doesn’t fit into memory; thus, base and bounds is not as flexible as we would like.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-base_and_bounds.png" alt="os-base_and_bounds.png" /></p>

<p><strong>Hardware Support</strong></p>

<p>The hardware should provide special instructions to modify the base and bounds registers, allowing the OS to change them when different processes run. These instructions are privileged; only in kernel (or privileged) mode can the registers be modified.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-dynaimic_relocation_hardware_requirement.png" alt="os-dynaimic_relocation_hardware_requirement.png" /></p>

<p><strong>Operating System Support</strong></p>

<p>The combination of hardware support and OS management leads to the implementation of a simple virtual memory.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-dynamic_relocation_os_responsibility.png" alt="os-dynamic_relocation_os_responsibility.png" /></p>

<p><strong>Limited Direct Execution Protocol (Dynamic Relocation)</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-dynamic_relocation_LDE.png" alt="os-dynamic_relocation_LDE.png" /></p>

<h3 id="chapter-16-segmentation">Chapter 16 Segmentation</h3>

<p><strong>Segmentation: Generalized Base/Bounds</strong></p>

<p>Considering the disadvantage of the simple base and bounds, instead of having just one base and bounds pair in our <strong>MMU</strong>, why not <strong>have a base and bounds pair per logical segment of the address space</strong>? A segment is just a contiguous portion of the address space of a particular length, and in our canonical address space, we have three logically-different segments: code, stack, and heap.</p>

<p>The hardware structure in our <strong>MMU</strong> required to support segmenta- tion is just what you’d expect: in this case, a set of three base and bounds register pairs.</p>

<p><strong>Advantage</strong></p>

<p>Remove the Inner Fragmentation.</p>

<p>What segmentation allows the OS to do is to place each one of those segments in different parts of physical memory, and thus avoid filling physical memory with unused virtual address space.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-segmentation.png" alt="os-segmentation.png" /></p>

<p><strong>THE SEGMENTATION FAULT</strong></p>

<p>The term segmentation fault or violation arises from a memory access on a segmented machine to an illegal address. Humorously, the term persists, even on machines with no support for segmentation at all. Or not so humorously, if you can’t figure why your code keeps faulting</p>

<p><strong>Implementation</strong></p>

<p>One common approach, sometimes referred to as an explicit approach, is to chop up the address space into segments based on the top few bits of the virtual address.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-segmentation_implementation.png" alt="os-segmentation_implementation.png" /></p>

<p><strong>Hardware Support</strong></p>

<p>Negative growth for stack, and protection bits for code sharing. (to save memory, sometimes it is useful to share certain memory segments between address spaces. In particular, <strong>code sharing</strong> is common and still in use in systems today.)</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-segmentation_register_with_protection.png" alt="os-segmentation_register_with_protection.png" /></p>

<p><strong>Fine-grained vs. Coarse-grained Segmentation</strong></p>

<ul>
  <li>Coarse-grained, with just a few segments (i.e., code, stack, heap).</li>
  <li>Fine-grained, to consist of a large number smaller segments, with (further hardware support) a <strong>segment table</strong> of some kind stored in memory.</li>
</ul>

<p><strong>Disadvantage</strong></p>

<p>The general problem that arises is that physical memory quickly becomes full of little holes of free space, making it difficult to allocate new segments, or to grow existing ones. We call this problem <strong>external fragmentation</strong>.</p>

<p>Because segments are variablesized, free memory gets chopped up into odd-sized pieces, and thus satisfying a memory-allocation request can be difficult. One can try to use smart algorithms or periodically compact memory, but the problem is fundamental and hard to avoid. (compact physical memory by rearranging the existing segments, is memory-intensive and generally uses a fair amount of processor time.)</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-segmentation_compact_memory.png" alt="os-segmentation_compact_memory.png" /></p>

<p>Segmentation still isn’t flexible enough to support our fully generalized, sparse address space.</p>

<h3 id="chapter-17---free-space-management">Chapter 17 - Free-Space Management</h3>

<p>Managing free space can certainly be easy, as we will see when we discuss the concept of paging. It is easy when the space you are managing is divided into fixed-sized units; in such a case, you just keep a list of these fixed-sized units; when a client requests one of them, return the first entry.</p>

<p>Where free-space management becomes more difficult (and interesting) is when the free space you are managing consists of variable-sized units; this arises in a user-level memory-allocation library (as in malloc() and free()) and in an OS managing physical memory when using segmentation to implement virtual memory. In either case, the problem that exists is known as <strong>external fragmentation</strong>: the free space gets chopped into little pieces of different sizes and is thus fragmented; subsequent requests may fail because there is no single contiguous space that can satisfy the request, even though the total amount of free space exceeds the size of the request.</p>

<p><strong>Target</strong></p>

<p>The more you know about the exact workload presented to an <strong>allocator</strong>, the more you could do to tune it to work better for that workload.</p>

<p><strong>Assumptions</strong></p>

<p>Focus on the great history of allocators found in user-level memory-allocation libraries. The space that this library manages is known historically as the heap, and the geeric data structure used to manage free space in the heap is some kind of <strong>free list</strong>. This structure contains references to all of the free chunks of space in the managed region of memory.</p>

<p>Example</p>

<p>void free(void *ptr) takes a pointer and frees the corresponding chunk. Note the implication of the interface: the user, when freeing the space, does not inform the library of its size; thus, the library must be able to figure out how big a chunk of memory is when handed just a pointer to it.</p>

<p><strong>Splitting and Coalescing</strong></p>

<ul>
  <li>The split is commonly used in allocators when requests are smaller than the size of any particular free chunk.</li>
  <li>Coalesce free space when a chunk of memory is freed.</li>
</ul>

<p><strong>Tracking The Size Of Allocated Regions</strong></p>

<p>To accomplish this task, most allocators store a little bit of extra information in a <strong>header</strong> block which is kept in memory, usually just before the handed-out chunk of memory.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewenndy.github.io/raw/source/image-repo/os-free_space_management_non_coalesced_free_list.png" alt="os-free_space_management_non_coalesced_free_list.png" /></p>

<h2 id="paging">Paging</h2>

<h3 id="chapter-18---paging-introduction">Chapter 18 - Paging: Introduction</h3>

<p><strong>Background</strong></p>

<p>The operating system takes one of two approaches when solving most any space-management problem.</p>

<ol>
  <li>The first approach is to chop things up into <strong>variable-sized</strong> pieces, as we saw with segmenta- tion in virtual memory.</li>
  <li>To chop up space into <strong>fixed-sized</strong> pieces. In virtual memory, we call this idea paging.</li>
</ol>

<p><strong>Page vs. Page Frame</strong></p>

<ul>
  <li>From perspective of address space, the fixed-sized unit is called page.</li>
  <li>From perspective of physical space, the fixed-sized unit is called page frame.</li>
</ul>

<p>So, the address translation is to translate page to relevant page frame.</p>

<p><strong>32 bits vs. 64 bits</strong></p>

<p>Sometimes we say the OS is 32 bits or 64 bits, we may infer that</p>

<ul>
  <li>32 bits OS has 4GB address space</li>
  <li>64 bits OS has 10mGB address space</li>
</ul>

<p><strong>Advantage</strong></p>

<ul>
  <li>First, it does not lead to external fragmentation, as paging (by design) divides memory into fixed-sized units.</li>
  <li>Second, it is quite flexible, enabling the sparse use of virtual address spaces.</li>
</ul>

<p><strong>Translation</strong></p>

<p>To translate this virtual address that the process generated, we have to first split it into two components: the <strong>virtual page number (VPN)</strong>, and the <strong>offset</strong> within the page.</p>

<p>With our virtual page number, we can now index our page table, to get the <strong>physical frame number (PFN)</strong> (also sometimes called the <strong>physical page number or PPN</strong>).</p>

<p>Note the offset stays the same (i.e., it is not translated), because the offset just tells us which byte within the page we want.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-paging_address_translation_process.png" alt="os-paging_address_translation_process.png" /></p>

<p><strong>Page Table</strong></p>

<p>The operating system usually keeps a per-process data structure known as a page table.</p>

<p>One of the most important data structures in the memory management subsystem of a modern OS is the page table. In general, a page table stores virtual-to-physical address translations</p>

<p>The page table is just a data structure that is used to map virtual addresses (or really, virtual page numbers) to physical addresses (physical frame numbers). The OS indexes the array by the virtual page number (VPN), and looks up the page-table entry (PTE) at that index in order to find the desired physical frame number (PFN).</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-paging_page_table.png" alt="os-paging_page_table.png" /></p>

<p><strong>Storage</strong></p>

<p>Because page tables are so big, we don’t keep any special on-chip hard- ware in the MMU to store the page table of the currently-running process. Instead, we store the page table for each process in memory somewhere.</p>

<p><strong>Page Table Entry (PTE)</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-paging_x86_pte_example.png" alt="os-paging_x86_pte_example.png" /></p>

<p><strong>Page Table Base Register (PTBR)</strong></p>

<p>PTBR contains the physical address of the starting location of the page table.</p>

<p>Code Example</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-paging_access_memory_code_demo.png" alt="os-paging_access_memory_code_demo.png" /></p>

<h3 id="chapter-19---paging-faster-translations-tlbs">Chapter 19 - Paging: Faster Translations (TLBs)</h3>

<p><strong>Background</strong></p>

<p>Using paging as the core mechanism to support virtual memory can lead to high performance overheads. By chopping the address space into small, fixed-sized units (i.e., pages), paging requires a large amount of mapping information. Going to memory for translation information before every instruction fetch or explicit load or store is prohibitively slow.</p>

<p><strong>Translation Lookaside Buffer (TLB)</strong></p>

<p>To speed address translation, we are going to add what is called (for historical reasons) a <strong>translation-lookaside buffer</strong>, or <strong>TLB</strong>. A TLB is part of the chip’s <strong>memory-management unit (MMU)</strong>, and is simply a hardware cache of popular virtual-to-physical address translations; thus, a better name would be an <strong>address-translation cache</strong>.</p>

<p><strong>Advantage</strong></p>

<p>By providing a small, dedicated on-chip TLB as an address-translation cache, most memory references will hopefully be handled without having to access the page table in main memory.</p>

<p><strong>Algorithm</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-paging_tlb_control_flow.png" alt="os-paging_tlb_control_flow.png" /></p>

<p>Goal is to improve the TLB <strong>hit rate</strong>.</p>

<p><strong>TLB Content</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-paging_tlb_content.png" alt="os-paging_tlb_content.png" /></p>

<p>TLB contains both VPN and PFN in each entry, in hardware terms, the TLB is known as a <strong>fully-associative</strong> cache.</p>

<p><strong>TLB Miss Handling</strong></p>

<p>Two answers are possible: the hardware, or the software (OS).</p>

<p>A modern system that uses <strong>software-managed TLBs</strong>. On a TLB miss, the hardware simply raises an exception, which pauses the current instruction stream, raises the privilege level to kernel mode, and jumps to a trap handler. As you might guess, this trap handler is code within the OS that is written with the express purpose of handling TLB misses.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-paging_tlb_control_flow_os_handled.png" alt="os-paging_tlb_control_flow_os_handled.png" /></p>

<p><strong>Performance Matters</strong></p>

<p>Like any cache, TLBs rely upon both spatial and temporal locality for success, which are program properties. The idea behind hardware caches is to take advantage of <strong>locality</strong> in instruction and data references. Hardware caches, whether for instructions, data, or address translations (as in our TLB) take advantage of locality by keeping copies of memory in small, fast on-chip memory.</p>

<ol>
  <li><strong>spatial locality</strong>, the idea is that if a program accesses memory at address x, it will likely soon access memory near x.</li>
  <li><strong>temporal locality</strong>, the idea is that an instruction or data item that has been recently accessed will likely be re-accessed soon in the future.</li>
  <li>page size, why don’t we just make bigger caches and keep all of our data in them? Because any large cache by definition is slow, and thus defeats the purpose.</li>
</ol>

<p><strong>Issue 1: Context Switch</strong></p>

<p>Specifically, the TLB contains virtual-to-physical translations that are only valid for the currently running process; these translations are not meaningful for other processes. As a result, when switching from one process to another, the hardware or OS (or both) must be careful to ensure that the about-to-be-run process does not accidentally use translations from some previously run process.</p>

<ol>
  <li><strong>flush</strong> the TLB on context switches, thus emptying it before running the next process. But there is a cost: each time a process runs, it must incur TLB misses as it touches its data and code pages. If the OS switches between processes frequently, this cost may be high.</li>
  <li><strong>address space identifier (ASID)</strong>, which you can think of the ASID as a process identifier (PID), to enable sharing of the TLB across context switches.</li>
</ol>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-paging_tlb_with_asid.png" alt="os-paging_tlb_with_asid.png" /></p>

<p><strong>Issue 2: Replacement Policy</strong></p>

<p>When we are installing a new entry in the TLB, we have to replace an old one, which one to replace?</p>

<ul>
  <li><strong>least-recently-used (LRU)</strong></li>
  <li><strong>random policy</strong></li>
</ul>

<p>LRU tries to take advantage of locality in the memory-reference stream, and what the random policy exists for?</p>

<p>Random policy is useful due to its simplicity and ability to avoid corner-case behaviors; for example, a “reasonable” policy such as LRU behaves quite unreasonably when a program loops over n + 1 pages with a TLB of size n; in this case, LRU misses upon every access, whereas random does much better.</p>

<p><strong>Disadvantage</strong></p>

<ol>
  <li>
    <p>Exceeding the TLB coverage, and it can be quite a problem for certain programs. Support for large pages is often exploited by programs such as a database management system (a DBMS), which have certain data structures that are both large and randomly-accessed.</p>

    <p><strong>RAM isn’t always RAM</strong>. Sometimes randomly accessing your address space, particular if the number of pages accessed exceeds the TLB coverage, can lead to severe performance penalties. Because one of our advisors, David Culler, used to always point to the TLB as the source of many performance problems, we name this law in his honor: <strong>Culler’s Law</strong>.</p>
  </li>
  <li>
    <p>TLB access can easily become a bottleneck in the CPU pipeline, in particular with what is called a <strong>physically-indexed cache</strong>. With such a cache, address translation has to take place before the cache is accessed, which can slow things down quite a bit. A <strong>virtually-indexed cach</strong>e solves some performance problems, but introduces new issues into hardware design as well.</p>
  </li>
</ol>

<h3 id="note-on-cache-management">Note on Cache Management</h3>

<p>Define cache miss and hit, and goal is to improve the cache rate. Normally, better <strong>replacement policy</strong> lead to higher cache rate.</p>

<p><strong>Find the best replacement policy</strong></p>

<ul>
  <li>Find the optimal</li>
  <li>Find the easiest</li>
  <li>Improve toward optimal, considering Principle of Locality</li>
  <li>Think about corner case</li>
</ul>

<p><strong>Reference: Optimal Replacement Policy</strong></p>

<p>Although optimal is not very practical as a real policy, it is incredibly useful as a comparison point in simulation or other studies.</p>

<ul>
  <li>It makes your improvement meaningful, comparing to optimal policy</li>
  <li>It can show you how much improvement still possible</li>
  <li>It can tell you when to stop making your policy better, because it is close enough to the ideal</li>
</ul>

<p><strong>Reference: Easiest Replacement Policy</strong></p>

<p>Random policy, with an extraordinary advantage, can avoid corner case.</p>

<p><strong>Reference: Principle of Locality</strong></p>

<p>Programs tend to access certain code sequences (e.g., in a loop) and data structures (e.g., an array accessed by the loop) quite frequently.</p>

<ul>
  <li>spatial locality</li>
  <li>temporal locality, e.g., LRU</li>
  <li>operation expense, e.g., When swapping out pages, dirty pages are much more expensive</li>
</ul>

<p><strong>Reference: Types of Cache Misses</strong></p>

<p>In the computer architecture world, architects sometimes find it useful to characterize misses by type, into one of three categories, sometimes called the Three C’s.</p>

<ul>
  <li><strong>Compulsory miss</strong> (cold-start miss) occurs because the cache is empty to begin with and this is the first reference to the item.</li>
  <li><strong>Capacity miss</strong> occurs because the cache ran out of space and had to evict an item to bring a new item into the cache.</li>
  <li><strong>Conflict miss</strong> arises in hardware because of limits on where an item can be placed in a hardware cache, due to something known as set-associativity; it does not arise in the OS page cache because such caches are always fully-associative, i.e., there are no restrictions on where in memory a page can be placed.</li>
</ul>

<h3 id="chapter-20---paging-smaller-tables">Chapter 20 - Paging: Smaller Tables</h3>

<p><strong>Crux</strong></p>

<p>How to get rid of all those invalid regions in the page table instead of keeping them all in memory?</p>

<p><strong>Background</strong></p>

<p>Page tables are t big and thus consume too much memory.</p>

<p>Assume again a 32-bit address space (2^32 bytes), with 4KB (2^12 byte) pages and a 4-byte page-table entry. An address space thus has roughly one million virtual pages in it ( 2^20 ); multiply by the page-table entry size and you see that our page table is 4MB in size. Recall also: we usually have one page table for every process in the system! With a hundred active processes (not uncommon on a modern system), we will be allocating hundreds of megabytes of memory just for page tables!</p>

<p><strong>Solution 1 - Bigger Pages</strong></p>

<p>Big pages lead to waste within each page, a problem known as internal fragmentation. Thus, most systems use relatively small page sizes in the common case: 4KB (as in x86).</p>

<p><strong>Solution 2 - Hybrid Approach: Paging and Segments</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-paging_tlb_hybrid_approach.png" alt="os-paging_tlb_hybrid_approach.png" /></p>

<p><strong>Algorithm</strong></p>

<p>Instead of having a single page table for the entire address soopace of the process, have one per logical segment. In this example, we might thus have three page tables.</p>

<p>Remember with segmentation, we had a <strong>base</strong> register that told us where each segment lived in physical memory, and a <strong>bound</strong> or limit register that told us the size of said segment.</p>

<ol>
  <li>Each logical segment (code, stack, and heap) has one page table.</li>
  <li>Each segment has one pair of base and bounds resisters.</li>
  <li>Base register points to the page table of the segment, and bounds is used to indicate the end of the page table.</li>
</ol>

<p><strong>Advantage</strong></p>

<p>In this manner, our hybrid approach realizes a significant memory savings compared to the linear page table; unallocated pages between the stack and the heap no longer take up space in a page table (just to mark them as not valid).</p>

<p><strong>Disadvantage</strong></p>

<ol>
  <li>It still requires us to use segmentation, as it assumes a certain usage pattern of the address space; if we have a large but sparsely-used heap, for example, we can still end up with a lot of page table waste.</li>
  <li>This hybrid causes external fragmentation to arise again. While most of memory is managed in page-sized units, page tables now can be of arbitrary size (in multiples of PTEs). Thus, finding free space for them in memory is more complicated.</li>
</ol>

<p><strong>Solution 3 - Multi-level Page Tables</strong></p>

<p>It turns the linear page table into something like a tree (<strong>page directory</strong>). This approach is so effective that many modern systems employ it (e.g., x86).</p>

<p><strong>Algorithm</strong></p>

<p>First, chop up the page table into page-sized units; if an entire page of page-table entries (PTEs) is invalid, don’t allocate that page of the page table at all. To track whether a page of the page table is valid (and if valid, where it is in memory), use a new structure, called the page directory. The page directory thus either can be used to tell you where a page of the page table is, or that the entire page of the page table contains no valid pages.</p>

<p>The page directory, in a simple two-level table, contains one entry per page of the page table. It consists of a number of <strong>page directory entries (PDE)</strong>. A PDE (minimally) has a <strong>valid bit</strong> <strong>and a page frame number (PFN)</strong>, similar to a PTE.</p>

<p>VA contains VPN and offset, and VPN can be splitted into <strong>page directory index</strong> and <strong>page table index</strong>.</p>

<ol>
  <li>Use <strong>page directory index</strong> to search page directory, to get <strong>page directory entry</strong>, to get <strong>page frame number</strong>, to get the specific <strong>page table</strong>.</li>
  <li>Use <strong>page table index</strong> to search the page table, to get <strong>page table entry</strong>, to get the real <strong>physical frame number</strong>.</li>
</ol>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-paging_multi_level_page_table_demo.png" alt="os-paging_multi_level_page_table_demo.png" /></p>

<p>Demo code</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-paging_multi_level_page_table_demo_code.png" alt="os-paging_multi_level_page_table_demo_code.png" /></p>

<p><strong>Advantage</strong></p>

<ol>
  <li>The multi-level table only allocates page-table space in proportion to the amount of address space you are usig; thus it is generally compact and supports sparse address spaces.</li>
  <li>
    <p>If carefully constructed, each portion of the page table fits neatly within a page, making it easier to manage memory; the OS can simply grab the next free page when it needs to allocate or grow a page table.</p>

    <p>Contrast this to a simple (non-paged) linear page table, for a large page table (say 4MB), finding such a large chunk of unused contiguous free physical memory can be quite a challenge. With a multi-level structure, the indirection allows us to place page-table pages wherever we would like in physical memory.</p>
  </li>
</ol>

<p><strong>Disadvantage</strong></p>

<ol>
  <li>Time-space trade-off. It should be noted that there is a cost to multi-level tables; on a TLB miss, two loads from memory will be required to get the right translation information from the page table (one for the page directory, and one for the PTE itself).</li>
  <li>Another obvious negative is complexity. Whether it is the hardware or OS handling the page-table lookup (on a TLB miss), doing so is undoubt- nedly more involved than a simple linear page-table lookup.</li>
</ol>

<p><strong>Example</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-paging_multi_level_page_table_example.png" alt="os-paging_multi_level_page_table_example.png" /></p>

<p>Virtual Address format</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-paging_multi_level_page_table_example_va.png" alt="os-paging_multi_level_page_table_example_va.png" /></p>

<p>Explanation</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-paging_multi_level_page_table_example_explanation.png" alt="os-paging_multi_level_page_table_example_explanation.png" /></p>

<p><strong>Issues</strong></p>

<p><strong><em>What if the page directory gets too big?</em></strong></p>

<p>Make it more than two levels, add index to page directory index.</p>

<p><strong><em>How to make it extreme space savings?</em></strong></p>

<p>Inverted page tables. Instead of having many page tables (one per process of the system), we keep a single page table that has an entry for each physical page of the system. The entry tells us which process is using this page, and which virtual page of that process maps to this physical page.</p>

<p>A hash table is often built over the base structure to speed lookups.</p>

<p><strong><em>How to choose page table size?</em></strong></p>

<p>In a memory-constrained system (like many older systems), small structures make sense; in a system with a reasonable amount of memory and with workloads that actively use a large number of pages, a bigger table that speeds up TLB misses might be the right choice.</p>

<p><strong><em>What if the page tables are too big to fit into memory all at once?</em></strong></p>

<p>Thus far, we have assumed that page tables reside in kernel-owned physical memory. Some systems place such page tables in <strong>kernel virtual memory</strong>, thereby allowing the system to swap some of these page tables to disk when memory pressure gets a little tight.</p>

<h2 id="beyond-physical-memory">Beyond Physical Memory</h2>

<h3 id="chapter-21---beyond-physical-memory-mechanisms">Chapter 21 - Beyond Physical Memory: Mechanisms</h3>

<p><strong>Background</strong></p>

<p>In fact, we’ve been assuming that every address space of every running process fits into memory. We will now relax these big assumptions, and assume that we wish to support many concurrently-running large address spaces.</p>

<p>To support large address spaces, the OS will need a place to stash away portions of address spaces that currently aren’t in great demand. In modern systems, this role is usually served by a hard disk drive.</p>

<p><strong>Mechanism</strong></p>

<p>To do so requires more complexity in page-table structures, as a <strong>present bit</strong> (of some kind) must be included to tell us whether the page is present in memory or not. When not, the operating system <strong>page-fault handler</strong> runs to service the <strong>page fault</strong>, and thus arranges for the transfer of the desired page from disk to memory, perhaps first replacing some pages in memory to make room for those soon to be swapped in.</p>

<p><strong>Swap Space</strong></p>

<p>To reserve some space on the disk for moving pages back and forth. We will simply assume that the OS can read from and write to the swap space, in page-sized units. To do so, the OS will need to remember the <strong>disk address</strong> of a given page (PTE).</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-swap_example.png" alt="os-swap_example.png" /></p>

<p>The size of the swap space is important, as ultimately it determines the <strong>maximum number of memory pages</strong> that can be in use by a system at a given time.</p>

<p>We should note that swap space is not the only on-disk location for swapping traffic.</p>

<blockquote>
  <p>For example, assume you are running a program binary (e.g., ls, or your own compiled main program). The code pages from this binary are initially found on disk, and when the program runs, they are loaded into memory (either all at once when the program starts execution, or, as in modern systems, one page at a time when needed). However, if the system needs to make room in physical memory for other needs, it can safely re-use the memry space for these code pages, knowing that it can later swap them in again from the on-disk binary in the file system.</p>
</blockquote>

<p><strong>Present Bit</strong></p>

<p>OS use this piece of information in each page-table entry to flag if the page is in physical memory or swap space.</p>

<p>If the present bit is set to one, it means the page is present in physical memory and everything proceeds as above; if it is set to zero, the page is not in memory but rather on disk somewhere.</p>

<p><strong>Page Faut</strong></p>

<p>The act of accessing a page that is not in physical memory is commonly referred to as a <strong>page fault</strong> (it should be called a <strong>page miss</strong>. But when something the hardware doesn’t know how to handle occurs, the hardware simply transfers control to the OS. In perspective of the hardware it is a page fault).</p>

<p><strong>Page Fault Handler</strong></p>

<p>Upon a page fault, the OS is invoked to service the page fault. A particular piece of code, known as a <strong>page-fault handler</strong>, runs, and must service the page fault.</p>

<p>The appropriately-named <strong>OS page-fault handler</strong> runso to determine what to do. Virtually all systems handle page faults in software; even with a hardware-managed TLB, the hardware trusts the OS to manage this important duty.</p>

<p><strong>Page Fault Control Flow</strong></p>

<p>Hardware</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-swap_page_fault_control_flow.png" alt="os-swap_page_fault_control_flow.png" /></p>

<p>Software</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-swap_page_fault_control_flow_software.png" alt="os-swap_page_fault_control_flow_software.png" /></p>

<p>How to handle or how will the OS know where to find the desired page?</p>

<ol>
  <li>The OS could use the bits in the PTE normally used for data such as the PFN of the page for a disk address. When the OS receives a page fault for a page, it looks in the PTE to find the address, and issues the request to disk to fetch the page into memory.</li>
  <li>When the disk I/O completes, the OS will then update the page table to mark the page as present, update the PFN field of the page-table entry (PTE) to record the in-memory location of the newly-fetched page, and retry the instruction.</li>
  <li>Then generate a TLB miss, which would then be serviced and update the TLB with the translation (one could alternately update the TLB when servicing the page fault to avoid this step)</li>
  <li>Finally, a last restart would find the translation in the TLB and thus proceed to fetch the desired data or instruction from memory at the translated physical address.</li>
</ol>

<p>Note that while the I/O is in flight, the process will be in the blocked state. Thus, the OS will be free to run other ready processes while the page fault is being serviced.</p>

<p><strong><em>What If Memory Is Full?</em></strong></p>

<p>OS might like to first page out one or more pages to make room for the new page(s) the OS is about to bring in. The process of picking a page to kick out, or replace is known as the <strong>page-replacement policy</strong>.</p>

<p><strong><em>When Replacements Really Occur?</em></strong></p>

<p>There are many reasons for the OS to keep a small portion of memory free more proactively. To keep a small amount of memory free, most operating systems thus have some kind of <strong>high watermark (HW)</strong> and <strong>low watermark (LW)</strong> to help decide when to start evicting pages from memory.</p>

<p>When the OS notices that there are fewer than LW pages available, a background thread that is responsible for freeing memory runs. The thread evicts pages until there are HW pages available. The background thread, sometimes called the <strong>swap daemon</strong> or <strong>page daemon</strong>, then goes to sleep, happy that it has freed some memory for running processes and the OS to use.</p>

<p>So, instead of performing a replacement directly, the algorithm would instead simply check if there are any free pages available. If not, it would inform the <strong>page daemon</strong> that free pages are needed; when the thread frees up some pages, it would re-awaken the original thread, which could then page in the desired page and go about its work.</p>

<p><strong><em>How To Make Replacement Efficient?</em></strong></p>

<p>Many systems will cluster or group a number of pages and write them out at once to the swap partition, thus increasing the efficiency of the disk.</p>

<h3 id="chapter-22---beyond-physical-memory-policies">Chapter 22 - Beyond Physical Memory: Policies</h3>

<p><strong>Background</strong></p>

<p>In such a case, this memory pressure forces the OS to start <strong>paging out</strong> pages to make room for actively-used pages. Deciding which page (or pages) to evict is encapsulated within the <strong>replacement policy</strong> of the OS.</p>

<p><strong>Cache Management</strong></p>

<p>Given that main memory holds some subset of all the pages in the system, it can rightly be viewed as a cache for virtual memory pages in the system. And our goal as maximizing the number of <strong>cache hits</strong>.</p>

<p>Knowing the number of cache hits and misses let us calculate the <strong>average memory access time (AMAT)</strong> for a program.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-replacement_amat.png" alt="os-replacement_amat.png" /></p>

<p>Example</p>

<p>Suppose T(M) = 100ns (10^-7), T(D) = 10ms (10^-2)</p>

<ul>
  <li>P(Hit) = 90%, P(Miss) = 10%, AMAT = 1ms + 90ns</li>
  <li>P(Hit) = 99.9%, P(Miss) = 0.1%, AMAT = 0.01ms + 99.9ns</li>
</ul>

<p>The cost of disk access is so high in modern systems that even a tiny miss rate will quickly dominate the overall AMAT of running programs.</p>

<p><strong>Polices</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-replacement_summary.png" alt="os-replacement_summary.png" /></p>

<p><strong>Policy 1. Optimal Replacement Policy</strong></p>

<p>Replaces the page that will be accessed furthest in the future is the optimal policy, resulting in the fewest-possible cache misses.</p>

<p>In the development of scheduling policies, the future is not generally known; you can’t build the optimal policy for a general-purpose operating system.</p>

<p>Although optimal is not very practical as a real policy, it is incredibly useful as a comparison point in simulation or other studies.</p>

<ul>
  <li>It makes your improvement meaningful, comparing to optimal policy</li>
  <li>It can show you how much improvement still possible</li>
  <li>It can tell you when to stop making your policy better, because it is close enough to the ideal</li>
</ul>

<p><strong>Policy 2. FIFO</strong></p>

<p>Normal efficiency, easy to implement, and has corner case.</p>

<p>In some cases, when increasing the cache size, hit rate may get lower. This odd behavior is generally referred to as <strong>Belady’s Anomaly</strong>.</p>

<p><strong>Policy 3. Random</strong></p>

<p>Normal efficiency, easy to implement, but remember, it can avoid corner case.</p>

<p><strong>Policy 4. LRU</strong></p>

<p>LRU has what is known as a stack property. When increasing the cache size, hit rate will either stay the same or improve.</p>

<p><strong>Comparison with Workload</strong></p>

<p>No locality workload</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-replacement_no_locality_workload.png" alt="os-replacement_no_locality_workload.png" /></p>

<p>The 80-20 Workload, 80% of the references are made to 20% of the pages (the “hot” pages).</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-replacement_80_20_workload.png" alt="os-replacement_80_20_workload.png" /></p>

<p>The Looping-Sequential Workload</p>

<p>Looping sequential workload, as in it, we refer to 50 pages in sequence, starting at 0, then 1, …, up to page 49, and then we lp, repeating those accesses.</p>

<p>It represents a worst-case for both LRU and FIFO, but no influence on Random. Turns out that random has some nice properties; one such property is not having weird corner-case behaviors.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-replacement_looping_sequential_workload.png" alt="os-replacement_looping_sequential_workload.png" /></p>

<p><strong>Implementation - Approximating LRU</strong></p>

<p>To keep track of which pages have been least- and most-recently used, the system has to do some accounting work on every memory reference. Unfortunately, as the number of pages in a system grows, scanning a huge array of times just to find the absolute least-recently-used page is prohibitively expensive.</p>

<p>Idea</p>

<p>Approximating LRU is more feasible from a computational-overhead standpoint, and indeed it is what many modern systems do. The idea requires some hardware support, in the form of a <strong>use bit</strong> (sometimes called the <strong>reference bit</strong>).</p>

<ul>
  <li>Whenever a page is referenced (i.ooe., read or written), the use bit is set by hardware to 1.</li>
  <li>The hardware never clears the bit, though (i.e., sets it to 0); that is the responsibility of the OS.</li>
</ul>

<p>Implementation by Clock Algorithm</p>

<ul>
  <li>Imagine all the pages of the system arranged in a circular list. A clock hand points to some particular page to begin with.</li>
  <li>When a replacement must occur, the OS iterating the circular list checking on use bit.
    <ul>
      <li>If 1, clear use bit to 0, and find next</li>
      <li>If 0, use it</li>
    </ul>
  </li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-replacement_80_20_workload_with_clock.png" alt="os-replacement_80_20_workload_with_clock.png" /></p>

<p><strong>Considering Dirty Pages</strong></p>

<p>Consider the locality by the expense on swapping out pages.</p>

<ul>
  <li>If a page has been <strong>modified</strong> and is thus <strong>dirty</strong>, it must be written back to disk to evict it, which is expensive.</li>
  <li>If it has not been modified (and is thus clean), the eviction is free; the physical frame can simply be reused for other purposes without additional I/O.
Idea</li>
</ul>

<p>To support this behavior, the hardware should include a <strong>modified bit</strong> (a.k.a. <strong>dirty bit</strong>).</p>

<p>Implementation by Clock Algorithm</p>

<p>The clock algorithm, for example, could be changed to scan for pages that are both unused and clean to evict first; failing to find those, then for unused pages that are dirty, and so forth.</p>

<p><strong>Other VM Policies</strong></p>

<p><strong><em>When the OS bring a page into memory?</em></strong></p>

<p>Page selection policy. The OS simply uses <strong>demand paging</strong>, which means the OS brings the page into memory when it is accessed, “on demand” as it were. Of course, the OS could guess that a page is about to be used, and thus bring it in ahead of time; this behavior is known as <strong>prefetching</strong>.</p>

<p><strong><em>How the OS writes pages out to disk?</em></strong></p>

<p>Any systems instead collect a number of pending writes together in memory and write them to disk in one (more efficient) write. This behavior is usually called <strong>clustering</strong> or simply <strong>grouping</strong> of writes, and is effective because of the nature of disk drives.</p>

<p><strong><em>What about
 the memory demands of the set of running processes simply exceeds the available physical memory? (condition sometimes referred to as thrashing)</em></strong></p>

<p>Given a set of processes, a system could decide not to run a subset of processes, with the hope that the reduced set of processes working sets (the pages that they are using actively) fit in memory and thus can make progress. This approach, generally known as <strong>admission control</strong>, states that it is sometimes better to do less work well than to try to do everything at once poorly.</p>

<p>Some versions of Linux run an <strong>out-of-memory killer</strong> when memory is oversubscribed; this daemon chooses a memory- intensive process and kills it, thus reducing memory in a none-too-subtle manner.</p>

<h3 id="chapter-23---the-vaxvms-virtual-memory-system">Chapter 23 - The VAX/VMS Virtual Memory System</h3>

<p><strong>Background</strong></p>

<p>The VAX-11 minicomputer architecture was introduced in the late 1970’s by Digital Equipment Corporation (DEC).</p>

<p>As an additional issue, VMS is an excellent example of software innovations used to hide some of the inheret flaws of the architecture.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-vax_vms_address_space.png" alt="os-vax_vms_address_space.png" /></p>

<p><strong>Reduce Page Table Pressure</strong></p>

<p>First, by segmenting the user address space into two, the VAX-11 provides a page table for each of these regions (P0 and P1) per process; thus, no page-table space is needed for the unused portion of the address space between the stack and the heap.</p>

<p>Second, the OS reduces memory pressure even further by placing user page tables (for P0 and P1, thus two per process) in kernel virtual memory. Thus, when allocating or growing a page table, the kernel allocates space out of its own virtual memory, in segment S. If memory comes undersevere pressure, the kernel can swap pages of these page tables out to disk, thus making physical memory available for other uses.</p>

<p><strong>Replacement policy: Segmented FIFO with Page Clustering</strong></p>

<p>Each process has a maximum number of pages it can keep in memory, known as its <strong>residentn set size (RSS)</strong>. Each of these pages is kept on a FIFO list; when a process exceeds its RSS, the “first-in” page is evicted. FIFO clearly does not need any support from the hardware (no use bit), and is thus easy to implement.</p>

<p>To improve FIFO’s performance, VMS introduced two <strong>second-chance lists</strong> where pages are placed before getting evicted from memory, specifically a global clean-page free list and dirty-page list. The bigger these global second-chance lists are, the closer the segmented FIFO algorithm performs to LRU.</p>

<p>Clustering is used in most modern systems, as the freedom to place pages anywhere within swap space lets the OS group pages, perform fewer and bigger writes, and thus improve performance.</p>

<p><strong>Optimisation: Be Lazy</strong></p>

<p>Laziness can put off work until later, which is beneficial within an OS for a number of reasons.</p>

<ul>
  <li>First, putting off work might reduce the latency of the current operation, thus improving responsiveness; for example, operating systems often report that writes to a file succeeded immediately, and only write them to disk later in the background.</li>
  <li>Second, and more importantly, laziness sometimes obviates the need to do the work at all; for example, delaying a write until the file is deleted removes the need to do the write at all.</li>
</ul>

<p><strong>Lazy Optimisation: Demanding Zero</strong></p>

<p>With demand zeroing, the OS instead does very little work when the page is added to your address space; it puts an entry in the page table that marks the page inaccessible. If the process then reads or writes the page, a trap into the OS takes place. When handling the trap, the OS notices that this is actually a demand-zero page; at this point, the OS then does the needed work of finding a physical page, zeroing it, and mapping it into the process’s address space. If the process never accesses the page, all of this work is avoided, and thus the virtue of demand zeroing.</p>

<p><strong>Lazy Optimisation: Copy-on-write</strong></p>

<p>When the OS needs to copy a page from one address space to another, instead of copying it, it can map it into the target address space and mark it read-only in both address spaces.</p>

<ul>
  <li>If both address spaces only read the page, no further action is taken, and thus the OS has realized a fast copy without actually moving any data.</li>
  <li>If, however, one of the address spaces does indeed try to write to the page, it will trap into the OS. The OS will then notice that the page is a COW page, and thus (lazily) allocate a new page, fill it with the data, and map this new page into the address space of the faulting process. The process then continues and now has its own private copy of the page.</li>
</ul>

<p>In UNIX systems, COW is even more critical, due to the semantics of <code>fork()</code> and <code>exec()</code>. <code>fork()</code> creates an exact copy of the address space of the caller; with a large address space, making such a copy is slow and data intensive. Even worse, most of the address space is immediately over-written by a subsequent call to <code>exec()</code>, which overlays the calling process’s address space with that of the soon-to-be-exec’d program. By instead performing a copy-on-write <code>fork()</code>, the OS avoids much of the needless copying and thus retains the correct semantics while improving performance.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[preload, eager_load, includes, references, and joins in Rails]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2015/11/11/preload-eager_load-includes-references-joins/"/>
    <updated>2015-11-11T23:25:17+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2015/11/11/preload-eager_load-includes-references-joins</id>
    <content type="html"><![CDATA[<p>There is always a confusion about these query methods. And after some digging, I’ve made my conclusion here: <code>includes</code> is the outstanding one.</p>

<p>Here comes the demonstation.</p>

<p><strong>Preparation</strong></p>

<p>Environment</p>

<ul>
  <li>Ruby: 2.2.2</li>
  <li>Rails: 4.2.2</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># model and reference</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Blog</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="n">has_many</span> <span class="ss">:posts</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># t.string   &quot;name&quot;</span>
</span><span class="line">  <span class="c1"># t.string   &quot;author&quot;</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="n">belongs_to</span> <span class="ss">:blog</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># t.string   &quot;title&quot;</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># seed</span>
</span><span class="line"><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">3</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">b_id</span><span class="o">|</span>
</span><span class="line">  <span class="n">blog</span> <span class="o">=</span> <span class="no">Blog</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;Blog </span><span class="si">#{</span><span class="n">b_id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="ss">author</span><span class="p">:</span> <span class="s1">&#39;someone&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">5</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">p_id</span><span class="o">|</span> <span class="n">blog</span><span class="o">.</span><span class="n">posts</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Post </span><span class="si">#{</span><span class="n">b_id</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="n">p_id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="preload">preload</h3>

<p>Always firing two separate queries.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">&gt; Blog.preload<span class="o">(</span>:posts<span class="o">)</span>
</span><span class="line">  Blog Load <span class="o">(</span>3.2ms<span class="o">)</span>  SELECT <span class="s2">&quot;blogs&quot;</span>.* FROM <span class="s2">&quot;blogs&quot;</span>
</span><span class="line">  Post Load <span class="o">(</span>1.2ms<span class="o">)</span>  SELECT <span class="s2">&quot;posts&quot;</span>.* FROM <span class="s2">&quot;posts&quot;</span> WHERE <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> IN <span class="o">(</span>1, 2, 3<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="eagerload">eager_load</h3>

<ul>
  <li>One query, LEFT OUTER JOINed in any query rather than loaded separately.</li>
  <li>JOIN first, then query by where clause. So you can query on referenced table, without an iteration of  <code>Enumerable#select</code>.</li>
  <li>Works just the same as <code>includes</code> + <code>references</code>.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">&gt; Blog.eager_load<span class="o">(</span>:posts<span class="o">)</span>
</span><span class="line">  SQL <span class="o">(</span>0.4ms<span class="o">)</span>  SELECT <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;id&quot;</span> AS t0_r0, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;name&quot;</span> AS t0_r1, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;author&quot;</span> AS t0_r2, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;created_at&quot;</span> AS t0_r3, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;updated_at&quot;</span> AS t0_r4, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;id&quot;</span> AS t1_r0, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;title&quot;</span> AS t1_r1, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;created_at&quot;</span> AS t1_r2, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;updated_at&quot;</span> AS t1_r3, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> AS t1_r4 FROM <span class="s2">&quot;blogs&quot;</span> LEFT OUTER JOIN <span class="s2">&quot;posts&quot;</span> ON <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;id&quot;</span>
</span><span class="line">
</span><span class="line">&gt; Blog.eager_load<span class="o">(</span>:posts<span class="o">)</span>.where<span class="o">(</span>name: <span class="s1">&#39;Blog 1&#39;</span><span class="o">)</span>
</span><span class="line">  SQL <span class="o">(</span>0.4ms<span class="o">)</span>  SELECT <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;id&quot;</span> AS t0_r0, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;name&quot;</span> AS t0_r1, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;author&quot;</span> AS t0_r2, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;created_at&quot;</span> AS t0_r3, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;updated_at&quot;</span> AS t0_r4, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;id&quot;</span> AS t1_r0, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;title&quot;</span> AS t1_r1, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;created_at&quot;</span> AS t1_r2, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;updated_at&quot;</span> AS t1_r3, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> AS t1_r4 FROM <span class="s2">&quot;blogs&quot;</span> LEFT OUTER JOIN <span class="s2">&quot;posts&quot;</span> ON <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;id&quot;</span> WHERE <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;name&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;name&quot;</span>, <span class="s2">&quot;Blog 1&quot;</span><span class="o">]]</span>
</span><span class="line">
</span><span class="line">&gt; Blog.eager_load<span class="o">(</span>:posts<span class="o">)</span>.where<span class="o">(</span>name: <span class="s1">&#39;Blog 1&#39;</span><span class="o">)</span>.where<span class="o">(</span>posts: <span class="o">{</span>title: <span class="s1">&#39;Post 1-1&#39;</span><span class="o">})</span>
</span><span class="line">  SQL <span class="o">(</span>0.4ms<span class="o">)</span>  SELECT <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;id&quot;</span> AS t0_r0, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;name&quot;</span> AS t0_r1, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;author&quot;</span> AS t0_r2, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;created_at&quot;</span> AS t0_r3, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;updated_at&quot;</span> AS t0_r4, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;id&quot;</span> AS t1_r0, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;title&quot;</span> AS t1_r1, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;created_at&quot;</span> AS t1_r2, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;updated_at&quot;</span> AS t1_r3, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> AS t1_r4 FROM <span class="s2">&quot;blogs&quot;</span> LEFT OUTER JOIN <span class="s2">&quot;posts&quot;</span> ON <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;id&quot;</span> WHERE <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;name&quot;</span> <span class="o">=</span> ? AND <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;title&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;name&quot;</span>, <span class="s2">&quot;Blog 1&quot;</span><span class="o">]</span>, <span class="o">[</span><span class="s2">&quot;title&quot;</span>, <span class="s2">&quot;Post 1-1&quot;</span><span class="o">]]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="includes">includes</h3>

<p>Behaves based on situations, intelligent!</p>

<p>Situation 1, just like <code>preload</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">&gt; Blog.includes<span class="o">(</span>:posts<span class="o">)</span>
</span><span class="line">  Blog Load <span class="o">(</span>2.8ms<span class="o">)</span>  SELECT <span class="s2">&quot;blogs&quot;</span>.* FROM <span class="s2">&quot;blogs&quot;</span>
</span><span class="line">  Post Load <span class="o">(</span>0.7ms<span class="o">)</span>  SELECT <span class="s2">&quot;posts&quot;</span>.* FROM <span class="s2">&quot;posts&quot;</span> WHERE <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> IN <span class="o">(</span>1, 2, 3<span class="o">)</span>
</span><span class="line">
</span><span class="line">&gt; Blog.includes<span class="o">(</span>:posts<span class="o">)</span>.where<span class="o">(</span>name: <span class="s1">&#39;Blog 1&#39;</span><span class="o">)</span>
</span><span class="line">  Blog Load <span class="o">(</span>0.7ms<span class="o">)</span>  SELECT <span class="s2">&quot;blogs&quot;</span>.* FROM <span class="s2">&quot;blogs&quot;</span> WHERE <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;name&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;name&quot;</span>, <span class="s2">&quot;Blog 1&quot;</span><span class="o">]]</span>
</span><span class="line">  Post Load <span class="o">(</span>0.3ms<span class="o">)</span>  SELECT <span class="s2">&quot;posts&quot;</span>.* FROM <span class="s2">&quot;posts&quot;</span> WHERE <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> IN <span class="o">(</span>1<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Situation 2, just like <code>eager_load</code>, <strong>fired by querying referenced table</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">&gt; Blog.includes<span class="o">(</span>:posts<span class="o">)</span>.where<span class="o">(</span>name: <span class="s1">&#39;Blog 1&#39;</span><span class="o">)</span>.where<span class="o">(</span>posts: <span class="o">{</span>title: <span class="s1">&#39;Post 1-1&#39;</span><span class="o">})</span>
</span><span class="line">  SQL <span class="o">(</span>0.2ms<span class="o">)</span>  SELECT <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;id&quot;</span> AS t0_r0, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;name&quot;</span> AS t0_r1, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;author&quot;</span> AS t0_r2, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;created_at&quot;</span> AS t0_r3, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;updated_at&quot;</span> AS t0_r4, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;id&quot;</span> AS t1_r0, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;title&quot;</span> AS t1_r1, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;created_at&quot;</span> AS t1_r2, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;updated_at&quot;</span> AS t1_r3, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> AS t1_r4 FROM <span class="s2">&quot;blogs&quot;</span> LEFT OUTER JOIN <span class="s2">&quot;posts&quot;</span> ON <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;id&quot;</span> WHERE <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;name&quot;</span> <span class="o">=</span> ? AND <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;title&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;name&quot;</span>, <span class="s2">&quot;Blog 1&quot;</span><span class="o">]</span>, <span class="o">[</span><span class="s2">&quot;title&quot;</span>, <span class="s2">&quot;Post 1-1&quot;</span><span class="o">]]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong><em><code>includes</code> or <code>eager_load</code></em></strong></p>

<p>Consider this snippet:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">&gt; Blog.includes<span class="o">(</span>:posts<span class="o">)</span>.each<span class="o">{</span>|blog| puts blog.posts.map<span class="o">(</span>&amp;:title<span class="o">)</span>.join<span class="o">(</span><span class="s1">&#39;,&#39;</span><span class="o">)</span> <span class="o">}</span>
</span><span class="line">  Blog Load <span class="o">(</span>0.3ms<span class="o">)</span>  SELECT <span class="s2">&quot;blogs&quot;</span>.* FROM <span class="s2">&quot;blogs&quot;</span>
</span><span class="line">  Post Load <span class="o">(</span>0.3ms<span class="o">)</span>  SELECT <span class="s2">&quot;posts&quot;</span>.* FROM <span class="s2">&quot;posts&quot;</span> WHERE <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> IN <span class="o">(</span>1, 2, 3<span class="o">)</span>
</span><span class="line">
</span><span class="line">&gt; Blog.eager_load<span class="o">(</span>:posts<span class="o">)</span>.each<span class="o">{</span>|blog| puts blog.posts.map<span class="o">(</span>&amp;:title<span class="o">)</span>.join<span class="o">(</span><span class="s1">&#39;,&#39;</span><span class="o">)</span> <span class="o">}</span>                                                                                                                    SQL <span class="o">(</span>0.9ms<span class="o">)</span>
</span><span class="line">  SELECT <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;id&quot;</span> AS t0_r0, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;name&quot;</span> AS t0_r1, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;author&quot;</span> AS t0_r2, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;created_at&quot;</span> AS t0_r3, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;updated_at&quot;</span> AS t0_r4, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;id&quot;</span> AS t1_r0, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;title&quot;</span> AS t1_r1, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;created_at&quot;</span> AS t1_r2, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;updated_at&quot;</span> AS t1_r3, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> AS t1_r4 FROM <span class="s2">&quot;blogs&quot;</span> LEFT OUTER JOIN <span class="s2">&quot;posts&quot;</span> ON <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;id&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Both expressions return the same result, so should we prefer two seperated queries by <code>includes</code> (also <code>preload</code>) or the LEFT OUTER JOINed query by <code>eager_load</code>?</p>

<p>There is a <a href="http://www.akitaonrails.com/2008/5/26/rolling-with-rails-2-1-the-first-full-tutorial-part-2">blog post</a> by Fabio Akita talks about the change of Rails 2.1 (see the section entitled “Optimized Eager Loading”). Here are some references:</p>

<blockquote>
  <p>For some situations, the monster outer join becomes slower than many smaller queries.
The bottom line is: generally it seems better to split a monster join into smaller ones, as you’ve seen in the above example. This avoid the cartesian product overload problem.</p>
</blockquote>

<p>Example for SQL data returned from LEFT OUTER JOIN query</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">sqlite&gt;  SELECT <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;id&quot;</span> AS t0_r0, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;name&quot;</span> AS t0_r1, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;author&quot;</span> AS t0_r2, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;created_at&quot;</span> AS t0_r3, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;updated_at&quot;</span> AS t0_r4, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;id&quot;</span> AS t1_r0, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;title&quot;</span> AS t1_r1, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;created_at&quot;</span> AS t1_r2, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;updated_at&quot;</span> AS t1_r3, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> AS t1_r4 FROM <span class="s2">&quot;blogs&quot;</span> LEFT OUTER JOIN <span class="s2">&quot;posts&quot;</span> ON <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;id&quot;</span>;
</span><span class="line">1|Blog 1|someone|2015-11-11 15:22:35.015095|2015-11-11 15:22:35.015095|1|Post 1-1|2015-11-11 15:22:35.053689|2015-11-11 15:22:35.053689|1
</span><span class="line">1|Blog 1|someone|2015-11-11 15:22:35.015095|2015-11-11 15:22:35.015095|2|Post 1-2|2015-11-11 15:22:35.058113|2015-11-11 15:22:35.058113|1
</span><span class="line">1|Blog 1|someone|2015-11-11 15:22:35.015095|2015-11-11 15:22:35.015095|3|Post 1-3|2015-11-11 15:22:35.062776|2015-11-11 15:22:35.062776|1
</span><span class="line">1|Blog 1|someone|2015-11-11 15:22:35.015095|2015-11-11 15:22:35.015095|4|Post 1-4|2015-11-11 15:22:35.065994|2015-11-11 15:22:35.065994|1
</span><span class="line">1|Blog 1|someone|2015-11-11 15:22:35.015095|2015-11-11 15:22:35.015095|5|Post 1-5|2015-11-11 15:22:35.069632|2015-11-11 15:22:35.069632|1
</span><span class="line">2|Blog 2|someone|2015-11-11 15:22:35.072871|2015-11-11 15:22:35.072871|6|Post 2-1|2015-11-11 15:22:35.078644|2015-11-11 15:22:35.078644|2
</span><span class="line">2|Blog 2|someone|2015-11-11 15:22:35.072871|2015-11-11 15:22:35.072871|7|Post 2-2|2015-11-11 15:22:35.081845|2015-11-11 15:22:35.081845|2
</span><span class="line">2|Blog 2|someone|2015-11-11 15:22:35.072871|2015-11-11 15:22:35.072871|8|Post 2-3|2015-11-11 15:22:35.084888|2015-11-11 15:22:35.084888|2
</span><span class="line">2|Blog 2|someone|2015-11-11 15:22:35.072871|2015-11-11 15:22:35.072871|9|Post 2-4|2015-11-11 15:22:35.087778|2015-11-11 15:22:35.087778|2
</span><span class="line">2|Blog 2|someone|2015-11-11 15:22:35.072871|2015-11-11 15:22:35.072871|10|Post 2-5|2015-11-11 15:22:35.090781|2015-11-11 15:22:35.090781|2
</span><span class="line">3|Blog 3|someone|2015-11-11 15:22:35.093902|2015-11-11 15:22:35.093902|11|Post 3-1|2015-11-11 15:22:35.097479|2015-11-11 15:22:35.097479|3
</span><span class="line">3|Blog 3|someone|2015-11-11 15:22:35.093902|2015-11-11 15:22:35.093902|12|Post 3-2|2015-11-11 15:22:35.103512|2015-11-11 15:22:35.103512|3
</span><span class="line">3|Blog 3|someone|2015-11-11 15:22:35.093902|2015-11-11 15:22:35.093902|13|Post 3-3|2015-11-11 15:22:35.108775|2015-11-11 15:22:35.108775|3
</span><span class="line">3|Blog 3|someone|2015-11-11 15:22:35.093902|2015-11-11 15:22:35.093902|14|Post 3-4|2015-11-11 15:22:35.112654|2015-11-11 15:22:35.112654|3
</span><span class="line">3|Blog 3|someone|2015-11-11 15:22:35.093902|2015-11-11 15:22:35.093902|15|Post 3-5|2015-11-11 15:22:35.117601|2015-11-11 15:22:35.117601|3
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <p>The longer and more complex the result set, the more this matters because the more objects Rails would have to deal with. Allocating and deallocating several hundreds or thousands of small duplicated objects is never a good deal.</p>
</blockquote>

<p>As <code>includes</code> can behave the same as <code>eager_load</code> in one case, but better in the other case. My conclusion is, <strong>prefer <code>includes</code> over <code>eager_load</code></strong>.</p>

<h3 id="references">references</h3>

<ul>
  <li>Works only with <code>includes</code>, makes <code>includes</code> behaves like <code>eager_load</code></li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">&gt; Blog.includes<span class="o">(</span>:posts<span class="o">)</span>.where<span class="o">(</span>name: <span class="s1">&#39;Blog 1&#39;</span><span class="o">)</span>.references<span class="o">(</span>:posts<span class="o">)</span>
</span><span class="line">  SQL <span class="o">(</span>0.2ms<span class="o">)</span>  SELECT <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;id&quot;</span> AS t0_r0, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;name&quot;</span> AS t0_r1, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;author&quot;</span> AS t0_r2, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;created_at&quot;</span> AS t0_r3, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;updated_at&quot;</span> AS t0_r4, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;id&quot;</span> AS t1_r0, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;title&quot;</span> AS t1_r1, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;created_at&quot;</span> AS t1_r2, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;updated_at&quot;</span> AS t1_r3, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> AS t1_r4 FROM <span class="s2">&quot;blogs&quot;</span> LEFT OUTER JOIN <span class="s2">&quot;posts&quot;</span> ON <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;id&quot;</span> WHERE <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;name&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;name&quot;</span>, <span class="s2">&quot;Blog 1&quot;</span><span class="o">]]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="joins">joins</h3>

<p><em>INNER JOIN</em>, compared to <code>eager_load</code> (<em>LEFT OUTER JOIN</em>).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">&gt; Blog.joins<span class="o">(</span>:posts<span class="o">)</span>
</span><span class="line">  Blog Load <span class="o">(</span>0.2ms<span class="o">)</span>  SELECT <span class="s2">&quot;blogs&quot;</span>.* FROM <span class="s2">&quot;blogs&quot;</span> INNER JOIN <span class="s2">&quot;posts&quot;</span> ON <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;id&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>compared to <code>eager_load</code></strong></p>

<p>Query by <code>joins</code> just returns the raw data, whereas the data from <code>eager_load</code> is filtered by Rails.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">&gt; Blog.joins<span class="o">(</span>:posts<span class="o">)</span>.count
</span><span class="line">   <span class="o">(</span>0.3ms<span class="o">)</span>  SELECT COUNT<span class="o">(</span>*<span class="o">)</span> FROM <span class="s2">&quot;blogs&quot;</span> INNER JOIN <span class="s2">&quot;posts&quot;</span> ON <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;id&quot;</span>
</span><span class="line"> <span class="o">=</span>&gt; 15
</span><span class="line">&gt; Blog.eager_load<span class="o">(</span>:posts<span class="o">)</span>.count
</span><span class="line">   <span class="o">(</span>0.4ms<span class="o">)</span>  SELECT COUNT<span class="o">(</span>DISTINCT <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;id&quot;</span><span class="o">)</span> FROM <span class="s2">&quot;blogs&quot;</span> LEFT OUTER JOIN <span class="s2">&quot;posts&quot;</span> ON <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;id&quot;</span>
</span><span class="line"> <span class="o">=</span>&gt; 3
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>So you need to take caution about iteration on <code>joins</code> query.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">&gt; Blog.joins<span class="o">(</span>:posts<span class="o">)</span>.each <span class="k">do</span> |blog|
</span><span class="line">&gt;   puts blog.posts.map<span class="o">(</span>&amp;:title<span class="o">)</span>.join<span class="o">(</span><span class="s1">&#39;, &#39;</span><span class="o">)</span>
</span><span class="line">&gt; end
</span><span class="line">  Blog Load <span class="o">(</span>0.2ms<span class="o">)</span>  SELECT <span class="s2">&quot;blogs&quot;</span>.* FROM <span class="s2">&quot;blogs&quot;</span> INNER JOIN <span class="s2">&quot;posts&quot;</span> ON <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;id&quot;</span>
</span><span class="line">  Post Load <span class="o">(</span>0.3ms<span class="o">)</span>  SELECT <span class="s2">&quot;posts&quot;</span>.* FROM <span class="s2">&quot;posts&quot;</span> WHERE <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;blog_id&quot;</span>, 1<span class="o">]]</span>
</span><span class="line">Post 1-1, Post 1-2, Post 1-3, Post 1-4, Post 1-5
</span><span class="line">  Post Load <span class="o">(</span>0.1ms<span class="o">)</span>  SELECT <span class="s2">&quot;posts&quot;</span>.* FROM <span class="s2">&quot;posts&quot;</span> WHERE <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;blog_id&quot;</span>, 1<span class="o">]]</span>
</span><span class="line">Post 1-1, Post 1-2, Post 1-3, Post 1-4, Post 1-5
</span><span class="line">  Post Load <span class="o">(</span>0.1ms<span class="o">)</span>  SELECT <span class="s2">&quot;posts&quot;</span>.* FROM <span class="s2">&quot;posts&quot;</span> WHERE <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;blog_id&quot;</span>, 1<span class="o">]]</span>
</span><span class="line">Post 1-1, Post 1-2, Post 1-3, Post 1-4, Post 1-5
</span><span class="line">  Post Load <span class="o">(</span>0.1ms<span class="o">)</span>  SELECT <span class="s2">&quot;posts&quot;</span>.* FROM <span class="s2">&quot;posts&quot;</span> WHERE <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;blog_id&quot;</span>, 1<span class="o">]]</span>
</span><span class="line">Post 1-1, Post 1-2, Post 1-3, Post 1-4, Post 1-5
</span><span class="line">  Post Load <span class="o">(</span>0.1ms<span class="o">)</span>  SELECT <span class="s2">&quot;posts&quot;</span>.* FROM <span class="s2">&quot;posts&quot;</span> WHERE <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;blog_id&quot;</span>, 1<span class="o">]]</span>
</span><span class="line">Post 1-1, Post 1-2, Post 1-3, Post 1-4, Post 1-5
</span><span class="line">  Post Load <span class="o">(</span>0.1ms<span class="o">)</span>  SELECT <span class="s2">&quot;posts&quot;</span>.* FROM <span class="s2">&quot;posts&quot;</span> WHERE <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;blog_id&quot;</span>, 2<span class="o">]]</span>
</span><span class="line">Post 2-1, Post 2-2, Post 2-3, Post 2-4, Post 2-5
</span><span class="line">  Post Load <span class="o">(</span>0.1ms<span class="o">)</span>  SELECT <span class="s2">&quot;posts&quot;</span>.* FROM <span class="s2">&quot;posts&quot;</span> WHERE <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;blog_id&quot;</span>, 2<span class="o">]]</span>
</span><span class="line">Post 2-1, Post 2-2, Post 2-3, Post 2-4, Post 2-5
</span><span class="line">  Post Load <span class="o">(</span>0.1ms<span class="o">)</span>  SELECT <span class="s2">&quot;posts&quot;</span>.* FROM <span class="s2">&quot;posts&quot;</span> WHERE <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;blog_id&quot;</span>, 2<span class="o">]]</span>
</span><span class="line">Post 2-1, Post 2-2, Post 2-3, Post 2-4, Post 2-5
</span><span class="line">  Post Load <span class="o">(</span>0.1ms<span class="o">)</span>  SELECT <span class="s2">&quot;posts&quot;</span>.* FROM <span class="s2">&quot;posts&quot;</span> WHERE <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;blog_id&quot;</span>, 2<span class="o">]]</span>
</span><span class="line">Post 2-1, Post 2-2, Post 2-3, Post 2-4, Post 2-5
</span><span class="line">  Post Load <span class="o">(</span>0.1ms<span class="o">)</span>  SELECT <span class="s2">&quot;posts&quot;</span>.* FROM <span class="s2">&quot;posts&quot;</span> WHERE <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;blog_id&quot;</span>, 2<span class="o">]]</span>
</span><span class="line">Post 2-1, Post 2-2, Post 2-3, Post 2-4, Post 2-5
</span><span class="line">  Post Load <span class="o">(</span>0.1ms<span class="o">)</span>  SELECT <span class="s2">&quot;posts&quot;</span>.* FROM <span class="s2">&quot;posts&quot;</span> WHERE <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;blog_id&quot;</span>, 3<span class="o">]]</span>
</span><span class="line">Post 3-1, Post 3-2, Post 3-3, Post 3-4, Post 3-5
</span><span class="line">  Post Load <span class="o">(</span>0.2ms<span class="o">)</span>  SELECT <span class="s2">&quot;posts&quot;</span>.* FROM <span class="s2">&quot;posts&quot;</span> WHERE <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;blog_id&quot;</span>, 3<span class="o">]]</span>
</span><span class="line">Post 3-1, Post 3-2, Post 3-3, Post 3-4, Post 3-5
</span><span class="line">  Post Load <span class="o">(</span>0.1ms<span class="o">)</span>  SELECT <span class="s2">&quot;posts&quot;</span>.* FROM <span class="s2">&quot;posts&quot;</span> WHERE <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;blog_id&quot;</span>, 3<span class="o">]]</span>
</span><span class="line">Post 3-1, Post 3-2, Post 3-3, Post 3-4, Post 3-5
</span><span class="line">  Post Load <span class="o">(</span>0.1ms<span class="o">)</span>  SELECT <span class="s2">&quot;posts&quot;</span>.* FROM <span class="s2">&quot;posts&quot;</span> WHERE <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;blog_id&quot;</span>, 3<span class="o">]]</span>
</span><span class="line">Post 3-1, Post 3-2, Post 3-3, Post 3-4, Post 3-5
</span><span class="line">  Post Load <span class="o">(</span>0.1ms<span class="o">)</span>  SELECT <span class="s2">&quot;posts&quot;</span>.* FROM <span class="s2">&quot;posts&quot;</span> WHERE <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;blog_id&quot;</span>, 3<span class="o">]]</span>
</span><span class="line">Post 3-1, Post 3-2, Post 3-3, Post 3-4, Post 3-5
</span></code></pre></td></tr></table></div></figure></notextile></div>

<hr />

<p><strong>Reference</strong></p>

<ul>
  <li><a href="http://blog.diatomenterprises.com/remove-n1-queries-in-your-ruby-on-rails-app/?utm_source=rubyweekly&amp;utm_medium=email">Remove N+1 queries in your Ruby on Rails app</a></li>
  <li><a href="http://stackoverflow.com/questions/1208636/rails-include-vs-joins?rq=1">Rails :include vs. :joins</a></li>
  <li><a href="http://blog.bigbinary.com/2013/07/01/preload-vs-eager-load-vs-joins-vs-includes.html">Preload, Eagerload, Includes and Joins</a></li>
  <li><a href="http://www.akitaonrails.com/2008/5/26/rolling-with-rails-2-1-the-first-full-tutorial-part-2">Rolling with Rails 2.1 - The First Full Tutorial - Part 2</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Types in Rails]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2015/08/10/data-types-in-rails/"/>
    <updated>2015-08-10T17:45:53+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2015/08/10/data-types-in-rails</id>
    <content type="html"><![CDATA[<p><strong><em>Have you ever got annoyed with data types when you are creating Rails migrations?</em></strong></p>

<p><strong><em>What’s the full list of data types in Rails? Does it differ from MySQL to PostgreSQL?</em></strong></p>

<p><strong><em>When adding a <code>title</code> field to <code>Post</code> table, should we use <code>title</code> as a <code>string</code> or <code>text</code>? Same answer with MySQL and PostgreSQL?</em></strong></p>

<p>You may want to check the Rails guides of <a href="http://edgeguides.rubyonrails.org/active_record_migrations.html">Active Record Migrations</a>, but all you get is disappointment because its lacking of essential information about data types.</p>

<p>Here is a quick entry about data types which I extracts from Rails API and Stack Overflow.</p>

<h2 id="general-data-type">General Data Type</h2>

<blockquote>
  <p>From <a href="http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-column">ActiveRecord::ConnectionAdapters::TableDefinition#column</a></p>
</blockquote>

<p>Instantiates a new column for the table. The type parameter is normally one of the migrations native types, which is one of the following: </p>

<ul>
  <li><code>:primary_key</code></li>
  <li><code>:string</code></li>
  <li><code>:text</code></li>
  <li><code>:integer</code></li>
  <li><code>:float</code></li>
  <li><code>:decimal</code></li>
  <li><code>:datetime</code></li>
  <li><code>:time</code></li>
  <li><code>:date</code></li>
  <li><code>:binary</code></li>
  <li><code>:boolean</code></li>
</ul>

<h2 id="specific-dbms-data-type">Specific DBMS Data Type</h2>

<blockquote>
  <p>From Psylone’s answer on <a href="http://stackoverflow.com/a/17279395/1331774">Where is the documentation page for ActiveRecord data types?</a></p>
</blockquote>

<p>Check the specific DB adaptor in source code.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>MySQL Data Types</span><a href="https://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb#L244-L256">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">NATIVE_DATABASE_TYPES</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">  <span class="ss">:primary_key</span> <span class="o">=&gt;</span> <span class="s2">&quot;int(11) auto_increment PRIMARY KEY&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="ss">:string</span>      <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;varchar&quot;</span><span class="p">,</span> <span class="ss">:limit</span> <span class="o">=&gt;</span> <span class="mi">255</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">:text</span>        <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;text&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">:integer</span>     <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;int&quot;</span><span class="p">,</span> <span class="ss">:limit</span> <span class="o">=&gt;</span> <span class="mi">4</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">:float</span>       <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;float&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">:decimal</span>     <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;decimal&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">:datetime</span>    <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;datetime&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">:time</span>        <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;time&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">:date</span>        <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;date&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">:binary</span>      <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;blob&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">:boolean</span>     <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;tinyint&quot;</span><span class="p">,</span> <span class="ss">:limit</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>PostgreSQL Data Types</span><a href="https://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb#L77-L112">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">NATIVE_DATABASE_TYPES</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">  <span class="n">primary_key</span><span class="p">:</span> <span class="s2">&quot;serial primary key&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="ss">bigserial</span><span class="p">:</span> <span class="s2">&quot;bigserial&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="ss">string</span><span class="p">:</span>      <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;character varying&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">text</span><span class="p">:</span>        <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;text&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">integer</span><span class="p">:</span>     <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;integer&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">float</span><span class="p">:</span>       <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;float&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">decimal</span><span class="p">:</span>     <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;decimal&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">datetime</span><span class="p">:</span>    <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;timestamp&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">time</span><span class="p">:</span>        <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;time&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">date</span><span class="p">:</span>        <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;date&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">daterange</span><span class="p">:</span>   <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;daterange&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">numrange</span><span class="p">:</span>    <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;numrange&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">tsrange</span><span class="p">:</span>     <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;tsrange&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">tstzrange</span><span class="p">:</span>   <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;tstzrange&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">int4range</span><span class="p">:</span>   <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;int4range&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">int8range</span><span class="p">:</span>   <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;int8range&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">binary</span><span class="p">:</span>      <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;bytea&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">boolean</span><span class="p">:</span>     <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;boolean&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">bigint</span><span class="p">:</span>      <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;bigint&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">xml</span><span class="p">:</span>         <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;xml&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">tsvector</span><span class="p">:</span>    <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;tsvector&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">hstore</span><span class="p">:</span>      <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;hstore&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">inet</span><span class="p">:</span>        <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;inet&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">cidr</span><span class="p">:</span>        <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;cidr&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">macaddr</span><span class="p">:</span>     <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;macaddr&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">uuid</span><span class="p">:</span>        <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;uuid&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">json</span><span class="p">:</span>        <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;json&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">jsonb</span><span class="p">:</span>       <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;jsonb&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">ltree</span><span class="p">:</span>       <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;ltree&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">citext</span><span class="p">:</span>      <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;citext&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">point</span><span class="p">:</span>       <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;point&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">bit</span><span class="p">:</span>         <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;bit&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="n">bit_varying</span><span class="p">:</span> <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;bit varying&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">money</span><span class="p">:</span>       <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;money&quot;</span> <span class="p">},</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Or, use <code>ActiveRecord::Base.connection.native_database_types.keys</code> to get all valid data types based on your database adaptor.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># PostgreSQL</span>
</span><span class="line"><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">native_database_types</span><span class="o">.</span><span class="n">keys</span>
</span><span class="line"><span class="o">[</span>
</span><span class="line">  <span class="o">[</span> <span class="mi">0</span><span class="o">]</span> <span class="ss">:primary_key</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span> <span class="mi">1</span><span class="o">]</span> <span class="ss">:bigserial</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span> <span class="mi">2</span><span class="o">]</span> <span class="ss">:string</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span> <span class="mi">3</span><span class="o">]</span> <span class="ss">:text</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span> <span class="mi">4</span><span class="o">]</span> <span class="ss">:integer</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span> <span class="mi">5</span><span class="o">]</span> <span class="ss">:float</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span> <span class="mi">6</span><span class="o">]</span> <span class="ss">:decimal</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span> <span class="mi">7</span><span class="o">]</span> <span class="ss">:datetime</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span> <span class="mi">8</span><span class="o">]</span> <span class="ss">:time</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span> <span class="mi">9</span><span class="o">]</span> <span class="ss">:date</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">10</span><span class="o">]</span> <span class="ss">:daterange</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">11</span><span class="o">]</span> <span class="ss">:numrange</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">12</span><span class="o">]</span> <span class="ss">:tsrange</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">13</span><span class="o">]</span> <span class="ss">:tstzrange</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">14</span><span class="o">]</span> <span class="ss">:int4range</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">15</span><span class="o">]</span> <span class="ss">:int8range</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">16</span><span class="o">]</span> <span class="ss">:binary</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">17</span><span class="o">]</span> <span class="ss">:boolean</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">18</span><span class="o">]</span> <span class="ss">:bigint</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">19</span><span class="o">]</span> <span class="ss">:xml</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">20</span><span class="o">]</span> <span class="ss">:tsvector</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">21</span><span class="o">]</span> <span class="ss">:hstore</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">22</span><span class="o">]</span> <span class="ss">:inet</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">23</span><span class="o">]</span> <span class="ss">:cidr</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">24</span><span class="o">]</span> <span class="ss">:macaddr</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">25</span><span class="o">]</span> <span class="ss">:uuid</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">26</span><span class="o">]</span> <span class="ss">:json</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">27</span><span class="o">]</span> <span class="ss">:jsonb</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">28</span><span class="o">]</span> <span class="ss">:ltree</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">29</span><span class="o">]</span> <span class="ss">:citext</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">30</span><span class="o">]</span> <span class="ss">:point</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">31</span><span class="o">]</span> <span class="ss">:bit</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">32</span><span class="o">]</span> <span class="ss">:bit_varying</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">33</span><span class="o">]</span> <span class="ss">:money</span>
</span><span class="line"><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>There is another guide about <a href="http://edgeguides.rubyonrails.org/active_record_postgresql.html">Active Record and PostgreSQL</a>.</p>

<blockquote>
  <p>From gotqn’s answer on <a href="http://stackoverflow.com/a/25702629/1331774">Rails 4 datatypes?</a></p>
</blockquote>

<p>Rails data types mapping to different DB data types:</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/data_types_1.png" alt="Data Types 1" />
<img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/data_types_2.png" alt="Data Types 2" /></p>

<h2 id="data-type-shortcut-when-generating-model">Data Type Shortcut When Generating Model</h2>

<blockquote>
  <p>From tomascharad’s answer on <a href="http://stackoverflow.com/questions/17918117/rails-4-datatypes">Rails 4 datatypes?</a></p>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>rails generate model -h
</span><span class="line">
</span><span class="line">Available field types:
</span><span class="line">
</span><span class="line">    Just after the field name you can specify a <span class="nb">type </span>like text or boolean.
</span><span class="line">    It will generate the column with the associated SQL type. For instance:
</span><span class="line">
</span><span class="line">        <span class="sb">`</span>rails generate model post title:string body:text<span class="sb">`</span>
</span><span class="line">
</span><span class="line">    will generate a title column with a varchar <span class="nb">type </span>and a body column with a text
</span><span class="line">    type. If no <span class="nb">type </span>is specified the string <span class="nb">type </span>will be used by default.
</span><span class="line">    You can use the following types:
</span><span class="line">
</span><span class="line">        integer
</span><span class="line">        primary_key
</span><span class="line">        decimal
</span><span class="line">        float
</span><span class="line">        boolean
</span><span class="line">        binary
</span><span class="line">        string
</span><span class="line">        text
</span><span class="line">        date
</span><span class="line">        <span class="nb">time</span>
</span><span class="line"><span class="nb">        </span>datetime
</span><span class="line">
</span><span class="line">    You can also consider <span class="sb">`</span>references<span class="sb">`</span> as a kind of type. For instance, <span class="k">if </span>you run:
</span><span class="line">
</span><span class="line">        <span class="sb">`</span>rails generate model photo title:string album:references<span class="sb">`</span>
</span><span class="line">
</span><span class="line">    It will generate an <span class="sb">`</span>album_id<span class="sb">`</span> column. You should generate these kinds of fields when
</span><span class="line">    you will use a <span class="sb">`</span>belongs_to<span class="sb">`</span> association, <span class="k">for </span>instance. <span class="sb">`</span>references<span class="sb">`</span> also supports
</span><span class="line">    polymorphism, you can <span class="nb">enable </span>polymorphism like this:
</span><span class="line">
</span><span class="line">        <span class="sb">`</span>rails generate model product supplier:references<span class="o">{</span>polymorphic<span class="o">}</span><span class="sb">`</span>
</span><span class="line">
</span><span class="line">    For integer, string, text and binary fields, an integer in curly braces will
</span><span class="line">    be <span class="nb">set </span>as the limit:
</span><span class="line">
</span><span class="line">        <span class="sb">`</span>rails generate model user pseudo:string<span class="o">{</span>30<span class="o">}</span><span class="sb">`</span>
</span><span class="line">
</span><span class="line">    For decimal, two integers separated by a comma in curly braces will be used
</span><span class="line">    <span class="k">for </span>precision and scale:
</span><span class="line">
</span><span class="line">        <span class="sb">`</span>rails generate model product <span class="s1">&#39;price:decimal{10,2}&#39;</span><span class="sb">`</span>
</span><span class="line">
</span><span class="line">    You can add a <span class="sb">`</span>:uniq<span class="sb">`</span> or <span class="sb">`</span>:index<span class="sb">`</span> suffix <span class="k">for </span>unique or standard indexes
</span><span class="line">    respectively:
</span><span class="line">
</span><span class="line">        <span class="sb">`</span>rails generate model user pseudo:string:uniq<span class="sb">`</span>
</span><span class="line">        <span class="sb">`</span>rails generate model user pseudo:string:index<span class="sb">`</span>
</span><span class="line">
</span><span class="line">    You can combine any single curly brace option with the index options:
</span><span class="line">
</span><span class="line">        <span class="sb">`</span>rails generate model user username:string<span class="o">{</span>30<span class="o">}</span>:uniq<span class="sb">`</span>
</span><span class="line">        <span class="sb">`</span>rails generate model product supplier:references<span class="o">{</span>polymorphic<span class="o">}</span>:index<span class="sb">`</span>
</span><span class="line">
</span><span class="line">    If you require a <span class="sb">`</span>password_digest<span class="sb">`</span> string column <span class="k">for </span>use with
</span><span class="line">    has_secure_password, you should specify <span class="sb">`</span>password:digest<span class="sb">`</span>:
</span><span class="line">
</span><span class="line">        <span class="sb">`</span>rails generate model user password:digest<span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="should-you-choose-string-or-text">Should you choose string or text?</h2>

<p>In <strong>MySQL</strong></p>

<blockquote>
  <p>From tjeezy’s answer and Omar Qureshi’s comment on <a href="http://stackoverflow.com/a/3354452/1331774">Difference between string and text in rails?</a></p>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">:string |                   VARCHAR                | :limit <span class="o">=</span>&gt; 1 to 255 <span class="o">(</span><span class="nv">default</span> <span class="o">=</span> 255<span class="o">)</span>
</span><span class="line">:text   | TINYTEXT, TEXT, MEDIUMTEXT, or LONGTEXT2 | :limit <span class="o">=</span>&gt; 1 to 4294967296 <span class="o">(</span><span class="nv">default</span> <span class="o">=</span> 65536<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>So you’d better specify the <code>:limit</code> as a reminder to yourself that there is a limit and you should have a validation in the model to ensure that the limit is not exceeded.</p>

<p>And, you can have indexes on <code>varchars</code>, you cannot on <code>text</code>.</p>

<p>In <strong>Postgresql</strong></p>

<blockquote>
  <p>From PostgreSQL Manual <a href="http://www.postgresql.org/docs/9.3/interactive/datatype-character.html">Character Types</a></p>
</blockquote>

<p>There is no performance difference among these three types, apart from increased storage space when using the blank-padded type, and a few extra CPU cycles to check the length when storing into a length-constrained column. While <code>character(n)</code> has performance advantages in some other database systems, there is no such advantage in PostgreSQL; in fact <code>character(n)</code> is usually the slowest of the three because of its additional storage costs. In most situations <code>text</code> or <code>character</code> varying should be used instead.</p>

<blockquote>
  <p>From Omar Qureshi’s answer on <a href="http://stackoverflow.com/questions/3354330/difference-between-string-and-text-in-rails">Difference between string and text in rails?</a></p>
</blockquote>

<p>If you are using postgres use <code>text</code> wherever you can, unless you have a size constraint since there is no performance penalty for <code>text</code> vs <code>varchar</code>.</p>

<blockquote>
  <p>From mu is too short’s answer on <a href="http://stackoverflow.com/questions/8129776/rails-3-postgres-how-long-is-a-string-if-you-dont-apply-limit-in-schema">rails 3/postgres - how long is a string if you don’t apply :limit in schema</a> and <a href="http://stackoverflow.com/questions/8694273/changing-a-column-type-to-longer-strings-in-rails/8694483#8694483">Changing a column type to longer strings in rails</a></p>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">:string | character varying <span class="o">(</span>255<span class="o">)</span>
</span><span class="line">:text   | text
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>There’s no reason to use <code>:string</code> (AKA <code>varchar</code>) at all, the database treats <code>text</code> and <code>varchar(n)</code> the same internally except for the extra length constraints for <code>varchar(n)</code>; you should only use <code>varchar(n)</code> (AKA <code>:string</code>) if you have an external constrain on the column size.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Float Point Arithmetic and Truncation]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2015/04/11/ruby-float-point-arithmetic-and-truncation/"/>
    <updated>2015-04-11T21:17:56+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2015/04/11/ruby-float-point-arithmetic-and-truncation</id>
    <content type="html"><![CDATA[<p><strong><em>How to keep precision on float point arithmetic?</em></strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="mi">190000</span> <span class="o">*</span> <span class="p">(</span> <span class="mi">783</span><span class="o">.</span><span class="mi">0</span> <span class="o">/</span> <span class="mi">10000</span> <span class="p">)</span>
</span><span class="line"><span class="c1"># =&gt; 14876.999999999998</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span> <span class="mi">190000</span> <span class="o">*</span> <span class="mi">783</span><span class="o">.</span><span class="mi">0</span> <span class="p">)</span> <span class="o">/</span> <span class="mi">10000</span>
</span><span class="line"><span class="c1"># =&gt; 14877.0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong><em>How to make a 2 point truncation instead of rounding?</em></strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="mi">195555</span> <span class="o">*</span> <span class="mi">0</span><span class="o">.</span><span class="mo">07</span><span class="mi">83</span>
</span><span class="line"><span class="c1"># =&gt; 15311.956499999998</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span> <span class="mi">195555</span> <span class="o">*</span> <span class="mi">0</span><span class="o">.</span><span class="mo">07</span><span class="mi">83</span> <span class="p">)</span><span class="o">.</span><span class="n">round</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line"><span class="c1"># =&gt; 15311.96</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="plain-solution">Plain Solution</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># Public: A calculator aims handling Float operation precision and</span>
</span><span class="line"><span class="c1"># saving the result with truncated 2 point Float.</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1"># Examples</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1">#   190000 * 0.0783</span>
</span><span class="line"><span class="c1">#   # =&gt; 14876.999999999998</span>
</span><span class="line"><span class="c1">#   190000 * 783 / 10000</span>
</span><span class="line"><span class="c1">#   # =&gt; 14877</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1">#   cal = RateCalculator.new(190000, 0.0783)</span>
</span><span class="line"><span class="c1">#   cal.run</span>
</span><span class="line"><span class="c1">#   # =&gt; 14877.0</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1">#   195555 * 0.0783</span>
</span><span class="line"><span class="c1">#   # =&gt; 15311.956499999998</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1">#   cal = RateCalculator.new(195555, 0.0783)</span>
</span><span class="line"><span class="c1">#   # =&gt; 15311.95</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1"># Returns a Float</span>
</span><span class="line"><span class="k">class</span> <span class="nc">RateCalculator</span>
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:base</span><span class="p">,</span> <span class="ss">:rate</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># Internal: Handles 6 point rate.</span>
</span><span class="line">  <span class="no">MAGNIFIER</span> <span class="o">=</span> <span class="mi">1000000</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># Public: Initialization</span>
</span><span class="line">  <span class="c1">#</span>
</span><span class="line">  <span class="c1"># base - Integer</span>
</span><span class="line">  <span class="c1"># rate - Numeric</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="n">rate</span><span class="p">)</span>
</span><span class="line">    <span class="k">raise</span> <span class="s2">&quot;#initialize: &lt;base&gt; needs to be Integer&quot;</span> <span class="k">unless</span> <span class="n">base</span><span class="o">.</span><span class="n">is_a?</span> <span class="nb">Integer</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@base</span> <span class="o">=</span> <span class="n">base</span>
</span><span class="line">    <span class="vi">@rate</span> <span class="o">=</span> <span class="n">rate</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">run</span>
</span><span class="line">    <span class="n">truncate_2_point</span> <span class="no">MAGNIFIER</span><span class="o">*</span><span class="n">rate</span><span class="o">*</span><span class="n">base</span><span class="o">/</span><span class="no">MAGNIFIER</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kp">private</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">truncate_2_point</span><span class="p">(</span><span class="n">float</span><span class="p">)</span>
</span><span class="line">      <span class="p">(</span><span class="n">float</span> <span class="o">*</span> <span class="mi">100</span><span class="p">)</span><span class="o">.</span><span class="n">to_i</span> <span class="o">/</span> <span class="mi">100</span><span class="o">.</span><span class="mi">0</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It works, but with so many worries about the unknown conditions.</p>

<h3 id="bigdecimal">BigDecimal</h3>

<p>First, what the hell happens on the precision of float point arithmetic?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="mi">0</span><span class="o">.</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">0</span><span class="o">.</span><span class="mi">2</span>
</span><span class="line"><span class="c1"># =&gt; 0.30000000000000004</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>According to <a href="http://floating-point-gui.de/">What Every Programmer Should Know About Floating-Point Arithmetic</a>, the answer is the binary fraction issue.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/binary_fraction.png" alt="Binary Fraction" /></p>

<blockquote>
  <p>Specifically, binary can only represent those numbers as a finite fraction where the denominator is a power of 2. Unfortunately, this does not include most of the numbers that can be represented as finite fraction in base 10, like 0.1.</p>
</blockquote>

<p>To get through the precision problem, Ruby provides the <strong>Arbitrary-Precision Decimal</strong> shipped by <code>BigDecimal</code>. And so sweet, <code>BigDecimal</code> supports several rounding modes, including <code>:truncate</code>.</p>

<p>Here is the final solution.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;bigdecimal&#39;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Public: A calculator aims handling arithmatic precision and</span>
</span><span class="line"><span class="c1"># saving the result with 2 points truncated decimal.</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1"># Examples</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1">#   190000 * 0.0783</span>
</span><span class="line"><span class="c1">#   # =&gt; 14876.999999999998</span>
</span><span class="line"><span class="c1">#   190000 * 783 / 10000</span>
</span><span class="line"><span class="c1">#   # =&gt; 14877</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1">#   cal = RateCalculator.new(190000, 0.0783).run</span>
</span><span class="line"><span class="c1">#   # =&gt; 14877.0</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1">#   195555 * 0.0783</span>
</span><span class="line"><span class="c1">#   # =&gt; 15311.956499999998</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1">#   cal = RateCalculator.new(195555, 0.0783).run</span>
</span><span class="line"><span class="c1">#   # =&gt; 15311.95</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1"># Returns a BigDecimal</span>
</span><span class="line"><span class="k">class</span> <span class="nc">RateCalculator</span>
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:base</span><span class="p">,</span> <span class="ss">:rate</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="n">rate</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@base</span> <span class="o">=</span> <span class="no">BigDecimal</span><span class="p">(</span><span class="n">base</span><span class="o">.</span><span class="n">to_s</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@rate</span> <span class="o">=</span> <span class="no">BigDecimal</span><span class="p">(</span><span class="n">rate</span><span class="o">.</span><span class="n">to_s</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">run</span>
</span><span class="line">    <span class="no">BigDecimal</span><span class="o">.</span><span class="n">save_rounding_mode</span> <span class="k">do</span>
</span><span class="line">      <span class="no">BigDecimal</span><span class="o">.</span><span class="n">mode</span><span class="p">(</span><span class="ss">BigDecimal</span><span class="p">:</span><span class="ss">:ROUND_MODE</span><span class="p">,</span> <span class="ss">:truncate</span><span class="p">)</span>
</span><span class="line">      <span class="p">(</span><span class="n">base</span><span class="o">*</span><span class="n">rate</span><span class="p">)</span><span class="o">.</span><span class="n">round</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="reference">Reference</h4>

<ul>
  <li><a href="http://floating-point-gui.de/">Float Point Guide</a></li>
  <li><a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/bigdecimal/rdoc/BigDecimal.html">Ruby Doc BigDecimal</a></li>
  <li><a href="http://makandracards.com/makandra/1178-bigdecimal-arithmetic-in-ruby">BigDecimal arithmetic in Ruby</a></li>
  <li><a href="http://makandracards.com/makandra/1505-invoices-how-to-properly-round-and-calculate-totals">Invoices: How to properly round and calculate totals</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Trick: Local Assignment over Method Sending]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2015/03/30/ruby-trick-local-assignment-over-method-sending/"/>
    <updated>2015-03-30T16:24:59+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2015/03/30/ruby-trick-local-assignment-over-method-sending</id>
    <content type="html"><![CDATA[<p>There is a weird situation I haven’t noticed before:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Counter</span>
</span><span class="line">  <span class="kp">attr_accessor</span> <span class="ss">:processed</span><span class="p">,</span> <span class="ss">:processed_names</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="vi">@processed</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">    <span class="vi">@processed_names</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">foo</span>
</span><span class="line">    <span class="n">processed</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">bar</span>
</span><span class="line">    <span class="n">processed_names</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;a&#39;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">w</span> <span class="o">=</span> <span class="no">Counter</span><span class="o">.</span><span class="n">new</span><span class="p">;</span>
</span><span class="line"><span class="n">w</span><span class="o">.</span><span class="n">foo</span> <span class="c1"># =&gt; NoMethodError: undefined method `+&#39; for nil:NilClass`</span>
</span><span class="line"><span class="n">w</span><span class="o">.</span><span class="n">bar</span> <span class="c1"># =&gt; [&#39;a&#39;]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong><em>Why the hell?</em></strong></p>

<p><strong>Local assignment always has precedence over method sending</strong>. Assignment happened in <code>w.foo</code>, which not in <code>w.bar</code>.</p>

<p>Check this one:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Person</span>
</span><span class="line">  <span class="kp">attr_accessor</span> <span class="ss">:name</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">foo</span>
</span><span class="line">    <span class="nb">name</span> <span class="o">=</span> <span class="s1">&#39;John&#39;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">t</span> <span class="o">=</span> <span class="no">Tao</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="n">t</span><span class="o">.</span><span class="n">name</span> <span class="c1"># =&gt; nil</span>
</span><span class="line"><span class="n">t</span><span class="o">.</span><span class="n">foo</span>  <span class="c1"># =&gt; &#39;John&#39;</span>
</span><span class="line"><span class="n">t</span><span class="o">.</span><span class="n">name</span> <span class="c1"># =&gt; nil</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>name = 'John'</code> only means a definition of a local variable, which won’t send <code>=</code> to <code>name</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Annoying OAuth Issue on HTTP URL Encoding]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2015/03/04/annoying-oauth-issue-on-http-url-encoding/"/>
    <updated>2015-03-04T17:46:12+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2015/03/04/annoying-oauth-issue-on-http-url-encoding</id>
    <content type="html"><![CDATA[<p>I was developing and maintaining an OAuth service using <code>pelle/oauth-plugin</code> gem. Other than the standard token exchange process, there is a need to authenticate by signature based on user’s passed in parameters. As custom parameters can include custom charactors, here comes the space encoding issue.</p>

<ul>
  <li>Why the service approves my test script by passing <code>name=wendi</code> but refuses <code>name=Di Wen</code> ?</li>
  <li>Why the <code>CGI.escape('Di Wen')</code> outputs <code>"Di+Wen"</code>, while <code>URI.escape('Di Wen')</code> outpus <code>Di%20Wen</code> ?</li>
</ul>

<p>This is definitely an annoying issue. I’ve run into it sometime before, but today I need to make a clear mind.</p>

<p><strong>What’s the HTTP standard way to encode space in URL?</strong></p>

<p><code>%20</code>, according to the <a href="http://www.w3schools.com/tags/ref_urlencode.asp">HTML URL Encoding Reference</a> by W3schools.</p>

<p><strong>Why the hell some libary encode space to <code>+</code>?</strong></p>

<p>Because of the <code>application/x-www-form-urlencoded</code> <em>MIME</em> type.</p>

<p>Refered to Wikipedia, <a href="http://en.wikipedia.org/wiki/Percent-encoding#The_application.2Fx-www-form-urlencoded_type">Percent Encoding</a></p>

<blockquote>
  <p>The encoding used by default is based on a very early version of the general URI percent-encoding rules, with a number of modifications such as newline normalization and replacing spaces with “+” instead of “%20”. The Internet media type of data encoded this way is application/x-www-form-urlencoded, and it is currently defined (still in a very outdated manner) in the HTML and XForms specifications.</p>
</blockquote>

<p>And <a href="http://stackoverflow.com/users/634419/anomie">Anomie</a> has a summary <a href="http://stackoverflow.com/a/5433216/1331774">answer</a>,</p>

<blockquote>
  <p>The query string format is actually a different but related encoding, application/x-www-form-urlencoded, defined in RFC 1866 along with HTML 2.0. It was based on RFC 1738, but specified that spaces (not all whitespace, just the character with ASCII code 0x20) are replaced by ‘+’ and that line breaks are to be encoded as CRLF (i.e. %0D%0A). The former is likely because that saves 2 bytes for a very common character in form submissions at the expense of using an extra 2 bytes for a much less common character, and the latter is to avoid problems when transferring between systems using different end-of-line codings. Non-ASCII characters were left unconsidered.</p>
</blockquote>

<blockquote>
  <p>UTF-8 coding in URIs came over a decade later, in RFC 3986, although individual protocols may have specified this or another encoding of non-ASCII characters earlier. To maintain backwards compatibility, all UTF-8 octets must be percent-encoded.</p>
</blockquote>

<p><strong>What’s the Rule of Thumb in Ruby world?</strong></p>

<p><a href="http://stackoverflow.com/users/409475/ernest">Ernest</a> makes a <a href="http://stackoverflow.com/questions/2824126/whats-the-difference-between-uri-escape-and-cgi-escape">specification</a> about the escape methods over <code>URI</code>, <code>CGI</code>, and <code>Addressable</code>, and gives a conclusion</p>

<blockquote>
  <ul>
    <li>Do not use URI.escape or similar</li>
    <li>Use CGI::escape if you only need form escape</li>
    <li>If you need to work with URIs, use Addressable, it offers url encoding, form encoding and normalizes URLs.</li>
  </ul>
</blockquote>

<p><strong>So, what’s the solution to my question?</strong></p>

<p>The <code>pelle/oauth-plugin</code> gem failed my test script with <code>CGI</code> by</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">CGI</span><span class="o">.</span><span class="n">escape</span> <span class="s1">&#39;Di Wen&#39;</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="s2">&quot;Di+Wen&quot;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># expecting &quot;Di%2BWen&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Also failed <code>URI</code> and <code>Addressable</code> by</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">URI</span><span class="o">.</span><span class="n">escape</span> <span class="s1">&#39;Di@Wen&#39;</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="s2">&quot;Di@Wen&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="ss">Addressable</span><span class="p">:</span><span class="ss">:URI</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="s2">&quot;Di@Wen&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">normalize</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="c1">#&lt;Addressable::URI:0x81f58abc URI:Di@Wen&gt;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># expecting &quot;Di%40Wen&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>After some digging into the gem, I’ve found its encoding method</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># Escape +value+ by URL encoding all non-reserved character.</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1"># See Also: {OAuth core spec version 1.0, section 5.1}[http://oauth.net/core/1.0#rfc.section.5.1]</span>
</span><span class="line"><span class="k">def</span> <span class="nf">escape</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class="line">  <span class="ss">URI</span><span class="p">:</span><span class="ss">:escape</span><span class="p">(</span><span class="n">value</span><span class="o">.</span><span class="n">to_s</span><span class="p">,</span> <span class="ss">OAuth</span><span class="p">:</span><span class="ss">:RESERVED_CHARACTERS</span><span class="p">)</span>
</span><span class="line"><span class="k">rescue</span> <span class="no">ArgumentError</span>
</span><span class="line">  <span class="ss">URI</span><span class="p">:</span><span class="ss">:escape</span><span class="p">(</span><span class="n">value</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">force_encoding</span><span class="p">(</span><span class="ss">Encoding</span><span class="p">:</span><span class="ss">:UTF_8</span><span class="p">),</span> <span class="ss">OAuth</span><span class="p">:</span><span class="ss">:RESERVED_CHARACTERS</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="ss">OAuth</span><span class="p">:</span><span class="ss">:RESERVED_CHARACTERS</span> <span class="c1"># =&gt; /[^a-zA-Z0-9\-\.\_\~]/</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Following the comment, comes along the OAuth standard specification about <a href="http://oauth.net/core/1.0/#rfc.section.5.1">Parameter Encoding</a></p>

<blockquote>
  <p>All parameter names and values are escaped using the [RFC3986] percent-encoding (%xx) mechanism. Characters not in the unreserved character set ([RFC3986] section 2.3) MUST be encoded. Characters in the unreserved character set MUST NOT be encoded. Hexadecimal characters in encodings MUST be upper case. Text names and values MUST be encoded as UTF-8 octets before percent-encoding them per [RFC3629].</p>
</blockquote>

<blockquote>
  <pre><code>unreserved = ALPHA, DIGIT, '-', '.', '_', '~'
</code></pre>
</blockquote>

<p>Under the standard spec and refering to the gem’s implementation, I’ve finally solved my stupid issue.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Great Expectations 2015]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2015/02/27/great-expectations-2015/"/>
    <updated>2015-02-27T12:52:00+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2015/02/27/great-expectations-2015</id>
    <content type="html"><![CDATA[<h2 id="target">Target</h2>

<p><strong>Algorithm</strong></p>

<ul>
  <li>Reading Algorithms 4th thoroughly.</li>
  <li>Algorithm course on Coursera.</li>
</ul>

<p><strong>English</strong></p>

<ul>
  <li>Words, need an efficient way to study new and review regularly</li>
  <li>Listening, keep on Friends or podcast.</li>
</ul>

<p>Key point is to make it a regular stuff.</p>

<p><strong>Source Code Reading</strong></p>

<ul>
  <li>Find or create a written, detailed, repeatable process to follow.</li>
  <li><a href="http://www.justinweiss.com/blog/2015/02/03/finding-your-way-around-a-new-rails-project/?utm_source=Weissblog+Subscribers&amp;utm_campaign=80c8a475a1-The_best_way_to_fight_being_overwhelmed2_5_2015&amp;utm_medium=email&amp;utm_term=0_2494b7d197-80c8a475a1-120246897">Finding Your Way Around a New Rails Project</a></li>
</ul>

<h2 id="habit">Habit</h2>

<p><em>#lift.do</em></p>

<p><strong>Get Up Early</strong></p>

<ul>
  <li>Review yesterday <em>#dayone</em></li>
  <li>Schedule on new day <em>#sunrise</em> <em>#omnifocus</em></li>
</ul>

<p><strong>Record Daily Life</strong></p>

<ul>
  <li>Knowledge <em>#evernote</em></li>
  <li>Life trivia <em>#dayone</em></li>
  <li>Financial status, monthly</li>
</ul>

<p><strong>One Hour Tech Reading</strong></p>

<p>Need to keep quiet and focused, books or source code.</p>

<h2 id="workday">Workday</h2>

<blockquote>
  <p>What should be a workday like?</p>
</blockquote>

<ul>
  <li>08:00 Get up, do the reviewing and scheduling.</li>
  <li>10:00 Company stuff I</li>
  <li>12:00 Lunch</li>
  <li>13:00 Company stuff II</li>
  <li>16:00 Tech read</li>
  <li>17:00 Email subscriptions and browsing </li>
  <li>18:00 Company stuff IIII</li>
  <li>20:00 Back home</li>
  <li>22:30 Dear Diary</li>
  <li>23:00 Go to bed and random read.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Review] Guidance from POODR]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2015/01/29/guidance-from-poodr/"/>
    <updated>2015-01-29T15:20:13+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2015/01/29/guidance-from-poodr</id>
    <content type="html"><![CDATA[<table class="custom">
  <tbody>
    <tr>
      <td><strong>Book</strong></td>
      <td>Practical Object Oriented Design in Ruby</td>
    </tr>
    <tr>
      <td><strong>Author</strong></td>
      <td>Sandi Metz</td>
    </tr>
    <tr>
      <td><strong>Link</strong></td>
      <td><a href="http://www.poodr.com/">www.poodr.com</a></td>
    </tr>
  </tbody>
</table>

<ul id="markdown-toc">
  <li><a href="#object-oriented-design">Object-Oriented Design</a>    <ul>
      <li><a href="#the-tools-of-design">The Tools of Design</a>        <ul>
          <li><a href="#design-principles">Design Principles</a></li>
          <li><a href="#design-patterns">Design Patterns</a></li>
        </ul>
      </li>
      <li><a href="#the-act-of-design">The Act of Design</a>        <ul>
          <li><a href="#how-design-fails">How Design Fails</a></li>
          <li><a href="#when-to-design">When to Design</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#guidance">Guidance</a>    <ul>
      <li><a href="#designing-classes-with-a-single-responsibility">Designing Classes with a Single Responsibility</a>        <ul>
          <li><a href="#depend-on-behavior-not-data">Depend on Behavior, Not Data</a></li>
          <li><a href="#enforce-single-responsibility-everywhere">Enforce Single Responsibility Everywhere</a></li>
        </ul>
      </li>
      <li><a href="#manage-dependencies">Manage Dependencies</a>        <ul>
          <li><a href="#inject-dependencies">Inject Dependencies</a></li>
          <li><a href="#isolate-dependencies">Isolate Dependencies</a></li>
          <li><a href="#remove-argument-order-dependencies">Remove Argument-Order Dependencies</a></li>
          <li><a href="#managing-dependency-direction">Managing Dependency Direction</a></li>
        </ul>
      </li>
      <li><a href="#creating-flexible-interfaces">Creating Flexible Interfaces</a>        <ul>
          <li><a href="#finding-the-public-interface">Finding the Public Interface</a>            <ul>
              <li><a href="#focus-messages-between-domain-objects">Focus Messages between Domain Objects</a></li>
              <li><a href="#use-sequence-diagrams">Use Sequence Diagrams</a></li>
              <li><a href="#asking-for-what-instead-of-telling-how">Asking for “What” Instead of Telling “How”</a></li>
              <li><a href="#seeking-contect-independence">Seeking Contect Independence</a></li>
            </ul>
          </li>
          <li><a href="#the-law-of-demeter">The Law of Demeter</a></li>
        </ul>
      </li>
      <li><a href="#reductin-costs-with-duck-typing">Reductin Costs with Duck Typing</a>        <ul>
          <li><a href="#polymorphism">Polymorphism</a></li>
          <li><a href="#recognizing-hidden-ducks">Recognizing Hidden Ducks</a></li>
          <li><a href="#guidance-1">Guidance</a></li>
        </ul>
      </li>
      <li><a href="#acquiring-behavior-through-inheritance">Acquiring Behavior Through Inheritance</a>        <ul>
          <li><a href="#inheritance">Inheritance</a></li>
          <li><a href="#recognizing-where-to-use-inheritance">Recognizing Where to Use Inheritance</a>            <ul>
              <li><a href="#finding-the-abstraction">Finding the Abstraction</a></li>
            </ul>
          </li>
          <li><a href="#using-templage-methods">Using Templage Methods</a>            <ul>
              <li><a href="#template-method">Template Method</a></li>
              <li><a href="#implementing-every-template-method">Implementing Every Template Method</a></li>
            </ul>
          </li>
          <li><a href="#manging-coupling">Manging Coupling</a>            <ul>
              <li><a href="#decoupling-subclasses-using-hook-messages">Decoupling Subclasses Using Hook Messages</a></li>
            </ul>
          </li>
        </ul>
      </li>
      <li><a href="#sharing-role-behavior-with-modules">Sharing Role Behavior with Modules</a>        <ul>
          <li><a href="#understanding-roles">Understanding Roles</a></li>
          <li><a href="#writing-inheritable-code">Writing Inheritable Code</a>            <ul>
              <li><a href="#recognize-the-antipatterns">Recognize the Antipatterns</a></li>
              <li><a href="#insist-on-the-abstraction">Insist on the Abstraction</a></li>
              <li><a href="#honor-the-contract">Honor the Contract</a></li>
              <li><a href="#use-the-template-method-pattern">Use the Template Method Pattern</a></li>
              <li><a href="#preemptively-decouple-classes">Preemptively Decouple Classes</a></li>
              <li><a href="#create-shallow-hierarchies">Create Shallow Hierarchies</a></li>
            </ul>
          </li>
        </ul>
      </li>
      <li><a href="#combining-objects-with-composition">Combining Objects with Composition</a>        <ul>
          <li><a href="#aggregation-a-special-kind-of-composition">Aggregation: A Special Kind of Composition</a></li>
          <li><a href="#deciding-between-inheritance-and-composition">Deciding Between Inheritance and Composition</a>            <ul>
              <li><a href="#inheritance-1">Inheritance</a></li>
              <li><a href="#composition">Composition</a></li>
            </ul>
          </li>
          <li><a href="#guidance-2">Guidance</a></li>
        </ul>
      </li>
      <li><a href="#designing-cost-effective-tests">Designing Cost-Effective Tests</a>        <ul>
          <li><a href="#intentional-testing">Intentional Testing</a>            <ul>
              <li><a href="#knowing-your-intentions">Knowing Your Intentions</a></li>
              <li><a href="#knowing-what-to-test">Knowing What to Test</a>                <ul>
                  <li><a href="#remove-the-duplicate">Remove the Duplicate</a></li>
                  <li><a href="#message-model">Message Model</a></li>
                </ul>
              </li>
              <li><a href="#knowing-when-to-test">Knowing When to Test</a></li>
              <li><a href="#knowing-how-to-test">Knowing How to Test</a></li>
            </ul>
          </li>
          <li><a href="#testing-incoming-messages">Testing Incoming Messages</a></li>
          <li><a href="#testing-private-methods">Testing Private Methods</a></li>
          <li><a href="#testing-outgoing-messages">Testing Outgoing Messages</a></li>
          <li><a href="#testing-duck-types">Testing Duck Types</a></li>
          <li><a href="#testing-inherited-code">Testing Inherited Code</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h1 id="object-oriented-design">Object-Oriented Design</h1>

<p>Object-oriented design (OOD) requires that you shift from thinking of the world as a collection of predefined procedures to modeling the world as a series of messages that pass between objects.</p>

<p>Object-oriented applications are made up of parts that interact to produce the behavior of the whole. The parts are <em>objects</em>; interactions are embodied in the <em>messages</em> that pass between them.</p>

<p>Object-oriented design is about managing dependencies. In the absence of design, unmanaged dependencies wreak havoc because objects know too much about one another.</p>

<p>Design is thus an art, the art of arranging code, and design is more the art of preserving changeability than it is the act of achieving perfection. You must not only write code for the feature you plan to deliver today, you must also create code that is amenable to being changed later. It doesn’t guess the future; it preserves your options for accommodating the future. It doesn’t choose; it leaves you room to move.</p>

<p>The trick to getting the most bang for your design buck is to acquire an understanding of the theories of design and to apply these theories appropriately, at the right time, and in the right amounts. </p>

<p>Well-designed applications are constructed of reusable code. Small, trustworthy self- contained objects with minimal context, clear interfaces, and injected dependencies are inherently reusable.</p>

<h2 id="the-tools-of-design">The Tools of Design</h2>

<h3 id="design-principles">Design Principles</h3>

<ul>
  <li>
    <p><strong>SOLID</strong></p>

    <ul>
      <li>Single Responsibility</li>
      <li>Open-Closed</li>
      <li>Liskov Substitution</li>
      <li>Interface Segregation</li>
      <li>Dependency Inversion</li>
    </ul>
  </li>
  <li><strong>DRY</strong>, Don’t Repeat Yourself</li>
  <li><strong>LoD</strong>, Law of Demeter</li>
</ul>

<h3 id="design-patterns">Design Patterns</h3>

<p>by Gof</p>

<h2 id="the-act-of-design">The Act of Design</h2>

<h3 id="how-design-fails">How Design Fails</h3>

<ul>
  <li>Lack of it. Successful but undesigned applications carry the seeds of their own destruction; they are easy to write but gradually become impossible to change. “Yes, I can add that feature, but it will break everything.”</li>
  <li>Overdesign. Aware of OO design techniques but do not yet understand how to apply them. “No, I can’t add that feature; it wasn’t designed to do that.”</li>
  <li>Seperated from the act of programming. Design is a process of progressive discovery that relies on a feedback loop. The iterative techniques of the Agile software movement are thus perfectly suited to the creation of well-designed OO applications. The iterative nature of Agile development allows design to adjust regularly and to evolve naturally. </li>
</ul>

<h3 id="when-to-design">When to Design</h3>

<blockquote>
  <p>Agile believes that your customers can’t define the software they want before seeing it, so it’s best to show them sooner rather than later. If this premise is true, then it logically follows that you should build software in tiny increments, gradually iterating your way into an application that meets the customer’s true need. The Agile experience is that this collaboration produces software that differs from what was initially imagined; the resulting software could not have been anticipated by any other means. </p>
</blockquote>

<p>If Agile is correct, then</p>

<ol>
  <li>there is absolutely no point in doing a Big Up Front Design (BUFD) (because it cannot possibly be correct)</li>
  <li>no one can predict when the application will be done (because you don’t know in advance what it will eventually do)</li>
</ol>

<p>Agile processes guarantee change and your ability to make these changes depends on your application’s design. If you cannot write well-designed code you’ll have to rewrite your application during every iteration.</p>

<h1 id="guidance">Guidance</h1>

<p>Focus on object,</p>

<ul>
  <li>Single <strong>Responsibility</strong></li>
  <li>Manage <strong>Dependencies</strong></li>
</ul>

<p>Focus on message,</p>

<ul>
  <li><strong>Interface</strong>, creating flexible interfaces</li>
  <li><strong>Duck Typing</strong>, reducing costs with Duck Typing</li>
  <li><strong>Inheritance</strong>, acquiring behavior through inheritance</li>
  <li><strong>Module</strong>, sharing <strong>role</strong> behavior with modules</li>
  <li><strong>Composition</strong>, combining objects with composition</li>
  <li><strong>Tests</strong>, designing cost-effective tests</li>
</ul>

<h2 id="designing-classes-with-a-single-responsibility">Designing Classes with a Single Responsibility</h2>

<p>SRP requires that a class be <strong>cohesive</strong>, that everything in a class is related to its central purpose, the class is said to be highly cohesive or to have a single responsibility.</p>

<h3 id="depend-on-behavior-not-data">Depend on Behavior, Not Data</h3>

<p>“Don’t Repeat Yourself” (DRY) is a shortcut for this idea.</p>

<ul>
  <li>Hide instance variables</li>
  <li>Hide data structures</li>
</ul>

<h3 id="enforce-single-responsibility-everywhere">Enforce Single Responsibility Everywhere</h3>

<ul>
  <li>
    <p>Extract extra responsibilities from methods</p>

    <p>Methods, like classes, should have a single responsibility. All of the same reasons apply; having just one responsibility makes them easy to change and easy to reuse.</p>
  </li>
  <li>
    <p>Isolate extra responsibilities in classes</p>

    <p>Postponing decisions until you are absolutely forced to make them. Any decision you make in advance of an explicit requirement is just a guess. Don’t decide; preserve your ability to make a decision later.</p>
  </li>
</ul>

<h2 id="manage-dependencies">Manage Dependencies</h2>

<p>To collaborate, an object must know something know about others. <em>Knowing</em> creates a dependency, or <em>coupling</em> creates a dependency.</p>

<p>Dependency management is core to creating future-proof applications.</p>

<p>An object has a dependency when it knows</p>

<ul>
  <li>The name of another class.</li>
  <li>The name of a message that it intends to send to someone other than self.</li>
  <li>The arguments that a message requires.</li>
  <li>The order of those arguments.</li>
  <li>Knowing the name of a message you plan to send to someone other than self.</li>
  <li>Tests on code.</li>
</ul>

<h3 id="inject-dependencies">Inject Dependencies</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># before</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Gear</span>
</span><span class="line">  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">gear_inches</span>
</span><span class="line">    <span class="n">ratio</span> <span class="o">*</span> <span class="no">Wheel</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">rim</span><span class="p">,</span> <span class="n">tire</span><span class="p">)</span><span class="o">.</span><span class="n">diameter</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># after</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Gear</span>
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:chainring</span><span class="p">,</span> <span class="ss">:cog</span><span class="p">,</span> <span class="ss">:wheel</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">chainring</span><span class="p">,</span> <span class="n">cog</span><span class="p">,</span> <span class="n">wheel</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@chainring</span> <span class="o">=</span> <span class="n">chainring</span>
</span><span class="line">    <span class="vi">@cog</span>       <span class="o">=</span> <span class="n">cog</span>
</span><span class="line">    <span class="vi">@wheel</span>     <span class="o">=</span> <span class="n">wheel</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">gear_inches</span>
</span><span class="line">    <span class="n">ratio</span> <span class="o">*</span> <span class="n">wheel</span><span class="o">.</span><span class="n">diameter</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Gear previously had explicit dependencies on the Wheel class and on the type and order of its initialization arguments, but through injection these dependencies have been reduced to a single dependency on the diameter method.</p>

<h3 id="isolate-dependencies">Isolate Dependencies</h3>

<p><strong>Isolate Instance Creation</strong></p>

<p>If you are so constrained that you cannot change the code to inject a Wheel into a Gear, you should isolate the creation of a new Wheel inside the Gear class.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Gear</span>
</span><span class="line">  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">gear_inches</span>
</span><span class="line">    <span class="n">ratio</span> <span class="o">*</span> <span class="n">wheel</span><span class="o">.</span><span class="n">diameter</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">wheel</span>
</span><span class="line">    <span class="vi">@wheel</span> <span class="o">||=</span> <span class="no">Wheel</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">rim</span><span class="p">,</span> <span class="n">tire</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Isolate Vulnerable External Messages</li>
</ul>

<p>External messages, that is, messages that are “sent to someone other than self.”</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Gear</span>
</span><span class="line">  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">gear_inches</span>
</span><span class="line">    <span class="n">ratio</span> <span class="o">*</span> <span class="n">diameter</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">diameter</span>
</span><span class="line">    <span class="n">wheel</span><span class="o">.</span><span class="n">diameter</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="remove-argument-order-dependencies">Remove Argument-Order Dependencies</h3>

<ul>
  <li>Use Hashes for Initialization Arguments</li>
  <li>Explicitly Define Defaults</li>
  <li>Isolate Multiparameter Initialization, use a wrapper.</li>
</ul>

<h3 id="managing-dependency-direction">Managing Dependency Direction</h3>

<p>Depend on things that change less often than you do.</p>

<ul>
  <li>Some classes are more likely than others to have changes in requirements.</li>
  <li>Concrete classes are more likely to change than abstract classes.</li>
  <li>Changing a class that has many dependents will result in widespread consequences.</li>
</ul>

<p>Depend on abstractions.</p>

<h2 id="creating-flexible-interfaces">Creating Flexible Interfaces</h2>

<blockquote>
  <p>Interface within a class, make up its public interface.</p>
</blockquote>

<p>Public Interfaces</p>

<ul>
  <li>Reveal its primary responsibility</li>
  <li>Are expected to be invoked by others</li>
  <li>Will not change on a whim</li>
  <li>Are safe for others to depend on</li>
  <li>Are thoroughly documented in the tests</li>
</ul>

<p>Private Interfaces</p>

<ul>
  <li>Handle implementation details</li>
  <li>Are not expected to be sent by other objects</li>
  <li>Can change for any reason whatsoever</li>
  <li>Are unsafe for others to depend on</li>
  <li>May not even be referenced in the tests</li>
</ul>

<p>Well-defined public interfaces consist of stable methods that expose the responsibilities of their underlying classes (public methods should read like a description of responsibilities).</p>

<h3 id="finding-the-public-interface">Finding the Public Interface</h3>

<h4 id="focus-messages-between-domain-objects">Focus Messages between Domain Objects</h4>

<p>Nouns in the application that have both data and behavior are called domain objects. Domain objects are easy to find but they are not at the design center of your application. Design experts notice domain objects without concentrating on them; they focus not on these objects but on the messages that pass between them.</p>

<h4 id="use-sequence-diagrams">Use Sequence Diagrams</h4>

<p>They explicitly specify the messages that pass between objects, and because objects should only communicate using public interfaces, sequence diagrams are a vehicle for exposing, experimenting with, and ultimately defining those interfaces.</p>

<h4 id="asking-for-what-instead-of-telling-how">Asking for “What” Instead of Telling “How”</h4>

<h4 id="seeking-contect-independence">Seeking Contect Independence</h4>

<p>The best possible situation is for an object to be completely independent of its context. An object that could collaborate with others without knowing who they are or what they do could be reused in novel and unanticipated ways.</p>

<p>The technique for collaborating with others without knowing who they are—dependency injection. </p>

<h3 id="the-law-of-demeter">The Law of Demeter</h3>

<p>It prohibits routing a message to a third object via a second object of a different type. “Only talk to your immediate neighbors” or “use only one dot.”</p>

<p>Delegation is tempting as a solution to the Demeter problem because it removes the visible evidence of violations.</p>

<p>Listening to Demeter means paying attention to your point of view. If you shift to a message-based perspective, the messages you find will become public interfaces in the objects they lead you to discover. However, if you are bound by the shackles of existing domain objects, you’ll end up assembling their existing public interfaces into long message chains and thus will miss the opportunity to find and construct flexible public interfaces.</p>

<h2 id="reductin-costs-with-duck-typing">Reductin Costs with Duck Typing</h2>

<blockquote>
  <p>Interface, across classes and is independent of any single class. The interface represents a set of messages where the messages themselves define the interface. It’s almost as if the interface defines a virtual class; that is, any class that implements the required methods can act like the interface kind of thing.</p>
</blockquote>

<p><strong>Duck types</strong> are public interfaces that are not tied to any specific class. These across-class interfaces add enormous flexibility to your application by replacing costly dependencies on class with more forgiving dependencies on messages.</p>

<h3 id="polymorphism">Polymorphism</h3>

<p><strong>Polymorphism</strong> in OOP refers to the ability of many different objects to respond to the same message. Senders of the message need not care about the class of the receiver; receivers supply their own specific version of the behavior. Polymorphic methods honor an implicit bargain; they agree to be inter- changeable from the sender’s point of view.</p>

<p>A single message thus has many (poly) forms (morphs).</p>

<p>There are a number of ways to achieve polymorphism:</p>

<ul>
  <li>Duck Typing</li>
  <li>Inheritance</li>
  <li>Behavior Sharing (module)</li>
</ul>

<h3 id="recognizing-hidden-ducks">Recognizing Hidden Ducks</h3>

<ul>
  <li>Case statements that switch on class</li>
  <li><code>kind_of?</code> and <code>is_a?</code></li>
  <li><code>responds_to?</code></li>
</ul>

<h3 id="guidance-1">Guidance</h3>

<p>When you create duck types you must both document and test their public inter- faces. Fortunately, good tests are the best documentation.</p>

<p>The decision to create a new duck type relies on judgment. The purpose of design is to lower costs; bring this measuring stick to every situation. If creating a duck type would reduce unstable dependencies, do so. Use your best judgment.</p>

<h2 id="acquiring-behavior-through-inheritance">Acquiring Behavior Through Inheritance</h2>

<h3 id="inheritance">Inheritance</h3>

<p>Inheritance is, at its core, a mechanism for <strong>automatic message delegation</strong>. It defines a forwarding path for not-understood messages. It creates relationships such that, if one object cannot respond to a received message, it delegates that message to another. You don’t have to write code to explicitly delegate the message, instead you define an inheritance relationship between two objects and the forwarding happens automatically.</p>

<p>When your problem is one of needing numerous specializations of a stable, common abstraction, inheritance can be an extremely low-cost solution.</p>

<h3 id="recognizing-where-to-use-inheritance">Recognizing Where to Use Inheritance</h3>

<p>The inheritance exactly solves: that of highly related types that share common behavior but differ along some dimension.  </p>

<p>Inheritance provides a way to define two objects as having a relationship such that when the first receives a message that it does not understand, it automatically forwards, or delegates, the message to the second. It’s as simple as that.  </p>

<p>Duck types cut across classes, they do not use classical inheritance to share common behavior. Duck types share code via Ruby modules.</p>

<h4 id="finding-the-abstraction">Finding the Abstraction</h4>

<p>It almost never makes sense to create an abstract superclass with only one sub-class.  </p>

<p>Creating a hierarchy has costs; the best way to minimize these costs is to maximize your chance of getting the abstraction right before allowing subclasses to depend on it. While the two bikes you know about supply a fair amount of information about the common abstraction, three bikes would supply a great deal more. If you could put this decision off until FastFeet asked for a third kind of bike, your odds of finding the right abstraction would improve dramatically.</p>

<p>When deciding between refactoring strategies, indeed, when deciding between design strategies in general, it’s useful to ask the question: “What will happen if I’m wrong?”</p>

<h3 id="using-templage-methods">Using Templage Methods</h3>

<h4 id="template-method">Template Method</h4>

<p>This technique of defining a basic structure in the superclass and sending messages to acquire subclass-specific contributions is known as the template method pattern.</p>

<h4 id="implementing-every-template-method">Implementing Every Template Method</h4>

<p>Any class that uses the template method pattern must supply an implementation for every message it sends, and creating code that fails with reasonable error messages takes minor effort in the present but provides value forever.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Bicycle</span>
</span><span class="line">  <span class="c1">#...</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">default_tire_size</span>
</span><span class="line">    <span class="k">raise</span> <span class="no">NotImplementedError</span><span class="p">,</span> <span class="s2">&quot;This </span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="si">}</span><span class="s2"> cannot respond to:&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="manging-coupling">Manging Coupling</h3>

<p>When a subclass sends <code>super</code> it’s effectively declaring that it knows the algorithm; it depends on this knowledge. If the algorithm changes, then the subclasses may break even if their own specializations are not otherwise affected.</p>

<h4 id="decoupling-subclasses-using-hook-messages">Decoupling Subclasses Using Hook Messages</h4>

<p>Instead of allowing subclasses to know the algorithm and requiring that they send <code>super</code>, superclasses can instead send <code>hook</code> messages, ones that exist solely to provide subclasses a place to contribute information by implementing matching methods. This strategy removes knowledge of the algorithm from the subclass and returns control to the superclass.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Bicycle</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">args</span><span class="o">=</span><span class="p">{})</span>
</span><span class="line">    <span class="vi">@size</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="ss">:size</span><span class="o">]</span>
</span><span class="line">    <span class="vi">@chain</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="ss">:chain</span><span class="o">]</span> <span class="o">||</span> <span class="n">default_chain</span>
</span><span class="line">    <span class="vi">@tire_size</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="ss">:tire_size</span><span class="o">]</span> <span class="o">||</span> <span class="n">default_tire_size</span>
</span><span class="line">
</span><span class="line">    <span class="n">post_initialize</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>   <span class="c1"># Bicycle both sends</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">post_initialize</span><span class="p">(</span><span class="n">args</span><span class="p">)</span> <span class="c1"># and implements this </span>
</span><span class="line">    <span class="kp">nil</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">  <span class="c1"># ...</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">RoadBike</span> <span class="o">&lt;</span> <span class="no">Bicycle</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">post_initialize</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>         <span class="c1"># RoadBike can </span>
</span><span class="line">    <span class="vi">@tape_color</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="ss">:tape_color</span><span class="o">]</span> <span class="c1"># optionally</span>
</span><span class="line">  <span class="k">end</span>                               <span class="c1"># override it</span>
</span><span class="line">  <span class="c1"># ...</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This change allows RoadBike to know less about Bicycle, reducing the coupling between them and making each more flexible in the face of an uncertain future. New subclasses need only implement the <code>hook</code> methods.</p>

<h2 id="sharing-role-behavior-with-modules">Sharing Role Behavior with Modules</h2>

<h3 id="understanding-roles">Understanding Roles</h3>

<p>Modules thus provide a perfect way to allow objects of different classes to play a common role using a single set of code.</p>

<p>The rules for modules are the same as for classical inheritance. If a module sends a message it must provide an implementation, even if that implementation merely raises an error indicating that users of the module must implement the method.</p>

<p>This is-a versus behaves-like-a difference definitely matters, each choice has distinct consequences.</p>

<h3 id="writing-inheritable-code">Writing Inheritable Code</h3>

<p>The usefulness and maintainability of inheritance hierarchies and modules is in direct proportion to the quality of the code. </p>

<h4 id="recognize-the-antipatterns">Recognize the Antipatterns</h4>

<p>There are two antipatterns that indicate that your code might benefit from inheritance.</p>

<ul>
  <li>An object that uses a variable with a name like <code>type</code> or <code>category</code> to determine what message to send to <code>self</code> contains two highly related but slightly different types.</li>
  <li>When a sending object checks the class of a receiving object to determine what message to send, you have overlooked a duck type. In addition to sharing an interface, duck types might also share behavior. When they do, place the shared code in a module and include that module in each class or object that plays the role.</li>
</ul>

<h4 id="insist-on-the-abstraction">Insist on the Abstraction</h4>

<p>Superclasses should not contain code that applies to some, but not all, subclasses. This restriction also applies to modules: the code in a module must apply to all who use it.</p>

<p>Subclasses that override a method to raise an exception like “does not implement” are a symptom of this problem. When subclasses override a method to declare that they <em>do not do that thing</em> they come perilously close to declaring that they <em>are not that thing</em>.</p>

<h4 id="honor-the-contract">Honor the Contract</h4>

<p>Subclasses agree to a contract; they promise to be substitutable for their superclasses.</p>

<p>Subclasses that fail to honor their contract are difficult to use. They’re “special” and cannot be freely substituted for their superclasses. These subclasses are declaring that they are not really a kind-of their superclass </p>

<p><strong>Liskov Substitution Principle (LSP)</strong>, which in mathematical terms says that a subtype should be substitutable for its supertype. Named after Barbara Liskov.</p>

<h4 id="use-the-template-method-pattern">Use the Template Method Pattern</h4>

<p>The abstract code defines the algorithms and the concrete inheritors of that abstraction contribute specializations by overriding these template methods.</p>

<p>Modules, therefore, should use the template method pattern to invite those that include them to supply specializations, and should implement hook methods to avoid forcing includers to send <code>super</code>.</p>

<h4 id="preemptively-decouple-classes">Preemptively Decouple Classes</h4>

<p>Avoid writing code that requires its inheritors to send <code>super</code>; instead use hook messages to allow subclasses to participate while absolving them of responsibility for knowing the abstract algorithm. Writing code that requires subclasses to send <code>super</code> adds an additional dependency; avoid this if you can.</p>

<p>Hook methods solve the problem of sending <code>super</code>, but, unfortunately, only for adjacent levels of the hierarchy.</p>

<h4 id="create-shallow-hierarchies">Create Shallow Hierarchies</h4>

<p>The limitations of hook methods are just one of the many reasons to create shallow hierarchies.</p>

<p>Because objects depend on everything above them, a deep hierarchy has a large set of built-in dependencies, each of which might someday change.</p>

<p>Another problem with deep hierarchies is that programmers tend to be familiar with just the classes at their tops and bottoms; that is, they tend to understand only the behavior implemented at the boundaries of the search path.</p>

<h2 id="combining-objects-with-composition">Combining Objects with Composition</h2>

<p>Composition is the act of combining distinct parts into a complex whole such that the whole becomes more than the sum of its parts.</p>

<h3 id="aggregation-a-special-kind-of-composition">Aggregation: A Special Kind of Composition</h3>

<p>Delegation creates dependencies; the receiving object must recognize the message and know where to send it. Composition often involves delegation but the term means something more. A composed object is made up of parts with which it expects to interact via well-defined interfaces.</p>

<p>Composition indicates a <em>has-a</em> relationship where the contained object has no life inde- pendent of its container.</p>

<p>Aggregation is exactly like composition except that the contained object has an independent life.</p>

<h3 id="deciding-between-inheritance-and-composition">Deciding Between Inheritance and Composition</h3>

<ul>
  <li>Remember that classical inheritance is a code arrangement technique. For the cost of arranging objects in a hierarchy, you get message delegation for free. </li>
  <li>Composition is an alternative that reverses these costs and benefits. Composition allows objects to have structural independence, but at the cost of explicit message delegation.</li>
</ul>

<p>The general rule is that, faced with a problem that composition can solve, you should be biased towards doing so. If you cannot explicitly defend inheritance as a better solution, use composition.</p>

<h4 id="inheritance-1">Inheritance</h4>

<p><strong>Benefits</strong></p>

<p>Inheritance is a better solution when its use provides high rewards for low risk.</p>

<p>Use of inheritance results in code that can be described as open–closed; hierarchies are open for extension while remaining closed for modification. </p>

<p>You need look no farther than the source of object-oriented languages themselves to see the value of organizing code using inheritance.</p>

<p><strong>Costs</strong></p>

<p>You might be fooled into choosing inheritance to solve the wrong kind of problem. If you make this mistake a day will come when you need to add behavior but find there’s no easy way do so.</p>

<p>Even when inheritance makes sense for the problem, you might be writing code that will be used by others for purposes you did not anticipate.</p>

<p>The very high cost of making changes near the top of an incorrectly modeled hierarchy. In this case, the leveraging effect works to your disadvantage; small changes break everything.</p>

<p>The impossibility of adding behavior when new subclasses represent a mixture of types.</p>

<p>Inheritance, therefore, is a place where the question “<em>What will happen when I’m wrong?</em>” assumes special importance. Inheritance by definition comes with a deeply embedded set of dependencies. Subclasses depend on the methods defined in their superclasses and on the automatic delegation of messages to those superclasses. This is classical inheritance’s greatest strength and biggest weakness.</p>

<p><strong>Guidance</strong></p>

<p>Your consideration of the use of inheritance should be tempered by your <em>expectations about the population who will use your code</em>. If you are writing code for an in-house application in a domain with which you are intimately familiar, you may be able to predict the future well enough to be confident that your design problem is one for which inheritance is a cost-effective solution.</p>

<p>Avoid writing frameworks that require users of your code to subclass your objects in order to gain your behavior. Their application’s objects may already be arranged in a hierarchy; inheriting from your framework may not be possible.</p>

<h4 id="composition">Composition</h4>

<p>Composed objects do not depend on the structure of the class hierarchy, and they delegate their own messages.</p>

<p><strong>Benefits</strong></p>

<p>When using composition, the natural tendency is to create many small objects that con- tain straightforward responsibilities that are accessible through clearly defined interfaces. These small objects have a single responsibility and specify their own behavior. They are transparent.</p>

<p>By their very nature, objects that participate in composition are small, structurally independent, and have well-defined interfaces. This allows their seamless transition into pluggable, interchangeable components.</p>

<p><strong>Costs</strong></p>

<p>The composed object must explicitly know which messages to delegate and to whom. Identical delegation code may be needed by many different objects. Composition provides no way to share this code.</p>

<p>Composition is excellent at prescribing rules for assembling an object made of parts but doesn’t provide as much help for the problem of arranging code for a collection of parts that are very nearly identical.</p>

<h3 id="guidance-2">Guidance</h3>

<p>Composition, classical inheritance, and behavior sharing via modules are competing techniques for arranging code.</p>

<ul>
  <li>Use inheritance for <em>is-a</em> Relationships.</li>
  <li>Use Duck Types for <em>behaves-like-a</em> Relationships</li>
  <li>Use Composition for <em>has-a</em> Relationships</li>
</ul>

<h2 id="designing-cost-effective-tests">Designing Cost-Effective Tests</h2>

<p>An understanding of object-oriented design, good refactoring skills, and the ability to write efficient tests form a <strong>three-legged stool</strong> upon which changeable code rests.</p>

<p>Your overall goal is to create well-designed applications that have acceptable test coverage. </p>

<h3 id="intentional-testing">Intentional Testing</h3>

<h4 id="knowing-your-intentions">Knowing Your Intentions</h4>

<p>The true purpose of testing, just like the true purpose of design, is to reduce costs.</p>

<p>It is common for programmers who are new to testing to find themselves in the unhappy state where the tests they write do cost more than the value those tests provide, and who therefore want to argue about the worth of tests. The solution to the problem of costly tests, however, is not to stop testing but instead to get better at it.</p>

<ol>
  <li>Finding Bugs</li>
  <li>Supplying Documentation</li>
  <li>Deferring Design Decisions</li>
  <li>Supporting Abstractions</li>
  <li>Exposing Design Flaws. When the design is bad, testing is hard. The best way to achieve this goal is to write loosely coupled tests about only the things that matter.</li>
</ol>

<h4 id="knowing-what-to-test">Knowing What to Test</h4>

<h5 id="remove-the-duplicate">Remove the Duplicate</h5>

<p>One simple way to get better value from tests is to write fewer of them. The safest way to accomplish this is to test everything just once and in the proper place.</p>

<p>Removing duplication from testing lowers the cost of changing tests in reaction to application changes, and putting tests in the right place guarantees they’ll be forced to change only when absolutely necessary.</p>

<h5 id="message-model">Message Model</h5>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/origins_of_messages.png" alt="origins_of_messages" /></p>

<p>Think of an object-oriented application as a series of messages passing between a set of black boxes. Tests should concentrate on the incoming or outgoing messages that cross an object’s boundaries.</p>

<ul>
  <li>
    <p>Incoming Message</p>

    <p>Objects should make assertions about <em>state</em> only for messages in their own public interfaces.</p>
  </li>
  <li>
    <p>Outgoing Message</p>

    <ul>
      <li><em>query</em>, outgoing messages have no side effects and thus matter only to their senders.</li>
      <li><em>command</em>, outgoing messages do have side effects (a file gets written, a database record is saved, an action is taken by an observer). It is the responsibility of the sending object to prove that they are properly sent. Proving that a message gets sent is a test of behavior, not state.</li>
    </ul>
  </li>
</ul>

<p><strong>Conclusion</strong></p>

<p>Incoming messages should be tested for the state they return. Outgoing command messages should be tested to ensure they get sent. Outgoing query messages should not be tested.</p>

<h4 id="knowing-when-to-test">Knowing When to Test</h4>

<p>You should write tests first, whenever it makes sense to do so.</p>

<p>Done at the correct time and in the right amounts, testing, and writing code test-first, will lower your overall costs. Gaining these benefits requires applying object-oriented design principles everywhere, both to the code of your application and to the code in your tests.</p>

<p><em>What novices do?</em></p>

<p>Novices often write code that is far too coupled; they combine unrelated responsibilities and bind many dependencies into every object. </p>

<p>It is an unfortunate truth that the most complex code is usually written by the least qualified person.</p>

<p>Novice programmers don’t yet have the skills to write simple code.</p>

<h4 id="knowing-how-to-test">Knowing How to Test</h4>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/bdd_and_tdd.png" alt="bdd_and_tdd" /></p>

<ul>
  <li><strong>BDD</strong> takes an outside-in approach, creating objects at the boundary of an application and working its way inward, mock-ing as necessary to supply as-yet-unwritten objects.</li>
  <li><strong>TDD</strong> takes an inside-out approach, usually starting with tests of domain objects and then reusing these newly created domain objects in the tests of adjacent layers of code.</li>
</ul>

<p><strong>Testing point-of-view</strong></p>

<p>Your tests could stand completely inside of the object under test, with effective access to all of its internals. This is a bad idea.</p>

<p>It’s better for tests to assume a viewpoint that sights along the edges of the object under test, where they can know only about messages that come and go.</p>

<h3 id="testing-incoming-messages">Testing Incoming Messages</h3>

<ul>
  <li>
    <p>Deleting Unused Interfaces</p>

    <p>Do not test an incoming message that has no dependents; delete it. </p>
  </li>
  <li>
    <p>Proving the Public Interface</p>
  </li>
  <li>
    <p>Isolating the Object Under Test</p>
  </li>
  <li>
    <p>Injecting Dependencies as Roles</p>

    <p>Object-oriented design tells you to inject dependencies because it believes that specific concrete classes will vary more than these roles, or conversely, roles will be more stable than the classes from which they were abstracted.</p>

    <ul>
      <li>Creating Test Doubles</li>
      <li>Using Tests to Document Roles</li>
    </ul>
  </li>
</ul>

<h3 id="testing-private-methods">Testing Private Methods</h3>

<p>Dealing with private methods requires judgment and flexibility.</p>

<p>The rules-of-thumb for testing private methods are thus: Never write them, and if you do, never ever test them, unless of course it makes sense to do so.</p>

<h3 id="testing-outgoing-messages">Testing Outgoing Messages</h3>

<ul>
  <li>Ignoring Query Messages</li>
  <li>
    <p>Proving Command Messages</p>

    <p>The responsibility for testing a message’s return value lies with its receiver. <strong>Mocks</strong> are tests of behavior, as opposed to tests of state. Instead of making assertions about what a message returns, mocks define an expectation that a message will get sent. </p>
  </li>
</ul>

<h3 id="testing-duck-types">Testing Duck Types</h3>

<p>The desire to test duck types creates a need for shareable tests for roles, and once you acquire this role-based perspective you can use it to your advantage in many situations. From the point of view of the object under test, every other object is a role and dealing with objects as if they are representatives of the roles they play loosens coupling and increases flexibility, both in your application and in your tests.</p>

<ul>
  <li>Testing Roles. Extract a module, test it and include in every role.</li>
  <li>Using Role Tests to Validate Doubles.</li>
</ul>

<h3 id="testing-inherited-code">Testing Inherited Code</h3>

<ul>
  <li>
    <p>Specifying the Inherited Interface</p>

    <p>Write a shared test for the common contract and include this test in every object.</p>
  </li>
  <li>
    <p>Specifying Subclass Responsibilities</p>

    <ul>
      <li>Confirming Subclass Behavior. The <em>BicycleInterfaceTest</em> and the <em>BicycleSubclassTest</em>, combined, take all of the pain out of testing the common behavior of subclasses. These tests give you confidence that subclasses aren’t drifting away from the standard.</li>
      <li>Confirming Superclass Enforcement. Test the template method.</li>
    </ul>
  </li>
  <li>
    <p>Testing Unique Behavior</p>

    <ul>
      <li>Testing Concrete Subclass Behavior. It’s important to test these specializations without embedding knowledge of the superclass into the test.</li>
      <li>Testing Abstract Superclass Behavior. Because Bicycle used tem- plate methods to acquire concrete specializations you can stub the behavior that would normally be supplied by subclasses. Even better, because you understand the Liskov Substitution Principle, you can easily manufacture a testable instance of Bicycle by creating a new subclass for use solely by this test.</li>
    </ul>
  </li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Reminders]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2014/12/30/git-reminders/"/>
    <updated>2014-12-30T15:11:29+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2014/12/30/git-reminders</id>
    <content type="html"><![CDATA[<p>After using Git for two years, I’ve finally finished reading these two books, twice. Not only skimming, but also making excerpts and perform experiments in the meantime. These two fabulous books really benefit me a lot, and this is the final notes which construct my Git knowledge base, and comprise the excerpts from both books and experiments on some specific topics.</p>

<table class="custom">
  <tbody>
    <tr>
      <td><strong>Book</strong></td>
      <td>Git Community Book</td>
    </tr>
    <tr>
      <td><strong>Author</strong></td>
      <td>people in the Git community</td>
    </tr>
    <tr>
      <td><strong>Link</strong></td>
      <td><a href="http://alx.github.io/gitbook/">alx.github.io/gitbook</a></td>
    </tr>
  </tbody>
</table>

<table class="custom">
  <tbody>
    <tr>
      <td><strong>Book</strong></td>
      <td>Pro Git</td>
    </tr>
    <tr>
      <td><strong>Author</strong></td>
      <td>Scott Chacon and Ben Straub</td>
    </tr>
    <tr>
      <td><strong>Link</strong></td>
      <td><a href="http://git-scm.com/book/en">git-scm.com/book</a></td>
    </tr>
  </tbody>
</table>

<ul id="markdown-toc">
  <li><a href="#basics">Basics</a>    <ul>
      <li><a href="#meta">Meta</a></li>
      <li><a href="#git-object-model">Git Object Model</a>        <ul>
          <li><a href="#the-sha-1">The SHA-1</a></li>
          <li><a href="#the-objects">The Objects</a></li>
        </ul>
      </li>
      <li><a href="#staged">Staged</a></li>
      <li><a href="#branching">Branching</a></li>
      <li><a href="#tags">Tags</a></li>
    </ul>
  </li>
  <li><a href="#configuration">Configuration</a>    <ul>
      <li><a href="#ignoreing-files">Ignoreing Files</a></li>
      <li><a href="#commit-template">Commit Template</a></li>
      <li><a href="#git-attributes">Git Attributes</a></li>
    </ul>
  </li>
  <li><a href="#porcelain">Porcelain</a>    <ul>
      <li><a href="#branch">Branch</a>        <ul>
          <li><a href="#inspecting-a-remote">Inspecting a Remote</a></li>
          <li><a href="#checkout-and-track-a-remote-branch">Checkout and Track a Remote Branch</a></li>
        </ul>
      </li>
      <li><a href="#tag">Tag</a>        <ul>
          <li><a href="#share-tags">Share tags</a></li>
          <li><a href="#sign-tags">Sign tags</a></li>
          <li><a href="#distributing-the-public-pgp-key">Distributing the Public PGP Key</a></li>
          <li><a href="#generate-a-build-number">Generate a Build Number</a></li>
          <li><a href="#prepare-a-release">Prepare a Release</a></li>
        </ul>
      </li>
      <li><a href="#rebasing">Rebasing</a></li>
      <li><a href="#merge-base">Merge Base</a></li>
      <li><a href="#merge-stage">Merge Stage</a></li>
      <li><a href="#ancestry-references">Ancestry References</a></li>
      <li><a href="#commit-ranges">Commit Ranges</a></li>
      <li><a href="#log">Log</a>        <ul>
          <li><a href="#summarize-or-get-a-quick-changelog">Summarize or Get a Quick Changelog</a></li>
        </ul>
      </li>
      <li><a href="#stash">Stash</a>        <ul>
          <li><a href="#reapply-the-staged-changes">Reapply the Staged Changes</a></li>
          <li><a href="#create-a-branch-from-stash">Create a Branch from Stash</a></li>
        </ul>
      </li>
      <li><a href="#create-new-empty-branches">Create New Empty Branches</a></li>
      <li><a href="#filter-branch">Filter Branch</a>        <ul>
          <li><a href="#removing-a-file-from-every-commit">Removing a File from Every Commit</a></li>
          <li><a href="#making-a-subdirectory-the-new-root">Making a Subdirectory the New Root</a></li>
          <li><a href="#changing-e-mail-addresses-globally">Changing E-Mail Addresses Globally</a></li>
          <li><a href="#realworld-example">Realworld Example</a></li>
        </ul>
      </li>
      <li><a href="#blame">Blame</a></li>
      <li><a href="#bisect">Bisect</a>        <ul>
          <li><a href="#auto-check-by-script">Auto Check By Script</a></li>
        </ul>
      </li>
      <li><a href="#submodules">Submodules</a>        <ul>
          <li><a href="#maintain-a-repo-which-contains-a-submodule">Maintain a repo which contains a submodule</a></li>
          <li><a href="#maintain-a-cloned-repo-which-contains-a-submodule">Maintain a cloned repo which contains a submodule</a></li>
          <li><a href="#a-demo-workflow">A Demo Workflow</a></li>
          <li><a href="#cautions">Cautions</a></li>
        </ul>
      </li>
      <li><a href="#subtree-merging-a-submodule-substitution">Subtree Merging (A Submodule Substitution)</a>        <ul>
          <li><a href="#use-git-merge-subtree-strategy">Use git-merge Subtree Strategy</a></li>
          <li><a href="#use-git-subtree">Use git-subtree</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#git-internals">Git Internals</a>    <ul>
      <li><a href="#plumbing-objects">Plumbing Objects</a>        <ul>
          <li><a href="#blob-object">Blob Object</a></li>
          <li><a href="#tree-objects">Tree Objects</a></li>
          <li><a href="#commit-objects">Commit Objects</a></li>
          <li><a href="#object-storage">Object Storage</a></li>
        </ul>
      </li>
      <li><a href="#index">Index</a></li>
      <li><a href="#packfile">Packfile</a></li>
      <li><a href="#the-refspec">The Refspec</a>        <ul>
          <li><a href="#fetching">fetching</a></li>
        </ul>
      </li>
      <li><a href="#data-recovery">Data Recovery</a>        <ul>
          <li><a href="#reflog">reflog</a></li>
          <li><a href="#fsck">fsck</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="basics">Basics</h2>

<h3 id="meta">Meta</h3>

<p><strong>Snapshots, Not Differences</strong></p>

<p>Every time you commit, or save the state of your project in Git, it basically takes a picture of what all your files look like at that moment and stores a reference to that snapshot.</p>

<p><strong>Git Generally Only Adds Data</strong></p>

<p>It is very difficult to get the system to do anything that is not undoable or to make it erase data in any way.</p>

<h3 id="git-object-model">Git Object Model</h3>

<h4 id="the-sha-1">The SHA-1</h4>

<blockquote>
  <p>checksum, object ID</p>
</blockquote>

<ol>
  <li>Represents object name.</li>
  <li>40-digit long.</li>
  <li>Use SHA1 hash to generate based on the object content.</li>
  <li>Keeps the identity.</li>
</ol>

<h4 id="the-objects">The Objects</h4>

<p>Every object consists of three things: <strong>type, size, content</strong>.</p>

<p>There are four different types of objects: <strong>blob, tree, commit, tag</strong>.</p>

<p><strong>blob</strong> is a chunk of binary data, used to stroe file data.</p>

<blockquote>
  <p>The blob is entirely defined by its data, totally independent of its location.</p>
</blockquote>

<p><strong>tree</strong> is basically like a directory - it references a bunch of other trees and/or blobs.</p>

<blockquote>
  <p>Since trees and blobs, like all other objects, are named by the SHA1 hash of their contents, two trees have the same SHA1 name if and only if their contents (including, recursively, the contents of all subdirectories) are identical.</p>
</blockquote>

<p><strong>commit</strong>  points to a single tree, marking it as what the project looked like at a certain point in time. It contains meta-information about that point in time, such as a timestamp, the author of the changes since the last commit, a pointer to the previous commit(s), etc.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git show --pretty<span class="o">=</span>raw HEAD
</span><span class="line">commit 6cc1a668111eb54ef4dbe976fff24f2e3d8b95f9
</span><span class="line">tree 36df675d7ae80e7eef0faac893b266801a4fa94a
</span><span class="line">parent d448c30aa03fba2884ab87c21081ef0f74d24f7e
</span><span class="line">author wendi &lt;wendi@umeng.com&gt; 1409022714 +0800
</span><span class="line">committer wendi &lt;wendi@umeng.com&gt; 1409022733 +0800
</span><span class="line">
</span><span class="line">    Update error <span class="nb">type </span>service url
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>tag</strong> is a way to mark a specific commit as special in some way. It is normally used to tag certain commits as specific releases or something along those lines.</p>

<blockquote>
  <p>A tag object contains an object name (called simply ‘object’), object type, tag name, the name of the person (“tagger”) who created the tag, and a message, which may contain a signature</p>
</blockquote>

<h3 id="staged">Staged</h3>

<p>Staged means that you have marked a modified file in its current version to go into your next commit snapshot.</p>

<p>The staging area is a simple file, generally contained in your Git directory, that stores information about what will go into your next commit.</p>

<h3 id="branching">Branching</h3>

<p>A branch in Git is simply a lightweight movable pointer to one of these commits.</p>

<p>How does Git know what branch you’re currently on? It keeps a special pointer called <em>HEAD</em>.</p>

<p><strong>Remote Branches</strong></p>

<p>Remote branches act as bookmarks to remind you where the branches on your remote repositories were the last time you connected to them.</p>

<h3 id="tags">Tags</h3>

<p>The tag object is very much like a commit object, but <strong>a tag object points to a commit rather than a tree. It’s like a branch reference, but it never moves</strong> — it always points to the same commit but gives it a friendlier name. </p>

<p>You can tag any Git object. For example, the maintainer adds the GPG public key as a blob object and then tagged it.</p>

<p><strong>Lightweight</strong></p>

<p>A lightweight tag is very much like a branch that doesn’t change — it’s just a pointer to a specific commit.</p>

<p><strong>Annotated</strong></p>

<p>Annotated tags, however, are stored as full objects in the Git database. They’re checksummed; contain the tagger name, e-mail, and date; have a tagging message; and can be signed and verified with GNU Privacy Guard (GPG). </p>

<h2 id="configuration">Configuration</h2>

<h3 id="ignoreing-files">Ignoreing Files</h3>

<p>Glob patterns are like simplified regular expressions that shells use.</p>

<p>You can negate a pattern by starting it with an exclamation point (!).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">*.a       <span class="c"># no .a files</span>
</span><span class="line">!lib.a    <span class="c"># but do track lib.a, even though you’re ignoring .a files above</span>
</span><span class="line">/TODO     <span class="c"># only ignore the root TODO file, not subdir/TODO</span>
</span><span class="line">build/    <span class="c"># ignore all files in the build/ directory</span>
</span><span class="line">doc/*.txt <span class="c"># ignore doc/notes.txt, but not doc/server/arch.txt</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="commit-template">Commit Template</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git config --global commit.template <span class="nv">$HOME</span>/.gitmessage
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I’ve defined some experimental rules based on <a href="http://programmers.stackexchange.com/questions/42110/can-you-recommend-a-good-commit-message-template-guidelines-to-enforce-in-the">rangzen’s recommandation</a> on Stack Exchange. Here is my <a href="https://github.com/ifyouseewendy/dotfiles/blob/master/gitmessage">.gitmessage</a>.</p>

<p>Here is another post for specific usage, <a href="http://blog.ifyouseewendy.com/blog/2014/12/29/readable-git-log-by-using-custom-commit-template/">Readable Git Log by Using Custom Commit Template</a></p>

<h3 id="git-attributes">Git Attributes</h3>

<p>The path-specific settings are called Git attributes and are set either in a <code>.gitattribute</code> file in one of your directories (normally the root of your project) or in the <code>.git/info/attributes</code> file if you don’t want the attributes file committed with your project.</p>

<ul>
  <li>Identifying Binary Files</li>
  <li>Diffing Binary Files (word, image EXIF)</li>
  <li>Filters (clean and smudge)</li>
  <li>Exorting
    <ul>
      <li>export-ignore</li>
      <li>export-subst</li>
    </ul>
  </li>
  <li>Merge Strategies</li>
</ul>

<h2 id="porcelain">Porcelain</h2>

<h3 id="branch">Branch</h3>

<h4 id="inspecting-a-remote">Inspecting a Remote</h4>

<p><code>git remote show [remote-name]</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git remote show origin
</span><span class="line">* remote origin
</span><span class="line">  URL: git://github.com/schacon/ticgit.git
</span><span class="line">  Remote branch merged with ’git pull’ <span class="k">while </span>on branch master
</span><span class="line">    master
</span><span class="line">  Tracked remote branches
</span><span class="line">    master
</span><span class="line">    ticgit
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="checkout-and-track-a-remote-branch">Checkout and Track a Remote Branch</h4>

<p>Two ways.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git checkout -b sf origin/serverfix
</span><span class="line">Branch sf <span class="nb">set </span>up to track remote branch refs/remotes/origin/serverfix.
</span><span class="line">Switched to a new branch <span class="s2">&quot;sf&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git checkout --track origin/serverfix
</span><span class="line">Branch serverfix <span class="nb">set </span>up to track remote branch refs/remotes/origin/serverfix.
</span><span class="line">Switched to a new branch <span class="s2">&quot;serverfix&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="tag">Tag</h3>

<h4 id="share-tags">Share tags</h4>

<p>By default, the git push command doesn’t transfer tags to remote servers. You will have to explicitly push tags to a shared server after you have created them.</p>

<p><code>git push origin [tagname]</code></p>

<p>If you have a lot of tags that you want to push up at once, you can also use the –tags option to the git push command.</p>

<p><code>git push origin --tags</code></p>

<h4 id="sign-tags">Sign tags</h4>

<ul>
  <li>PGP, Pretty Good Privacy, the standard.</li>
  <li>GPG, Gnu Privacy Guard, the implementation.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="c"># Generate your key</span>
</span><span class="line"><span class="nv">$ </span>gpg --gen-key
</span><span class="line">
</span><span class="line"><span class="nv">$ </span>gpg --list-key
</span><span class="line">/Users/wendi/.gnupg/pubring.gpg
</span><span class="line">-------------------------------
</span><span class="line">pub   2048R/FXXXXXXX 2014-12-19
</span><span class="line">uid                  Di Wen <span class="o">(</span>wendi<span class="o">)</span> &lt;ifyouseewendy@gmail.com&gt;
</span><span class="line">sub   2048R/XXXXXXX 2014-12-19
</span><span class="line">
</span><span class="line"><span class="c"># Set Git config</span>
</span><span class="line"><span class="nv">$ </span>git config --global user.signingkey FXXXXXXX
</span><span class="line">
</span><span class="line"><span class="c"># Sign</span>
</span><span class="line">git tag -s v0.1 -m <span class="s1">&#39;First GPG signed tag&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="distributing-the-public-pgp-key">Distributing the Public PGP Key</h4>

<p>Import the key into the Git database by exporting it and piping that through <code>git hash-object</code>, which writes a new blob with those contents into Git and gives you back the SHA–1 of the blob.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>gpg -a --export F721C45A | git <span class="nb">hash</span>-object -w --stdin
</span><span class="line">659ef797d181633c87ec71ac3f9ba29fe5775b92
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now that you have the contents of your key in Git, you can create a tag that points directly to it by specifying the new SHA–1 value that the hash-object command gave you:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git tag -a maintainer-pgp-pub 659ef797d181633c87ec71ac3f9ba29fe5775b92
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If you run <code>git push --tags</code>, the maintainer-pgp-pub tag will be shared with ev- eryone. If anyone wants to verify a tag, they can directly import your PGP key by pulling the blob directly out of the database and importing it into GPG:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git show maintainer-pgp-pub | gpg --import
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>They can use that key to verify all your signed tags. Also, if you include instructions in the tag message, running <code>git show &lt;tag&gt;</code> will let you give the end user more specific instructions about tag verification.</p>

<h4 id="generate-a-build-number">Generate a Build Number</h4>

<p>Git gives you the name of the nearest tag with the number of commits on top of that tag and a partial SHA–1 value of the commit you’re describing:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git describe master
</span><span class="line">v1.6.2-rc1-20-g8c5b85c
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The git describe command favors annotated tags.</p>

<h4 id="prepare-a-release">Prepare a Release</h4>

<p>Create <code>tar.gz</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git archive master --prefix<span class="o">=</span>’project/’ | gzip &gt; ‘git describe master‘.tar.gz
</span><span class="line"><span class="nv">$ </span>ls *.tar.gz
</span><span class="line">v1.6.2-rc1-20-g8c5b85c.tar.gz
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Create <code>zip</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git archive master --prefix<span class="o">=</span>’project/’ --format<span class="o">=</span>zip &gt; ‘git describe master‘.zip
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="rebasing">Rebasing</h3>

<p><strong>an advanced example</strong></p>

<p>Now <code>git show-branch master server client</code> shows like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">&lt;-- commit0 &lt;-- commit1 &lt;-- commit2                 master
</span><span class="line">                  <span class="se">\</span>
</span><span class="line">                   <span class="se">\-</span>- commit3 &lt;-- commit4          server
</span><span class="line">                          <span class="se">\</span>
</span><span class="line">                           <span class="se">\-</span>- commit5 &lt;-- commit6  client
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>What does <code>git rebase --onto master server client</code> do?</p>

<ol>
  <li>Checkout <em>client</em> branch</li>
  <li>Figure out the patches from the common ancestor of <em>server</em> and <em>client</em> (commits of <code>git log server..client</code>)</li>
  <li>Replay the patches onto <em>master</em></li>
</ol>

<p>Run <code>git show-branch master server client</code> again:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">                        master                  client
</span><span class="line">                           |                       |
</span><span class="line">&lt;-- commit0 &lt;-- commit1 &lt;-- commit2 &lt;-- commit5 &lt;-- commit6
</span><span class="line">              <span class="se">\</span>
</span><span class="line">               <span class="se">\-</span>- commit3 &lt;-- commit4
</span><span class="line">                                  |
</span><span class="line">                                server
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="merge-base">Merge Base</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git merge-base master <span class="nb">test</span>
</span><span class="line">da07c4b40491581a0d6f877373a5cbeb1ea8c800
</span><span class="line">
</span><span class="line"><span class="nv">$ </span>git show <span class="sb">`</span>git merge-base master <span class="nb">test</span><span class="sb">`</span>
</span><span class="line">commit da07c4b40491581a0d6f877373a5cbeb1ea8c800
</span><span class="line">Author: wendi &lt;ifyouseewendy@gmail.com&gt;
</span><span class="line">Date:   Fri Dec 19 12:56:08 2014 +0800
</span><span class="line">
</span><span class="line">    Add README
</span><span class="line">
</span><span class="line">diff --git a/README b/README
</span><span class="line">new file mode 100644
</span><span class="line">index 0000000..e69de29
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="merge-stage">Merge Stage</h3>

<p>When merging, one parent will be <strong>HEAD</strong>, and the other will be the tip of the other branch, which is stored temporarily in <strong>MERGE_HEAD</strong>.</p>

<p>During the merge, the index holds three versions of each file. Each of these three “file stages” represents a different version of the file:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git show :1:file.txt <span class="c"># the file in a common ancestor of both branches.</span>
</span><span class="line"><span class="nv">$ </span>git show :2:file.txt <span class="c"># the version from HEAD.</span>
</span><span class="line"><span class="nv">$ </span>git show :3:file.txt <span class="c"># the version from MERGE_HEAD.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Some special diff options allow diffing the working directory against any of these stages:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git diff -1 file.txt <span class="c"># diff against stage 1</span>
</span><span class="line"><span class="nv">$ </span>git diff --base file.txt <span class="c"># same as the above</span>
</span><span class="line"><span class="nv">$ </span>git diff -2 file.txt <span class="c"># diff against stage 2</span>
</span><span class="line"><span class="nv">$ </span>git diff --ours file.txt <span class="c"># same as the above</span>
</span><span class="line"><span class="nv">$ </span>git diff -3 file.txt <span class="c"># diff against stage 3</span>
</span><span class="line"><span class="nv">$ </span>git diff --theirs file.txt <span class="c"># same as the above.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="ancestry-references">Ancestry References</h3>

<ul>
  <li>^&lt;n&gt; select the nth <em>parent</em> of the commit (relevant in merges).</li>
  <li>~&lt;n&gt; select the nth <em>ancestor</em> commit, always following the first parent.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">G   H   I   J
</span><span class="line"> <span class="se">\ </span>/     <span class="se">\ </span>/
</span><span class="line">  D   E   F
</span><span class="line">   <span class="se">\ </span> |  / <span class="se">\</span>
</span><span class="line">    <span class="se">\ </span>| /   |
</span><span class="line">     <span class="se">\|</span>/    |
</span><span class="line">      B     C
</span><span class="line">       <span class="se">\ </span>  /
</span><span class="line">        <span class="se">\ </span>/
</span><span class="line">         A
</span><span class="line"><span class="nv">A</span> <span class="o">=</span>      <span class="o">=</span> A^0
</span><span class="line"><span class="nv">B</span> <span class="o">=</span> A^   <span class="o">=</span> A^1     <span class="o">=</span> A~1
</span><span class="line"><span class="nv">C</span> <span class="o">=</span> A^2  <span class="o">=</span> A^2
</span><span class="line"><span class="nv">D</span> <span class="o">=</span> A^^  <span class="o">=</span> A^1^1   <span class="o">=</span> A~2
</span><span class="line"><span class="nv">E</span> <span class="o">=</span> B^2  <span class="o">=</span> A^^2
</span><span class="line"><span class="nv">F</span> <span class="o">=</span> B^3  <span class="o">=</span> A^^3
</span><span class="line"><span class="nv">G</span> <span class="o">=</span> A^^^ <span class="o">=</span> A^1^1^1 <span class="o">=</span> A~3
</span><span class="line"><span class="nv">H</span> <span class="o">=</span> D^2  <span class="o">=</span> B^^2    <span class="o">=</span> A^^^2  <span class="o">=</span> A~2^2
</span><span class="line"><span class="nv">I</span> <span class="o">=</span> F^   <span class="o">=</span> B^3^    <span class="o">=</span> A^^3^
</span><span class="line"><span class="nv">J</span> <span class="o">=</span> F^2  <span class="o">=</span> B^3^2   <span class="o">=</span> A^^3^2
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>recorded in <a href="http://schacon.github.com/git/git-rev-parse">git-rev-parse(1)</a></p>

<h3 id="commit-ranges">Commit Ranges</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="c"># reachable from one commit but aren’t reachable from another.</span>
</span><span class="line"><span class="nv">$ </span>git log ref1..ref2
</span><span class="line"><span class="nv">$ </span>git log ^ref1 ref2
</span><span class="line"><span class="nv">$ </span>git log ref2 --not ref1
</span><span class="line">
</span><span class="line"><span class="c"># reachable by either of two references but not by both of them.</span>
</span><span class="line"><span class="nv">$ </span>git log master...experiment
</span><span class="line">
</span><span class="line"><span class="nv">$ </span>git log --left-right master...experiment
</span><span class="line">&lt; F
</span><span class="line">&lt; E
</span><span class="line">&gt; D
</span><span class="line">&gt; C
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="log">Log</h3>

<h4 id="summarize-or-get-a-quick-changelog">Summarize or Get a Quick Changelog</h4>

<p>Use <code>git shortlog</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git shortlog --no-merges master --not v1.0.1
</span><span class="line">Chris Wanstrath <span class="o">(</span>8<span class="o">)</span>:
</span><span class="line">      Add support <span class="k">for </span>annotated tags to Grit::Tag
</span><span class="line">      Add packed-refs annotated tag support.
</span><span class="line">      Add Grit::Commit#to_patch
</span><span class="line">      Update version and History.txt
</span><span class="line">      Remove stray ‘puts‘
</span><span class="line">      Make ls_tree ignore nils
</span><span class="line">Tom Preston-Werner <span class="o">(</span>4<span class="o">)</span>:
</span><span class="line">      fix dates in <span class="nb">history</span>
</span><span class="line"><span class="nb">      </span>dynamic version method
</span><span class="line">      Version bump to 1.0.2
</span><span class="line">      Regenerated gemspec <span class="k">for </span>version 1.0.2
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="stash">Stash</h3>

<h4 id="reapply-the-staged-changes">Reapply the Staged Changes</h4>

<p>Use <code>git stash apply --index stash@{n}</code></p>

<p>You have stashed changes below,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">On branch master
</span><span class="line">Changes to be committed:
</span><span class="line">  <span class="o">(</span>use <span class="s2">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage<span class="o">)</span>
</span><span class="line">
</span><span class="line">        modified:   a.rb
</span><span class="line">
</span><span class="line">Changes not staged <span class="k">for </span>commit:
</span><span class="line">  <span class="o">(</span>use <span class="s2">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed<span class="o">)</span>
</span><span class="line">  <span class="o">(</span>use <span class="s2">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes in working directory<span class="o">)</span>
</span><span class="line">
</span><span class="line">        modified:   todo
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>After checking out to other branch and back, you wanna apply the changes stashed.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git stash apply stash@<span class="o">{</span>0<span class="o">}</span>
</span><span class="line">
</span><span class="line">On branch master
</span><span class="line">Changes not staged <span class="k">for </span>commit:
</span><span class="line">  <span class="o">(</span>use <span class="s2">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed<span class="o">)</span>
</span><span class="line">  <span class="o">(</span>use <span class="s2">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes in working directory<span class="o">)</span>
</span><span class="line">
</span><span class="line">        modified:   a.rb
</span><span class="line">        modified:   todo
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>So, How to reapply the staged changes?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git stash apply --index stash@<span class="o">{</span>0<span class="o">}</span>
</span><span class="line">
</span><span class="line">On branch master
</span><span class="line">Changes to be committed:
</span><span class="line">  <span class="o">(</span>use <span class="s2">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage<span class="o">)</span>
</span><span class="line">
</span><span class="line">        modified:   a.rb
</span><span class="line">
</span><span class="line">Changes not staged <span class="k">for </span>commit:
</span><span class="line">  <span class="o">(</span>use <span class="s2">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed<span class="o">)</span>
</span><span class="line">  <span class="o">(</span>use <span class="s2">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes in working directory<span class="o">)</span>
</span><span class="line">
</span><span class="line">        modified:   todo
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="create-a-branch-from-stash">Create a Branch from Stash</h4>

<p>Use <code>git stash branch {branch_name}</code>, which creates a new branch, checks out the commit you were on when you stashed your work, reapplies your work there, and then drops the stash if it applies successfully.</p>

<h3 id="create-new-empty-branches">Create New Empty Branches</h3>

<p>Use <strong>symobolic-ref</strong>. A symbolic ref is a regular file that stores a string that begins with ref: refs/. For example, your .git/HEAD is a regular file whose contents is ref: refs/heads/master.</p>

<blockquote>
  <p>In the past, .git/HEAD was a symbolic link pointing at
       refs/heads/master. When we wanted to switch to another branch, we did
       ln -sf refs/heads/newbranch .git/HEAD, and when we wanted to find out
       which branch we are on, we did readlink .git/HEAD. But symbolic links
       are not entirely portable, so they are now deprecated and symbolic refs
       (as described above) are used by default.</p>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git symbolic-ref HEAD refs/heads/newbranch
</span><span class="line">  <span class="c"># no branch is created,</span>
</span><span class="line">  <span class="c"># and all files are deleted to index.</span>
</span><span class="line"><span class="nv">$ </span>rm .git/index
</span><span class="line">git clean -fdx
</span><span class="line">&lt;<span class="k">do </span>work&gt;
</span><span class="line">git add your files
</span><span class="line">git commit -m <span class="s1">&#39;Initial commit&#39;</span>
</span><span class="line">  <span class="c"># branch &#39;newbranch&#39; is created.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="filter-branch">Filter Branch</h3>

<h4 id="removing-a-file-from-every-commit">Removing a File from Every Commit</h4>

<p>The <code>--tree-filter</code> option runs the specified command after each checkout of the project and then recommits the results.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git filter-branch --tree-filter ’rm -f passwords.txt’ HEAD
</span><span class="line">Rewrite 6b9b3cf04e7c5686a9cb838c3f36a8cb6a0fc2bd <span class="o">(</span>21/21<span class="o">)</span>
</span><span class="line">Ref ’refs/heads/master’ was rewritten
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="making-a-subdirectory-the-new-root">Making a Subdirectory the New Root</h4>

<p>Use <code>--subdirectory-filter</code> option.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git filter-branch --subdirectory-filter trunk HEAD
</span><span class="line">Rewrite 856f0bf61e41a27326cdae8f09fe708d679f596f <span class="o">(</span>12/12<span class="o">)</span>
</span><span class="line">Ref ’refs/heads/master’ was rewritten
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="changing-e-mail-addresses-globally">Changing E-Mail Addresses Globally</h4>

<p>Use <code>--commit-filter</code> option.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git filter-branch --commit-filter ’
</span><span class="line">        <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$GIT_AUTHOR_EMAIL&quot;</span> <span class="o">=</span> <span class="s2">&quot;schacon@localhost&quot;</span> <span class="o">]</span>;
</span><span class="line">        <span class="k">then</span>
</span><span class="line"><span class="k">                </span><span class="nv">GIT_AUTHOR_NAME</span><span class="o">=</span><span class="s2">&quot;Scott Chacon&quot;</span>;
</span><span class="line">                <span class="nv">GIT_AUTHOR_EMAIL</span><span class="o">=</span><span class="s2">&quot;schacon@example.com&quot;</span>;
</span><span class="line">                git commit-tree <span class="s2">&quot;$@&quot;</span>;
</span><span class="line">        <span class="k">else</span>
</span><span class="line"><span class="k">        fi</span>’ HEAD
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="realworld-example">Realworld Example</h4>

<p>Check this post, <a href="http://blog.ifyouseewendy.com/blog/2014/12/25/git-filter-branch-in-practice/">Git Filter Branch in Practice</a></p>

<h3 id="blame">Blame</h3>

<p>If you pass <code>-C</code> to git blame, Git analyzes the file you’re annotating and tries to figure out where snippets of code within it originally came from if they were copied from elsewhere.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git blame -C -L 141,153 GITPackUpload.m
</span><span class="line">f344f58d GITServerHandler.m <span class="o">(</span>Scott 2009-01-04 141<span class="o">)</span>
</span><span class="line">f344f58d GITServerHandler.m <span class="o">(</span>Scott 2009-01-04 142<span class="o">)</span> - <span class="o">(</span>void<span class="o">)</span> gatherObjectShasFromC
</span><span class="line">f344f58d GITServerHandler.m <span class="o">(</span>Scott 2009-01-04 143<span class="o">)</span> <span class="o">{</span>
</span><span class="line">70befddd GITPackUpload.m    <span class="o">(</span>Scott 2009-03-22 144<span class="o">)</span>     //NSLog<span class="o">(</span>@<span class="err">&quot;</span>GATHER COMMI
</span><span class="line">ad11ac80 GITPackUpload.m    <span class="o">(</span>Scott 2009-03-22 144<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="bisect">Bisect</h3>

<p>First you run <code>git bisect start</code> to get things going, and then you use <code>git bisect bad</code> to tell the system that the current commit you’re on is broken. Then, you must tell bisect when the last known good state was, using <code>git bisect good [good commit]</code>.</p>

<h4 id="auto-check-by-script">Auto Check By Script</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git bisect run <span class="nb">test</span>-error.sh
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Doing so automatically runs <code>test-error.sh</code> on each checked-out commit until Git finds the first broken commit. You can also run something like make or make tests or whatever you have that runs automated tests for you.</p>

<h3 id="submodules">Submodules</h3>

<h4 id="maintain-a-repo-which-contains-a-submodule">Maintain a repo which contains a submodule</h4>

<blockquote>
  <p>Add a submodule into your existing git repo.</p>
</blockquote>

<p>Add a submodule.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git submodule add git://github.com/chneukirchen/rack.git rack
</span><span class="line">
</span><span class="line"><span class="nv">$ </span>git status
</span><span class="line"><span class="c"># On branch master</span>
</span><span class="line"><span class="c"># Changes to be committed:</span>
</span><span class="line"><span class="c"># # # # #</span>
</span><span class="line"><span class="o">(</span>use <span class="s2">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage<span class="o">)</span>
</span><span class="line">   new file:   .gitmodules
</span><span class="line">   new file:   rack
</span><span class="line">
</span><span class="line"><span class="nv">$ </span>git commit -m <span class="s1">&#39;Add rack submodule&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As <code>.git/config</code> and <code>.gitmodules</code> have been registered, when you want to update the submodule, just enter into the submodule dir and do git opertations.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span><span class="nb">cd </span>rack
</span><span class="line"><span class="nv">$ </span>touch aa <span class="o">&amp;&amp;</span> git add . <span class="o">&amp;&amp;</span> git commit -m <span class="s1">&#39;Add aa&#39;</span>
</span><span class="line"><span class="o">[</span>master 060998f<span class="o">]</span> Add aa
</span><span class="line"> 1 file changed, 0 insertions<span class="o">(</span>+<span class="o">)</span>, 0 deletions<span class="o">(</span>-<span class="o">)</span>
</span><span class="line"> create mode 100644 aa
</span><span class="line"><span class="nv">$ </span>git push
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>When you make changes and commit in that subdirectory, the superproject notices that the <em>HEAD</em> there has changed and records the exact commit you’re currently working off of. So, update your superproject from time to time with a pointer to the latest commit in that subproject.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span><span class="nb">cd</span> ..
</span><span class="line"><span class="nv">$ </span>git status
</span><span class="line">On branch master
</span><span class="line">Changes not staged <span class="k">for </span>commit:
</span><span class="line">  <span class="o">(</span>use <span class="s2">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed<span class="o">)</span>
</span><span class="line">  <span class="o">(</span>use <span class="s2">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes in working directory<span class="o">)</span>
</span><span class="line">
</span><span class="line">        modified:   rack <span class="o">(</span>new commits<span class="o">)</span>
</span><span class="line"><span class="nv">$ </span>git commit -am <span class="s1">&#39;Update rack&#39;</span>
</span><span class="line"><span class="nv">$ </span>git push
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="maintain-a-cloned-repo-which-contains-a-submodule">Maintain a cloned repo which contains a submodule</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git clone git://github.com/schacon/myproject.git
</span><span class="line"><span class="nv">$ </span><span class="nb">cd </span>myproject/rack
</span><span class="line"><span class="nv">$ </span>ls
</span><span class="line"><span class="c"># empty</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Setup with two commands:</p>

<ol>
  <li><code>git submodule init</code>. Initialize your local configurtaion (<code>.gitmodules</code> to  <code>.git/config</code>)</li>
  <li><code>git submodule update</code>. Fetch all the data from that project and check out the appropriate commit listed in your superproject.</li>
</ol>

<h4 id="a-demo-workflow">A Demo Workflow</h4>

<p>Create the submodules:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>mkdir ~/git
</span><span class="line"><span class="nv">$ </span><span class="nb">cd</span> ~/git
</span><span class="line"><span class="nv">$ </span><span class="k">for </span>i in a b c d
</span><span class="line"><span class="k">do</span>
</span><span class="line"><span class="k">    </span>mkdir <span class="nv">$i</span>
</span><span class="line">    <span class="nb">cd</span> <span class="nv">$i</span>
</span><span class="line">    git init
</span><span class="line">    <span class="nb">echo</span> <span class="s2">&quot;module $i&quot;</span> &gt; <span class="nv">$i</span>.txt
</span><span class="line">    git add <span class="nv">$i</span>.txt
</span><span class="line">    git commit -m <span class="s2">&quot;Initial commit, submodule $i&quot;</span>
</span><span class="line">    <span class="nb">cd</span> ..
</span><span class="line"><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Create the superproject and add all the submodules:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>mkdir super
</span><span class="line"><span class="nv">$ </span><span class="nb">cd </span>super
</span><span class="line"><span class="nv">$ </span>git init
</span><span class="line"><span class="nv">$ </span><span class="k">for </span>i in a b c d
</span><span class="line"><span class="k">do</span>
</span><span class="line"><span class="k">    </span>git submodule add ~/git/<span class="nv">$i</span>
</span><span class="line"><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>See what files git-submodule created:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>ls -a
</span><span class="line">.  ..  .git  .gitmodules  a  b  c  d
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>git-submodule add</code> command does a couple of things:</p>

<ul>
  <li>It clones the submodule under the current directory and by default checks out the master branch.</li>
  <li>It adds the submodule’s clone path to the gitmodules file and adds this file to the index, ready to be committed.</li>
  <li>It adds the submodule’s current commit ID to the index, ready to be committed.</li>
</ul>

<p>Commit the superproject:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git commit -m <span class="s2">&quot;Add submodules a, b, c and d.&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Clone the superproject:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span><span class="nb">cd</span> ..
</span><span class="line"><span class="nv">$ </span>git clone super cloned
</span><span class="line"><span class="nv">$ </span><span class="nb">cd </span>cloned
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Check submodule status:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git submodule status
</span><span class="line">-d266b9873ad50488163457f025db7cdd9683d88b a
</span><span class="line">-e81d457da15309b4fef4249aba9b50187999670d b
</span><span class="line">-c1536a972b9affea0f16e0680ba87332dc059146 c
</span><span class="line">-d96249ff5d57de5de093e6baff9e0aafa5276a74 d
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Register the submodule into <code>.git/config</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git submodule init
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Clone the submodules and check out the commits specified in the superproject:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git submodule update
</span><span class="line"><span class="nv">$ </span><span class="nb">cd </span>a
</span><span class="line"><span class="nv">$ </span>ls -a
</span><span class="line">.  ..  .git  a.txt
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>One major difference between <code>git-submodule update</code> and <code>git-submodule add</code> is that git-submodule update checks out a specific commit, rather than the tip of a branch. It’s like checking out a tag: <strong>the head is detached</strong>, so you’re not working on a branch. </p>

<p>A detached head, means the <em>HEAD</em> file points directly to a commit, not to a symbolic reference.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git branch
</span><span class="line">* <span class="o">(</span>no branch<span class="o">)</span>
</span><span class="line">master
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Check out or create a new branch:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git checkout master
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git checkout -b fix-up
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Do work and commit:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;adding a line again&quot;</span> &gt;&gt; a.txt
</span><span class="line"><span class="nv">$ </span>git commit -a -m <span class="s2">&quot;Updated the submodule from within the superproject.&quot;</span>
</span><span class="line"><span class="nv">$ </span>git push
</span><span class="line"><span class="nv">$ </span><span class="nb">cd</span> ..
</span><span class="line"><span class="nv">$ </span>git diff
</span><span class="line">diff --git a/a b/a
</span><span class="line">index d266b98..261dfac 160000
</span><span class="line">--- a/a
</span><span class="line">+++ b/a
</span><span class="line">@@ -1 +1 @@
</span><span class="line">-Subproject commit d266b9873ad50488163457f025db7cdd9683d88b
</span><span class="line">+Subproject commit 261dfac35cb99d380eb966e102c1197139f7fa24
</span><span class="line"><span class="nv">$ </span>git add a
</span><span class="line"><span class="nv">$ </span>git commit -m <span class="s2">&quot;Updated submodule a.&quot;</span>
</span><span class="line"><span class="nv">$ </span>git push
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="cautions">Cautions</h4>

<p><em>Always publish the submodule change before publishing the change to the superproject that references it. If you forget to publish the submodule change, others won’t be able to clone the repository:</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span><span class="nb">cd</span> ~/git/super/a
</span><span class="line"><span class="nv">$ </span><span class="nb">echo </span>i added another line to this file &gt;&gt; a.txt
</span><span class="line"><span class="nv">$ </span>git commit -a -m <span class="s2">&quot;doing it wrong this time&quot;</span>
</span><span class="line"><span class="nv">$ </span><span class="nb">cd</span> ..
</span><span class="line"><span class="nv">$ </span>git add a
</span><span class="line"><span class="nv">$ </span>git commit -m <span class="s2">&quot;Updated submodule a again.&quot;</span>
</span><span class="line"><span class="nv">$ </span>git push
</span><span class="line"><span class="nv">$ </span><span class="nb">cd</span> ~/git/cloned
</span><span class="line"><span class="nv">$ </span>git pull
</span><span class="line"><span class="nv">$ </span>git submodule update
</span><span class="line">error: pathspec <span class="s1">&#39;261dfac35cb99d380eb966e102c1197139f7fa24&#39;</span> did not match any file<span class="o">(</span>s<span class="o">)</span> known to git.
</span><span class="line">Did you forget to <span class="s1">&#39;git add&#39;</span>?
</span><span class="line">Unable to checkout <span class="s1">&#39;261dfac35cb99d380eb966e102c1197139f7fa24&#39;</span> in submodule path <span class="s1">&#39;a&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>It’s not safe to run git submodule update if you’ve made and committed changes within a submodule without checking out a branch first. They will be silently overwritten</em>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>cat a.txt
</span><span class="line">module a
</span><span class="line"><span class="nv">$ </span><span class="nb">echo </span>line added from private2 &gt;&gt; a.txt
</span><span class="line"><span class="nv">$ </span>git commit -a -m <span class="s2">&quot;line added inside private2&quot;</span>
</span><span class="line"><span class="nv">$ </span><span class="nb">cd</span> ..
</span><span class="line"><span class="nv">$ </span>git submodule update
</span><span class="line">Submodule path <span class="s1">&#39;a&#39;</span>: checked out <span class="s1">&#39;d266b9873ad50488163457f025db7cdd9683d88b&#39;</span>
</span><span class="line"><span class="nv">$ </span><span class="nb">cd </span>a
</span><span class="line"><span class="nv">$ </span>cat a.txt
</span><span class="line">module a
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="subtree-merging-a-submodule-substitution">Subtree Merging (A Submodule Substitution)</h3>

<h4 id="use-git-merge-subtree-strategy">Use git-merge Subtree Strategy</h4>

<p><strong>Add a subtree</strong></p>

<p>First, add the Rack project as a remote reference in your own project and then check it out into its own branch.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git remote add rack_remote git@github.com:schacon/rack.git
</span><span class="line"><span class="nv">$ </span>git fetch rack_remote
</span><span class="line"><span class="nv">$ </span>git checkout -b rack_branch rack_remote/master
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now you have the root of the Rack project in your <code>rack_branch</code> branch and your own project in the <code>master</code> branch.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>ls
</span><span class="line">AUTHORS        KNOWN-ISSUES   Rakefile
</span><span class="line">COPYING        README         bin
</span><span class="line"><span class="nv">$ </span>git checkout master
</span><span class="line">Switched to branch <span class="s2">&quot;master&quot;</span>
</span><span class="line"><span class="nv">$ </span>ls
</span><span class="line">README
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Use <code>git read-tree</code> to read the root tree of one branch into your current staging area and working directory. You just switched back to your <code>master</code> branch, and you pull the <code>rack_branch</code> into the <em>rack</em> subdirectory of your <code>master</code> branch of your main project.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git <span class="nb">read</span>-tree --prefix<span class="o">=</span>rack/ -u rack_branch
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>When you commit, it looks like you have all the Rack files under that subdirectory — as though you copied them in from a tarball. </p>

<p><strong>Update and merge subtree</strong></p>

<p>If the Rack project updates, you can pull in upstream changes by switching to that branch and pulling:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git checkout rack_branch
</span><span class="line"><span class="nv">$ </span>git pull
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Then, you can merge those changes back into your master branch. You can use <code>git merge -s subtree</code> and it will work fine; but Git will also merge the histories together, which you probably don’t want. To pull in the changes and prepopulate the commit message, use the <code>--squash</code> and <code>--no-commit</code> options as well as the <code>-s subtree</code> strategy option:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git checkout master
</span><span class="line"><span class="nv">$ </span>git merge --squash -s subtree --no-commit rack_branch
</span><span class="line">Squash commit -- not updating HEAD
</span><span class="line">Automatic merge went well; stopped before committing as requested
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>All the changes from your Rack project are merged in and ready to be committed locally. You can also do the opposite — make changes in the <code>rack</code> subdirectory of your master branch and then merge them into your <code>rack_branch</code> branch later to submit them to the maintainers or push them upstream.</p>

<p><strong>Diff a subtree</strong></p>

<p>To get a diff between what you have in your rack subdirectory and the code in your rack branch branch — to see if you need to merge them — you can’t use the normal diff command. Instead, you must run git diff-tree with the branch you want to compare to:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git diff-tree -p rack_branch
</span><span class="line"><span class="nv">$ </span>git diff-tree -p rack_remote/master
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="use-git-subtree">Use git-subtree</h4>

<ul>
  <li><a href="http://blogs.atlassian.com/2013/05/alternatives-to-git-submodule-git-subtree/">alternatives-to-git-submodule-git-subtree</a> by Atlassian Blog</li>
  <li><a href="https://hpc.uni.lu/blog/2014/understanding-git-subtree/">Understanding Git Subtree</a> by HPC @ Uni.lu</li>
</ul>

<h2 id="git-internals">Git Internals</h2>

<p>Git is fundamentally a <strong>content-addressable filesystem</strong> with a VCS user interface written on top of it.</p>

<ul>
  <li>Plumbing, verbs that do low-level work and were designed to be chained together UNIX style or called from scripts.</li>
  <li>Porcelain, the more user-friendly commands.</li>
</ul>

<h3 id="plumbing-objects">Plumbing Objects</h3>

<h4 id="blob-object">Blob Object</h4>

<p>Git is a content-addressable filesystem, at the core of Git is a simple key-value data store. You can insert any kind of content into it, and it will give you back a key that you can use to retrieve the content again at any time.</p>

<p><strong>Create</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;test content&#39;</span> | git <span class="nb">hash</span>-object -w --stdin
</span><span class="line">d670460b4b4aece5915caf5c68d12f560a9fe3e4
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>-w</code> tells hash-object to store the object; otherwise, the command simply tells you what the key would be.</p>

<p><strong>Check</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>find .git/objects -type f
</span><span class="line">.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>View</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git cat-file -p d670460b4b4aece5915caf5c68d12f560a9fe3e4
</span><span class="line"><span class="nb">test </span>content
</span><span class="line">
</span><span class="line"><span class="nv">$ </span>git cat-file -t d670460b4b4aece5915caf5c68d12f560a9fe3e4
</span><span class="line">blob
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="tree-objects">Tree Objects</h4>

<p>Basically, tree objects are used to specify snapshots.</p>

<p>Tree object solves the problem of storing the filename and also allows you to store a group of files together.</p>

<p><strong>View</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git cat-file -p masterˆ<span class="o">{</span>tree<span class="o">}</span>
</span><span class="line">100644 blob a906cb2a4a904a152e80877d4088654daad0c859    README
</span><span class="line">100644 blob 8f94139338f9404f26296befa88755fc2598c289    Rakefile
</span><span class="line">040000 tree 99f1a6d12cb4b6f19c8655fca46c3ecf317074e0    lib
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Create</strong>.</p>

<p>Git normally creates a tree by taking the state of your staging area or index and writing a tree object from it. </p>

<ul>
  <li>
    <p>Use <code>update-index</code> to create an index.</p>

    <ul>
      <li><code>--add</code>, because the file doesn’t yet exist in your staging area.</li>
      <li><code>--cacheinfo</code>, because the file you’re adding isn’t in your directory but is in your database.</li>
      <li><code>100644</code>, which means it’s a normal file. Other options are <code>100755</code>, which means it’s an executable file; and <code>120000</code>, which specifies a symbolic link.</li>
    </ul>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git update-index --add --cacheinfo 100644 <span class="se">\</span>
</span><span class="line">  83baae61804e65cc73a7201a7252750c76066a30 test.tx
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Use <code>read-tree</code> to read an existing tree into your staging area as a subtree by using the <code>--prefix</code> option.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git cat-file -p d8329fc1cc938780ffdd9f94e0d364e0ea74f579
</span><span class="line">100644 blob 83baae61804e65cc73a7201a7252750c76066a30    test.txt
</span><span class="line">
</span><span class="line"><span class="nv">$ </span>git <span class="nb">read</span>-tree --prefix<span class="o">=</span>bak d8329fc1cc938780ffdd9f94e0d364e0ea74f579
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Use the <code>write-tree</code> command to write the staging area out to a tree object. No <code>-w</code> option is needed — calling <code>write-tree</code> automatically creates a tree object from the state of the index if that tree doesn’t yet exist:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git write-tree
</span><span class="line">d8329fc1cc938780ffdd9f94e0d364e0ea74f579
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="commit-objects">Commit Objects</h4>

<p>You have three trees that specify the different snapshots of your project that you want to track, but the earlier problem remains: you must remember all three SHA–1 values in order to recall the snapshots. You also don’t have any information about who saved the snapshots, when they were saved, or why they were saved. This is the basic information that the commit object stores for you.</p>

<p><strong>Create</strong></p>

<p>Use <code>commit-tree</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span><span class="nb">echo</span> ’first commit’ | git commit-tree d8329f
</span><span class="line">fdf4fc3344e67ab068f836878b6c4951e3b15f3d
</span><span class="line">
</span><span class="line"><span class="nv">$ </span><span class="nb">echo</span> ’second commit’ | git commit-tree 0155eb -p fdf4fc3
</span><span class="line">cac0cab538b970a37ea1e769cbbde608743bc96d
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>View</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git cat-file -p fdf4fc3
</span><span class="line">tree d8329fc1cc938780ffdd9f94e0d364e0ea74f579
</span><span class="line">author Scott Chacon &lt;schacon@gmail.com&gt; 1243040974 -0700
</span><span class="line">committer Scott Chacon &lt;schacon@gmail.com&gt; 1243040974 -0700
</span><span class="line">
</span><span class="line">first commit
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="object-storage">Object Storage</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>git_object_storage.rb</span><a href="https://gist.github.com/ifyouseewendy/ec7a4d8df55a2de70af1">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="rb"><span class="line"><span class="nb">require</span> <span class="s1">&#39;digest/sha1&#39;</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;zlib&#39;</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;fileutils&#39;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># put_raw_object(&quot;what is up, doc?&quot;, &#39;blob&#39;)</span>
</span><span class="line"><span class="k">def</span> <span class="nf">put_raw_object</span><span class="p">(</span><span class="n">content</span><span class="p">,</span> <span class="n">type</span><span class="p">)</span>
</span><span class="line">  <span class="c1"># Generate SHA-1</span>
</span><span class="line">  <span class="n">header</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">type</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">content</span><span class="o">.</span><span class="n">length</span><span class="si">}</span><span class="se">\0</span><span class="s2">&quot;</span>   <span class="c1"># =&gt; &quot;blob 16\000&quot;</span>
</span><span class="line">  <span class="n">store</span> <span class="o">=</span> <span class="n">header</span> <span class="o">+</span> <span class="n">content</span>              <span class="c1"># =&gt; &quot;blob 16\000what is up, doc?&quot;</span>
</span><span class="line">  <span class="n">sha1</span> <span class="o">=</span> <span class="ss">Digest</span><span class="p">:</span><span class="ss">:SHA1</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">(</span><span class="n">store</span><span class="p">)</span>  <span class="c1"># =&gt; &quot;bd9dbf5aae1a3862dd1526723246b20206e5fc37&quot;</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># p sha1</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># Compress with Zlib</span>
</span><span class="line">  <span class="n">zlib_content</span> <span class="o">=</span> <span class="ss">Zlib</span><span class="p">:</span><span class="ss">:Deflate</span><span class="o">.</span><span class="n">deflate</span><span class="p">(</span><span class="n">store</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># Write to disk</span>
</span><span class="line">  <span class="n">path</span> <span class="o">=</span> <span class="s1">&#39;.git/objects/&#39;</span> <span class="o">+</span> <span class="n">sha1</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="o">]</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="n">sha1</span><span class="o">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">38</span><span class="o">]</span> <span class="c1"># =&gt; &quot;.git/objects/bd/9dbf5aae1a3862dd1526723246b20206e5fc37&quot;</span>
</span><span class="line">  <span class="no">FileUtils</span><span class="o">.</span><span class="n">mkdir_p</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">path</span><span class="p">))</span>                 <span class="c1"># =&gt; &quot;.git/objects/bd&quot;</span>
</span><span class="line">  <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">){</span><span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">write</span> <span class="n">zlib_content</span> <span class="p">}</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong><em>What Git does when you run the git add and git commit commands?</em></strong></p>

<ol>
  <li>stores blobs for the files that have changed</li>
  <li>updates the index</li>
  <li>writes out trees</li>
  <li>writes commit objects that reference the top- level trees and the commits that came immediately before them.</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>find .git/objects -type f
</span><span class="line">.git/objects/01/55eb4229851634a0f03eb265b69f5a2d56f341 <span class="c"># tree 2</span>
</span><span class="line">.git/objects/1a/410efbd13591db07496601ebc7a059dd55cfe9 <span class="c"># commit 3</span>
</span><span class="line">.git/objects/1f/7a7a472abf3dd9643fd615f6da379c4acb3e3a <span class="c"># test.txt v2</span>
</span><span class="line">.git/objects/3c/4e9cd789d88d8d89c1073707c3585e41b0e614 <span class="c"># tree 3</span>
</span><span class="line">.git/objects/83/baae61804e65cc73a7201a7252750c76066a30 <span class="c"># test.txt v1</span>
</span><span class="line">.git/objects/ca/c0cab538b970a37ea1e769cbbde608743bc96d <span class="c"># commit 2</span>
</span><span class="line">.git/objects/d8/329fc1cc938780ffdd9f94e0d364e0ea74f579 <span class="c"># tree 1</span>
</span><span class="line">.git/objects/fa/49b077972391ad58037050f2a75f74e3671e92 <span class="c"># new.txt</span>
</span><span class="line">.git/objects/fd/f4fc3344e67ab068f836878b6c4951e3b15f3d <span class="c"># commit 1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/pro_git_figure_9_3.png" alt="figure 9.3" /></p>

<h3 id="index">Index</h3>

<p>The index is a binary file (generally kept in .git/index) containing a sorted list of path names.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git ls-files --stage
</span><span class="line">100644 63c918c667fa005ff12ad89437f2fdc80926e21c 0
</span><span class="line">100644 5529b198e8d14decbe4ad99db3f7fb632de0439d 0
</span><span class="line">100644 6ff87c4664981e4397625791c8ea3bbb5f2279a3 0
</span><span class="line">100644 a37b2152bd26be2c2289e1f57a292534a51a93c7 0
</span><span class="line">100644 fbefe9a45b00a54b58d94d06eca48b03d40a50e0 0
</span><span class="line">...
</span><span class="line">100644 2511aef8d89ab52be5ec6a5e46236b4b6bcd07ea 0
</span><span class="line">100644 2ade97b2574a9f77e7ae4002a4e07a6a38e46d07 0
</span><span class="line">100644 d5de8292e05e7c36c4b68857c1cf9855e3d2f70a 0
</span><span class="line">.gitignore
</span><span class="line">.mailmap
</span><span class="line">COPYING
</span><span class="line">Documentation/.gitignore
</span><span class="line">Documentation/Makefile
</span><span class="line">xdiff/xtypes.h
</span><span class="line">xdiff/xutils.c
</span><span class="line">xdiff/xutils.h
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>
    <p>The index contains all the information necessary to generate a single (uniquely determined) tree object.</p>
  </li>
  <li>
    <p>The index enables fast comparisons between the tree object it defines and the working tree.</p>
  </li>
  <li>
    <p>It can efficiently represent information about merge conflicts between different tree objects.</p>
  </li>
</ol>

<h3 id="packfile">Packfile</h3>

<ul>
  <li><strong>Loose objects</strong> are the simpler format. It is simply the compressed data (snapshots) stored in a single file on disk.</li>
  <li><strong>Packed Objects</strong>. In order to save that space, Git utilizes the packfile. This is a format where Git will only save the part that has changed in the second file, with a pointer to the file it is similar to. Triggered by
    <ul>
      <li>run the <code>git gc</code> command manually</li>
      <li>push to a remote server</li>
    </ul>
  </li>
</ul>

<p>When Git packs objects, it looks for files that are named and sized similarly, and stores just the deltas from one version of the file to the next.</p>

<p>What is also interesting is that the second version of the file is the one that is stored intact, whereas the original version is stored as a delta — this is because you’re most likely to need faster access to the most recent version of the file.</p>

<h3 id="the-refspec">The Refspec</h3>

<p>Recorded in <code>.git/config</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="o">[</span>remote <span class="s2">&quot;origin&quot;</span><span class="o">]</span>
</span><span class="line">    <span class="nv">url</span> <span class="o">=</span> git@github.com:schacon/simplegit-progit.git
</span><span class="line">    <span class="nv">fetch</span> <span class="o">=</span> +refs/heads/*:refs/remotes/origin/*
</span><span class="line">    <span class="nv">push</span> <span class="o">=</span> refs/heads/master:refs/heads/master
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The format of the refspec is an optional <code>+</code>, followed by <code>&lt;src&gt;:&lt;dst&gt;</code>.</p>

<ul>
  <li><code>+</code> tells Git to update the reference even if it isn’t a fast-forward.</li>
  <li><code>&lt;src&gt;</code> is the pattern for references on the remote side.</li>
  <li><code>&lt;dst&gt;</code> is where those references will be written locally. </li>
</ul>

<h4 id="fetching">fetching</h4>

<p>If you want Git instead to pull down only the master branch each time, and not every other branch on the remote server, you can change the fetch line to</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">fetch</span> <span class="o">=</span> +refs/heads/master:refs/remotes/origin/master
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You can also specify multiple refspecs for fetching in your configuration file.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">fetch</span> <span class="o">=</span> +refs/heads/master:refs/remotes/origin/master
</span><span class="line"><span class="nv">fetch</span> <span class="o">=</span> +refs/heads/experiment:refs/remotes/origin/experiment
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You can use namespacing to accomplish something like that. If you have a QA team that pushes a series of branches, and you want to get the master branch and any of the QA team’s branches but nothing else, you can use a config section like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="o">[</span>remote <span class="s2">&quot;origin&quot;</span><span class="o">]</span>
</span><span class="line">    <span class="nv">url</span> <span class="o">=</span> git@github.com:schacon/simplegit-progit.git
</span><span class="line">    <span class="nv">fetch</span> <span class="o">=</span> +refs/heads/master:refs/remotes/origin/master
</span><span class="line">    <span class="nv">fetch</span> <span class="o">=</span> +refs/heads/qa/*:refs/remotes/origin/qa/*
</span><span class="line">
</span><span class="line">    <span class="c"># You can’t use partial globs in the pattern</span>
</span><span class="line">    <span class="c"># fetch = +refs/heads/qa*:refs/remotes/origin/qa*</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If you want to do something one time, you can specify the refspec on the command line, too. Multiple refspecs are accepted.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git fetch origin master:refs/remotes/origin/mymaster <span class="se">\</span>
</span><span class="line">   topic:refs/remotes/origin/topic
</span><span class="line">From git@github.com:schacon/simplegit
</span><span class="line"> ! <span class="o">[</span>rejected<span class="o">]</span>        master     -&gt; origin/mymaster  <span class="o">(</span>non fast forward<span class="o">)</span>
</span><span class="line"> * <span class="o">[</span>new branch<span class="o">]</span>      topic      -&gt; origin/topic
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="data-recovery">Data Recovery</h3>

<h4 id="reflog">reflog</h4>

<p>As you’re working, Git silently records what your HEAD is every time you change it. Each time you commit or change branches, the reflog is updated. The reflog is also updated by the <code>git update-ref</code> command, which is another reason to use it instead of just writing the SHA value to your ref files.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git reflog
</span><span class="line">1a410ef HEAD@<span class="o">{</span>0<span class="o">}</span>: 1a410efbd13591db07496601ebc7a059dd55cfe9: updating HEAD
</span><span class="line">ab1afef HEAD@<span class="o">{</span>1<span class="o">}</span>: ab1afef80fac8e34258ff41fc1b867c702daa24b: updating HEAD
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To see the same information in a much more useful way, we can run <code>git log -g</code> or <code>git log --walk-reflogs</code>, which will give you a normal log output for your reflog.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git log -g
</span><span class="line">commit 1a410efbd13591db07496601ebc7a059dd55cfe9
</span><span class="line">Reflog: HEAD@<span class="o">{</span>0<span class="o">}</span> <span class="o">(</span>Scott Chacon &lt;schacon@gmail.com&gt;<span class="o">)</span>
</span><span class="line">Reflog message: updating HEAD
</span><span class="line">Author: Scott Chacon &lt;schacon@gmail.com&gt;
</span><span class="line">Date:   Fri May 22 18:22:37 2009 -0700
</span><span class="line">
</span><span class="line">    third commit
</span><span class="line">
</span><span class="line">commit ab1afef80fac8e34258ff41fc1b867c702daa24b
</span><span class="line">Reflog: HEAD@<span class="o">{</span>1<span class="o">}</span> <span class="o">(</span>Scott Chacon &lt;schacon@gmail.com&gt;<span class="o">)</span>
</span><span class="line">Reflog message: updating HEAD
</span><span class="line">Author: Scott Chacon &lt;schacon@gmail.com&gt;
</span><span class="line">Date:   Fri May 22 18:15:24 2009 -0700
</span><span class="line">
</span><span class="line">    modified repo a bit
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="fsck">fsck</h4>

<blockquote>
  <p>File System Consistency Check</p>
</blockquote>

<p>Suppose your loss was for some reason not in the reflog, you can use the <code>git fsck</code> utility, which checks your database for integrity. If you run it with the <code>--full</code> option, it shows you all objects that aren’t pointed to by another object:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git fsck --full
</span><span class="line">dangling blob d670460b4b4aece5915caf5c68d12f560a9fe3e4
</span><span class="line">dangling commit ab1afef80fac8e34258ff41fc1b867c702daa24b
</span><span class="line">dangling tree aea790b9a58f6cf6f2804eeac9f0abbe9631e4c9
</span><span class="line">dangling blob 7108f7ecb345ee9d0084193f147cdad4d2998293
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Readable Git Log by Using Custom Commit Template]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2014/12/29/readable-git-log-by-using-custom-commit-template/"/>
    <updated>2014-12-29T15:43:39+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2014/12/29/readable-git-log-by-using-custom-commit-template</id>
    <content type="html"><![CDATA[<p>I was thinking of making my git logs more readable for a long time. Sometimes merge log can help to seperate a set of commits as a feature, but <strong>how can we get more info from the sequential log messages inside a set of commits?</strong></p>

<p>After doing a little research, I’ve found <a href="http://programmers.stackexchange.com/questions/42110/can-you-recommend-a-good-commit-message-template-guidelines-to-enforce-in-the">rangzen’s answer</a> on Stack Exchange sounds reasonable.</p>

<blockquote>
  <p>With Add, Mod(ify), Ref(actoring), Fix, Rem(ove) and Rea(dability) then it’s easy to extract logfile.
Example :<br />
+ Add: New function to rule the world.<br />
+ Mod: Add women factor in Domination.ruleTheWorld().<br />
+ Ref: Extract empathy stuff to an abstract class.<br />
+ Fix: RUL-42 or #42 Starvation need to be initialised before Energy to avoid the nullpointer in People.<br />
+ Rem: freeSpeech is not used anymore.<br />
+ Rea: Removed old TODO and extra space in header.  </p>
</blockquote>

<p>And I want to give it a try by,</p>

<ol>
  <li>Setting <code>git config commit.template</code> to my customized commit template.</li>
  <li>Using git <code>commit-msg</code> hook to enforce the pattern, validating on commit message.</li>
</ol>

<p>Here is the details.</p>

<h2 id="customize-commit-template">Customize Commit Template</h2>

<p>Write a <code>.gitmessage</code> template.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class=""><span class="line">
</span><span class="line"># = Rule 1, use meta operation
</span><span class="line">
</span><span class="line"># Add: new function to rule the world
</span><span class="line"># Mod: query_date logic
</span><span class="line"># Rem: user.rake is not used anymore
</span><span class="line"># Ren: hello-world to hell-world
</span><span class="line"># Fix: #1900, stupid typo
</span><span class="line"># Ref: extract to an abstract class.
</span><span class="line"># Opt: cache in get_active_table
</span><span class="line">
</span><span class="line"># = Rule 2, leave a "*" at the end to flag folding
</span><span class="line">
</span><span class="line"># Mod: query_date logic*
</span><span class="line">#
</span><span class="line"># Use chronic to guess date.
</span><span class="line">#
</span><span class="line"># Chronic.parse('may 27th', :guess =&gt; false)
</span><span class="line"># #=&gt; Sun May 27 00:00:00 PDT 2007..Mon May 28 00:00:00 PDT 2007
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Make git serve it.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git config --global commit.template ~/.gitmessage
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now when committing, git enables the template:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git touch README <span class="o">&amp;&amp;</span> git commit
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="c"># = Rule 1, use meta operation</span>
</span><span class="line">
</span><span class="line"><span class="c"># Add: new function to rule the world</span>
</span><span class="line"><span class="c"># Mod: query_date logic</span>
</span><span class="line"><span class="c"># Rem: user.rake is not used anymore</span>
</span><span class="line"><span class="c"># Ren: hello-world to hell-world</span>
</span><span class="line"><span class="c"># Fix: #1900, stupid typo</span>
</span><span class="line"><span class="c"># Ref: extract to an abstract class.</span>
</span><span class="line"><span class="c"># Opt: cache in get_active_table</span>
</span><span class="line">
</span><span class="line"><span class="c"># = Rule 2, leave a &quot;*&quot; at the end to flag folding</span>
</span><span class="line">
</span><span class="line"><span class="c"># Mod: query_date logic*</span>
</span><span class="line"><span class="c">#</span>
</span><span class="line"><span class="c"># Use chronic to guess date.</span>
</span><span class="line"><span class="c">#</span>
</span><span class="line"><span class="c"># Chronic.parse(&#39;may 27th&#39;, :guess =&gt; false)</span>
</span><span class="line"><span class="c"># #=&gt; Sun May 27 00:00:00 PDT 2007..Mon May 28 00:00:00 PDT 2007</span>
</span><span class="line">
</span><span class="line"><span class="c"># Please enter the commit message for your changes. Lines starting</span>
</span><span class="line"><span class="c"># with &#39;#&#39; will be ignored, and an empty message aborts the commit.</span>
</span><span class="line"><span class="c"># On branch master</span>
</span><span class="line"><span class="c"># Changes to be committed:</span>
</span><span class="line"><span class="c">#	new file:   README</span>
</span><span class="line"><span class="c">#</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="validate-on-rules">Validate on Rules</h2>

<p>Write a Ruby script, naming <code>commit-msg</code> under <code>.git/hooks</code>, and make it executable.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1">#!/usr/bin/env ruby</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Init repo</span>
</span><span class="line"><span class="nb">exit</span> <span class="mi">0</span> <span class="k">if</span> <span class="sb">`git log --oneline -1 2&gt;/dev/null`</span><span class="o">.</span><span class="n">empty?</span>
</span><span class="line">
</span><span class="line"><span class="n">message_file</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class="line"><span class="n">lines</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">readlines</span><span class="p">(</span><span class="n">message_file</span><span class="p">)</span><span class="o">.</span><span class="n">reject</span><span class="p">{</span><span class="o">|</span><span class="n">l</span><span class="o">|</span> <span class="n">l</span> <span class="o">=~</span> <span class="sr">/^#/</span><span class="p">}</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:strip</span><span class="p">)</span><span class="o">.</span><span class="n">reject</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:empty?</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">subject_regex</span> <span class="o">=</span> <span class="s1">&#39;[Add|Mod|Rem|Ren|Fix|Ref|Opt]:\s\S+&#39;</span>
</span><span class="line"><span class="n">regex</span> <span class="o">=</span> <span class="n">lines</span><span class="o">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">?</span> <span class="sr">/</span><span class="si">#{</span><span class="n">subject_regex</span><span class="si">}</span><span class="sr">\*$/</span> <span class="p">:</span> <span class="sr">/</span><span class="si">#{</span><span class="n">subject_regex</span><span class="si">}</span><span class="sr">/</span>
</span><span class="line">
</span><span class="line"><span class="k">unless</span> <span class="n">lines</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=~</span> <span class="n">regex</span>
</span><span class="line">  <span class="nb">puts</span> <span class="s2">&quot;[POLICY] Your message is not formatted correctly&quot;</span>
</span><span class="line">  <span class="nb">puts</span> <span class="s2">&quot;[POLICY] Please check ~/.gitmessage.txt&quot;</span>
</span><span class="line">  <span class="nb">exit</span> <span class="mi">1</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now committing has validations.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="c"># Rule 1</span>
</span><span class="line">
</span><span class="line"><span class="nv">$ </span>git commit -m <span class="s1">&#39;Add README&#39;</span>
</span><span class="line"><span class="o">[</span>POLICY<span class="o">]</span> Your message is not formatted correctly
</span><span class="line"><span class="o">[</span>POLICY<span class="o">]</span> Please check ~/.gitmessage
</span><span class="line">
</span><span class="line"><span class="nv">$ </span>git commit -m <span class="s1">&#39;Add: README&#39;</span>
</span><span class="line"><span class="o">[</span>master e492ec1<span class="o">]</span> Add: README
</span><span class="line"> 1 file changed, 0 insertions<span class="o">(</span>+<span class="o">)</span>, 0 deletions<span class="o">(</span>-<span class="o">)</span>
</span><span class="line"> create mode 100644 README
</span><span class="line">
</span><span class="line"><span class="c"># Rule 2</span>
</span><span class="line">
</span><span class="line"><span class="nv">$ </span>git commit -m <span class="s1">&#39;Add: README</span>
</span><span class="line"><span class="s1">quote&gt; </span>
</span><span class="line"><span class="s1">quote&gt; some content&#39;</span>
</span><span class="line"><span class="o">[</span>POLICY<span class="o">]</span> Your message is not formatted correctly
</span><span class="line"><span class="o">[</span>POLICY<span class="o">]</span> Please check ~/.gitmessage
</span><span class="line">
</span><span class="line"><span class="nv">$ </span>git commit -m <span class="s1">&#39;Add: README*</span>
</span><span class="line"><span class="s1">quote&gt; </span>
</span><span class="line"><span class="s1">quote&gt; some content&#39;</span>
</span><span class="line"><span class="o">[</span>master 5fdd0f4<span class="o">]</span> Add: README*
</span><span class="line"> 1 file changed, 0 insertions<span class="o">(</span>+<span class="o">)</span>, 0 deletions<span class="o">(</span>-<span class="o">)</span>
</span><span class="line"> create mode 100644 README
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Here is the final <code>git log --oneline</code> look,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">* 0435fa9 2014-12-29 Ref: code smells like..teen spirit <span class="o">[</span>wendi<span class="o">]</span>
</span><span class="line">* 13423ff 2014-12-29 Fix: <span class="c">#1984 big bro 404 error* [wendi]</span>
</span><span class="line">* 0c5b9f9 2014-12-29 Add: pygments.rb to <span class="nb">enable </span>highlight* <span class="o">[</span>wendi<span class="o">]</span>
</span><span class="line">* e99d1b5 2014-12-29 Mod: heading sytle <span class="o">[</span>wendi<span class="o">]</span>
</span><span class="line">* 95576cc 2014-12-29 Ren: README.md <span class="o">[</span>wendi<span class="o">]</span>
</span><span class="line">* 2f5c632 2014-12-29 Add: README <span class="o">[</span>wendi<span class="o">]</span>
</span><span class="line">* 6673bd7 2014-12-29 Init <span class="o">[</span>wendi<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong><em>How to make self-defined hook ship with every project?</em></strong></p>

<p>Use <code>init.templatedir</code> config option.</p>

<p>Check this post, <a href="https://coderwall.com/p/jp7d5q/create-a-global-git-commit-hook">Create a global git commit hook</a> by Matt Venables.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Filter Branch in Practice]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2014/12/25/git-filter-branch-in-practice/"/>
    <updated>2014-12-25T20:54:49+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2014/12/25/git-filter-branch-in-practice</id>
    <content type="html"><![CDATA[<p>For some reasons, our company team is migrating our codebase from Github Enterprise to Gitlab. One of the annoying things we should do is to update the invalid author names and emails in our git commits. Specifically, we should</p>

<p><strong>Filter out the author emails which are not ending <code>umeng.com</code>, modify meta info of these commits by a self-defined rule, and update the inconsistent author and committer info.</strong></p>

<p>I’ve used <code>git-filter-branch</code> once to do a similar but simpler job, which updated my own name and email, by using <code>env-filter</code> option in a few lines to complete.</p>

<p>Things are getting a little complicated this time. Our repo has several branches, numbers of collaborators and almost 18,000 commits. I must be careful and patient, to find a safe way before reaching the ultimate horrible “force update”.</p>

<h2 id="major-idea">Major Idea</h2>

<p>Use <code>git filter-branch --commit-filter</code> to update each commit’s author info.</p>

<p>Psuedo-code of updating logic</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">email</span> <span class="o">=</span> <span class="s2">&quot;$GIT_AUTHOR_EMAIL&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">email</span><span class="o">.</span><span class="n">match</span> <span class="sr">/@umeng.com/</span>
</span><span class="line">  <span class="n">commit</span><span class="o">-</span><span class="n">tree</span>
</span><span class="line"><span class="k">else</span>
</span><span class="line">  <span class="n">email</span><span class="o">.</span><span class="n">match</span> <span class="sr">/(?&lt;name&gt;*)@(?&lt;domain&gt;*).com/</span> <span class="c1"># psuedo</span>
</span><span class="line">
</span><span class="line">  <span class="n">mapping</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="s1">&#39;wendy&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;wendi&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s1">&#39;ifyouseewendy&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;wendi&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="k">if</span> <span class="n">mapping</span><span class="o">[</span><span class="nb">name</span><span class="o">].</span><span class="n">presents?</span>
</span><span class="line">    <span class="n">commit_email</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">mapping</span><span class="o">[</span><span class="nb">name</span><span class="o">]</span><span class="si">}</span><span class="s2">@umeng.com&quot;</span>
</span><span class="line">  <span class="k">else</span>
</span><span class="line">    <span class="n">commit_email</span> <span class="o">=</span> <span class="s2">&quot;umeng_</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="n">domain</span><span class="si">}</span><span class="s2">@umeng.com&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="n">commit</span><span class="o">-</span><span class="n">tree</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="step-by-step">Step by Step</h2>

<p><strong>1. Checkout a test branch</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git checkout -b update_git_info
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>2. Filter author emails</strong></p>

<p>Use <a href="https://gist.github.com/ifyouseewendy/9bdf7ad7173f9c78026c#file-generate_stats-rb">generate_stats.rb</a> to</p>

<ol>
  <li>Gather commits info of <em>author_name</em>, <em>author_email</em>, and <em>committer_email</em>.</li>
  <li>Run again after finishing the whole job to verify.</li>
</ol>

<p><strong>3. Prepare a mapping file</strong></p>

<p>For authors whose email domain is not <code>umeng</code>, write the mapping file under this rule:</p>

<ol>
  <li>Seperated by <code>\s</code></li>
  <li>First is the valid Umeng name</li>
  <li>Second to the end, are the names of the invalid email</li>
</ol>

<p>Sample:</p>

<p>change <code>wendy@xx.com</code> and <code>ifyouseewendy@xx.com</code> to <code>wendi@umeng.com</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">wendi wendy ifyouseewendy
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>4. Leverage mapping file</strong></p>

<p>Write a Ruby script to map names, used in the final script.</p>

<p><a href="https://gist.github.com/ifyouseewendy/9bdf7ad7173f9c78026c#file-update_name-rb">update_name.rb</a>, read a name to change, output the corresponding Umeng author name.</p>

<p><strong>5. Git filter-branch bash script</strong></p>

<p>Here is the final working script, <a href="https://gist.github.com/ifyouseewendy/9bdf7ad7173f9c78026c#file-git_filter_branch-sh">git_filter_branch.sh</a>. The bash email pattern matching part was tweaked based on <a href="http://stackoverflow.com/questions/14170873/bash-regex-email-matching">glenn jackman’s answer</a> on Stack Overflow.</p>

<h2 id="things-to-take-caution">Things to Take Caution</h2>

<p>When running <code>git filter-branch --commit-filter &lt;commad&gt;</code>, logic in <code>&lt;command&gt;</code> was the core part to finish my job. Remenber, <strong>DO NOT write <code>echo</code> in command part</strong> for debug use or whatever, as <code>echo</code> will interrupt the filter branch workflow.</p>

<p>Better use a seperate script when debugging. I use <a href="https://gist.github.com/ifyouseewendy/9bdf7ad7173f9c78026c#file-update_email-sh">update_email.rb</a> to develop on email pattern matching, and copy paste into the final <a href="https://gist.github.com/ifyouseewendy/9bdf7ad7173f9c78026c#file-git_filter_branch-sh">git_filter_branch.sh</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Review] Practicing Rails]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2014/11/26/practicing-rails/"/>
    <updated>2014-11-26T11:32:14+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2014/11/26/practicing-rails</id>
    <content type="html"><![CDATA[<table class="custom">
  <tbody>
    <tr>
      <td><strong>Book</strong></td>
      <td>Practicing Rails</td>
    </tr>
    <tr>
      <td><strong>Author</strong></td>
      <td>Justin Weiss</td>
    </tr>
    <tr>
      <td><strong>Link</strong></td>
      <td><a href="https://www.justinweiss.com/book/">www.justinweiss.com/book</a></td>
    </tr>
  </tbody>
</table>

<ul id="markdown-toc">
  <li><a href="#meta-principles">Meta Principles</a></li>
  <li><a href="#tiny-apps">Tiny Apps</a>    <ul>
      <li><a href="#build-a-tiny-app">Build a tiny App</a></li>
      <li><a href="#owning-the-things-you-learn">Owning the things you learn</a></li>
    </ul>
  </li>
  <li><a href="#build-your-own-app">Build Your Own App</a>    <ul>
      <li><a href="#where-to-start">Where to start?</a>        <ul>
          <li><a href="#build-from-ui-down">Build from UI Down</a></li>
          <li><a href="#thinking-in-resources">Thinking in resources</a></li>
          <li><a href="#t-shaped-development">T-Shaped development</a></li>
          <li><a href="#just-in-time-learning">Just-in-time learning</a></li>
        </ul>
      </li>
      <li><a href="#which-feature-do-you-build-next">Which feature do you build next?</a></li>
    </ul>
  </li>
  <li><a href="#test-your-code-efficiently">Test Your Code Efficiently</a>    <ul>
      <li><a href="#feature-development-process-with-testing">Feature development process with testing</a></li>
      <li><a href="#organizing-and-structuring-your-tests">Organizing and structuring your tests</a>        <ul>
          <li><a href="#use-object-oriented-design-to-make-your-tests-better">Use object-oriented design to make your tests better</a></li>
          <li><a href="#refacoring">Refacoring</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#learning-skill">Learning Skill</a>    <ul>
      <li><a href="#learning-stage">Learning Stage</a></li>
      <li><a href="#a-to-dont-list">A to-don’t list</a></li>
      <li><a href="#guidance">Guidance</a></li>
      <li><a href="#google-and-stackoverflow-may-not-be-the-answer">Google and StackOverflow may not be the answer</a></li>
      <li><a href="#dig-into-code-to-understand-it-better">Dig into code to understand it better</a></li>
      <li><a href="#avoiding-the-temptation-of-the-new">Avoiding the temptation of the new</a></li>
      <li><a href="#building-a-good-mental-filter">Building a good mental filter</a></li>
      <li><a href="#push-vs-pull">Push vs. Pull</a></li>
      <li><a href="#system-learning">System learning</a></li>
      <li><a href="#when-to-give-new-tech-a-chance">When to give new tech a chance</a></li>
      <li><a href="#catch-up-with-changes">Catch up with changes</a></li>
    </ul>
  </li>
  <li><a href="#form-a-habit">Form a habit</a>    <ul>
      <li><a href="#why">Why?</a></li>
      <li><a href="#how-to-keep-consistent">How to keep consistent?</a>        <ul>
          <li><a href="#morning-or-evening">Morning or Evening?</a></li>
        </ul>
      </li>
      <li><a href="#how-to-keep-motivated">How to keep motivated?</a>        <ul>
          <li><a href="#pre-prepare">Pre-prepare</a></li>
          <li><a href="#processes">Processes</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="meta-principles">Meta Principles</h2>

<ul>
  <li>
    <p><strong>As soon as you want to learn something, try it out.</strong></p>
  </li>
  <li>
    <p><strong>When you feel yourself procrastinating or stressed about something, break it apart.</strong></p>

    <p>Large, fuzzy tasks are killer. If the next thing you want to do is tiny, and you can start on it in the next five minutes, you probably will. If it’s big and vague, you’ll put it off until you know how to start it. Which will probably be never.</p>
  </li>
  <li>
    <p><strong>Start backwards.</strong></p>

    <p>When you write an app, start from the UI down. Allow your vision of the feature to guide your development. It’s easy to know if you’re building the right thing when you start from the end and trace back to the beginning. And UI sketches and HTML views are a lot easier to think about than abstract data models.</p>
  </li>
  <li>
    <p><strong>Keep it simple, and add complexity later.</strong></p>

    <p>The most frustrating struggles come from running into problems you don’t know how to solve. You can skip these problems by avoiding new things until you understand the old things. This goes for everything from gems and libraries to patterns and object-oriented design principles.</p>
  </li>
  <li>
    <p><strong>Systems, not motivation.</strong></p>

    <p>You can’t rely on motivation every day. Instead, set up systems and habits, so you don’t have to motivate yourself to work.</p>
  </li>
  <li>
    <p><strong>Struggling should tell you that you’re on the brink of learning something really valuable. Keep it up.</strong></p>
  </li>
</ul>

<h2 id="tiny-apps">Tiny Apps</h2>

<p>When you read something interesting, tweak it with a tiny app.</p>

<ul>
  <li>UI related, with a <code>rails server</code></li>
  <li>Functional, with a <code>rails console</code>. If setting it up in the console gets annoying, write a test case for it.</li>
</ul>

<h3 id="build-a-tiny-app">Build a tiny App</h3>

<blockquote>
  <p>I care about getting the most knowledge in the least amount of time, and scaffolds and other Rails code generators are a great way to do just that.</p>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">rails</span> <span class="kp">new</span> <span class="n">test_polymorphic_association</span>
</span><span class="line"><span class="n">cd</span> <span class="n">test_polymorphic_association</span>
</span><span class="line"><span class="n">bin</span><span class="o">/</span><span class="n">rails</span> <span class="n">generate</span> <span class="n">scaffold</span> <span class="n">bug</span> <span class="ss">title</span><span class="p">:</span><span class="n">string</span> <span class="ss">description</span><span class="p">:</span><span class="n">text</span>
</span><span class="line"><span class="n">bin</span><span class="o">/</span><span class="n">rake</span> <span class="ss">db</span><span class="p">:</span><span class="n">migrate</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Some tips for investigating ideas through the Rails console</strong></p>

<p>You can use a lot of Rails features through the <code>app</code> object. app is a special object that has some useful methods for experimenting with your Rails app.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">002</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">app</span><span class="o">.</span><span class="n">bug_path</span> <span class="n">bug</span>
</span><span class="line"><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">003</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">app</span><span class="o">.</span><span class="n">get</span> <span class="s2">&quot;/bugs/1&quot;</span>
</span><span class="line"><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">003</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="nb">puts</span> <span class="n">app</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">first</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>helper</code> object provides all of your app’s view and helper methods in the Rails console:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">005</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">helper</span><span class="o">.</span><span class="n">content_tag</span> <span class="ss">:h1</span><span class="p">,</span> <span class="s2">&quot;Hey there&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;&lt;h1&gt;Hey there&lt;/h1&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="owning-the-things-you-learn">Owning the things you learn</h3>

<p>Explore the boundaries of that concept until you feel like you really get it.</p>

<ol>
  <li>test the boundaries</li>
  <li>break and dig it, brainstorm some questions about the idea you’re exploring.</li>
</ol>

<h2 id="build-your-own-app">Build Your Own App</h2>

<ul>
  <li><strong>Core Paths</strong>, focus on building an important path through your app as your first feature.</li>
  <li><strong>Build from UI down</strong>.</li>
  <li><strong>Avoid large, fuzzy tasks</strong>. At every stage, you should be trying to break large tasks apart into smaller ones.</li>
</ul>

<h3 id="where-to-start">Where to start?</h3>

<p>Take a few minutes and think what you’re trying to build. Write down every feature that comes to mind. Think of the different paths a user could take through your application, the different things they could do. Describe them in a single sentence.</p>

<p>Then, narrow them down to paths where, if you didn’t have them, your app couldn’t exist. <strong>Core paths</strong>.</p>

<p>In general, less code is better code. And <strong>starting from the view and building toward the model</strong> from there is the best way I know to consistently write less code.</p>

<ul>
  <li>Finding Core Path</li>
  <li>View toward Model</li>
</ul>

<h4 id="build-from-ui-down">Build from UI Down</h4>

<blockquote>
  <p>Feature development process</p>
</blockquote>

<ol>
  <li>Take the small feature from earlier.</li>
  <li>Think of one simple thing someone could do with that feature.</li>
  <li>Draw just enough screens for that user to be able to do that thing.</li>
  <li>Describe the path through that action, as if you were telling someone what you were going to do.</li>
  <li>As you describe that path, write out the objects, properties of those objects, and other actions you think you need to develop that path.</li>
</ol>

<h4 id="thinking-in-resources">Thinking in resources</h4>

<p>Rails works well with “resources.” (You can think of a resource as an ActiveRecord model and a controller that has seven actions: <code>index</code>, <code>new</code>, <code>create</code>, <code>show</code>, <code>edit</code>, <code>update</code>, and <code>destroy</code>).</p>

<h4 id="t-shaped-development">T-Shaped development</h4>

<p>When you build something, try to get something rough up as quickly as possible. As long as the core of the feature you want to build is there, it’s fine.</p>

<h4 id="just-in-time-learning">Just-in-time learning</h4>

<p>It means you’re not trying to learn everything at the beginning. That’s the most common way to procrastinate starting something that you’re too nervous to do.</p>

<h3 id="which-feature-do-you-build-next">Which feature do you build next?</h3>

<p>Keeping these tasks as small as possible is the key. And try to follow the questions below.</p>

<ol>
  <li>Ask some questions: What is the app missing? What did you postpone to get that first feature done?</li>
  <li>Try using what you have so far. What would make your life easier if it was built? What annoys you while you’re using your app?</li>
  <li>Ifyou’rebuildingthisappforsomeoneelse,watchhowtheyusetheproject. Where are they struggling? What do they complain about?</li>
</ol>

<h2 id="test-your-code-efficiently">Test Your Code Efficiently</h2>

<h3 id="feature-development-process-with-testing">Feature development process with testing</h3>

<ol>
  <li>Take your small feature.</li>
  <li>Think of one simple thing someone could do with that feature.</li>
  <li>Draw just enough screens for that user to be able to do that thing.</li>
  <li>Translate that sketch into a failing integration test.</li>
  <li>Get the first part of that test to pass:</li>
  <li>Write a failing controller test.</li>
  <li>Write some failing unit tests.</li>
  <li>Write enough code to get the unit and controller tests to pass.</li>
  <li>Repeat until the next part of your integration test passes.</li>
</ol>

<p><strong><em>What do you test?</em></strong></p>

<ul>
  <li>Happy path tests.</li>
  <li>Sad path tests.</li>
  <li>What-if tests, must be documented.</li>
</ul>

<p><strong><em>How do you test?</em></strong></p>

<ol>
  <li>Arrange</li>
  <li>Act</li>
  <li>Assert</li>
</ol>

<p><strong><em>When aren’t you testing enough?</em></strong></p>

<p>Bugs imply that you missed a test somewhere. If you run into a bug in your app that your tests didn’t catch, you’re probably missing a test.</p>

<ol>
  <li>Write a test that fails while the bug exists.</li>
  <li>Fix the bug.</li>
  <li>Make sure the test passes now.</li>
  <li>Check in both your test and fix, so you don’t run into the problem again.</li>
</ol>

<p><strong><em>How to keep TDD?</em></strong></p>

<p>Translate that sketch into a failing <strong>integration test</strong>(Capybara).</p>

<ol>
  <li>Write a failing controller test.</li>
  <li>Write some failing unit tests.</li>
  <li>Write enough code to get the unit and controller tests to pass.</li>
  <li>Repeat until the next part of your integration test passes.</li>
</ol>

<h3 id="organizing-and-structuring-your-tests">Organizing and structuring your tests</h3>

<h4 id="use-object-oriented-design-to-make-your-tests-better">Use object-oriented design to make your tests better</h4>

<p>With minitest, all of your test suites are just classes, tests are methods. That means you can use your object oriented design skills to reorganize your tests.</p>

<p>Guides to follow:</p>

<ol>
  <li><strong>For tests, clarity is better than cleverness.</strong> You don’t have anything testing your tests, so you have to be careful not to make things too abstract. Hard-coding values, copy and pasted code, all that kind of stuff is usually OK in tests, if they make the test easier to understand.</li>
  <li>Organizing your tests is easiest if your test organization matches your code organization. </li>
  <li>Wait until you feel real pain before refactoring your tests.</li>
</ol>

<h4 id="refacoring">Refacoring</h4>

<ul>
  <li>Using Extract Method to write custom assertions.</li>
  <li>Using Extract Method to make mocks easier to write.</li>
  <li>Using modules to share tests between test suites.</li>
</ul>

<h2 id="learning-skill">Learning Skill</h2>

<blockquote>
  <p>The skill of learning.</p>
</blockquote>

<h3 id="learning-stage">Learning Stage</h3>

<ol>
  <li>First stage. Baseline knowledge, bootstrapping your learning process.</li>
  <li>Second stage. You’re past the basics but not an expert, still require conscious thought.</li>
  <li>Thrid stage. Skills in the third stage are mastered. They don’t require thought, you use instinct and intuition when you use them.</li>
</ol>

<p>If all of their skills were at an intermediate level, they’d not only have to think about how to use each of those skills, but how they interacted in this one specific situation, and what kinds of tradeoffs they’ll have to make.</p>

<p>1 + 3 &gt; 2 + 2</p>

<p>So you’ll be much more productive if you have 5 skills in the third stage and 5 skills in the first stage than if you have ten skills in the second stage.</p>

<h3 id="a-to-dont-list">A to-don’t list</h3>

<p>It might seem like you need to master JavaScript before you can write a Rails app. You will, someday. But you won’t get anywhere without starting an app you can get excited about, and you don’t need JavaScript for that first stage. So cross JavaScript off the list. For now.</p>

<p><strong>For now</strong> is powerful. You’re giving yourself permission to set other things aside, so you can focus on something else.</p>

<h3 id="guidance">Guidance</h3>

<p>Search for the things that really resonate with you, the things you get lost in, the things you just want to do for hours.</p>

<p>Take a look at what you know and what you don’t. What you want to learn, and what your app needs you to learn. Set aside some things that seem less important, and turn them into a “Not Right Now” list. Eventually you’ll have a few things you just can’t set aside – learn those thoroughly. And keep moving forward.</p>

<p>Intermediate Rails isn’t about learning all the stuff you learned as a beginner in a little more depth. It’s about the stem of the “T” in T-Shaped Learning. It’s about gaining deep knowledge in a few different areas, one thing at a time. And it’s about using that knowledge to build your own apps, the way you imagined.</p>

<h3 id="google-and-stackoverflow-may-not-be-the-answer">Google and StackOverflow may not be the answer</h3>

<p>This can be the fastest way to get your problem solved, and is much easier than investigating it yourself. But you lose the opportunity to go through the investigation, and you miss the chance to build experience debugging and solving your own problems. This robs you of a chance to get to know your code, the language, and the framework better.</p>

<p>Every problem you run into is an opportunity to learn.</p>

<p>But if you use them to solve a problem, make sure you read the answer, follow references, and immerse yourself in the knowledge the solution brings you. </p>

<p>When you use someone else’s solution to solve your problems, your app will become a mess of inconsistent code that probably only works coincidentally.</p>

<h3 id="dig-into-code-to-understand-it-better">Dig into code to understand it better</h3>

<p>Great developers know how to read and understand code. When you read code, you’ll understand much more than what the documentation tells you. Sometimes, after spending time with the code, you’ll know as much about it as the author does!</p>

<p><strong>Reading code is a skill you’ll have to build like any other, and it’s not like reading a book.</strong></p>

<p>Practice reading code. Learning to read and explore code will teach you things you won’t learn anywhere else. And when you get good enough at reading code, you’ll be able to solve problems you might have thought were impossible before.</p>

<p>Remember, reading code isn’t like reading anything else. It’s about debugging and exploration. <strong>You have to run it.</strong></p>

<h3 id="avoiding-the-temptation-of-the-new">Avoiding the temptation of the new</h3>

<p>You have to separate the things that are interesting because they’re new, from the things that are interesting because they’ll help you get work done.</p>

<h3 id="building-a-good-mental-filter">Building a good mental filter</h3>

<p>Two questions to ask.</p>

<ol>
  <li>Is this something I need to know right now?</li>
  <li>If I knew this a year ago, would it have made my life easier today?</li>
</ol>

<h3 id="push-vs-pull">Push vs. Pull</h3>

<p>Hitting these sites is the “pull” model of receiving tech news. You’re the one digging it up. But these days, I’ve been using the “push” model more and more. I’ve been getting email newsletters, podcasts, things that get delivered to you instead of you looking for them.</p>

<h3 id="system-learning">System learning</h3>

<p>If you find a few good sources, keep a steady learning and practice schedule, and learn things as they become important to you, you’ll make much more progress than those who constantly chase the news sites.</p>

<h3 id="when-to-give-new-tech-a-chance">When to give new tech a chance</h3>

<p>Try it out on a new small project. Then, take the technique as far as it’ll go.</p>

<p>But unfortunately, a lot of the techniques won’t have as much of a benefit in smaller projects. So create a new branch for your experiments, so you don’t wreck your code if you don’t like the technique. And</p>

<ol>
  <li>Make the change.</li>
  <li>Look at the old code next to the new.</li>
  <li>Ask yourself, which code do you prefer?</li>
  <li>Ask a few other people, which code do they prefer?</li>
  <li>If the new way is an improvement, go forward with that.</li>
</ol>

<p><strong>A technique only has value if it improves your code, so a direct comparison is the best way to judge.</strong></p>

<h3 id="catch-up-with-changes">Catch up with changes</h3>

<p>The best way to keep up with changes to your gems is to track down the project’s <em>CHANGELOG</em> file.</p>

<p>These will help you catch up on the big changes from version to version. Usually, they’re just a short summary of each major change.</p>

<h2 id="form-a-habit">Form a habit</h2>

<blockquote>
  <p>Keep your schedule consistent</p>
</blockquote>

<h3 id="why">Why?</h3>

<p><strong>Whenever you try to build a new skill, consistency is much more important than the amount of time you spend.</strong></p>

<p>When you first try to keep a schedule, it’ll feel weird. To me, it feels like I’m just pretending, like I’m just copying what someone else told me to do, instead of actually getting anything done. That feeling starts to hit me around the fourth or fifth day in a row, and it goes away after about three weeks. It’s totally normal, but it can be dangerous.</p>

<p>Anytime you change a routine, you’ll face some internal resistance. Our daily routines seem normal to us, that’s what makes them routines. So building the momentum to change those routines takes a lot of effort, since you’re breaking habits that have taken years to form, in just a few weeks.</p>

<p>You might be tempted to spend 6 hours learning one day and take the rest of the week off. But that doesn’t solve the core problem.</p>

<p><strong>Habits are built off of repetition, not total time.</strong> If you try to jam everything all into a single day, you’ll have less repetition. It’ll be easier to skip. And if your schedule is really so packed that you can’t find time every day to work on this stuff, how will you find a big chunk of time one day a week?</p>

<p><strong>Once you’re consistent enough to form a habit, motivation won’t be as much of an issue. It’s just become something I do, so I do it.</strong></p>

<h3 id="how-to-keep-consistent">How to keep consistent?</h3>

<p>By “consistency,” I don’t mean that you have to spend hours every single night on this stuff. When you first build your schedule, go shorter rather than longer. <strong>Aim for 40 minutes a day to start.</strong></p>

<p>If you can’t find the time anywhere else, staying up 40 minutes later at night usually won’t be too painful. Same thing with waking up a little earlier each day.</p>

<p>But 40 minutes is also short enough that it’ll surprise you when it’s over. You’ll start the next task and leave it unfinished.</p>

<p>When you <strong>leave something unfinished</strong>, it’ll stay in the back of your mind. When this happens, you’ll unconsciously be looking for closure, so you’ll be more receptive to related ideas that just pop into your head. You’ll really want to finish it.</p>

<h4 id="morning-or-evening">Morning or Evening?</h4>

<p>Cons on <strong>evening</strong>:</p>

<ol>
  <li>You don’t really have a set deadline (except sleep), so you can let your motivation carry you beyond the time you set aside.</li>
  <li>You might also be drained. If you’re tired, it’s easy to convince yourself to skip it, “just this once.” And after a frustrating day at work, you’ll start to tell yourself that you’ve had a rough day, you deserve to just get a good night’s sleep. You’ll catch up tomorrow, right?</li>
  <li>It’s also easy to push until later. “If I watch one more episode, I’ll start as soon as it’s done. It’ll only be 10 minutes late.” But before you know it, you’re an hour late, you’ve destroyed your sleeping schedule and you’ll pay for it tomorrow, when you’re drained again and you’ll skip again.</li>
</ol>

<p>While <strong>morning</strong>:</p>

<blockquote>
  <p>You might feel brain-dead and uncreative in the morning, which can be killer if you’re learning and practicing creative work like learning Rails. And it’s hard to wake up early until you get used to it.  </p>

  <p>I heard a lot of people I trust and respect suggest trying waking up a little earlier for a week or so. I did, and it was hard, and I felt totally unproductive.  </p>

  <p>But somehow, once I measured my actual productivity, I found out I was twice as pro- ductive in the mornings as the evenings. This is crazy, because it felt like the exact opposite!</p>
</blockquote>

<p>I really need to give it a shot.</p>

<h3 id="how-to-keep-motivated">How to keep motivated?</h3>

<p>Of course, to form a habit is the best way. But before that, try these.</p>

<h4 id="pre-prepare">Pre-prepare</h4>

<ol>
  <li>Separating the decision about where to start from the decision about what to do.</li>
  <li>It creates an unfinished loop in your mind, they’re just as powerful here.</li>
</ol>

<h4 id="processes">Processes</h4>

<p>Seinfeld method:</p>

<blockquote>
  <p>[Jerry Seinfeld] told me to get a big wall calendar that has a whole year on one page and hang it on a prominent wall. The next step was to get a big red magic marker.</p>

  <p>He said for each day that I do my task of writing, I get to put a big red X over that day. “After a few days you’ll have a chain. Just keep at it and the chain will grow longer every day. You’ll like seeing that chain, especially when you get a few weeks under your belt. Your only job next is to not break the chain.”</p>

  <p>“Don’t break the chain,” he said again for emphasis.</p>
</blockquote>

<p>When you miss a habit and break a chain, you lose all your motivation to keep the streak going. And you lose it at the exact time you need extra motivation to build that streak back up.</p>

<p>So keep consistent with a habit tracker, calendar, or Beeminder.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quotes from Ira Glass]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2014/11/23/quotes-from-ira-glass/"/>
    <updated>2014-11-23T00:21:33+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2014/11/23/quotes-from-ira-glass</id>
    <content type="html"><![CDATA[<p>I was reading <a href="https://www.justinweiss.com/book/">Practicing Rails</a> this weekend. A referenced quotes from <a href="http://en.wikipedia.org/wiki/Ira_Glass">Ira Glass</a> really caught my eyes.</p>

<blockquote>
  <p>Nobody tells this to people who are beginners, I wish someone told me. All of us who do creative work, we get into it because we have good taste. But there is this <strong>gap</strong>. For the first couple years you make stuff, it’s just not that good. It’s trying to be good, it has potential, but it’s not. <strong>But your taste, the thing that got you into the game, is still killer. And your taste is why your work disappoints you.</strong> A lot of people never get past this phase, they quit. Most people I know who do interesting, creative work went through years of this. We know our work doesn’t have this special thing that we want it to have. We all go through this. And if you are just starting out or you are still in this phase, you gotta know its normal and <strong>the most important thing you can do is do a lot of work. Put yourself on a deadline so that every week you will finish one story. It is only by going through a volume of work that you will close that gap, and your work will be as good as your ambitions.</strong> And I took longer to figure out how to do this than anyone I’ve ever met. It’s gonna take awhile. It’s normal to take awhile. You’ve just gotta <strong>fight your way through</strong>.</p>
</blockquote>

<p>Yes, fight your way, and let your taste drag you through.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From irb to Rails console]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2014/11/22/from-irb-to-rails-console/"/>
    <updated>2014-11-22T18:09:51+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2014/11/22/from-irb-to-rails-console</id>
    <content type="html"><![CDATA[<p>From Justing Weiss’s article:</p>

<p><a href="http://www.justinweiss.com/blog/2014/11/17/what-are-the-differences-between-irb/?utm_source=Weissblog+Subscribers&amp;utm_campaign=dc22dc3715-What_are_the_differences_between_irb_11_17_2014&amp;utm_medium=email&amp;utm_term=0_2494b7d197-dc22dc3715-120246897">What’s the Difference Between <em>irb</em>, <em>bundle exec irb</em>, <em>bundle console</em>, and <em>rails console</em>?</a></p>

<ul>
  <li><code>irb</code></li>
</ul>

<p>It can’t easily load gems that Bundler installs outside of RubyGems’ load path. Eg. <code>bundle install --path=vendor/bundle</code></p>

<ul>
  <li><code>bundle exec irb</code></li>
</ul>

<p>It can easily load <em>Gemfile</em> gems by Bundler.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="err">$</span> <span class="n">irb</span>
</span><span class="line"><span class="o">&gt;&gt;</span> <span class="nb">require</span> <span class="s1">&#39;bundler/setup&#39;</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li><code>bundle exec console</code></li>
</ul>

<p>Find and auto-require <em>Gemfile</em> gems.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="err">$</span> <span class="n">irb</span>
</span><span class="line"><span class="o">&gt;&gt;</span> <span class="nb">require</span> <span class="s1">&#39;bundler/setup&#39;</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class="line"><span class="o">&gt;&gt;</span> <span class="no">Rails</span><span class="o">.</span><span class="n">version</span>
</span><span class="line"><span class="ss">NameError</span><span class="p">:</span> <span class="n">uninitialized</span> <span class="n">constant</span> <span class="no">Rails</span>
</span><span class="line">        <span class="n">from</span> <span class="p">(</span><span class="n">irb</span><span class="p">):</span><span class="mi">2</span>
</span><span class="line">        <span class="n">from</span> <span class="sr">/Users/</span><span class="n">wendi</span><span class="o">/.</span><span class="n">rvm</span><span class="o">/</span><span class="n">rubies</span><span class="o">/</span><span class="n">ruby</span><span class="o">-</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">p353</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="ss">irb</span><span class="p">:</span><span class="mi">12</span><span class="ss">:in</span> <span class="s1">&#39;&lt;main&gt;&#39;</span>
</span><span class="line"><span class="o">&gt;&gt;</span> <span class="no">Bundler</span><span class="o">.</span><span class="n">require</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="o">[&lt;</span><span class="ss">Bundler</span><span class="p">:</span><span class="ss">:Dependency</span> <span class="n">type</span><span class="o">=</span><span class="ss">:runtime</span> <span class="nb">name</span><span class="o">=</span><span class="s2">&quot;rails&quot;</span> <span class="n">requirements</span><span class="o">=</span><span class="s2">&quot;= 4.1.6&quot;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="o">]</span>
</span><span class="line"><span class="o">&gt;&gt;</span> <span class="no">Rails</span><span class="o">.</span><span class="n">version</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="s2">&quot;4.1.6&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li><code>rails console</code></li>
</ul>

<p>Find, auto-require <em>Gemfile</em> gems and load Rails Application env.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="err">$</span> <span class="n">irb</span>
</span><span class="line"><span class="o">&gt;&gt;</span> <span class="nb">require</span> <span class="s1">&#39;bundler/setup&#39;</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class="line"><span class="o">&gt;&gt;</span> <span class="no">Rails</span><span class="o">.</span><span class="n">version</span>
</span><span class="line"><span class="ss">NameError</span><span class="p">:</span> <span class="n">uninitialized</span> <span class="n">constant</span> <span class="no">Rails</span>
</span><span class="line">        <span class="n">from</span> <span class="p">(</span><span class="n">irb</span><span class="p">):</span><span class="mi">2</span>
</span><span class="line">        <span class="n">from</span> <span class="sr">/Users/</span><span class="n">wendi</span><span class="o">/.</span><span class="n">rvm</span><span class="o">/</span><span class="n">rubies</span><span class="o">/</span><span class="n">ruby</span><span class="o">-</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">p353</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="ss">irb</span><span class="p">:</span><span class="mi">12</span><span class="ss">:in</span> <span class="s1">&#39;&lt;main&gt;&#39;</span>
</span><span class="line"><span class="o">&gt;&gt;</span> <span class="no">Bundler</span><span class="o">.</span><span class="n">require</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="o">[&lt;</span><span class="ss">Bundler</span><span class="p">:</span><span class="ss">:Dependency</span> <span class="n">type</span><span class="o">=</span><span class="ss">:runtime</span> <span class="nb">name</span><span class="o">=</span><span class="s2">&quot;rails&quot;</span> <span class="n">requirements</span><span class="o">=</span><span class="s2">&quot;= 4.1.6&quot;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="o">]</span>
</span><span class="line"><span class="o">&gt;&gt;</span> <span class="no">Rails</span><span class="o">.</span><span class="n">version</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="s2">&quot;4.1.6&quot;</span>
</span><span class="line"><span class="o">&gt;&gt;</span> <span class="n">require_relative</span> <span class="s1">&#39;config/environment.rb&#39;</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Encryption in Ruby]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2014/11/20/encryption-in-ruby/"/>
    <updated>2014-11-20T00:53:44+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2014/11/20/encryption-in-ruby</id>
    <content type="html"><![CDATA[<h2 id="encode-and-decode">Encode and decode</h2>

<p>Use <strong>Base64</strong>. <a href="http://ruby-doc.org/stdlib-2.1.5/libdoc/base64/rdoc/Base64.html">API</a></p>

<ul>
  <li>Unreadable.</li>
  <li>Translates any binary data into purely printable characters. Eg. in HTTP transmission(MIME).</li>
  <li>Use <code>a-zA-Z0-9+/</code>. When encode URL, use <code>a-zA-Z0-9_-</code></li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;base64&#39;</span>
</span><span class="line">
</span><span class="line"><span class="no">Base64</span><span class="o">.</span><span class="n">encode64</span><span class="p">(</span><span class="s1">&#39;hello world&#39;</span><span class="p">)</span>
</span><span class="line"><span class="c1"># =&gt; &quot;aGVsbG8gd29ybGQ=\n&quot;</span>
</span><span class="line">
</span><span class="line"><span class="no">Base64</span><span class="o">.</span><span class="n">decode64</span><span class="p">(</span><span class="s2">&quot;aGVsbG8gd29ybGQ=</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class="line"><span class="c1"># =&gt; &quot;hello world&quot;</span>
</span><span class="line">
</span><span class="line"><span class="no">Base64</span><span class="o">.</span><span class="n">urlsafe_encode64</span><span class="p">(</span><span class="s1">&#39;hello world&#39;</span><span class="p">)</span>
</span><span class="line"><span class="c1"># =&gt; &quot;aGVsbG8gd29ybGQ=&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="secure-random-string">Secure Random String</h2>

<p>Use <strong>SecureRandom</strong>, an interface for secure random number generator. <a href="http://ruby-doc.org/stdlib-2.1.2/libdoc/securerandom/rdoc/SecureRandom.html">API</a></p>

<ul>
  <li>Generate session key in HTTP cookies.</li>
  <li>Generate OAuth nonce.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;securerandom&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Hex presentation.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># 10 is the length of random number to be generated.</span>
</span><span class="line"><span class="c1"># The resulting string has twice length.</span>
</span><span class="line"><span class="no">SecureRandom</span><span class="o">.</span><span class="n">hex</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class="line"><span class="c1"># =&gt; &quot;91a9e990d11e1b546b5a&quot;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Default is 16, resulting a 32 length string.</span>
</span><span class="line"><span class="no">SecureRandom</span><span class="o">.</span><span class="n">hex</span>
</span><span class="line"><span class="c1"># =&gt; &quot;263e8681a7241ca3dfb43e482f5a26b1&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Base64 presentation.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">SecureRandom</span><span class="o">.</span><span class="n">base64</span>
</span><span class="line"><span class="c1"># =&gt; &quot;0Wl1NAxZi+kk6JhJERKd/Q==&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="digest">Digest</h2>

<p>Use <strong>SHA</strong>(Secure Hash Algorithm) to generate digest and encrypt. <a href="http://ruby-doc.org/stdlib-2.1.0/libdoc/digest/rdoc/Digest.html">API</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;digest&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Binary presentation.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="ss">Digest</span><span class="p">:</span><span class="ss">:SHA1</span><span class="o">.</span><span class="n">digest</span> <span class="s1">&#39;hello world&#39;</span>
</span><span class="line"><span class="c1"># =&gt; &quot;*\xAEl5\xC9O\xCF\xB4\x15\xDB\xE9_@\x8B\x9C\xE9\x1E\xE8F\xED&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Hex presentation.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="ss">Digest</span><span class="p">:</span><span class="ss">:SHA1</span><span class="o">.</span><span class="n">hexdigest</span> <span class="s1">&#39;hello world&#39;</span>
</span><span class="line"><span class="c1"># =&gt; &quot;2aae6c35c94fcfb415dbe95f408b9ce91ee846ed&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Base64 presentation.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="ss">Digest</span><span class="p">:</span><span class="ss">:SHA1</span><span class="o">.</span><span class="n">base64digest</span> <span class="s1">&#39;hello world&#39;</span>
</span><span class="line"><span class="c1"># =&gt; &quot;Kq5sNclPz7QV2+lfQIuc6R7oRu0=&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Bubble-babble (recognizable and pronounceable) presentation</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;digest/bubblebabble&#39;</span>
</span><span class="line">
</span><span class="line"><span class="ss">Digest</span><span class="p">:</span><span class="ss">:SHA1</span><span class="o">.</span><span class="n">bubblebabble</span> <span class="s1">&#39;hello world&#39;</span>
</span><span class="line"><span class="c1"># =&gt; &quot;xepip-varaf-hodig-zefor-gyhyt-rupih-zubym-rulyv-nolov-micyv-taxyx&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Use <strong>SHA2</strong>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="ss">Digest</span><span class="p">:</span><span class="ss">:SHA256</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">(</span><span class="s1">&#39;hello world&#39;</span><span class="p">)</span>
</span><span class="line"><span class="c1"># =&gt; &quot;b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Use <strong>MD5</strong>.(<em>abandoned</em>)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="ss">Digest</span><span class="p">:</span><span class="ss">:MD5</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">(</span><span class="s1">&#39;hello world&#39;</span><span class="p">)</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="s2">&quot;5eb63bbbe01eeed093cb22bb8f5acdc3&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="hmac">HMAC</h2>

<p>Use <strong>OpenSSL::HMAC</strong>. <a href="http://ruby-doc.org/stdlib-2.1.2/libdoc/openssl/rdoc/OpenSSL/HMAC.html">API</a></p>

<p>Hash-based Message Authentication Code. </p>

<ol>
  <li>Generate digest message.</li>
  <li>Sign it.</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">key</span> <span class="o">=</span> <span class="s1">&#39;123456&#39;</span>
</span><span class="line"><span class="n">data</span> <span class="o">=</span> <span class="s1">&#39;hello world&#39;</span>
</span><span class="line"><span class="ss">OpenSSL</span><span class="p">:</span><span class="ss">:HMAC</span><span class="o">.</span><span class="n">digest</span><span class="p">(</span><span class="s1">&#39;sha1&#39;</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class="line"><span class="c1"># =&gt; &quot;Hs\xE8\v2\bv\xFE\xF9\x8B\xD5\x85zqF\xDBA \a\xC7&quot;</span>
</span><span class="line">
</span><span class="line"><span class="ss">OpenSSL</span><span class="p">:</span><span class="ss">:HMAC</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">(</span><span class="s1">&#39;sha1&#39;</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class="line"><span class="c1"># =&gt; &quot;4873e80b320876fef98bd5857a7146db412007c7&quot;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Use Base64 to encode</span>
</span><span class="line"><span class="no">Base64</span><span class="o">.</span><span class="n">encode64</span> <span class="ss">OpenSSL</span><span class="p">:</span><span class="ss">:HMAC</span><span class="o">.</span><span class="n">digest</span><span class="p">(</span><span class="s1">&#39;sha1&#39;</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class="line"><span class="c1"># =&gt; &quot;SHPoCzIIdv75i9WFenFG20EgB8c=\n&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="symmetric-encryption-and-decryption">Symmetric Encryption and Decryption</h2>

<p>Use <strong>OpenSSL::Cipher</strong>. <a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/openssl/rdoc/OpenSSL/Cipher.html">API</a></p>

<p>List all supported algorithms.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="ss">OpenSSL</span><span class="p">:</span><span class="ss">:Cipher</span><span class="o">.</span><span class="n">ciphers</span>
</span><span class="line"><span class="c1"># =&gt; [</span>
</span><span class="line"><span class="c1">#  [  0] &quot;AES-128-CBC&quot;,</span>
</span><span class="line"><span class="c1">#  [  1] &quot;AES-128-CBC-HMAC-SHA1&quot;,</span>
</span><span class="line"><span class="c1">#  [  2] &quot;AES-128-CFB&quot;,</span>
</span><span class="line"><span class="c1">#  [  3] &quot;AES-128-CFB1&quot;,</span>
</span><span class="line"><span class="c1">#  ...</span>
</span><span class="line"><span class="c1"># ]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Encrytion.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">data</span> <span class="o">=</span> <span class="s1">&#39;hello world&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">cipher</span> <span class="o">=</span> <span class="ss">OpenSSL</span><span class="p">:</span><span class="ss">:Cipher</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;aes-128-cbc&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Choose a mode</span>
</span><span class="line"><span class="n">cipher</span><span class="o">.</span><span class="n">encrypt</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Choose a key</span>
</span><span class="line"><span class="n">key</span> <span class="o">=</span> <span class="n">cipher</span><span class="o">.</span><span class="n">random_key</span>
</span><span class="line"><span class="c1"># =&gt; &quot;8\f\x1F\xEA\x15T\xACM\x84Q\xD8o\xD3cxv&quot;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Choose an IV, a nonce</span>
</span><span class="line"><span class="n">iv</span> <span class="o">=</span> <span class="n">cipher</span><span class="o">.</span><span class="n">random_iv</span>
</span><span class="line"><span class="c1"># =&gt; &quot;$\xF8$1&gt;\xE8%!\x1D\xE1\x882\xAE\xDC\f\xE5&quot;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Finalization</span>
</span><span class="line"><span class="n">encrypted</span> <span class="o">=</span> <span class="n">cipher</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">+</span> <span class="n">cipher</span><span class="o">.</span><span class="n">final</span>
</span><span class="line"><span class="c1"># =&gt; &quot;^\x93\xDD\x11\xBC&gt;x\f\xE1\v\x19\xD7\xEF\xB6\xE5\x8D&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Decryption.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">decipher</span> <span class="o">=</span> <span class="ss">OpenSSL</span><span class="p">:</span><span class="ss">:Cipher</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;aes-128-cbc&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Choose a mode</span>
</span><span class="line"><span class="n">decipher</span><span class="o">.</span><span class="n">decrypt</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Setup key and IV</span>
</span><span class="line"><span class="n">decipher</span><span class="o">.</span><span class="n">key</span> <span class="o">=</span> <span class="n">key</span>
</span><span class="line"><span class="n">decipher</span><span class="o">.</span><span class="n">iv</span> <span class="o">=</span> <span class="n">iv</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Finalization</span>
</span><span class="line"><span class="n">plain</span> <span class="o">=</span> <span class="n">decipher</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">encrypted</span><span class="p">)</span> <span class="o">+</span> <span class="n">decipher</span><span class="o">.</span><span class="n">final</span>
</span><span class="line"><span class="c1"># =&gt; &quot;hello world&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Review] Design Patterns in Ruby]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2014/10/17/design-patterns-in-ruby/"/>
    <updated>2014-10-17T17:40:01+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2014/10/17/design-patterns-in-ruby</id>
    <content type="html"><![CDATA[<table class="custom">
  <tbody>
    <tr>
      <td><strong>Book</strong></td>
      <td>Design Patterns in Ruby</td>
    </tr>
    <tr>
      <td><strong>Author</strong></td>
      <td>Russ Olsen</td>
    </tr>
    <tr>
      <td><strong>Link</strong></td>
      <td><a href="http://designpatternsinruby.com/">designpatternsinruby.com</a></td>
    </tr>
  </tbody>
</table>

<ul id="markdown-toc">
  <li><a href="#meta-design-pattern">Meta Design Pattern</a></li>
  <li><a href="#about-design-pattern">About Design Pattern</a></li>
  <li><a href="#design-pattern-classification">Design Pattern Classification</a></li>
  <li><a href="#the-template-method">The Template Method</a>    <ul>
      <li><a href="#description">Description</a></li>
      <li><a href="#using-and-abusing">Using and Abusing</a></li>
      <li><a href="#in-the-wild">In the Wild</a></li>
    </ul>
  </li>
  <li><a href="#the-strategy">The Strategy</a>    <ul>
      <li><a href="#description-1">Description</a></li>
      <li><a href="#comparing-to-the-template-method">Comparing to the Template Method</a></li>
      <li><a href="#sharing-data-between-the-context-and-strategy">Sharing Data between the Context and Strategy</a></li>
      <li><a href="#using-and-abusing-1">Using and Abusing</a></li>
      <li><a href="#in-the-wild-1">In the Wild</a></li>
    </ul>
  </li>
  <li><a href="#the-observer">The Observer</a>    <ul>
      <li><a href="#description-2">Description</a></li>
      <li><a href="#code-usage">Code Usage</a></li>
      <li><a href="#interfaces-pull-or-push">Interfaces. Pull or Push?</a></li>
      <li><a href="#using-and-abusing-2">Using and Abusing</a></li>
      <li><a href="#in-the-wild-2">In the Wild</a></li>
    </ul>
  </li>
  <li><a href="#composite">Composite</a>    <ul>
      <li><a href="#description-3">Description</a></li>
      <li><a href="#code-usage-1">Code Usage</a></li>
      <li><a href="#concerns">Concerns</a></li>
      <li><a href="#using-and-abusing-3">Using and Abusing</a></li>
      <li><a href="#in-the-wild-3">In the Wild</a></li>
    </ul>
  </li>
  <li><a href="#the-iterator">The Iterator</a>    <ul>
      <li><a href="#description-4">Description</a></li>
      <li><a href="#internal-iterators-vs-external-iterators">Internal Iterators vs. External Iterators</a></li>
      <li><a href="#the-inimitable-enumerable">The Inimitable Enumerable</a></li>
      <li><a href="#using-and-abusing-4">Using and Abusing</a></li>
      <li><a href="#in-the-wild-4">In the Wild</a></li>
    </ul>
  </li>
  <li><a href="#the-command">The Command</a>    <ul>
      <li><a href="#description-5">Description</a></li>
      <li><a href="#keep-track-of-what-you-have-done">Keep Track of What You Have Done</a></li>
      <li><a href="#undo-or-redo">Undo or Redo</a></li>
      <li><a href="#queuing-up-commands">Queuing Up Commands</a></li>
      <li><a href="#using-and-abusing-5">Using and Abusing</a></li>
      <li><a href="#in-the-wild-5">In the Wild</a></li>
    </ul>
  </li>
  <li><a href="#the-adapter">The Adapter</a>    <ul>
      <li><a href="#description-6">Description</a></li>
      <li><a href="#adapt-or-modify">Adapt or Modify?</a></li>
      <li><a href="#using-and-abusing-6">Using and Abusing</a></li>
      <li><a href="#in-the-wild-6">In the Wild</a></li>
    </ul>
  </li>
  <li><a href="#the-proxy">The Proxy</a>    <ul>
      <li><a href="#description-7">Description</a></li>
      <li><a href="#the-protection-proxy">The Protection Proxy</a></li>
      <li><a href="#the-remove-proxy">The Remove Proxy</a></li>
      <li><a href="#the-virtual-proxy">The Virtual Proxy</a></li>
      <li><a href="#using-and-abusing-7">Using and Abusing</a></li>
      <li><a href="#in-the-wild-7">In the Wild</a></li>
    </ul>
  </li>
  <li><a href="#the-decorator">The Decorator</a>    <ul>
      <li><a href="#description-8">Description</a></li>
      <li><a href="#why-not-the-template-method">Why Not The Template Method?</a></li>
      <li><a href="#code-usage-2">Code Usage</a></li>
      <li><a href="#using-and-abusing-8">Using and Abusing</a></li>
      <li><a href="#in-the-wild-8">In the Wild</a></li>
      <li><a href="#adapter-proxy-or-decorator">Adapter, Proxy or Decorator</a></li>
    </ul>
  </li>
  <li><a href="#singleton">Singleton</a>    <ul>
      <li><a href="#code-usage-3">Code Usage</a></li>
      <li><a href="#alternatives">Alternatives</a></li>
      <li><a href="#using-and-abusing-9">Using and Abusing</a></li>
      <li><a href="#in-the-wild-9">In the Wild</a></li>
    </ul>
  </li>
  <li><a href="#factory">Factory</a>    <ul>
      <li><a href="#description-9">Description</a></li>
      <li><a href="#abstract-factory">Abstract Factory</a></li>
      <li><a href="#factory--abstract-factory">Factory &amp;&amp; Abstract Factory</a></li>
      <li><a href="#using-and-abusing-10">Using and Abusing</a></li>
      <li><a href="#in-the-wild-10">In the Wild</a></li>
    </ul>
  </li>
  <li><a href="#builder">Builder</a>    <ul>
      <li><a href="#description-10">Description</a></li>
      <li><a href="#code-usage-4">Code Usage</a></li>
      <li><a href="#builders-can-ensure-sane-objects">Builders Can Ensure Sane Objects</a></li>
      <li><a href="#resuable-buidlers">Resuable Buidlers</a></li>
      <li><a href="#better-builders-with-magic-methods">Better Builders with Magic Methods</a></li>
      <li><a href="#using-and-abusing-11">Using and Abusing</a></li>
      <li><a href="#in-the-wild-11">In the Wild</a></li>
    </ul>
  </li>
  <li><a href="#interpreter">Interpreter</a>    <ul>
      <li><a href="#description-11">Description</a></li>
      <li><a href="#with-a-parser">With a Parser</a></li>
      <li><a href="#without-a-parser">Without a Parser</a></li>
      <li><a href="#using-and-abusing-12">Using and Abusing</a></li>
      <li><a href="#in-the-wild-12">In the Wild</a></li>
    </ul>
  </li>
  <li><a href="#domain-specific-languages">Domain-Specific Languages</a>    <ul>
      <li><a href="#description-12">Description</a></li>
      <li><a href="#using-and-abusing-13">Using and Abusing</a></li>
      <li><a href="#in-the-wild-13">In the Wild</a></li>
    </ul>
  </li>
  <li><a href="#custom-objects">Custom Objects</a>    <ul>
      <li><a href="#custom-tailoring-technique">Custom-Tailoring Technique</a></li>
      <li><a href="#reflections">Reflections</a></li>
      <li><a href="#using-and-abusing-14">Using and Abusing</a></li>
    </ul>
  </li>
  <li><a href="#convention-over-configuration">Convention Over Configuration</a>    <ul>
      <li><a href="#description-13">Description</a></li>
      <li><a href="#using-and-abusing-15">Using and Abusing</a></li>
    </ul>
  </li>
  <li><a href="#reference">Reference</a></li>
</ul>

<h2 id="meta-design-pattern">Meta Design Pattern</h2>

<ul>
  <li>Seperate out the things that change from thos that stay the same.</li>
  <li>Program to an interface, not an implementation.</li>
  <li>Prefer composition over inheritance.</li>
  <li>Delegate, delegate, delegate.</li>
</ul>

<p>Others:</p>

<ul>
  <li>YAGNI, You ain’t gonna need it.</li>
  <li>A pattern is not just about code: Intent is critical.</li>
</ul>

<p><strong>Seperate out the things that change from thos that stay the same.</strong></p>

<p>A key goal of software engineering is to build systems that allow us to contain the damage. In an ideal system, all changes are local.</p>

<p>You get there by separating the things that are likely to change from the things that are likely to stay the same. If you can identify which aspects of your system design are likely to change, you can isolate those bits from the more stable parts.</p>

<p>But how do you keep the changing parts from infecting the stable parts? <em>Program to an interface, not an implementation.</em></p>

<p><strong>Program to an interface, not an implementation.</strong></p>

<p>A good start is to write code that is less tightly coupled to itself in the first place.</p>

<p>The idea here is to program to the most general type you can.</p>

<p><strong>Prefer composition over inheritance.</strong></p>

<p>The trouble is that inheritance comes with some unhappy strings attached. When you create a subclass of an existing class, you are not really creating two separate entities: Instead, you are making two classes that are bound together by a common implementation core. Inheritance, by its very nature, tends to marry the subclass to the superclass.</p>

<p>If our goal is to build systems that are not tightly coupled together, to build systems where a single change does not ripple through the code like a sonic boom, breaking the glassware as it goes, then probably we should not rely on inheritance as much as we do.</p>

<p>We can assemble the behaviors we need through composition. In short, we try to avoid saying that an object is <em>a kind of</em> something and instead say that it <em>has</em> something.</p>

<p><strong>Delegate, delegate, delegate.</strong></p>

<p>The combination of composition and delegation is a powerful and flexible alternative to inheritance. We get most of the benefits of inheritance, much more flexibility, and none of the unpleasant side effects. Of course, nothing comes for free. Delegation requires an extra method call, as the delegating object passes the buck along. This extra method call will have some performance cost—but in most cases, it will be very minor.</p>

<p>Another cost of delegation is the boilerplate code you need to write.</p>

<p><strong>YAGNI, You ain’t gonna need it.</strong></p>

<p>You Ain’t Gonna Need It (YAGNI for short). The YAGNI principle says simply that you should not implement features, or design in flexibility, that you don’t need right now.</p>

<p>A well-designed system is one that will flex gracefully in the face of bug fixes, changing requirements, the ongoing march of technology, and inevitable redesigns. The YAGNI principle says that you should focus on the things that you need right now, building in only the flexibility that you know you need.</p>

<p>The use of design patterns has somehow become associated with a particularly virulent strain of over-engineering, with code that tries to be infinitely flexible at the cost of being understandable, and maybe even at the cost of just plain working. The proper use of design patterns is the art of making your system just flexible enough to deal with the problems you have today, but no more.</p>

<p>Your system will not work better because you used all 23 of the GoF design patterns in every possible combination. Your code will work better only if it focuses on the job it needs to do right now.</p>

<h2 id="about-design-pattern">About Design Pattern</h2>

<p>Background</p>

<blockquote>
  <p>In 1995, Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides set out to redirect all the effort going into building redundant software wheels into some- thing more useful. That year, building on the work of Christopher Alexander, Kent Beck, and others, they published Design Patterns: Elements of Reusable Object-Oriented Software. The book was an instant hit, with the authors rapidly becoming famous (at least in software engineering circles) as the Gang of Four (GoF).</p>
</blockquote>

<p>Focus on some key questions:</p>

<ul>
  <li>How do objects like the ones you tend to find in most systems relate to one another?</li>
  <li>How should they be coupled together?</li>
  <li>What should they know about each other?</li>
  <li>How can we swap out parts that are likely to change frequently?</li>
</ul>

<p>It’s commonly agreed that the most useful thing about patterns is the way in which they form a vocabulary for articulating design decisions during the normal course of development conversations among programmers.</p>

<p>Design patterns are little spring-loaded solutions to common programming problems. And a reckless use of every design pattern on the menu to solve nonexistent problems gives design patterns a bad name in some circles.</p>

<p><strong>With Ruby</strong></p>

<p>With Ruby, we no longer need to pull out relatively heavyweight design patterns to solve tiny problems. Instead, Ruby allows you to do simple things simply. </p>

<ul>
  <li>
    <p>Like a Command object in the GoF sense is essentially a wrapper around some code that knows how to do one specific thing, to run a particular bit of code at some time. Of course, that is also a fairly accurate description of a Ruby code block object or a <code>Proc</code>.</p>
  </li>
  <li>
    <p>Internal Domain Specific Languages. I believe that his treatment of the subject, as an evolution of the Interpreter pattern, is the first significant reference work in publication on the topic.</p>
  </li>
</ul>

<p>The Ruby programming language makes implementing patterns so easy that sometimes they fade into the background.</p>

<ul>
  <li>Ruby is dynamically typed.</li>
  <li>Ruby has code closures.</li>
  <li>Ruby classes are real objects.</li>
  <li>Ruby has an elegant system of code reuse.</li>
</ul>

<p>The traditional implementations of many design patterns work, but they make you work, too. Ruby allows you to concentrate on the real problems that you are trying to solve instead of the plumbing.</p>

<p>The increasing industry recognition of the value of dynamic and flexible languages such as Ruby has plunged us into yet another wisdom gap.</p>

<blockquote>
  <p>Design Patterns was published is the need for wisdom. </p>

  <p>Bruce Tate is fond of pointing out1 that when a new programming technique or language pops up, there is frequently a wisdom gap. The industry needs time to come to grips with the new technique, to figure out the best way to apply it. How many years had to elapse between the first realization that object- oriented programming was the way to go and the time when we really began to use object-oriented technology effectively? Those years were the object-oriented wisdom gap.</p>
</blockquote>

<h2 id="design-pattern-classification">Design Pattern Classification</h2>

<p><strong>Creational</strong> (5)</p>

<ul>
  <li>Factory Method</li>
  <li>Abstract Factory</li>
  <li>Builder</li>
  <li>Prototype</li>
  <li>Singleton</li>
</ul>

<p><strong>Structural</strong> (7)</p>

<ul>
  <li>Facade</li>
  <li>Adapter</li>
  <li>Proxy</li>
  <li>Decorator</li>
  <li>Bridge</li>
  <li>Composite</li>
  <li>Flyweight</li>
</ul>

<p><strong>Behavioural</strong> (11)</p>

<ul>
  <li>Template Method</li>
  <li>Observer</li>
  <li>State</li>
  <li>Strategy</li>
  <li>Chain of Responsibility</li>
  <li>Command</li>
  <li>Visitor</li>
  <li>Mediator</li>
  <li>Memento</li>
  <li>Iterator</li>
  <li>Interpreter</li>
</ul>

<h2 id="the-template-method">The Template Method</h2>

<p>Basic idea is <em>Seperate out the things that change from thos that stay the same.</em> </p>

<h3 id="description">Description</h3>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/template-method.png" alt="template-method" /></p>

<ol>
  <li>Extract the common part into an abstract base class</li>
  <li>Create some hook methods as the interface</li>
  <li>Let the subclass to implement it</li>
</ol>

<p>The Template Method pattern is simply a fancy way of saying that if you want to vary an algorithm, one way to do so is to code the invariant part in a base class and to encapsulate the variable parts in methods that are defined by a number of subclasses.</p>

<p>The abstract base class controls the higher-level processing through the template method; the sub-classes simply fill in the details.</p>

<p>Non-abstract methods that can be overridden in the concrete classes of the Template Method pattern are called <strong>hook methods</strong>.</p>

<p>Duck typing is a trade-off: You give up the compile-time safety of static typing, and in return you get back a lot of code clarity and programming flexibility.</p>

<h3 id="using-and-abusing">Using and Abusing</h3>

<p>The Template Method pattern is at its best when it is at its leanest—that is, when every abstract method and hook is there for a reason. Try to avoid creating a template class that requires each subclass to override a huge number of obscure methods just to cover every conceivable possibility. You also do not want to create a template class that is encrusted with a multitude of hook methods that no one will ever override.</p>

<h3 id="in-the-wild">In the Wild</h3>

<p>There is another very common example of the Template Method pattern that is perhaps so pervasive that it is hard to see. Think about the <code>initialize</code> method that we use to set up our objects. All we know about <code>initialize</code> is that it is called sometime toward the end of the process of creating a new object instance and that it is a method that we can override in our class to do any specific initialization. Sounds like a hook method to me.</p>

<p><code>Class#new</code> calls <code>allocate</code> first, then <code>initialise</code>. Every class inherits the <code>new</code> method, and defines its own concrete <code>initialise</code> method. So, we can treat <code>Class#new</code> as a template method, and <code>initialise</code> as a hook method.</p>

<h2 id="the-strategy">The Strategy</h2>

<p>Basic idea is <em>Delegate, delegate, delegate</em> and <em>Prefer composition over inheritance</em>.</p>

<h3 id="description-1">Description</h3>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/strategy.png" alt="strategy" /></p>

<ol>
  <li>Pull the algorithm out into a seperate “strategy” object.</li>
  <li>All of the startegy objects support the same interface. </li>
  <li>Let the context choose.</li>
</ol>

<p>Given that all of the strategy objects look alike from the outside, the user of the strategy—called the <strong>context</strong> class by the GoF—can treat the strategies like interchangeable parts.</p>

<h3 id="comparing-to-the-template-method">Comparing to the Template Method</h3>

<p>The Template Method pattern is built around inheritance.</p>

<p>No matter how carefully you design your code, your subclasses are tangled up with their superclass: It is in the nature of the relationship. On top of this, inheritance-based techniques such as the Template Method pattern limit our runtime flexibility. Once we have selected a particular variation of the algorithm—in our example, once we have created an instance of HTMLReport—changing our mind is hard.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># The Template Method</span>
</span><span class="line"><span class="n">report</span> <span class="o">=</span> <span class="no">HTMLReport</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="n">report</span><span class="o">.</span><span class="n">output_report</span>
</span><span class="line"><span class="n">report</span> <span class="o">=</span> <span class="no">PlainTextReport</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="n">report</span><span class="o">.</span><span class="n">output_report</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Because the Strategy pattern is based on composition and delegation, rather than on inheritance, it is easy to switch strategies at runtime.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># The Strategy</span>
</span><span class="line"><span class="n">report</span> <span class="o">=</span> <span class="no">Report</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">HTMLFormatter</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span><span class="line"><span class="n">report</span><span class="o">.</span><span class="n">output_report</span>
</span><span class="line"><span class="n">report</span><span class="o">.</span><span class="n">formatter</span> <span class="o">=</span> <span class="no">PlainTextFormatter</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="n">report</span><span class="o">.</span><span class="n">output_report</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="sharing-data-between-the-context-and-strategy">Sharing Data between the Context and Strategy</h3>

<ol>
  <li><em>Pass in everything that the strategy needs as arguments when the context calls the methods on the strategy object.</em> The downside of doing things this way is that if there is a lot of complex data to pass between the context and the strategy, then, well, you are going to be passing a lot of complex data around without any guarantee that it will get used.</li>
  <li>Having the context object pass a reference to itself to the strategy object.</li>
</ol>

<h3 id="using-and-abusing-1">Using and Abusing</h3>

<p>Particular attention to the details of the interface between the context and the strategy as well as to the coupling between them. Remember, the Strategy pattern will do you little good if you couple the con- text and your first strategy so tightly together that you cannot wedge a second or a third strategy into the design.</p>

<h3 id="in-the-wild-1">In the Wild</h3>

<p>Ruby code blocks, which are essentially code wrapped up in an instant object (the Proc object), are wonderfully useful for creating quick, albeit simple, strategy objects.  </p>

<p>Use Proc as the lightweight strategy object. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Report</span>
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:text</span>
</span><span class="line">  <span class="kp">attr_accessor</span> <span class="ss">:formatter</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="o">&amp;</span><span class="n">formatter</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@title</span> <span class="o">=</span> <span class="s1">&#39;Monthly Report&#39;</span>
</span><span class="line">    <span class="vi">@text</span> <span class="o">=</span> <span class="o">[</span> <span class="s1">&#39;Things are going&#39;</span><span class="p">,</span> <span class="s1">&#39;really, really well.&#39;</span> <span class="o">]</span>
</span><span class="line">    <span class="vi">@formatter</span> <span class="o">=</span> <span class="n">formatter</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">output_report</span>
</span><span class="line">    <span class="vi">@formatter</span><span class="o">.</span><span class="n">call</span><span class="p">(</span> <span class="nb">self</span> <span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="the-observer">The Observer</h2>

<h3 id="description-2">Description</h3>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/observer.png" alt="observer" /></p>

<p>The aiming is to build a system that is highly integrated—that is, a system where every part is aware of the state of the whole.</p>

<p>The GoF called this idea of building a clean interface between the source of the news that some object has changed and the consumers of that news the Observer pattern. The class with the news is the <strong>subject</strong>, and the objects which are interested in getting the news are the <strong>observor</strong>.</p>

<blockquote>
  <p>It has always seemed to me that the Observer pattern is somewhat misnamed. While the observer object gets top billing—in fact, the only billing—it is actually the subject that does most of the work. It is the subject that is responsible for keeping track of the observers. It is also the subject that needs to inform the observers that a change has come down the pike.</p>
</blockquote>

<h3 id="code-usage">Code Usage</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Subject</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="vi">@observers</span><span class="o">=[]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">add_observer</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@observers</span> <span class="o">&lt;&lt;</span> <span class="n">observer</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">delete_observer</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@observers</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">notify_observers</span>
</span><span class="line">    <span class="vi">@observers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">observer</span><span class="o">|</span>
</span><span class="line">      <span class="n">observer</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Employee</span>
</span><span class="line">  <span class="kp">include</span> <span class="no">Subject</span>
</span><span class="line">
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:address</span>
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:salary</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span> <span class="nb">name</span><span class="p">,</span> <span class="n">title</span><span class="p">,</span> <span class="n">salary</span><span class="p">)</span>
</span><span class="line">   <span class="k">super</span><span class="p">()</span>
</span><span class="line">   <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class="line">   <span class="vi">@title</span> <span class="o">=</span> <span class="n">title</span>
</span><span class="line">   <span class="vi">@salary</span> <span class="o">=</span> <span class="n">salary</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">salary</span><span class="o">=</span><span class="p">(</span><span class="n">new_salary</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@salary</span> <span class="o">=</span> <span class="n">new_salary</span>
</span><span class="line">    <span class="n">notify_observers</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The Ruby standard library comes with a fine, prebuilt <a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/observer/rdoc/Observable.html">Observable</a> module that provides all of the support you need to make your object, well, observable.</p>

<p>With the observable module, the observable object must:</p>

<ol>
  <li>assert that it has <code>#changed</code></li>
  <li>call <code>#notify_observers</code></li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;observer&#39;</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Employee</span>
</span><span class="line">  <span class="kp">include</span> <span class="no">Observable</span>
</span><span class="line">
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:address</span>
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:salary</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span> <span class="nb">name</span><span class="p">,</span> <span class="n">title</span><span class="p">,</span> <span class="n">salary</span><span class="p">)</span>
</span><span class="line">   <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class="line">   <span class="vi">@title</span> <span class="o">=</span> <span class="n">title</span>
</span><span class="line">   <span class="vi">@salary</span> <span class="o">=</span> <span class="n">salary</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">salary</span><span class="o">=</span><span class="p">(</span><span class="n">new_salary</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@salary</span> <span class="o">=</span> <span class="n">new_salary</span>
</span><span class="line">    <span class="n">changed</span>
</span><span class="line">    <span class="n">notify_observers</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="interfaces-pull-or-push">Interfaces. Pull or Push?</h3>

<p>The key decisions that you need to make when implementing the Observer pattern all center on the interface between the subject and the observer.</p>

<p>Just have a single method in the observer whose only argument is the subject. The GoF term for this strategy is the <strong>pull</strong> method, because the observers have to pull whatever details about the change that they need out of the subject.</p>

<p>The other possibility—logically enough termed the <strong>push</strong> method—has the subject send the observers a lot of details about the change:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">observer</span><span class="o">.</span><span class="n">update_salary</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">old_salary</span><span class="p">,</span> <span class="n">new_salary</span><span class="p">)</span>
</span><span class="line"><span class="n">observer</span><span class="o">.</span><span class="n">update_title</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">old_title</span><span class="p">,</span> <span class="n">new_title</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The advantage in providing more details is that the observers do not have to work quite as hard to keep track of what is going on. The disadvantage of the push model is that if all of the observers are not interested in all of the details, then the work of passing the data around goes for naught.</p>

<h3 id="using-and-abusing-2">Using and Abusing</h3>

<p><em>The frequency and timing of the updates.</em> The subject class can help with all of this by avoiding broadcasting redundant updates. Just because some- one updates an object, it does not mean that anything really changed.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">salary</span><span class="o">=</span><span class="p">(</span><span class="n">new_salary</span><span class="p">)</span>
</span><span class="line">  <span class="n">old_salary</span> <span class="o">=</span> <span class="vi">@salary</span>
</span><span class="line">  <span class="vi">@salary</span> <span class="o">=</span> <span class="n">new_salary</span>
</span><span class="line">  <span class="k">if</span> <span class="n">old_salary</span> <span class="o">!=</span> <span class="n">new_salary</span>
</span><span class="line">    <span class="n">changed</span>
</span><span class="line">    <span class="n">notify_observers</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>The consistency of the subject as it informs its observers of changes.</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">fred</span> <span class="o">=</span> <span class="no">Employee</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Fred&quot;</span><span class="p">,</span> <span class="s2">&quot;Crane Operator&quot;</span><span class="p">,</span> <span class="mi">30000</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">fred</span><span class="o">.</span><span class="n">salary</span> <span class="o">=</span> <span class="mi">1000000</span>
</span><span class="line"><span class="c1"># Warning! Inconsistent state here!</span>
</span><span class="line"><span class="n">fred</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="s1">&#39;Vice President of Sales&#39;</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="c1"># Don&#39;t inform the observers just yet</span>
</span><span class="line"><span class="n">fred</span><span class="o">.</span><span class="n">salary</span> <span class="o">=</span> <span class="mi">1000000</span>
</span><span class="line"><span class="n">fred</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="s1">&#39;Vice President of Sales&#39;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Now inform the observers!</span>
</span><span class="line"><span class="n">fred</span><span class="o">.</span><span class="n">changes_complete</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>Badly behaved observers.</em> Like responds by raising an exception?</p>

<h3 id="in-the-wild-2">In the Wild</h3>

<p>Use Proc as Observers. Just use <code>call</code> as the interface when notifying observers.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Subject</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">notify_observers</span>
</span><span class="line">    <span class="vi">@observers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">observer</span><span class="o">|</span>
</span><span class="line">      <span class="n">observer</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>ActiveRecord::Observer has been deprecated from Rails 4.0, but we can still get the feature by the extracted gem. <a href="https://github.com/rails/rails-observers">rails-observers</a></p>

<h2 id="composite">Composite</h2>

<h3 id="description-3">Description</h3>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/composite.png" alt="composite" /></p>

<ol>
  <li><strong>component</strong>, a common interface or base class for all of your objects.</li>
  <li><strong>leaf</strong>, the class doing simple, indivisible building blocks of process.</li>
  <li><strong>composite</strong>, a component, also a higher-level object that is build from subcomponents.</li>
</ol>

<p>The GoF called the design pattern for our “<em>the sum acts like one of the parts</em>” situa- tion the Composite pattern. You will know that you need to use the Composite pattern when you are trying to build a hierarchy or tree of objects, and you do not want the code that uses the tree to constantly have to worry about whether it is dealing with a single object or a whole bushy branch of the tree. Once you grasp its <em>recursive nature</em>, the Composite pattern is really quite simple.</p>

<h3 id="code-usage-1">Code Usage</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">CompositeTask</span> <span class="o">&lt;</span> <span class="no">Task</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">    <span class="k">super</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@sub_tasks</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">add_sub_task</span><span class="p">(</span><span class="n">task</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@sub_tasks</span> <span class="o">&lt;&lt;</span> <span class="n">task</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">remove_sub_task</span><span class="p">(</span><span class="n">task</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@sub_tasks</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">task</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">get_time_required</span>
</span><span class="line">    <span class="n">time</span><span class="o">=</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span>
</span><span class="line">    <span class="vi">@sub_tasks</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">task</span><span class="o">|</span> <span class="n">time</span> <span class="o">+=</span> <span class="n">task</span><span class="o">.</span><span class="n">get_time_required</span><span class="p">}</span>
</span><span class="line">    <span class="n">time</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">MakeBatterTask</span> <span class="o">&lt;</span> <span class="no">CompositeTask</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="k">super</span><span class="p">(</span><span class="s1">&#39;Make batter&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="n">add_sub_task</span><span class="p">(</span> <span class="no">AddDryIngredientsTask</span><span class="o">.</span><span class="n">new</span> <span class="p">)</span>
</span><span class="line">    <span class="n">add_sub_task</span><span class="p">(</span> <span class="no">AddLiquidsTask</span><span class="o">.</span><span class="n">new</span> <span class="p">)</span>
</span><span class="line">    <span class="n">add_sub_task</span><span class="p">(</span> <span class="no">MixTask</span><span class="o">.</span><span class="n">new</span> <span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="concerns">Concerns</h3>

<p><strong><em>How to handle the difference between a composite and a leaf?</em></strong></p>

<p>The goal of the Composite pattern is to make the leaf objects <em>more or less</em> indistinguishable from the composite objects. But there is one unavoidable difference between a composite and a leaf: The composite has to manage its children, which probably means that it needs to have a method to get at the children and possibly methods to add and remove child objects. The leaf classes, of course, really do not have any children to manage; that is the nature of leafyness.</p>

<p>As I say, how you handle this decision is mostly a matter of taste: Make the leaf and composite classes different, or burden the leaf classes with embarrassing methods that they do not know how to handle. My own instinct is to leave the methods off of the leaf classes. Leaf objects cannot handle child objects, and we may as well admit it.</p>

<p><strong><em>How to traverse the tree structrue which the composite pattern make?</em></strong></p>

<p>Each composite object holds references to its subcomponents but the child compo- nents do not know a thing about their parents, it is easy to traverse the tree from the root to the leaves but hard to go the other way.</p>

<p>Add a parent reference in the component class.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Task</span>
</span><span class="line">  <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:parent</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class="line">    <span class="vi">@parent</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">CompositeTask</span> <span class="o">&lt;</span> <span class="no">Task</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">    <span class="k">super</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@sub_tasks</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">add_sub_task</span><span class="p">(</span><span class="n">task</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@sub_tasks</span> <span class="o">&lt;&lt;</span> <span class="n">task</span>
</span><span class="line">    <span class="n">task</span><span class="o">.</span><span class="n">parent</span> <span class="o">=</span> <span class="nb">self</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">remove_sub_task</span><span class="p">(</span><span class="n">task</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@sub_tasks</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">task</span><span class="p">)</span>
</span><span class="line">    <span class="n">task</span><span class="o">.</span><span class="n">parent</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="using-and-abusing-3">Using and Abusing</h3>

<p>The error that crops up so frequently with the Composite pattern is assuming that the tree is only one level deep—that is, assuming that all of the child components of a composite object are, in fact, leaf objects and not other composites.</p>

<p>Remember, the power of the Composite pattern is that it allows us to build arbi- trarily deep trees.</p>

<h3 id="in-the-wild-3">In the Wild</h3>

<h2 id="the-iterator">The Iterator</h2>

<h3 id="description-4">Description</h3>

<p>Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation.</p>

<p>Iterators in Ruby are a great example of what is right with the language. Instead of providing special-purpose external iterator objects for each aggregate class, Ruby relies on the very flexible idea of Proc objects and code blocks to build internal iterators.</p>

<p><strong>external iterator</strong>, the iterator is a separate object from the aggregate.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="err">#</span> <span class="n">in</span> <span class="n">java</span>
</span><span class="line"><span class="n">ArrayList</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">();</span>
</span><span class="line"><span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;red&quot;</span><span class="o">);</span>
</span><span class="line"><span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;green&quot;</span><span class="o">);</span>
</span><span class="line"><span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;blue&quot;</span><span class="o">);</span>
</span><span class="line"><span class="k">for</span><span class="o">(</span> <span class="n">Iterator</span> <span class="n">i</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span> <span class="n">i</span><span class="o">.</span><span class="na">hasNext</span><span class="o">();)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span> <span class="s">&quot;item: &quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">.</span><span class="na">next</span><span class="o">());</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>internal iterator</strong>, the code block-based iterators, all of the iterating action occurs inside the aggregate object.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># in ruby</span>
</span><span class="line"><span class="k">def</span> <span class="nf">for_each_element</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class="line">  <span class="n">i</span><span class="o">=</span> <span class="mi">0</span>
</span><span class="line">  <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">array</span><span class="o">.</span><span class="n">length</span>
</span><span class="line">    <span class="k">yield</span><span class="p">(</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">)</span>
</span><span class="line">    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="o">]</span>
</span><span class="line"><span class="n">for_each_element</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">element</span><span class="o">|</span> <span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;The element is </span><span class="si">#{</span><span class="n">element</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="internal-iterators-vs-external-iterators">Internal Iterators vs. External Iterators</h3>

<p>With Internal Iterator, the main advantage is simplicity and code clarity.</p>

<p>With External Iterator</p>

<ol>
  <li>
    <p>You have more flexibility on iteration control. With an external iterator, you won’t call <code>next</code> until you are good and ready for the next element. With an internal iterator, by contrast, the aggregate relentlessly pushes the code block to accept item after item.</p>

    <p><em>If you are trying to merge the contents of two sorted arrays into a single array that was itself sorte?</em></p>

    <p>the merge is actually fairly easy with an external iterator, simply create an iterator for the two input arrays and then merge the arrays by repeatedly pushing the smallest value from either of the iterators onto the output array.</p>
  </li>
  <li>
    <p>A second advantage of external iterators is that, because they are external, you can share them—you can pass them around to other methods and objects. Of course, this is a bit of a double-edged sword: You get the flexibility but you also have to know what you are doing. In particular, beware of multiple threads getting hold of a non-thread-safe external iterator.</p>
  </li>
</ol>

<h3 id="the-inimitable-enumerable">The Inimitable Enumerable</h3>

<p>To mix in <code>Enumerable</code>, you need only make sure that your internal iterator method is named <code>each</code> and that the individual elements that you are going to iterate over have a reasonable implementation of the <code>&lt;=&gt;</code> comparison operator. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Account</span>
</span><span class="line">  <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:balance</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">balance</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class="line">    <span class="vi">@balance</span> <span class="o">=</span> <span class="n">balance</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">&lt;=&gt;</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>
</span><span class="line">    <span class="n">balance</span> <span class="o">&lt;=&gt;</span> <span class="n">other</span><span class="o">.</span><span class="n">balance</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Portfolio</span>
</span><span class="line">  <span class="kp">include</span> <span class="no">Enumerable</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="vi">@accounts</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">each</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@accounts</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">add_account</span><span class="p">(</span><span class="n">account</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@accounts</span> <span class="o">&lt;&lt;</span> <span class="n">account</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">my_portfolio</span><span class="o">.</span><span class="n">any?</span> <span class="p">{</span><span class="o">|</span><span class="n">account</span><span class="o">|</span> <span class="n">account</span><span class="o">.</span><span class="n">balance</span> <span class="o">&gt;</span> <span class="mi">2000</span><span class="p">}</span>
</span><span class="line"><span class="n">my_portfolio</span><span class="o">.</span><span class="n">all?</span> <span class="p">{</span><span class="o">|</span><span class="n">account</span><span class="o">|</span> <span class="n">account</span><span class="o">.</span><span class="n">balance</span> <span class="o">&gt;</span> <span class="o">=</span> <span class="mi">10</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="using-and-abusing-4">Using and Abusing</h3>

<p>The main danger is this: What happens if the aggregate object changes while you are iterating through it?</p>

<p>You may use a shallow copy when initializing.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">ChangeResistantArrayIterator</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@array</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@index</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>A Ruby trick example.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">array</span><span class="o">=[</span><span class="s1">&#39;red&#39;</span><span class="p">,</span> <span class="s1">&#39;green&#39;</span><span class="p">,</span> <span class="s1">&#39;blue&#39;</span><span class="p">,</span> <span class="s1">&#39;purple&#39;</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="n">array</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span> <span class="n">color</span> <span class="o">|</span>
</span><span class="line">  <span class="nb">puts</span><span class="p">(</span><span class="n">color</span><span class="p">)</span>
</span><span class="line">  <span class="k">if</span> <span class="n">color</span> <span class="o">==</span> <span class="s1">&#39;green&#39;</span>
</span><span class="line">    <span class="n">array</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">color</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># red</span>
</span><span class="line"><span class="c1"># green</span>
</span><span class="line"><span class="c1"># purple</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>Finally, a multithreaded program is a particularly dangerous home for iterators.</em> You need to take all of the usual care to ensure that one thread does not rip the aggregate rug out from under your iterator.</p>

<h3 id="in-the-wild-4">In the Wild</h3>

<p><strong>IO</strong></p>

<p>The neat thing about the IO object is that it is amphibious—it does both internal and external iterators.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">f</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;names.txt&#39;</span><span class="p">)</span>
</span><span class="line"><span class="k">while</span> <span class="ow">not</span> <span class="n">f</span><span class="o">.</span><span class="n">eof?</span>
</span><span class="line">  <span class="nb">puts</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">readline</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line"><span class="n">f</span><span class="o">.</span><span class="n">close</span>
</span><span class="line">
</span><span class="line"><span class="n">f</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;names.txt&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">f</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">line</span><span class="o">|</span> <span class="nb">puts</span><span class="p">(</span><span class="n">line</span><span class="p">)}</span>
</span><span class="line"><span class="n">f</span><span class="o">.</span><span class="n">close</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Pathname</strong> <a href="http://ruby-doc.org/stdlib-2.1.0/libdoc/pathname/rdoc/Pathname.html">API</a></p>

<p>Pathname tries to offer one-stop shopping for all your directory and path manipulation needs.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">pn</span><span class="o">.</span><span class="n">each_filename</span> <span class="p">{</span><span class="o">|</span><span class="n">file</span><span class="o">|</span> <span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;File: </span><span class="si">#{</span><span class="n">file</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)}</span>
</span><span class="line"><span class="c1"># File: usr</span>
</span><span class="line"><span class="c1"># File: local</span>
</span><span class="line"><span class="c1"># File: lib</span>
</span><span class="line"><span class="c1"># File: ruby</span>
</span><span class="line"><span class="c1"># File: 1.8</span>
</span><span class="line">
</span><span class="line"><span class="n">pn</span><span class="o">.</span><span class="n">each_entry</span> <span class="p">{</span><span class="o">|</span><span class="n">entry</span><span class="o">|</span> <span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;Entry: </span><span class="si">#{</span><span class="n">entry</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)}</span>
</span><span class="line"><span class="c1"># Entry: .</span>
</span><span class="line"><span class="c1"># Entry: ..</span>
</span><span class="line"><span class="c1"># Entry: i686-linux</span>
</span><span class="line"><span class="c1"># Entry: shellwords.rb</span>
</span><span class="line"><span class="c1"># Entry: mailread.rb</span>
</span><span class="line"><span class="c1"># ...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>ObjectSpace</strong> <a href="http://www.ruby-doc.org/core-2.1.3/ObjectSpace.html">API</a></p>

<p>ObjectSpace provides a window into the complete universe of objects that exist within your Ruby interpreter. The fundamental iterator supplied by ObjectSpace is the <code>each_object</code> method. It iterates across all of the Ruby objects—everything that is loaded into your Ruby interpreter:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">ObjectSpace</span><span class="o">.</span><span class="n">each_object</span> <span class="p">{</span><span class="o">|</span><span class="n">object</span><span class="o">|</span> <span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;Object: </span><span class="si">#{</span><span class="n">object</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)}</span>
</span><span class="line">
</span><span class="line"><span class="c1"># If you supply the argument, each_object will iterate over only</span>
</span><span class="line"><span class="c1"># the instances of that class or module.</span>
</span><span class="line"><span class="no">ObjectSpace</span><span class="o">.</span><span class="n">each_object</span><span class="p">(</span><span class="no">Numeric</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;The number is </span><span class="si">#{</span><span class="n">n</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Try this execellent <code>subclasses_of</code> method:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">subclasses_of</span><span class="p">(</span><span class="n">superclass</span><span class="p">)</span>
</span><span class="line">  <span class="n">subclasses</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">
</span><span class="line">  <span class="no">ObjectSpace</span><span class="o">.</span><span class="n">each_object</span><span class="p">(</span><span class="no">Class</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="o">|</span>
</span><span class="line">    <span class="k">next</span> <span class="k">if</span> <span class="o">!</span><span class="n">k</span><span class="o">.</span><span class="n">ancestors</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">superclass</span><span class="p">)</span> <span class="o">||</span> <span class="n">superclass</span> <span class="o">==</span> <span class="n">k</span> <span class="o">||</span> <span class="n">k</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s1">&#39;::&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="n">subclasses</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">k</span><span class="o">.</span><span class="n">to_s</span><span class="p">)</span>
</span><span class="line">    <span class="n">subclasses</span> <span class="o">&lt;&lt;</span> <span class="n">k</span><span class="o">.</span><span class="n">to_s</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="n">subclasses</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">subclasses_of</span><span class="p">(</span><span class="no">Numeric</span><span class="p">)</span>
</span><span class="line"><span class="c1"># =&gt; [&quot;Complex&quot;, &quot;Rational&quot;, &quot;Bignum&quot;, &quot;Float&quot;, &quot;Fixnum&quot;, &quot;Integer&quot;]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="the-command">The Command</h2>

<h3 id="description-5">Description</h3>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/command.png" alt="command" /></p>

<p>The idea of factoring out the action code into its own object is the essence of the Command pattern.</p>

<p>The key thing about the Command pattern is that it separates the thought from the deed. When you use this pattern, you are no longer simply saying, “Do this”; instead, you are saying, “Remember how to do this,” and, sometime later, “Do that thing that I told you to remember.”</p>

<p>Command pattern can be useful in</p>

<ol>
  <li>Keeping track of what you need to do, or what you have already done</li>
  <li>Undo or redo</li>
  <li>Queuing up comands</li>
</ol>

<h3 id="keep-track-of-what-you-have-done">Keep Track of What You Have Done</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Command</span>
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:description</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">description</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@description</span> <span class="o">=</span> <span class="n">description</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">execute</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">CreateFile</span> <span class="o">&lt;</span> <span class="no">Command</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">contents</span><span class="p">)</span>
</span><span class="line">    <span class="k">super</span><span class="p">(</span><span class="s2">&quot;Create file: </span><span class="si">#{</span><span class="n">path</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@path</span> <span class="o">=</span> <span class="n">path</span>
</span><span class="line">    <span class="vi">@contents</span> <span class="o">=</span> <span class="n">contents</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">execute</span>
</span><span class="line">    <span class="n">f</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="vi">@path</span><span class="p">,</span> <span class="s2">&quot;w&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="vi">@contents</span><span class="p">)</span>
</span><span class="line">    <span class="n">f</span><span class="o">.</span><span class="n">close</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Use Composite</strong></p>

<p>When we are trying to keep track of what we are about to do—or have done—we will need a class to collect all of our commands. Hmm, a class that acts like a command, but really is just a front for a number of subcommands. Sounds like a composite:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">CompositeCommand</span> <span class="o">&lt;</span> <span class="no">Command</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="vi">@commands</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">add_command</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@commands</span> <span class="o">&lt;&lt;</span> <span class="n">cmd</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">execute</span>
</span><span class="line">    <span class="vi">@commands</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">cmd</span><span class="o">|</span> <span class="n">cmd</span><span class="o">.</span><span class="n">execute</span><span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">description</span>
</span><span class="line">    <span class="n">description</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span><span class="line">    <span class="vi">@commands</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">cmd</span><span class="o">|</span> <span class="n">description</span> <span class="o">+=</span> <span class="n">cmd</span><span class="o">.</span><span class="n">description</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">}</span>
</span><span class="line">    <span class="n">description</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">cmds</span> <span class="o">=</span> <span class="no">CompositeCommand</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="n">cmds</span><span class="o">.</span><span class="n">add_command</span><span class="p">(</span><span class="no">CreateFile</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;file1.txt&#39;</span><span class="p">,</span> <span class="s2">&quot;hello world</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">))</span>
</span><span class="line"><span class="n">cmds</span><span class="o">.</span><span class="n">add_command</span><span class="p">(</span><span class="no">CopyFile</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;file1.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;file2.txt&#39;</span><span class="p">))</span>
</span><span class="line"><span class="n">cmds</span><span class="o">.</span><span class="n">add_command</span><span class="p">(</span><span class="no">DeleteFile</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;file1.txt&#39;</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="n">cmds</span><span class="o">.</span><span class="n">execute</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="undo-or-redo">Undo or Redo</h3>

<p>Every undoable command that we create has two methods. Along with the usual <code>execute</code> method, which does the thing, we add an <code>unexecute</code> method, which undoes the same thing.</p>

<p>As delete a file maybe destructive, so we need to save the contents of the original file.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">DeleteFile</span> <span class="o">&lt;</span> <span class="no">Command</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class="line">    <span class="k">super</span> <span class="s2">&quot;Delete file: </span><span class="si">#{</span><span class="n">path</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="vi">@path</span> <span class="o">=</span> <span class="n">path</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">execute</span>
</span><span class="line">    <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="vi">@path</span><span class="p">)</span>
</span><span class="line">      <span class="vi">@contents</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="vi">@path</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">    <span class="n">f</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="vi">@path</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">unexecute</span>
</span><span class="line">    <span class="k">if</span> <span class="vi">@contents</span>
</span><span class="line">      <span class="n">f</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="vi">@path</span><span class="p">,</span><span class="s2">&quot;w&quot;</span><span class="p">)</span>
</span><span class="line">      <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="vi">@contents</span><span class="p">)</span>
</span><span class="line">      <span class="n">f</span><span class="o">.</span><span class="n">close</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Creating a file with CreateFile could be destructive, too: The file that we are trying to create might already exist and be overwritten as we create the new file. In a real system, we would need to deal with this possibility as well as with a host of issues related to file permissions and ownership. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">CreateFile</span> <span class="o">&lt;</span> <span class="no">Command</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">contents</span><span class="p">)</span>
</span><span class="line">    <span class="k">super</span> <span class="s2">&quot;Create file: </span><span class="si">#{</span><span class="n">path</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="vi">@path</span> <span class="o">=</span> <span class="n">path</span>
</span><span class="line">    <span class="vi">@contents</span> <span class="o">=</span> <span class="n">contents</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">execute</span>
</span><span class="line">    <span class="n">f</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="vi">@path</span><span class="p">,</span> <span class="s2">&quot;w&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="vi">@contents</span><span class="p">)</span>
</span><span class="line">    <span class="n">f</span><span class="o">.</span><span class="n">close</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">unexecute</span>
</span><span class="line">    <span class="no">File</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="vi">@path</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Finnaly, add an <code>unexecute</code> method to the <code>CompositeCommad</code> class.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">CompositeCommand</span> <span class="o">&lt;</span> <span class="no">Command</span>
</span><span class="line">  <span class="c1"># ...</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">unexecute</span>
</span><span class="line">    <span class="vi">@commands</span><span class="o">.</span><span class="n">reverse</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">cmd</span><span class="o">|</span> <span class="n">cmd</span><span class="o">.</span><span class="n">unexecute</span> <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># ...</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="queuing-up-commands">Queuing Up Commands</h3>

<blockquote>
  <p>For example, it frequently takes a minor computer-time eternity to connect to a database. If you need to perform a number of database operations over time, you sometimes face the unpleasant choice of (1) leaving the connection open for the whole time, thereby wasting a scarce resource, or (2) wasting the time it takes to open and close the connection for each operation.</p>
</blockquote>

<p>The Command pattern offers one way out of this kind of bind. Instead of performing each operation as a stand-alone task, you accumulate all of these commands in a list. Periodically, you can open a connection to the database, execute all of your commands, and flush out this list.</p>

<h3 id="using-and-abusing-5">Using and Abusing</h3>

<p>The key thing about the Command pattern is that it separates the thought from the deed. When you use this pattern, you are no longer simply saying, “Do this”; instead, you are saying, “Remember how to do this,” and, sometime later, “Do that thing that I told you to remember.” Make sure that you really need that complexity before you pull the Command pattern out of your bag of tricks.</p>

<p><strong>Creation Time versus Execution Time</strong></p>

<p>Assuming you really do need the Command pattern, to make it work you have to be sure that the initial thought is complete. You have to carefully think through the circumstances in which the command object will find itself when it is executed versus when it was created. Yes, this key file was open, and that vital object was initialized when I cre- ated the command. Will it all still be there for me when the command is executed?</p>

<h3 id="in-the-wild-5">In the Wild</h3>

<p><strong>ActiveRecord::Migration</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">CreateBookTable</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class="line">  <span class="c1"># execute</span>
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">up</span>
</span><span class="line">    <span class="n">create_table</span> <span class="ss">:books</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class="line">      <span class="n">t</span><span class="o">.</span><span class="n">column</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class="line">      <span class="n">t</span><span class="o">.</span><span class="n">column</span> <span class="ss">:author</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># unexecute</span>
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">down</span>
</span><span class="line">    <span class="n">drop_table</span> <span class="ss">:books</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Madeleine</strong></p>

<p><a href="https://github.com/ghostganz/madeleine">repo</a></p>

<blockquote>
  <p>Imagine how slow your system would be if you had to write out a whole airport’s worth of seat assignments every time someone changed his or her mind and wanted that aisle seat after all.</p>
</blockquote>

<p>Madeleine is a transactional, high-performance, object persistence framework that does not need any object relational mapping for the simple reason that it does not use a relational database—or any other kind of database, for that matter. Instead, Madeleine relies on the Ruby Marshal package, a facility for converting live Ruby objects into bytes and for turning those bytes back into objects. Unfortunately, being able to marshal your objects to a file is not by itself a complete solution to application persistence.</p>

<p><a href="https://gist.github.com/ifyouseewendy/c0a3ec5da222779885f0">Example gist using Madeleine</a></p>

<h2 id="the-adapter">The Adapter</h2>

<h3 id="description-6">Description</h3>

<p>An adapter is an object that crosses the chasm between the interface that you have and the interface that you need.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/adapter.png" alt="the adapter" /></p>

<p>The client expects the target to have a certain interface. But unknown to the client, the target object is really an adapter, and buried inside of the adapter is a reference to a second object, the adaptee, which actually per- forms the work.</p>

<h3 id="adapt-or-modify">Adapt or Modify?</h3>

<p>The choice of using an adapter or modifying the object really comes down to how well you understand the class in question and the issue of encapsulation.</p>

<p>Lean toward modifying the class in the following circumstances:</p>

<ul>
  <li>The modifications are simple and clear.</li>
  <li>You understand the class you are modifying and the way in which it is used.</li>
</ul>

<p>Lean toward an adapter solution in the following situations:</p>

<ul>
  <li>The interface mismatch is extensive and complex. </li>
  <li>You have no idea how this class works.</li>
</ul>

<p>Engineering is all about trade-offs. Adapters preserve encapsulation at the cost of some complexity. Modifying a class may buy you some simplification, but at the cost of tinkering with the plumbing.</p>

<h3 id="using-and-abusing-6">Using and Abusing</h3>

<p>One of the advantages that Ruby’s duck typing gives to adapter writers is that it allows us to create adapters that support only that part of the target interface that the client will actually use. Partially implemented adapters are something of a double-edged sword: On the one hand, it is very convenient to implement only what you absolutely need; on the other hand, your program can come to grief if the client decides to call a method that you didn’t think you needed.</p>

<h3 id="in-the-wild-6">In the Wild</h3>

<p><code>ActiveRecord</code> deals with all of these differences by defining a standardized interface, encapsulated in a class called <code>AbstractAdapter</code>. The <code>AbstractAdapter</code> class defines the interface to a database that is used throughout <code>ActiveRecord</code>. </p>

<p><code>AbstractAdapter</code> defines a standard method to execute a SQL select statement and return the results, called <code>select_all</code>. Each individual adapter implements the <code>select_all</code> method in terms of the API of the underlying database system.</p>

<h2 id="the-proxy">The Proxy</h2>

<h3 id="description-7">Description</h3>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/proxy.png" alt="the proxy" /></p>

<p>The Proxy pattern is essentially built around a little white lie. The counterfeit object, called the <strong>proxy</strong> by the GoF, has a reference to the real object, the <strong>subject</strong>, hidden inside. Whenever the client code calls a method on the proxy, the proxy simply forwards the request to the real object.</p>

<p>Inside the proxy is hidden a reference to the other, real object—an object that the GoF referred to as the subject.</p>

<p>Once we have a proxy, we have a place to stand squarely between the client and the real object. The proxy provides the ideal pinch point to exert control.</p>

<p>The proxy serves as a pinch point between the client and the subject:</p>

<ul>
  <li>“Is this operation authorized?” asks the protection proxy.</li>
  <li>“Does the subject actually live on this other machine?” asks the remote proxy. </li>
  <li>“Have I actually created the subject yet?” asks the virtual proxy. </li>
</ul>

<p>In short, the proxy controls access to the subject.</p>

<h3 id="the-protection-proxy">The Protection Proxy</h3>

<p>A proxy that controls access to the subject.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;etc&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">AccountProtectionProxy</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">real_account</span><span class="p">,</span> <span class="n">owner_name</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@subject</span> <span class="o">=</span> <span class="n">real_account</span>
</span><span class="line">    <span class="vi">@owner_name</span> <span class="o">=</span> <span class="n">owner_name</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">deposit</span><span class="p">(</span><span class="n">amount</span><span class="p">)</span>
</span><span class="line">    <span class="n">check_access</span>
</span><span class="line">    <span class="k">return</span> <span class="vi">@subject</span><span class="o">.</span><span class="n">deposit</span><span class="p">(</span><span class="n">amount</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">withdraw</span><span class="p">(</span><span class="n">amount</span><span class="p">)</span>
</span><span class="line">    <span class="n">check_access</span>
</span><span class="line">    <span class="k">return</span> <span class="vi">@subject</span><span class="o">.</span><span class="n">withdraw</span><span class="p">(</span><span class="n">amount</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">check_access</span>
</span><span class="line">    <span class="k">if</span> <span class="no">Etc</span><span class="o">.</span><span class="n">getlogin</span> <span class="o">!=</span> <span class="vi">@owner_name</span>
</span><span class="line">      <span class="k">raise</span> <span class="s2">&quot;Illegal access: </span><span class="si">#{</span><span class="no">Etc</span><span class="o">.</span><span class="n">getlogin</span><span class="si">}</span><span class="s2"> cannot access account.&quot;</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The advantage of using a proxy for protection is that it gives us a nice separation of concerns: The proxy worries about who is or is not allowed to do what. The only thing that the real bank account object need be concerned with is, well, the bank account.</p>

<p>By splitting the protection cleanly off from the workings of the real object, we can minimize the chance that any important information will inadvertently leak out through our protective shield.</p>

<h3 id="the-remove-proxy">The Remove Proxy</h3>

<p>You could hide the complexity behind a remote proxy, an object that lives on the client machine and looks, to the client code, just like the real BankAccount object. When a request comes in, the remote proxy goes through all the horror of pack- aging up the request, sending it over the network, waiting for a response, unpacking the response, and returning the answer to the unsuspecting client.</p>

<p>From the client’s point of view, it called a method on what it thought was the real BankAccount object and sometime later—perhaps an unusually long time later—the answer came back. This is how virtually all remote procedure call (RPC) systems work.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;soap/wsdlDriver&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">wsdl_url</span> <span class="o">=</span> <span class="s1">&#39;http://www.webservicex.net/WeatherForecast.asmx?WSDL&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">proxy</span> <span class="o">=</span> <span class="ss">SOAP</span><span class="p">:</span><span class="ss">:WSDLDriverFactory</span><span class="o">.</span><span class="n">new</span><span class="p">(</span> <span class="n">wsdl_url</span> <span class="p">)</span><span class="o">.</span><span class="n">create_rpc_driver</span>
</span><span class="line"><span class="n">weather_info</span> <span class="o">=</span> <span class="n">proxy</span><span class="o">.</span><span class="n">GetWeatherByZipCode</span><span class="p">(</span><span class="s1">&#39;ZipCode&#39;</span><span class="o">=&gt;</span><span class="s1">&#39;19128&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Once the proxy object is set up, the client code no longer has to worry about the fact that the service actually lives at www.webservicex.net. Instead, it simply calls GetWeatherByZipCode and leaves all of the network details to the proxy.</p>

<h3 id="the-virtual-proxy">The Virtual Proxy</h3>

<p>In a sense, the virtual proxy is the biggest liar of the bunch. It pretends to be the real object, but it does not even have a reference to the real object until the client code calls a method. Only when the client actually calls a method does the virtual proxy scurry off and create or otherwise get access to the real object.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">VirtualAccountProxy</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">starting_balance</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@starting_balance</span><span class="o">=</span><span class="n">starting_balance</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">deposit</span><span class="p">(</span><span class="n">amount</span><span class="p">)</span>
</span><span class="line">    <span class="n">s</span> <span class="o">=</span> <span class="n">subject</span>
</span><span class="line">    <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="n">deposit</span><span class="p">(</span><span class="n">amount</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">withdraw</span><span class="p">(</span><span class="n">amount</span><span class="p">)</span>
</span><span class="line">    <span class="n">s</span> <span class="o">=</span> <span class="n">subject</span>
</span><span class="line">    <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="n">withdraw</span><span class="p">(</span><span class="n">amount</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">balance</span>
</span><span class="line">    <span class="n">s</span> <span class="o">=</span> <span class="n">subject</span>
</span><span class="line">    <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="n">balance</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">subject</span>
</span><span class="line">    <span class="vi">@subject</span> <span class="o">||</span> <span class="p">(</span><span class="vi">@subject</span> <span class="o">=</span> <span class="no">BankAccount</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@starting_balance</span><span class="p">))</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>That approach tangles the proxy and the subject up a little more than we might like. We can improve on this strategy by applying a little of that Ruby code block magic:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">VirtualAccountProxy</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="o">&amp;</span><span class="n">creation_block</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@creation_block</span> <span class="o">=</span> <span class="n">creation_block</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># Other methods omitted ...</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">subject</span>
</span><span class="line">    <span class="vi">@subject</span> <span class="o">||</span> <span class="p">(</span><span class="vi">@subject</span> <span class="o">=</span> <span class="vi">@creation_block</span><span class="o">.</span><span class="n">call</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Leverage Ruby</strong></p>

<p>Use ghost method <code>method_missing</code> and dynamic dispatch <code>send</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">VirtualProxy</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="o">&amp;</span><span class="n">creation_block</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@creation_block</span> <span class="o">=</span> <span class="n">creation_block</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class="line">    <span class="n">s</span> <span class="o">=</span> <span class="n">subject</span>
</span><span class="line">    <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span> <span class="nb">name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">subject</span>
</span><span class="line">    <span class="vi">@subject</span> <span class="o">=</span> <span class="vi">@creation_block</span><span class="o">.</span><span class="n">call</span> <span class="k">unless</span> <span class="vi">@subject</span>
</span><span class="line">    <span class="vi">@subject</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">array</span> <span class="o">=</span> <span class="no">VirtualProxy</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span> <span class="p">}</span>
</span><span class="line"><span class="n">array</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;hello&#39;</span> <span class="n">array</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;out&#39;</span> <span class="n">array</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;there&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="using-and-abusing-7">Using and Abusing</h3>

<p>Overusing <code>method_missing</code>, like overusing inheritance, is a great way to obscure your code.</p>

<h3 id="in-the-wild-7">In the Wild</h3>

<p><strong>drb using a remote proxy</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># server</span>
</span><span class="line"><span class="k">class</span> <span class="nc">MathService</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;drb/drb&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">math_service</span><span class="o">=</span><span class="no">MathService</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="no">DRb</span><span class="o">.</span><span class="n">start_service</span><span class="p">(</span><span class="s2">&quot;druby://localhost:3030&quot;</span><span class="p">,</span> <span class="n">math_service</span><span class="p">)</span>
</span><span class="line"><span class="no">DRb</span><span class="o">.</span><span class="n">thread</span><span class="o">.</span><span class="n">join</span>
</span><span class="line">
</span><span class="line"><span class="c1"># client</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;drb/drb&#39;</span>
</span><span class="line"><span class="no">DRb</span><span class="o">.</span><span class="n">start_service</span>
</span><span class="line">
</span><span class="line"><span class="c1"># the client-side math_service is actually a remote proxy to the real</span>
</span><span class="line"><span class="c1"># math service, which is running inside the server-side Ruby interpreter.</span>
</span><span class="line"><span class="n">math_service</span> <span class="o">=</span> <span class="no">DRbObject</span><span class="o">.</span><span class="n">new_with_uri</span><span class="p">(</span><span class="s2">&quot;druby://localhost:3030&quot;</span><span class="p">)</span>
</span><span class="line"><span class="n">sum</span><span class="o">=</span><span class="n">math_service</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="the-decorator">The Decorator</h2>

<blockquote>
  <p>But what if you simply need to vary the responsibilities of an object? What do you do when sometimes your object needs to do a little more, but sometimes a little less?</p>
</blockquote>

<h3 id="description-8">Description</h3>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/decorator.png" alt="decorator" /></p>

<p>The ConcreteComponent is the “real” object, the object that implements the basic component functionality.</p>

<p>The Decorator pattern is a straightforward technique that you can use to assemble exactly the functionality that you need at runtime. The Decorator class has a reference to a Component—the next Component in the decorator chain—and it implements all of the methods of the Component type. </p>

<p>Each decorator supports the same core interface, but adds its own twist on that interface. The key implementation idea of the Decorator pattern is that the decorators are essentially shells: Each takes in a method call, adds its own special twist, and passes the call on to the next component in line. </p>

<p>The Decorator pattern lets you start with some basic functionality and layer on extra features, one decorator at a time.</p>

<h3 id="why-not-the-template-method">Why Not The Template Method?</h3>

<p>The trouble is that the inheritance-based approach requires you to come up with all possi- ble combinations of features up-front, at design time.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/out-of-control-inheritance.png" alt="out-of-control inheritance" /></p>

<h3 id="code-usage-2">Code Usage</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">WriterDecorator</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">real_writer</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@real_writer</span> <span class="o">=</span> <span class="n">real_writer</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">write_line</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@real_writer</span><span class="o">.</span><span class="n">write_line</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">pos</span>
</span><span class="line">    <span class="vi">@real_writer</span><span class="o">.</span><span class="n">pos</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">rewind</span>
</span><span class="line">    <span class="vi">@real_writer</span><span class="o">.</span><span class="n">rewind</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">close</span>
</span><span class="line">    <span class="vi">@real_writer</span><span class="o">.</span><span class="n">close</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">NumberingWriter</span> <span class="o">&lt;</span> <span class="no">WriterDecorator</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">real_writer</span><span class="p">)</span>
</span><span class="line">    <span class="k">super</span><span class="p">(</span><span class="n">real_writer</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@line_number</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">write_line</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@real_writer</span><span class="o">.</span><span class="n">write_line</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@line_number</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">line</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@line_number</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">   <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">writer</span> <span class="o">=</span> <span class="no">NumberingWriter</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">SimpleWriter</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;final.txt&#39;</span><span class="p">))</span>
</span><span class="line"><span class="n">writer</span><span class="o">.</span><span class="n">write_line</span><span class="p">(</span><span class="s1">&#39;Hello out there&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Fowardable module</strong> <a href="http://www.ruby-doc.org/stdlib-2.0/libdoc/forwardable/rdoc/Forwardable.html">API</a></p>

<p>Ruby provides the <strong>Forwardable</strong> module provides delegation of specified methods to a designated object, using the methods <code>def_delegator</code> and <code>def_delegators</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;forwardable&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">WriterDecorator</span>
</span><span class="line">  <span class="kp">extend</span> <span class="no">Forwardable</span>
</span><span class="line">
</span><span class="line">  <span class="n">def_delegators</span> <span class="ss">:@real_writer</span><span class="p">,</span> <span class="ss">:write_line</span><span class="p">,</span> <span class="ss">:rewind</span><span class="p">,</span> <span class="ss">:pos</span><span class="p">,</span> <span class="ss">:close</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">real_writer</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@real_writer</span> <span class="o">=</span> <span class="n">real_writer</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The forwardable module is more of a precision weapon than the <code>method_missing</code> technique. But the <code>method_missing</code> technique really shines when you want to delegate large numbers of calls.</p>

<p><strong>Dynamic Alternatives - Wrapping Methods</strong></p>

<ul>
  <li>Around Alias</li>
  <li>Refinement Wrapper</li>
  <li>Prepended Wrapper</li>
</ul>

<p>Check <a href="http://blog.ifyouseewendy.com/blog/2014/06/03/metaprogrammingi-ruby/#method-wrapper">this</a>.</p>

<p><strong>Dynamic Alternatives - Decorating with Modules</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">w</span> <span class="o">=</span> <span class="no">SimpleWriter</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;out&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">w</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="no">NumberingWriter</span><span class="p">)</span>
</span><span class="line"><span class="n">w</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="no">TimeStampingWriter</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">w</span><span class="o">.</span><span class="n">write_line</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>With both of these techniques, it is hard to undo the decoration. Unwrapping an aliased method is likely to be tedious, and you simply cannot un-include a module.</p>

<h3 id="using-and-abusing-8">Using and Abusing</h3>

<ul>
  <li>The classic Decorator pattern is loved more by the folks who build the thing than by those who use it.</li>
  <li>One thing to keep in mind when implementing the Decorator pattern is that you need to keep the component interface simple.</li>
  <li>Another potential drawback of the Decorator pattern is the performance overhead associated with a long chain of decorators.</li>
  <li>Finally, one drawback of the method-aliasing technique for decorating objects is that it tends to make your code harder to debug.</li>
</ul>

<h3 id="in-the-wild-8">In the Wild</h3>

<p><strong><code>alias_method_chain</code> in ActiveSupport</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">write_line</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span><span class="line">  <span class="nb">puts</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">write_line_with_timestamp</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span><span class="line">  <span class="n">write_line_without_timestamp</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">new</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">line</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">alias_method_chain</span> <span class="ss">:write_line</span><span class="p">,</span> <span class="ss">:timestamp</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>alias_method_chain</code> method will rename the original <code>write_line</code> method to <code>write_line_without_timestamp</code> and rename <code>write_line_with_timestamp</code> to plain old <code>write_line</code>, essentially creating a chain of methods. The nice thing about <code>alias_method_chain</code> is that, as its name suggests, you can chain together a number of enhancing methods.</p>

<h3 id="adapter-proxy-or-decorator">Adapter, Proxy or Decorator</h3>

<p>They are all “<em>one object stands for another</em>”, and the basic idea is <em>Delegate, delegate, delegate</em>.</p>

<ul>
  <li><strong>The Adapter</strong> hides the fact that some object has the wrong interface by wrapping it with an object that has the right interface. </li>
  <li><strong>The Proxy</strong> also wraps another object, but not with the intent of changing the interface. Instead, the proxy has the same interface as the object that it is wrapping. The proxy isn’t there to tre; it is there to control. Proxies are good for tasks such as enforcing security, hiding the fact that an object really lives across the network, and delaying the creation of the real object until the last possible moment. </li>
  <li><strong>The Decorator</strong> enables you to layer features on to a basic object.</li>
</ul>

<h2 id="singleton">Singleton</h2>

<p>A singleton class has exactly one instance, and access to that one instance is available globally.</p>

<h3 id="code-usage-3">Code Usage</h3>

<ol>
  <li>Creating the class variable and initializing it with the singleton instance</li>
  <li>Creating the class-level <code>instance</code> method</li>
  <li>Make <code>new</code> private.</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">SimpleLogger</span>
</span><span class="line">  <span class="c1"># Lots of code deleted...</span>
</span><span class="line">
</span><span class="line">  <span class="vc">@@instance</span> <span class="o">=</span> <span class="no">SimpleLogger</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">instance</span>
</span><span class="line">    <span class="k">return</span> <span class="vc">@@instance</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># make sure there is only one</span>
</span><span class="line">  <span class="nb">private_class_method</span> <span class="ss">:new</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">logger1</span> <span class="o">=</span> <span class="no">SimpleLogger</span><span class="o">.</span><span class="n">instance</span>   <span class="c1"># Returns the logger</span>
</span><span class="line"><span class="n">logger2</span> <span class="o">=</span> <span class="no">SimpleLogger</span><span class="o">.</span><span class="n">instance</span>   <span class="c1"># Returns exactly the same logger</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Creating the singleton instance before you actually need it is called <em>eager instantiation</em>.</p>

<p><strong>Singleton module</strong> <a href="http://www.ruby-doc.org/stdlib-1.9.3/libdoc/singleton/rdoc/Singleton.html">API</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;singleton&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">SimpleLogger</span>
</span><span class="line">  <span class="kp">include</span> <span class="no">Singleton</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># Lots of code deleted...</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The Singleton module, waits until someone calls instance before it actually creates its singleton. This technique is known as <em>lazy instantiation</em>.</p>

<h3 id="alternatives">Alternatives</h3>

<p><strong>Global Variables and Constants</strong></p>

<ol>
  <li>If you use a global variable or a constant for this purpose, there is no way to delay the creation of the singleton object until you need it.</li>
  <li>Neither of these techniques does anything to prevent someone from creating a second or third instance of your supposedly singleton class.</li>
</ol>

<p><strong>Class and Module methods</strong></p>

<p>Lazy initialization remains and all of those <code>self.methods</code> and <code>@@variables</code> makes a strange feel.</p>

<h3 id="using-and-abusing-9">Using and Abusing</h3>

<p><strong>Don’t expect the Singleton module really prevent anything</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;singleton&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Manager</span>
</span><span class="line">  <span class="kp">include</span> <span class="no">Singleton</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">manage_resources</span>
</span><span class="line">    <span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;I am managing my resources&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Use <code>public_class_method</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">m</span> <span class="o">=</span> <span class="no">Manager</span><span class="o">.</span><span class="n">new</span> <span class="c1"># =&gt; private method &#39;new&#39; called for Manager:Class</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Manager</span>
</span><span class="line">  <span class="nb">public_class_method</span> <span class="ss">:new</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">m</span> <span class="o">=</span> <span class="no">Manager</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Use <code>clone</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">m</span> <span class="o">=</span> <span class="no">Manager</span><span class="o">.</span><span class="n">instance</span><span class="o">.</span><span class="n">close</span>
</span><span class="line"><span class="c1"># =&gt; TypeError: can&#39;t clone instance of singleton Manager</span>
</span><span class="line">
</span><span class="line"><span class="no">Foo</span> <span class="o">=</span> <span class="no">Manager</span><span class="o">.</span><span class="n">clone</span>
</span><span class="line"><span class="no">Foo</span><span class="o">.</span><span class="n">instance</span><span class="o">.</span><span class="n">manage_resources</span>
</span><span class="line"><span class="c1"># =&gt; I am managing my resources</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The Ruby philosophy is that if you decide to circumvent the very clear intent of the author of the ClassBasedLogger class by cloning it, the language is there to help you out. You are in the driver’s seat, not the language. By keeping almost everything open to modification, Ruby allows you to do the things that you say you want to do—but it is up to you to say the right things.</p>

<p><strong>Coupling concern</strong></p>

<p>Create a singleton, and you have just made it possible for widely separated bits of your program to use that singleton as a secret channel to communicate with each other and, in the process, tightly couple themselves to each other. The horrible consequences of this coupling are why software engineering got out of the global variable business in the first place.</p>

<p>There is only one solution to this problem: <em>Don’t do that</em>.</p>

<p><strong>Considering the count, Do I really only need one instance?</strong></p>

<p><strong>a Need-to-Know Basis</strong></p>

<p>Another mistake that many people make is to spread the knowledge of a class’s singleton-ness far and wide.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;singleton&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">DatabaseConnectionManager</span>
</span><span class="line">  <span class="kp">include</span> <span class="no">Singleton</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">get_connection</span>
</span><span class="line">    <span class="c1"># Return the database connection...</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>Which classes are actually aware that DatabaseConnectionManager is a singleton?</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">PreferenceManager</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="vi">@reader</span> <span class="o">=</span> <span class="no">PrefReader</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">    <span class="vi">@writer</span> <span class="o">=</span> <span class="no">PrefWriter</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">    <span class="vi">@preferences</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:display_splash</span><span class="o">=&gt;</span><span class="kp">false</span><span class="p">,</span> <span class="ss">:background_color</span><span class="o">=&gt;</span><span class="ss">:blue</span> <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">save_preferences</span>
</span><span class="line">    <span class="n">preferences</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class="line">    <span class="c1"># Preference are in</span>
</span><span class="line">    <span class="vi">@writer</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="vi">@preferences</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">get_preferences</span>
</span><span class="line">    <span class="vi">@preferences</span> <span class="o">=</span> <span class="vi">@reader</span><span class="o">.</span><span class="n">read</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">PrefWriter</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">write</span><span class="p">(</span><span class="n">preferences</span><span class="p">)</span>
</span><span class="line">    <span class="n">connection</span> <span class="o">=</span> <span class="no">DatabaseConnectionManager</span><span class="o">.</span><span class="n">instance</span><span class="o">.</span><span class="n">get_connection</span>
</span><span class="line">    <span class="c1"># Write the preferences out</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">PrefReader</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">read</span>
</span><span class="line">    <span class="n">connection</span> <span class="o">=</span> <span class="no">DatabaseConnectionManager</span><span class="o">.</span><span class="n">instance</span><span class="o">.</span><span class="n">get_connection</span>
</span><span class="line">    <span class="c1"># Read the preferences and return them...</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>A better approach might be to concentrate the knowledge that <code>DatabaseConnectionManager</code> is a singleton in the <code>PreferenceManager</code> class and simply pass it into the preference reader and writer:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">PreferenceManager</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="vi">@reader</span> <span class="o">=</span> <span class="no">PrefReader</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">    <span class="vi">@writer</span> <span class="o">=</span> <span class="no">PrefWriter</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">    <span class="vi">@preferences</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:display_splash</span><span class="o">=&gt;</span><span class="kp">false</span><span class="p">,</span> <span class="ss">:background_color</span><span class="o">=&gt;</span><span class="ss">:blue</span> <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">save_preferences</span>
</span><span class="line">    <span class="n">preferences</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class="line">    <span class="c1"># Preference are in</span>
</span><span class="line">    <span class="vi">@writer</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="no">DatabaseConnectionManager</span><span class="o">.</span><span class="n">instance</span><span class="p">,</span> <span class="vi">@preferences</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">get_preferences</span>
</span><span class="line">    <span class="vi">@preferences</span> <span class="o">=</span> <span class="vi">@reader</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="no">DatabaseConnectionManager</span><span class="o">.</span><span class="n">instance</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Test Interferes</strong></p>

<p>As the Singleton saves the state, there is one exceedingly nasty thing about the Singleton pattern is the way that it interferes with unit testing.</p>

<p>One way to deal with this problem is to create two classes: an ordinary (i.e., non-singleton) class that contains all of the code, and a subclass of the first class that is a singleton. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;singleton&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">SimpleLogger</span>
</span><span class="line">  <span class="c1"># All of the logging functionality in this class...</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">SingletonLogger</span> <span class="o">&lt;</span> <span class="no">SimpleLogger</span>
</span><span class="line">  <span class="kp">include</span> <span class="no">Singleton</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The actual application code uses the <code>SingletonLogger</code>, while the tests can use the plain old, non-singleton <code>Logger</code> class.</p>

<h3 id="in-the-wild-9">In the Wild</h3>

<p><strong>Inflections in ActiveSupport</strong></p>

<p>The <code>Inflections</code> class is a singleton, which saves space and ensures that the same inflection rules are available everywhere.</p>

<p><strong>Rake::Application in rake</strong> <a href="http://ruby-doc.org/stdlib-2.0/libdoc/rake/rdoc/Rake/Application.html">API</a></p>

<p>As it runs, rake—like most build tools—reads in information about what it needs to do: which directories to create, which files to copy, and so on.3 All of this information needs to be available to all of the moving parts of rake, so rake stores it all in a single object (the <code>Rake::Application</code> object, to be precise) that is available as a singleton to the entire rake program.</p>

<h2 id="factory">Factory</h2>

<blockquote>
  <p>picking the right class for the circumstances</p>
</blockquote>

<h3 id="description-9">Description</h3>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/factory.png" alt="factory" /></p>

<p>The GoF called this technique of pushing the “which class” decision down on a subclass the Factory Method pattern.</p>

<ul>
  <li>The <strong>creators</strong> are the base and concrete classes that contain the factory methods.</li>
  <li>The <strong>products</strong> are the objects being created.</li>
</ul>

<p>At its heart, this pattern is really just the Template Method pattern applied to the problem of creating new objects. In both the Factory Method pattern and the Template Method pattern, a generic part of the algorithm is coded in the generic base class, and subclasses fill in the blanks left in the base class.  </p>

<p><strong>Parameterized Factory Method</strong></p>

<p>Parameterized factory method is a method that can produce either a plant or an animal, depending on the symbol that is passed in:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Pond</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">number_animals</span><span class="p">,</span> <span class="n">number_plants</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@animals</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">    <span class="n">number_animals</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class="line">      <span class="n">animal</span> <span class="o">=</span> <span class="n">new_organism</span><span class="p">(</span><span class="ss">:animal</span><span class="p">,</span> <span class="s2">&quot;Animal</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class="line">      <span class="vi">@animals</span> <span class="o">&lt;&lt;</span> <span class="n">animal</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@plants</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">    <span class="n">number_plants</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class="line">      <span class="n">plant</span> <span class="o">=</span> <span class="n">new_organism</span><span class="p">(</span><span class="ss">:plant</span><span class="p">,</span> <span class="s2">&quot;Plant</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class="line">      <span class="vi">@plants</span> <span class="o">&lt;&lt;</span> <span class="n">plant</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">  <span class="c1"># ...</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">DuckWaterLilyPond</span> <span class="o">&lt;</span> <span class="no">Pond</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">new_organism</span><span class="p">(</span><span class="n">type</span><span class="p">,</span> <span class="nb">name</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="n">type</span> <span class="o">==</span> <span class="ss">:animal</span>
</span><span class="line">      <span class="no">Duck</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">    <span class="k">elsif</span> <span class="n">type</span> <span class="o">==</span> <span class="ss">:plant</span>
</span><span class="line">      <span class="no">WaterLily</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">      <span class="k">raise</span> <span class="s2">&quot;Unknown organism type: </span><span class="si">#{</span><span class="n">type</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">pond</span> <span class="o">=</span> <span class="no">DuckWaterLilyPond</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Claasses Are Just Objects, Too</strong></p>

<p>While the GoF concentrated on inheritance-based implementations of their fac- tories, we can get the same results with much less code by taking advantage of the fact that in Ruby, classes are just objects.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Pond</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">number_animals</span><span class="p">,</span> <span class="n">animal_class</span><span class="p">,</span>
</span><span class="line">                 <span class="n">number_plants</span><span class="p">,</span> <span class="n">plant_class</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@animal_class</span> <span class="o">=</span> <span class="n">animal_class</span>
</span><span class="line">    <span class="vi">@plant_class</span> <span class="o">=</span> <span class="n">plant_class</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@animals</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">    <span class="n">number_animals</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class="line">      <span class="n">animal</span> <span class="o">=</span> <span class="n">new_organism</span><span class="p">(</span><span class="ss">:animal</span><span class="p">,</span> <span class="s2">&quot;Animal</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class="line">      <span class="vi">@animals</span> <span class="o">&lt;&lt;</span> <span class="n">animal</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@plants</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">    <span class="n">number_plants</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class="line">      <span class="n">plant</span> <span class="o">=</span> <span class="n">new_organism</span><span class="p">(</span><span class="ss">:plant</span><span class="p">,</span> <span class="s2">&quot;Plant</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class="line">      <span class="vi">@plants</span> <span class="o">&lt;&lt;</span> <span class="n">plant</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">simulate_one_day</span>
</span><span class="line">    <span class="vi">@plants</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">plant</span><span class="o">|</span> <span class="n">plant</span><span class="o">.</span><span class="n">grow</span><span class="p">}</span>
</span><span class="line">    <span class="vi">@animals</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">animal</span><span class="o">|</span> <span class="n">animal</span><span class="o">.</span><span class="n">speak</span><span class="p">}</span>
</span><span class="line">    <span class="vi">@animals</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">animal</span><span class="o">|</span> <span class="n">animal</span><span class="o">.</span><span class="n">eat</span><span class="p">}</span>
</span><span class="line">    <span class="vi">@animals</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">animal</span><span class="o">|</span> <span class="n">animal</span><span class="o">.</span><span class="n">sleep</span><span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">new_organism</span><span class="p">(</span><span class="n">type</span><span class="p">,</span> <span class="nb">name</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="n">type</span> <span class="o">==</span> <span class="ss">:animal</span>
</span><span class="line">      <span class="vi">@animal_class</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">    <span class="k">elsif</span> <span class="n">type</span> <span class="o">==</span> <span class="ss">:plant</span>
</span><span class="line">      <span class="vi">@plant_class</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">      <span class="k">raise</span> <span class="s2">&quot;Unknown organism type: </span><span class="si">#{</span><span class="n">type</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">pond</span> <span class="o">=</span> <span class="no">Pond</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="no">Duck</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="no">WaterLily</span><span class="p">)</span>
</span><span class="line"><span class="n">pond</span><span class="o">.</span><span class="n">simulate_one_day</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="abstract-factory">Abstract Factory</h3>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/abstract-factory.png" alt="abstract factory" /></p>

<p>An object dedicated to creating a compatible set of objects is called an abstract factory. </p>

<p>The problem is that you need to create sets of compatible objects. The solution is that you write a separate class to handle that creation.</p>

<p>The important thing about the abstract factory is that it encapsulates the knowledge of which product types go together. You can express that encapsulation with classes and subclasses, or you can get to it by storing the class objects as we did in the code above. Either way, you end up with an object that knows which kind of things belong together.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">PondOrganismFactory</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">new_animal</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">    <span class="no">Frog</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">new_plant</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">    <span class="no">Algae</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">JungleOrganismFactory</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">new_animal</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">    <span class="no">Tiger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">new_plant</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">    <span class="no">Tree</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Habitat</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">number_animals</span><span class="p">,</span> <span class="n">number_plants</span><span class="p">,</span> <span class="n">organism_factory</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@organism_factory</span> <span class="o">=</span> <span class="n">organism_factory</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@animals</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">    <span class="n">number_animals</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class="line">      <span class="n">animal</span> <span class="o">=</span> <span class="vi">@organism_factory</span><span class="o">.</span><span class="n">new_animal</span><span class="p">(</span><span class="s2">&quot;Animal</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class="line">      <span class="vi">@animals</span> <span class="o">&lt;&lt;</span> <span class="n">animal</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@plants</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">    <span class="n">number_plants</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class="line">      <span class="n">plant</span> <span class="o">=</span> <span class="vi">@organism_factory</span><span class="o">.</span><span class="n">new_plant</span><span class="p">(</span><span class="s2">&quot;Plant</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class="line">      <span class="vi">@plants</span> <span class="o">&lt;&lt;</span> <span class="n">plant</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">jungle</span> <span class="o">=</span> <span class="no">Habitat</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="no">JungleOrganismFactory</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span><span class="line"><span class="n">jungle</span><span class="o">.</span><span class="n">simulate_one_day</span>
</span><span class="line">
</span><span class="line"><span class="n">pond</span> <span class="o">=</span> <span class="no">Habitat</span><span class="o">.</span><span class="n">new</span><span class="p">(</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="no">PondOrganismFactory</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span><span class="line"><span class="n">pond</span><span class="o">.</span><span class="n">simulate_one_day</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Claasses Are Just Objects, Too</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">OrganismFactory</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">plant_class</span><span class="p">,</span> <span class="n">animal_class</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@plant_class</span> <span class="o">=</span> <span class="n">plant_class</span>
</span><span class="line">    <span class="vi">@animal_class</span> <span class="o">=</span> <span class="n">animal_class</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">new_animal</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@animal_class</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">new_plant</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@plant_class</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">jungle_organism_factory</span> <span class="o">=</span> <span class="no">OrganismFactory</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Tree</span><span class="p">,</span> <span class="no">Tiger</span><span class="p">)</span>
</span><span class="line"><span class="n">pond_organism_factory</span> <span class="o">=</span> <span class="no">OrganismFactory</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">WaterLily</span><span class="p">,</span> <span class="no">Frog</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">jungle</span> <span class="o">=</span> <span class="no">Habitat</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="n">jungle_organism_factory</span><span class="p">)</span>
</span><span class="line"><span class="n">jungle</span><span class="o">.</span><span class="n">simulate_one_day</span>
</span><span class="line"><span class="n">pond</span> <span class="o">=</span> <span class="no">Habitat</span><span class="o">.</span><span class="n">new</span><span class="p">(</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="n">pond_organism_factory</span><span class="p">)</span>
</span><span class="line"><span class="n">pond</span><span class="o">.</span><span class="n">simulate_one_day</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Naming</strong></p>

<p>Another way that we can simplify the implementation of abstract factories is to rely on a consistent naming convention for the product classes. </p>

<h3 id="factory--abstract-factory">Factory &amp;&amp; Abstract Factory</h3>

<ul>
  <li>The Factory Method pattern is really the Template Method pattern applied to object creation.</li>
  <li>the Abstract Factory pattern is simply the Strategy pattern applied to the same problem.</li>
</ul>

<h3 id="using-and-abusing-10">Using and Abusing</h3>

<p>Not every object needs to be produced by a factory. (<em>You Ain’t Goona Need It</em>).</p>

<p>Engineers do have a tendency to build the Queen Mary (or perhaps the Titanic?) when a canoe will suffice. If you have a choice of exactly one class at the moment, put off adding in a factory.</p>

<h3 id="in-the-wild-10">In the Wild</h3>

<p><strong>Base in ActiveRecord</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">adapter</span> <span class="o">=</span> <span class="s2">&quot;mysql&quot;</span>
</span><span class="line"><span class="n">method_name</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">adapter</span><span class="si">}</span><span class="s2">_connection&quot;</span>
</span><span class="line"><span class="no">Base</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="n">config</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="builder">Builder</h2>

<h3 id="description-10">Description</h3>

<p>Builder pattern, a pattern designed to help you configure those complex objects. The builder class takes charge of assembling all of the components of a complex object.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/buidler.png" alt="builder" /></p>

<p>The client of the builder object the <strong>director</strong> because it directs the builder in the construction of the new object (called the <strong>product</strong>). Builders not only ease the burden of creating complex objects, but also hide the implementation details.</p>

<p>The idea behind the Builder pattern is that if your object is hard to build, if you have to write a lot of code to configure each object, then you should factor all of that creation code into a separate class, the builder.</p>

<p>The builders are less concerned about picking the right class and more focused on helping you configure your object.</p>

<ul>
  <li>Take control of configuring your object</li>
  <li>Prevent you from constructing an invalid object</li>
</ul>

<h3 id="code-usage-4">Code Usage</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">ComputerBuilder</span>
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:computer</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="vi">@computer</span> <span class="o">=</span> <span class="no">Computer</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">turbo</span><span class="p">(</span><span class="n">has_turbo_cpu</span><span class="o">=</span><span class="kp">true</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@computer</span><span class="o">.</span><span class="n">motherboard</span><span class="o">.</span><span class="n">cpu</span> <span class="o">=</span> <span class="no">TurboCPU</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">display</span><span class="o">=</span><span class="p">(</span><span class="nb">display</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@computer</span><span class="o">.</span><span class="n">display</span><span class="o">=</span><span class="nb">display</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">memory_size</span><span class="o">=</span><span class="p">(</span><span class="n">size_in_mb</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@computer</span><span class="o">.</span><span class="n">motherboard</span><span class="o">.</span><span class="n">memory_size</span> <span class="o">=</span> <span class="n">size_in_mb</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">add_cd</span><span class="p">(</span><span class="n">writer</span><span class="o">=</span><span class="kp">false</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@computer</span><span class="o">.</span><span class="n">drives</span> <span class="o">&lt;&lt;</span> <span class="no">Drive</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:cd</span><span class="p">,</span> <span class="mi">760</span><span class="p">,</span> <span class="n">writer</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">add_dvd</span><span class="p">(</span><span class="n">writer</span><span class="o">=</span><span class="kp">false</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@computer</span><span class="o">.</span><span class="n">drives</span> <span class="o">&lt;&lt;</span> <span class="no">Drive</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:dvd</span><span class="p">,</span> <span class="mi">4000</span><span class="p">,</span> <span class="n">writer</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">add_hard_disk</span><span class="p">(</span><span class="n">size_in_mb</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@computer</span><span class="o">.</span><span class="n">drives</span> <span class="o">&lt;&lt;</span> <span class="no">Drive</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:hard_disk</span><span class="p">,</span> <span class="n">size_in_mb</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">builder</span> <span class="o">=</span> <span class="no">ComputerBuilder</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="n">builder</span><span class="o">.</span><span class="n">turbo</span>
</span><span class="line"><span class="n">builder</span><span class="o">.</span><span class="n">add_cd</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span><span class="line"><span class="n">builder</span><span class="o">.</span><span class="n">add_dvd</span>
</span><span class="line"><span class="n">builder</span><span class="o">.</span><span class="n">add_hard_disk</span><span class="p">(</span><span class="mi">100000</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">computer</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="n">computer</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="builders-can-ensure-sane-objects">Builders Can Ensure Sane Objects</h3>

<p>That final “give me my object” method makes an ideal place to check that the configuration requested by the client really makes sense and that it adheres to the appropriate business rules.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">computer</span>
</span><span class="line">  <span class="k">raise</span> <span class="s2">&quot;Not enough memory&quot;</span> <span class="k">if</span> <span class="vi">@computer</span><span class="o">.</span><span class="n">motherboard</span><span class="o">.</span><span class="n">memory_size</span> <span class="o">&lt;</span> <span class="mi">250</span>
</span><span class="line">  <span class="k">raise</span> <span class="s2">&quot;Too many drives&quot;</span> <span class="k">if</span> <span class="vi">@computer</span><span class="o">.</span><span class="n">drives</span><span class="o">.</span><span class="n">size</span> <span class="o">&gt;</span> <span class="mi">4</span>
</span><span class="line">  <span class="n">hard_disk</span> <span class="o">=</span> <span class="vi">@computer</span><span class="o">.</span><span class="n">drives</span><span class="o">.</span><span class="n">find</span> <span class="p">{</span><span class="o">|</span><span class="n">drive</span><span class="o">|</span> <span class="n">drive</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="ss">:hard_disk</span><span class="p">}</span>
</span><span class="line">  <span class="k">raise</span> <span class="s2">&quot;No hard disk.&quot;</span> <span class="k">unless</span> <span class="n">hard_disk</span>
</span><span class="line">  <span class="vi">@computer</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="resuable-buidlers">Resuable Buidlers</h3>

<p>An important issue to consider when writing and using builders is whether you can use a single builder instance to create multiple objects. </p>

<p>One way to deal with this issue is to equip your builder with a <code>reset</code> method, which reinitializes the object under construction.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">LaptopBuilder</span>
</span><span class="line">  <span class="c1"># Lots of code omitted...</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">reset</span>
</span><span class="line">    <span class="vi">@computer</span> <span class="o">=</span> <span class="no">LaptopComputer</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The reset method will let you reuse the builder instance, but it also means that you have to start the configuration process all over again for each computer. If you want to perform the configuration once and then have the builder produce any number of objects based on that configuration, you need to store all of the configuration information in instance attributes and create the actual product only when the client asks for it.</p>

<h3 id="better-builders-with-magic-methods">Better Builders with Magic Methods</h3>

<p>Use ghost method <code>method_missing</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class="line">  <span class="n">words</span> <span class="o">=</span> <span class="nb">name</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;_&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="k">return</span> <span class="k">super</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span> <span class="k">unless</span> <span class="n">words</span><span class="o">.</span><span class="n">shift</span> <span class="o">==</span> <span class="s1">&#39;add&#39;</span>
</span><span class="line">  <span class="n">words</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">word</span><span class="o">|</span>
</span><span class="line">    <span class="k">next</span> <span class="k">if</span> <span class="n">word</span> <span class="o">==</span> <span class="s1">&#39;and&#39;</span>
</span><span class="line">    <span class="n">add_cd</span> <span class="k">if</span> <span class="n">word</span> <span class="o">==</span> <span class="s1">&#39;cd&#39;</span>
</span><span class="line">    <span class="n">add_dvd</span> <span class="k">if</span> <span class="n">word</span> <span class="o">==</span> <span class="s1">&#39;dvd&#39;</span>
</span><span class="line">    <span class="n">add_hard_disk</span><span class="p">(</span><span class="mi">100000</span><span class="p">)</span> <span class="k">if</span> <span class="n">word</span> <span class="o">==</span> <span class="s1">&#39;harddisk&#39;</span>
</span><span class="line">    <span class="n">turbo</span> <span class="k">if</span> <span class="n">word</span> <span class="o">==</span> <span class="s1">&#39;turbo&#39;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">builder</span><span class="o">.</span><span class="n">add_dvd_and_harddisk</span>
</span><span class="line"><span class="n">builder</span><span class="o">.</span><span class="n">add_turbo_and_dvd_and_harddisk</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="using-and-abusing-11">Using and Abusing</h3>

<p>It is usually fairly easy to spot code that is missing a builder: You can find the same object creation logic scat- tered all over the place. Another hint that you need a builder is when your code starts producing invalid objects.====</p>

<p>Builder pattern sometimes creeps up on you as your application becomes increasingly complex.</p>

<h3 id="in-the-wild-11">In the Wild</h3>

<h2 id="interpreter">Interpreter</h2>

<h3 id="description-11">Description</h3>

<p>Interpreter pattern, which suggests that sometimes the best way to solve a problem is to invent a new language for just that purpose. </p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/interpreter.png" alt="Interpreter" /></p>

<p>The heart of the Interpreter pattern is the abstract syntax tree.</p>

<p>The GoF called such values or conditions supplied at the time the AST is interpreted the <code>context</code>.</p>

<ol>
  <li>The parser reads in the program text and produces a data structure, called an abstract syntax tree (AST).</li>
  <li>The AST is evaluated against some set of external conditions, or context, to produce the desired computation.</li>
</ol>

<blockquote>
  <p>ASTs are, in fact, specialized examples of the Composite pattern, with the nonterminal expressions playing the parts of the composites.</p>
</blockquote>

<p>You can supply your clients with an API for building up the tree in code, or you can write a parser that takes strings and turns them into the AST.</p>

<h3 id="with-a-parser">With a Parser</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Parser</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@tokens</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/\(|\)|[\w\.\*]+/</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">next_token</span>
</span><span class="line">    <span class="vi">@tokens</span><span class="o">.</span><span class="n">shift</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">expression</span>
</span><span class="line">    <span class="n">token</span> <span class="o">=</span> <span class="n">next_token</span>
</span><span class="line">    <span class="k">if</span> <span class="n">token</span> <span class="o">==</span> <span class="kp">nil</span>
</span><span class="line">      <span class="k">return</span> <span class="kp">nil</span>
</span><span class="line">    <span class="k">elsif</span> <span class="n">token</span> <span class="o">==</span> <span class="s1">&#39;(&#39;</span>
</span><span class="line">      <span class="n">result</span> <span class="o">=</span> <span class="n">expression</span>
</span><span class="line">      <span class="k">raise</span> <span class="s1">&#39;Expected )&#39;</span> <span class="k">unless</span> <span class="n">next_token</span> <span class="o">==</span> <span class="s1">&#39;)&#39;</span>
</span><span class="line">      <span class="n">result</span>
</span><span class="line">    <span class="k">elsif</span> <span class="n">token</span> <span class="o">==</span> <span class="s1">&#39;all&#39;</span>
</span><span class="line">      <span class="k">return</span> <span class="no">All</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">    <span class="k">elsif</span> <span class="n">token</span> <span class="o">==</span> <span class="s1">&#39;writable&#39;</span>
</span><span class="line">      <span class="k">return</span> <span class="no">Writable</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">    <span class="k">elsif</span> <span class="n">token</span> <span class="o">==</span> <span class="s1">&#39;bigger&#39;</span>
</span><span class="line">      <span class="k">return</span> <span class="no">Bigger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">next_token</span><span class="o">.</span><span class="n">to_i</span><span class="p">)</span>
</span><span class="line">    <span class="k">elsif</span> <span class="n">token</span> <span class="o">==</span> <span class="s1">&#39;filename&#39;</span>
</span><span class="line">      <span class="k">return</span> <span class="no">FileName</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">next_token</span><span class="p">)</span>
</span><span class="line">    <span class="k">elsif</span> <span class="n">token</span> <span class="o">==</span> <span class="s1">&#39;not&#39;</span>
</span><span class="line">      <span class="k">return</span> <span class="no">Not</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">expression</span><span class="p">)</span>
</span><span class="line">    <span class="k">elsif</span> <span class="n">token</span> <span class="o">==</span> <span class="s1">&#39;and&#39;</span>
</span><span class="line">      <span class="k">return</span> <span class="no">And</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="n">expression</span><span class="p">)</span>
</span><span class="line">    <span class="k">elsif</span> <span class="n">token</span> <span class="o">==</span> <span class="s1">&#39;or&#39;</span>
</span><span class="line">      <span class="k">return</span> <span class="no">Or</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="n">expression</span><span class="p">)</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">      <span class="k">raise</span> <span class="s2">&quot;Unexpected token: </span><span class="si">#{</span><span class="n">token</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">parser</span> <span class="o">=</span> <span class="no">Parser</span><span class="o">.</span><span class="n">new</span> <span class="s2">&quot;and (and(bigger 1024)(filename *.mp3)) writable&quot;</span>
</span><span class="line"><span class="n">ast</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">expression</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Let XML or YAML Do The Parsing</strong></p>

<p>Keep in mind that the main motivation behind building an interpreter is to give your users a natural way to express the kind of processing that needs to be done.</p>

<p><strong>Racc</strong></p>

<p>Racc is modeled (and named) after the venerable UNIX YACC utility. Racc takes as input a description of the grammar for your language and spits out a parser, written in Ruby for that language.</p>

<h3 id="without-a-parser">Without a Parser</h3>

<p>Internal Domain-Specifc Languages.</p>

<p>You may implement your Interpreter pattern in such a way that users could write their pro-grams in actual Ruby code. Maybe you could design your AST API in such a way that the code flows so naturally that your users might be unaware that they are, in fact, writing Ruby code.</p>

<h3 id="using-and-abusing-12">Using and Abusing</h3>

<ul>
  <li>The complexity issue. (The sheer number of components is why the Interpreter pattern is in practice limited to relatively simple languages.)</li>
  <li>Program efficiency, it is probably best to limit your use of the Interpreter pattern to areas that do not demand high performance.</li>
</ul>

<h3 id="in-the-wild-12">In the Wild</h3>

<p><strong>SQL</strong></p>

<p><strong>HTML</strong></p>

<p><strong>Ruby</strong>, of course, an interpreted language.</p>

<p><strong>regular expression</strong></p>

<h2 id="domain-specific-languages">Domain-Specific Languages</h2>

<h3 id="description-12">Description</h3>

<p>The DSL pattern suggests that you should focus on the language itself, not on the interpreter.</p>

<p>External DSLs are external in the sense that there is a parser and an interpreter for the DSL, and there are the programs written in the DSL.</p>

<p>An internal DSL, according to Fowler, is one in which we start with some implementation language, perhaps Ruby, and we simply bend that one language into being our DSL.</p>

<h3 id="using-and-abusing-13">Using and Abusing</h3>

<ol>
  <li>You are limited to what you can parse with a Ruby- based internal DSL.</li>
  <li>Error messages.</li>
</ol>

<h3 id="in-the-wild-13">In the Wild</h3>

<p>The most prominent example of a pure internal DSL in the Ruby world is probably rake, Ruby’s answer to ant or make. </p>

<p><strong>rake</strong>, Ruby’s answer to ant or make.</p>

<h2 id="custom-objects">Custom Objects</h2>

<p>Meta-programming certainly takes a different tack in producing the right object, at its heart this pattern focuses on leveraging the flexibility of Ruby.</p>

<ul>
  <li>We can start with a simple object and add individual methods or even whole modules full of methods to it. </li>
  <li>Using <code>class_eval</code>, we can generate completely new methods at runtime.</li>
  <li>We can take advantage of Ruby’s reflection facilities, which allow a program to examine its own structure</li>
</ul>

<p>A note:</p>

<blockquote>
  <p>The <code>attr_accessor</code> method and its friends live in the module <code>Module</code>, which is included by the <code>Object</code> class. If you go looking for the Ruby code for <code>attr_accessor</code>, <code>attr_reader</code>, and <code>attr_writer</code>, however, you are destined to be disappointed. For the sake of efficiency—but purely for efficiency—these methods are written in C.</p>
</blockquote>

<h3 id="custom-tailoring-technique">Custom-Tailoring Technique</h3>

<p>This custom-tailoring technique is particularly useful when you have lots of orthogonal features that you need to assemble into a single object.</p>

<p>Of course, there really is no rule that says you need to start your customizations with a plain-vanilla instance of Object. In real life, you will likely want to start with an instance of a class that provides some base level of functionality and then tweak the methods from there.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">new_animal</span><span class="p">(</span><span class="n">diet</span><span class="p">,</span> <span class="n">awake</span><span class="p">)</span>
</span><span class="line">  <span class="n">animal</span> <span class="o">=</span> <span class="no">Object</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">  <span class="k">if</span> <span class="n">diet</span> <span class="o">==</span> <span class="ss">:meat</span>
</span><span class="line">    <span class="n">animal</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="no">Carnivore</span><span class="p">)</span>
</span><span class="line">  <span class="k">else</span>
</span><span class="line">    <span class="n">animal</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="no">Herbivore</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>No matter whether you tailor your objects one method at a time or in module- sized chunks, the ultimate effect is to create a customized object, uniquely made to order for the requirements of the moment.</p>

<h3 id="reflections">Reflections</h3>

<blockquote>
  <p>If you are meta-programming new functionality into your classes on the fly, how can you tell what any given instance can do?</p>
</blockquote>

<p>Reflection features like <code>public_methods</code> and <code>respond_to?</code> are handy anytime but become real assets as you dive deeper and deeper into meta-programming, when what your objects can do depends more on their history than on their class.</p>

<h3 id="using-and-abusing-14">Using and Abusing</h3>

<p>Tests are absolutely mandatory for systems that use a lot of meta- programming.</p>

<h2 id="convention-over-configuration">Convention Over Configuration</h2>

<blockquote>
  <p>The common message is that you should not just take your lan- guage as you find it, but rather mold it into something closer to the tool that you need to solve the problem at hand.</p>
</blockquote>

<h3 id="description-13">Description</h3>

<p>The Convention Over Configuration pattern suggests that you define a convention that a sensible engineer might use anyway.</p>

<ul>
  <li>
    <p>Try to deduce how your users will behave.</p>
  </li>
  <li>
    <p>You can give your user a kick start by supplying him or her with a model, a template, or an example to follow. You could also supply a utility to generate the outline or <strong>scaffold</strong> of a class. It is easy to discount the value of this scaffold-generating script.</p>
  </li>
</ul>

<h3 id="using-and-abusing-15">Using and Abusing</h3>

<p>One danger in building convention-based systems is that your convention might be incomplete, thereby limiting the range of things that your system can do.</p>

<blockquote>
  <p>Our message gateway, for example, does not really do a thorough job of transforming host names into Ruby class names. The code in this chapter will work fine with a simple host name like <em>russolsen.com</em>, transforming it into <em>RussOlsenDotCom</em>. But feed our current system something like <em>icl-gis.co</em>m and it will go looking for the very illegal <em>Icl-gisDotComAuthorizer</em> class.</p>
</blockquote>

<p>Another potential source of trouble is the possibility that a system that uses a lot of conventions may seem like it is operating by magic to the new user. Configuration files may be a pain in the neck to write and maintain, but they do provide a sort of road map—perhaps a very complicated and hard-to-interpret road map, but a map nevertheless—to the inner workings of the system. A well-done convention-based system, by contrast, needs to supply its operational road map in the form of (gasp!) <strong>documentation</strong>.</p>

<p>Also keep in mind that as the convention magic becomes deeper and more complex, you will need ever more thorough unit tests to ensure that your conventions behave, well, conventionally. </p>

<h2 id="reference">Reference</h2>

<ul>
  <li><a href="https://github.com/nslocum/design-patterns-in-ruby">Examples from the book Design Patterns</a> by <a href="https://github.com/nslocum">Nick Slocum</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Things I Learn from Owning Rails Class]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2014/09/29/things-i-learnt-from-owning-rails-class/"/>
    <updated>2014-09-29T18:36:28+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2014/09/29/things-i-learnt-from-owning-rails-class</id>
    <content type="html"><![CDATA[<table class="custom">
  <tbody>
    <tr>
      <td><strong>Teacher</strong></td>
      <td><a href="http://macournoyer.com/">Marc-André Cournoy</a></td>
    </tr>
    <tr>
      <td><strong>Link</strong></td>
      <td><a href="http://owningrails.com/">Owning Rails</a></td>
    </tr>
  </tbody>
</table>

<p>I’ve participated Marc’s Owning Rails online class recently. AWESOME!</p>

<p>The class has two parts. Marc led us to build a minimal version of Rails on first day, Marc focused on the structure and design pattern behind Rails. Trully I think it’s a live version of <a href="http://blog.ifyouseewendy.com/blog/2014/09/27/rebuilding-rails/">Rebuilding Rails</a>, maybe you can read it as a substitution. Second day is the excellent part, took us diving into the real Rails source. Marc gave us a clear clue on what each part do and how they work, and also some practical introductions on how and where to keep on digging after class. </p>

<p>Beside professional, I should also mention that Marc is a really kind and patient guy.</p>

<p>Thanks a lot, Marc.</p>

<hr />

<p>Following are some specific questions I’ve noted on class.</p>

<p><strong><em>Is <code>yield</code> still available after passing <code>&amp;block</code>?</em></strong></p>

<p>yes.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class="line"><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">*</span>   <span class="nb">p</span> <span class="n">block</span>
</span><span class="line"><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">*</span>   <span class="k">yield</span>
</span><span class="line"><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">*</span> <span class="k">end</span>
</span><span class="line"><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">foo</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s1">&#39;foo&#39;</span> <span class="p">}</span>
</span><span class="line"><span class="c1">#&lt;Proc:0x000001053e7f28@(pry):6&gt;</span>
</span><span class="line"><span class="n">foo</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class="line"><span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="k">def</span> <span class="nf">bar</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class="line"><span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">*</span>   <span class="n">block</span><span class="o">.</span><span class="n">call</span>
</span><span class="line"><span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">*</span>   <span class="k">yield</span>
</span><span class="line"><span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">*</span> <span class="k">end</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class="line"><span class="o">[</span><span class="mi">6</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">bar</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s1">&#39;bar&#39;</span> <span class="p">}</span>
</span><span class="line"><span class="n">bar</span>
</span><span class="line"><span class="n">bar</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="kp">nil</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Passing block directly will omit the block-to-proc process, it can be more efficient.</p>

<p><strong><em>How to make bindings of block get understood in object, which differs the environment the block defines?</em></strong></p>

<blockquote>
  <p>When you define the block, it simply grabs the bindings that are there at that moment, and then it carries those bindings along when you pass the block into a method. </p>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="o">=</span><span class="k">class</span> <span class="nc">Router</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="vi">@routes</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">match</span><span class="p">(</span><span class="n">route</span><span class="p">)</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s1">&#39;#match from Router instance&#39;</span>
</span><span class="line">    <span class="vi">@routes</span><span class="o">.</span><span class="n">update</span> <span class="n">route</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="o">=</span>  <span class="k">def</span> <span class="nf">routes</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class="line">    <span class="k">yield</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">match</span><span class="p">(</span><span class="n">route</span><span class="p">)</span>
</span><span class="line">  <span class="nb">puts</span> <span class="s1">&#39;#match from main object&#39;</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="no">Router</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">routes</span> <span class="k">do</span>
</span><span class="line">  <span class="n">match</span> <span class="s1">&#39;/user&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;users#index&#39;</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># =&gt; #match in main object</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Use <code>instance_eval</code> to eval the new bindings.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">match</span><span class="p">(</span><span class="n">route</span><span class="p">)</span>
</span><span class="line">  <span class="nb">puts</span> <span class="s1">&#39;#match in main object&#39;</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Router</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">routes</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class="line">    <span class="nb">instance_eval</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="no">Router</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">routes</span> <span class="k">do</span>
</span><span class="line">  <span class="n">match</span> <span class="s1">&#39;/user&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;users#index&#39;</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># =&gt; match from Router instance</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong><em>Why using <code>::File</code> in <code>config.ru</code>?</em></strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># config.ru</span>
</span><span class="line">
</span><span class="line"><span class="nb">require</span> <span class="o">::</span><span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../config/environment&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class="line"><span class="n">run</span> <span class="no">Rails</span><span class="o">.</span><span class="n">application</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Actually the code above is defined in module Rack, where <code>Rack::File</code> already exists.</p>

<p><strong><em>How to use <code>include</code> to construct a method chain?</em></strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">A</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">foo</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s1">&#39;foo from A&#39;</span>
</span><span class="line">    <span class="k">super</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">module</span> <span class="nn">B</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">foo</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s1">&#39;foo from B&#39;</span>
</span><span class="line">    <span class="k">super</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Base</span>
</span><span class="line">  <span class="kp">include</span> <span class="n">A</span><span class="p">,</span> <span class="n">B</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">foo</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s1">&#39;foo from Base&#39;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="no">Base</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">foo</span>
</span><span class="line"><span class="c1"># =&gt; foo from Base</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>One way to solve is to use <code>prepend</code> instead of <code>include</code>, introduced by Ruby 2.0.</p>

<p>Considering the compatibility, Rails may not start to use it. Here is the Rails way to solve</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">A</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">foo</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s1">&#39;foo from A&#39;</span>
</span><span class="line">    <span class="k">super</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">module</span> <span class="nn">B</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">foo</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s1">&#39;foo from B&#39;</span>
</span><span class="line">    <span class="k">super</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Metal</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">foo</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s1">&#39;foo from Base&#39;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Base</span>
</span><span class="line">  <span class="kp">include</span> <span class="n">A</span><span class="p">,</span> <span class="n">B</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="no">Base</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">foo</span>
</span><span class="line"><span class="c1"># =&gt; foo from A</span>
</span><span class="line"><span class="c1"># =&gt; foo from B</span>
</span><span class="line"><span class="c1"># =&gt; foo from Base</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong><em>How instance variables shared betweet controller and view?</em></strong></p>

<p>One way is to use <code>instance_varialbles</code> and <code>instance_variable_set/get</code>, to passing instance varaibles defined in action to the view object.</p>

<p>The other way is passing <code>binding</code> directly.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">template</span> <span class="o">=</span> <span class="no">ERB</span><span class="o">.</span><span class="n">new</span><span class="p">(</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">()</span> <span class="p">)</span>
</span><span class="line"><span class="n">template</span><span class="o">.</span><span class="n">result</span><span class="p">(</span><span class="nb">binding</span><span class="p">)</span>
</span><span class="line"><span class="c1"># eval(template.src, binding)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong><em>Truth about binding</em></strong></p>

<ol>
  <li>
    <p><code>Binding.new</code> doesn’t work, you can only call <code>Kernel.binding</code> or <code>Proc#binding</code>.</p>
  </li>
  <li>
    <p>You can only use <code>binding</code> with <code>eval</code>. <code>eval('', binding)</code> or <code>binding.eval('')</code></p>
  </li>
</ol>

<p><strong><em>When we create custom middleware is it a good practise to add new keys and values to env variable to transfer it between middlewares?</em></strong></p>

<blockquote>
  <p>[02:35] &lt;wawka&gt; macournoyer: When we create custom middleware is it a good practise to add new keys and values to env variable to transfer it between middlewares ?<br />
[02:36] &lt;macournoyer&gt;  Rack specs recommend namespacing everything you put in the env var<br />
[02:36] &lt;macournoyer&gt; eg.: Rails will do env[“action_controller.request_id”] = “…” <br />
[02:36] &lt;macournoyer&gt; “action_controller.” is the namespace<br />
[02:36] &lt;wawka&gt; macournoyer: ok</p>
</blockquote>

<p><strong><em>How to check a gem’s dependency and dive into the source code?</em></strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>gem dep rails -v<span class="o">=</span>4.1.6
</span><span class="line">Gem rails-4.1.6
</span><span class="line">  actionmailer <span class="o">(=</span> 4.1.6<span class="o">)</span>
</span><span class="line">  actionpack <span class="o">(=</span> 4.1.6<span class="o">)</span>
</span><span class="line">  actionview <span class="o">(=</span> 4.1.6<span class="o">)</span>
</span><span class="line">  activemodel <span class="o">(=</span> 4.1.6<span class="o">)</span>
</span><span class="line">  activerecord <span class="o">(=</span> 4.1.6<span class="o">)</span>
</span><span class="line">  activesupport <span class="o">(=</span> 4.1.6<span class="o">)</span>
</span><span class="line">  bundler <span class="o">(</span>&lt; 2.0, &gt;<span class="o">=</span> 1.3.0<span class="o">)</span>
</span><span class="line">  railties <span class="o">(=</span> 4.1.6<span class="o">)</span>
</span><span class="line">  sprockets-rails <span class="o">(</span>~&gt; 2.0<span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="nv">$ </span>bundle open activerecord
</span><span class="line">
</span><span class="line"><span class="c"># open the latest version on system, a little bit dangerous </span>
</span><span class="line"><span class="nv">$ </span>gem edit activerecord
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong><em>How to get the source location of the method calling?</em></strong></p>

<p>In Rails, <em>guess</em> the logic part(activerecord, activesupport..) based on the method function, then use <code>bundle open</code> to dive in.</p>

<p>Ruby supports <code>Method#source_location</code>, <code>Proc#source_location</code> to provides some information, not accurate though. Use it like this</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># chech where defined respond_with</span>
</span><span class="line"><span class="k">raise</span> <span class="nb">method</span><span class="p">(</span><span class="ss">:respond_with</span><span class="p">)</span><span class="o">.</span><span class="n">source_location</span><span class="o">.</span><span class="n">inspect</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<hr />

<h3 id="other-stuffs">Other stuffs</h3>

<ol>
  <li>
    <p>Marc’s <a href="https://gist.github.com/macournoyer/1878273">gitconfig</a></p>
  </li>
  <li>
    <p>Don’t try to understand everything.</p>
  </li>
  <li>
    <p>Read concern, callbacks, core_ext and other ActiveSupport parts as a start.</p>
  </li>
  <li>
    <p>Nice word learnt, <strong>Base</strong>ics</p>
  </li>
  <li>
    <p>Try <code>mount</code> a rack-based app in Rails.</p>
  </li>
</ol>
]]></content>
  </entry>
  
</feed>
