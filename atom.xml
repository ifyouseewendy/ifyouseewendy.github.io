<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Wendi's Blog]]></title>
  <link href="http://blog.ifyouseewendy.com/atom.xml" rel="self"/>
  <link href="http://blog.ifyouseewendy.com/"/>
  <updated>2014-12-29T16:54:45+08:00</updated>
  <id>http://blog.ifyouseewendy.com/</id>
  <author>
    <name><![CDATA[wendi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Readable Git Log by Using Custom Commit Template]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2014/12/29/readable-git-log-by-using-custom-commit-template/"/>
    <updated>2014-12-29T15:43:39+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2014/12/29/readable-git-log-by-using-custom-commit-template</id>
    <content type="html"><![CDATA[<p>I was thinking of making my git logs more readable for a long time. Sometimes merge log can help to seperate a set of commits as a feature, but <strong>how can we get more info from the sequential log messages inside a set of commits?</strong></p>

<p>After doing a little research, I’ve found <a href="http://programmers.stackexchange.com/questions/42110/can-you-recommend-a-good-commit-message-template-guidelines-to-enforce-in-the">rangzen’s answer</a> on Stack Exchange sounds reasonable.</p>

<blockquote>
  <p>With Add, Mod(ify), Ref(actoring), Fix, Rem(ove) and Rea(dability) then it’s easy to extract logfile.
Example :<br />
+ Add: New function to rule the world.<br />
+ Mod: Add women factor in Domination.ruleTheWorld().<br />
+ Ref: Extract empathy stuff to an abstract class.<br />
+ Fix: RUL-42 or #42 Starvation need to be initialised before Energy to avoid the nullpointer in People.<br />
+ Rem: freeSpeech is not used anymore.<br />
+ Rea: Removed old TODO and extra space in header.  </p>
</blockquote>

<p>And I want to give it a try by,</p>

<ol>
  <li>Setting <code>git config commit.template</code> to my customized commit template.</li>
  <li>Using git <code>commit-msg</code> hook to enforce the pattern, validating on commit message.</li>
</ol>

<p>Here is the details.</p>

<h2 id="customize-commit-template">Customize Commit Template</h2>

<p>Write a <code>.gitmessage</code> template.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class=""><span class="line">
</span><span class="line"># = Rule 1, use meta operation
</span><span class="line">
</span><span class="line"># Add: new function to rule the world
</span><span class="line"># Mod: query_date logic
</span><span class="line"># Rem: user.rake is not used anymore
</span><span class="line"># Ren: hello-world to hell-world
</span><span class="line"># Fix: #1900, stupid typo
</span><span class="line"># Ref: extract to an abstract class.
</span><span class="line"># Opt: cache in get_active_table
</span><span class="line">
</span><span class="line"># = Rule 2, leave a "*" at the end to flag folding
</span><span class="line">
</span><span class="line"># Mod: query_date logic*
</span><span class="line">#
</span><span class="line"># Use chronic to guess date.
</span><span class="line">#
</span><span class="line"># Chronic.parse('may 27th', :guess =&gt; false)
</span><span class="line"># #=&gt; Sun May 27 00:00:00 PDT 2007..Mon May 28 00:00:00 PDT 2007
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Make git serve it.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git config --global commit.template ~/.gitmessage
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now when committing, git enables the template:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git touch README <span class="o">&amp;&amp;</span> git commit
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="c"># = Rule 1, use meta operation</span>
</span><span class="line">
</span><span class="line"><span class="c"># Add: new function to rule the world</span>
</span><span class="line"><span class="c"># Mod: query_date logic</span>
</span><span class="line"><span class="c"># Rem: user.rake is not used anymore</span>
</span><span class="line"><span class="c"># Ren: hello-world to hell-world</span>
</span><span class="line"><span class="c"># Fix: #1900, stupid typo</span>
</span><span class="line"><span class="c"># Ref: extract to an abstract class.</span>
</span><span class="line"><span class="c"># Opt: cache in get_active_table</span>
</span><span class="line">
</span><span class="line"><span class="c"># = Rule 2, leave a &quot;*&quot; at the end to flag folding</span>
</span><span class="line">
</span><span class="line"><span class="c"># Mod: query_date logic*</span>
</span><span class="line"><span class="c">#</span>
</span><span class="line"><span class="c"># Use chronic to guess date.</span>
</span><span class="line"><span class="c">#</span>
</span><span class="line"><span class="c"># Chronic.parse(&#39;may 27th&#39;, :guess =&gt; false)</span>
</span><span class="line"><span class="c"># #=&gt; Sun May 27 00:00:00 PDT 2007..Mon May 28 00:00:00 PDT 2007</span>
</span><span class="line">
</span><span class="line"><span class="c"># Please enter the commit message for your changes. Lines starting</span>
</span><span class="line"><span class="c"># with &#39;#&#39; will be ignored, and an empty message aborts the commit.</span>
</span><span class="line"><span class="c"># On branch master</span>
</span><span class="line"><span class="c"># Changes to be committed:</span>
</span><span class="line"><span class="c">#	new file:   README</span>
</span><span class="line"><span class="c">#</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="validate-on-rules">Validate on Rules</h2>

<p>Write a Ruby script, naming <code>commit-msg</code> under <code>.git/hooks</code>, and make it executable.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1">#!/usr/bin/env ruby</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Init repo</span>
</span><span class="line"><span class="nb">exit</span> <span class="mi">0</span> <span class="k">if</span> <span class="sb">`git log --oneline -1 2&gt;/dev/null`</span><span class="o">.</span><span class="n">empty?</span>
</span><span class="line">
</span><span class="line"><span class="n">message_file</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class="line"><span class="n">lines</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">readlines</span><span class="p">(</span><span class="n">message_file</span><span class="p">)</span><span class="o">.</span><span class="n">reject</span><span class="p">{</span><span class="o">|</span><span class="n">l</span><span class="o">|</span> <span class="n">l</span> <span class="o">=~</span> <span class="sr">/^#/</span><span class="p">}</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:strip</span><span class="p">)</span><span class="o">.</span><span class="n">reject</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:empty?</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">subject_regex</span> <span class="o">=</span> <span class="s1">&#39;[Add|Mod|Rem|Ren|Fix|Ref|Opt]:\s\S+&#39;</span>
</span><span class="line"><span class="n">regex</span> <span class="o">=</span> <span class="n">lines</span><span class="o">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">?</span> <span class="sr">/</span><span class="si">#{</span><span class="n">subject_regex</span><span class="si">}</span><span class="sr">\*$/</span> <span class="p">:</span> <span class="sr">/</span><span class="si">#{</span><span class="n">subject_regex</span><span class="si">}</span><span class="sr">/</span>
</span><span class="line">
</span><span class="line"><span class="k">unless</span> <span class="n">lines</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=~</span> <span class="n">regex</span>
</span><span class="line">  <span class="nb">puts</span> <span class="s2">&quot;[POLICY] Your message is not formatted correctly&quot;</span>
</span><span class="line">  <span class="nb">puts</span> <span class="s2">&quot;[POLICY] Please check ~/.gitmessage.txt&quot;</span>
</span><span class="line">  <span class="nb">exit</span> <span class="mi">1</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now committing has validations.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="c"># Rule 1</span>
</span><span class="line">
</span><span class="line"><span class="nv">$ </span>git commit -m <span class="s1">&#39;Add README&#39;</span>
</span><span class="line"><span class="o">[</span>POLICY<span class="o">]</span> Your message is not formatted correctly
</span><span class="line"><span class="o">[</span>POLICY<span class="o">]</span> Please check ~/.gitmessage
</span><span class="line">
</span><span class="line"><span class="nv">$ </span>git commit -m <span class="s1">&#39;Add: README&#39;</span>
</span><span class="line"><span class="o">[</span>master e492ec1<span class="o">]</span> Add: README
</span><span class="line"> 1 file changed, 0 insertions<span class="o">(</span>+<span class="o">)</span>, 0 deletions<span class="o">(</span>-<span class="o">)</span>
</span><span class="line"> create mode 100644 README
</span><span class="line">
</span><span class="line"><span class="c"># Rule 2</span>
</span><span class="line">
</span><span class="line"><span class="nv">$ </span>git commit -m <span class="s1">&#39;Add: README</span>
</span><span class="line"><span class="s1">quote&gt; </span>
</span><span class="line"><span class="s1">quote&gt; some content&#39;</span>
</span><span class="line"><span class="o">[</span>POLICY<span class="o">]</span> Your message is not formatted correctly
</span><span class="line"><span class="o">[</span>POLICY<span class="o">]</span> Please check ~/.gitmessage
</span><span class="line">
</span><span class="line"><span class="nv">$ </span>git commit -m <span class="s1">&#39;Add: README*</span>
</span><span class="line"><span class="s1">quote&gt; </span>
</span><span class="line"><span class="s1">quote&gt; some content&#39;</span>
</span><span class="line"><span class="o">[</span>master 5fdd0f4<span class="o">]</span> Add: README*
</span><span class="line"> 1 file changed, 0 insertions<span class="o">(</span>+<span class="o">)</span>, 0 deletions<span class="o">(</span>-<span class="o">)</span>
</span><span class="line"> create mode 100644 README
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Here is the final <code>git log --oneline</code> look,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">* 0435fa9 2014-12-29 Ref: code smells like..teen spirit <span class="o">[</span>wendi<span class="o">]</span>
</span><span class="line">* 13423ff 2014-12-29 Fix: <span class="c">#1984 big bro 404 error* [wendi]</span>
</span><span class="line">* 0c5b9f9 2014-12-29 Add: pygments.rb to <span class="nb">enable </span>highlight* <span class="o">[</span>wendi<span class="o">]</span>
</span><span class="line">* e99d1b5 2014-12-29 Mod: heading sytle <span class="o">[</span>wendi<span class="o">]</span>
</span><span class="line">* 95576cc 2014-12-29 Ren: README.md <span class="o">[</span>wendi<span class="o">]</span>
</span><span class="line">* 2f5c632 2014-12-29 Add: README <span class="o">[</span>wendi<span class="o">]</span>
</span><span class="line">* 6673bd7 2014-12-29 Init <span class="o">[</span>wendi<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong><em>How to make self-defined hook ship with every project?</em></strong></p>

<p>Use <code>init.templatedir</code> config option.</p>

<p>Check this post, <a href="https://coderwall.com/p/jp7d5q/create-a-global-git-commit-hook">Create a global git commit hook</a> by Matt Venables.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Filter Branch in Practice]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2014/12/25/git-filter-branch-in-practice/"/>
    <updated>2014-12-25T20:54:49+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2014/12/25/git-filter-branch-in-practice</id>
    <content type="html"><![CDATA[<p>For some reasons, our company team is migrating our codebase from Github Enterprise to Gitlab. One of the annoying things we should do is to update the invalid author names and emails in our git commits. Specifically, we should</p>

<p><strong>Filter out the author emails which are not ending <code>umeng.com</code>, modify meta info of these commits by a self-defined rule, and update the inconsistent author and committer info.</strong></p>

<p>I’ve used <code>git-filter-branch</code> once to do a similar but simpler job, which updated my own name and email, by using <code>env-filter</code> option in a few lines to complete.</p>

<p>Things are getting a little complicated this time. Our repo has several branches, numbers of collaborators and almost 18,000 commits. I must be careful and patient, to find a safe way before reaching the ultimate horrible “force update”.</p>

<h2 id="major-idea">Major Idea</h2>

<p>Use <code>git filter-branch --commit-filter</code> to update each commit’s author info.</p>

<p>Psuedo-code of updating logic</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">email</span> <span class="o">=</span> <span class="s2">&quot;$GIT_AUTHOR_EMAIL&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">email</span><span class="o">.</span><span class="n">match</span> <span class="sr">/@umeng.com/</span>
</span><span class="line">  <span class="n">commit</span><span class="o">-</span><span class="n">tree</span>
</span><span class="line"><span class="k">else</span>
</span><span class="line">  <span class="n">email</span><span class="o">.</span><span class="n">match</span> <span class="sr">/(?&lt;name&gt;*)@(?&lt;domain&gt;*).com/</span> <span class="c1"># psuedo</span>
</span><span class="line">
</span><span class="line">  <span class="n">mapping</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="s1">&#39;wendy&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;wendi&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s1">&#39;ifyouseewendy&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;wendi&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="k">if</span> <span class="n">mapping</span><span class="o">[</span><span class="nb">name</span><span class="o">].</span><span class="n">presents?</span>
</span><span class="line">    <span class="n">commit_email</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">mapping</span><span class="o">[</span><span class="nb">name</span><span class="o">]</span><span class="si">}</span><span class="s2">@umeng.com&quot;</span>
</span><span class="line">  <span class="k">else</span>
</span><span class="line">    <span class="n">commit_email</span> <span class="o">=</span> <span class="s2">&quot;umeng_</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="n">domain</span><span class="si">}</span><span class="s2">@umeng.com&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="n">commit</span><span class="o">-</span><span class="n">tree</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="step-by-step">Step by Step</h2>

<p><strong>1. Checkout a test branch</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git checkout -b update_git_info
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>2. Filter author emails</strong></p>

<p>Use <a href="https://gist.github.com/ifyouseewendy/9bdf7ad7173f9c78026c#file-generate_stats-rb">generate_stats.rb</a> to</p>

<ol>
  <li>Gather commits info of <em>author_name</em>, <em>author_email</em>, and <em>committer_email</em>.</li>
  <li>Run again after finishing the whole job to verify.</li>
</ol>

<p><strong>3. Prepare a mapping file</strong></p>

<p>For authors whose email domain is not <code>umeng</code>, write the mapping file under this rule:</p>

<ol>
  <li>Seperated by <code>\s</code></li>
  <li>First is the valid Umeng name</li>
  <li>Second to the end, are the names of the invalid email</li>
</ol>

<p>Sample:</p>

<p>change <code>wendy@xx.com</code> and <code>ifyouseewendy@xx.com</code> to <code>wendi@umeng.com</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">wendi wendy ifyouseewendy
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>4. Leverage mapping file</strong></p>

<p>Write a Ruby script to map names, used in the final script.</p>

<p><a href="https://gist.github.com/ifyouseewendy/9bdf7ad7173f9c78026c#file-update_name-rb">update_name.rb</a>, read a name to change, output the corresponding Umeng author name.</p>

<p><strong>5. Git filter-branch bash script</strong></p>

<p>Here is the final working script, <a href="https://gist.github.com/ifyouseewendy/9bdf7ad7173f9c78026c#file-git_filter_branch-sh">git_filter_branch.sh</a>. The bash email pattern matching part was tweaked based on <a href="http://stackoverflow.com/questions/14170873/bash-regex-email-matching">glenn jackman’s answer</a> on Stack Overflow.</p>

<h2 id="things-to-take-caution">Things to Take Caution</h2>

<p>When running <code>git filter-branch --commit-filter &lt;commad&gt;</code>, logic in <code>&lt;command&gt;</code> was the core part to finish my job. Remenber, <strong>DO NOT write <code>echo</code> in command part</strong> for debug use or whatever, as <code>echo</code> will interrupt the filter branch workflow.</p>

<p>Better use a seperate script when debugging. I use <a href="https://gist.github.com/ifyouseewendy/9bdf7ad7173f9c78026c#file-update_email-sh">update_email.rb</a> to develop on email pattern matching, and copy paste into the final <a href="https://gist.github.com/ifyouseewendy/9bdf7ad7173f9c78026c#file-git_filter_branch-sh">git_filter_branch.sh</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Review] Practicing Rails]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2014/11/26/practicing-rails/"/>
    <updated>2014-11-26T11:32:14+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2014/11/26/practicing-rails</id>
    <content type="html"><![CDATA[<table class="custom">
  <tbody>
    <tr>
      <td><strong>Book</strong></td>
      <td>Practicing Rails</td>
    </tr>
    <tr>
      <td><strong>Author</strong></td>
      <td>Justin Weiss</td>
    </tr>
    <tr>
      <td><strong>Link</strong></td>
      <td><a href="https://www.justinweiss.com/book/">www.justinweiss.com/book</a></td>
    </tr>
  </tbody>
</table>

<ul id="markdown-toc">
  <li><a href="#meta-principles">Meta Principles</a></li>
  <li><a href="#tiny-apps">Tiny Apps</a>    <ul>
      <li><a href="#build-a-tiny-app">Build a tiny App</a></li>
      <li><a href="#owning-the-things-you-learn">Owning the things you learn</a></li>
    </ul>
  </li>
  <li><a href="#build-your-own-app">Build Your Own App</a>    <ul>
      <li><a href="#where-to-start">Where to start?</a>        <ul>
          <li><a href="#build-from-ui-down">Build from UI Down</a></li>
          <li><a href="#thinking-in-resources">Thinking in resources</a></li>
          <li><a href="#t-shaped-development">T-Shaped development</a></li>
          <li><a href="#just-in-time-learning">Just-in-time learning</a></li>
        </ul>
      </li>
      <li><a href="#which-feature-do-you-build-next">Which feature do you build next?</a></li>
    </ul>
  </li>
  <li><a href="#test-your-code-efficiently">Test Your Code Efficiently</a>    <ul>
      <li><a href="#feature-development-process-with-testing">Feature development process with testing</a></li>
      <li><a href="#organizing-and-structuring-your-tests">Organizing and structuring your tests</a>        <ul>
          <li><a href="#use-object-oriented-design-to-make-your-tests-better">Use object-oriented design to make your tests better</a></li>
          <li><a href="#refacoring">Refacoring</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#learning-skill">Learning Skill</a>    <ul>
      <li><a href="#learning-stage">Learning Stage</a></li>
      <li><a href="#a-to-dont-list">A to-don’t list</a></li>
      <li><a href="#guidance">Guidance</a></li>
      <li><a href="#google-and-stackoverflow-may-not-be-the-answer">Google and StackOverflow may not be the answer</a></li>
      <li><a href="#dig-into-code-to-understand-it-better">Dig into code to understand it better</a></li>
      <li><a href="#avoiding-the-temptation-of-the-new">Avoiding the temptation of the new</a></li>
      <li><a href="#building-a-good-mental-filter">Building a good mental filter</a></li>
      <li><a href="#push-vs-pull">Push vs. Pull</a></li>
      <li><a href="#system-learning">System learning</a></li>
      <li><a href="#when-to-give-new-tech-a-chance">When to give new tech a chance</a></li>
      <li><a href="#catch-up-with-changes">Catch up with changes</a></li>
    </ul>
  </li>
  <li><a href="#form-a-habit">Form a habit</a>    <ul>
      <li><a href="#why">Why?</a></li>
      <li><a href="#how-to-keep-consistent">How to keep consistent?</a>        <ul>
          <li><a href="#morning-or-evening">Morning or Evening?</a></li>
        </ul>
      </li>
      <li><a href="#how-to-keep-motivated">How to keep motivated?</a>        <ul>
          <li><a href="#pre-prepare">Pre-prepare</a></li>
          <li><a href="#processes">Processes</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="meta-principles">Meta Principles</h2>

<ul>
  <li>
    <p><strong>As soon as you want to learn something, try it out.</strong></p>
  </li>
  <li>
    <p><strong>When you feel yourself procrastinating or stressed about something, break it apart.</strong></p>

    <p>Large, fuzzy tasks are killer. If the next thing you want to do is tiny, and you can start on it in the next five minutes, you probably will. If it’s big and vague, you’ll put it off until you know how to start it. Which will probably be never.</p>
  </li>
  <li>
    <p><strong>Start backwards.</strong></p>

    <p>When you write an app, start from the UI down. Allow your vision of the feature to guide your development. It’s easy to know if you’re building the right thing when you start from the end and trace back to the beginning. And UI sketches and HTML views are a lot easier to think about than abstract data models.</p>
  </li>
  <li>
    <p><strong>Keep it simple, and add complexity later.</strong></p>

    <p>The most frustrating struggles come from running into problems you don’t know how to solve. You can skip these problems by avoiding new things until you understand the old things. This goes for everything from gems and libraries to patterns and object-oriented design principles.</p>
  </li>
  <li>
    <p><strong>Systems, not motivation.</strong></p>

    <p>You can’t rely on motivation every day. Instead, set up systems and habits, so you don’t have to motivate yourself to work.</p>
  </li>
  <li>
    <p><strong>Struggling should tell you that you’re on the brink of learning something really valuable. Keep it up.</strong></p>
  </li>
</ul>

<h2 id="tiny-apps">Tiny Apps</h2>

<p>When you read something interesting, tweak it with a tiny app.</p>

<ul>
  <li>UI related, with a <code>rails server</code></li>
  <li>Functional, with a <code>rails console</code>. If setting it up in the console gets annoying, write a test case for it.</li>
</ul>

<h3 id="build-a-tiny-app">Build a tiny App</h3>

<blockquote>
  <p>I care about getting the most knowledge in the least amount of time, and scaffolds and other Rails code generators are a great way to do just that.</p>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">rails</span> <span class="kp">new</span> <span class="n">test_polymorphic_association</span>
</span><span class="line"><span class="n">cd</span> <span class="n">test_polymorphic_association</span>
</span><span class="line"><span class="n">bin</span><span class="o">/</span><span class="n">rails</span> <span class="n">generate</span> <span class="n">scaffold</span> <span class="n">bug</span> <span class="ss">title</span><span class="p">:</span><span class="n">string</span> <span class="ss">description</span><span class="p">:</span><span class="n">text</span>
</span><span class="line"><span class="n">bin</span><span class="o">/</span><span class="n">rake</span> <span class="ss">db</span><span class="p">:</span><span class="n">migrate</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Some tips for investigating ideas through the Rails console</strong></p>

<p>You can use a lot of Rails features through the <code>app</code> object. app is a special object that has some useful methods for experimenting with your Rails app.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">002</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">app</span><span class="o">.</span><span class="n">bug_path</span> <span class="n">bug</span>
</span><span class="line"><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">003</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">app</span><span class="o">.</span><span class="n">get</span> <span class="s2">&quot;/bugs/1&quot;</span>
</span><span class="line"><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">003</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="nb">puts</span> <span class="n">app</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">first</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>helper</code> object provides all of your app’s view and helper methods in the Rails console:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">005</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">helper</span><span class="o">.</span><span class="n">content_tag</span> <span class="ss">:h1</span><span class="p">,</span> <span class="s2">&quot;Hey there&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;&lt;h1&gt;Hey there&lt;/h1&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="owning-the-things-you-learn">Owning the things you learn</h3>

<p>Explore the boundaries of that concept until you feel like you really get it.</p>

<ol>
  <li>test the boundaries</li>
  <li>break and dig it, brainstorm some questions about the idea you’re exploring.</li>
</ol>

<h2 id="build-your-own-app">Build Your Own App</h2>

<ul>
  <li><strong>Core Paths</strong>, focus on building an important path through your app as your first feature.</li>
  <li><strong>Build from UI down</strong>.</li>
  <li><strong>Avoid large, fuzzy tasks</strong>. At every stage, you should be trying to break large tasks apart into smaller ones.</li>
</ul>

<h3 id="where-to-start">Where to start?</h3>

<p>Take a few minutes and think what you’re trying to build. Write down every feature that comes to mind. Think of the different paths a user could take through your application, the different things they could do. Describe them in a single sentence.</p>

<p>Then, narrow them down to paths where, if you didn’t have them, your app couldn’t exist. <strong>Core paths</strong>.</p>

<p>In general, less code is better code. And <strong>starting from the view and building toward the model</strong> from there is the best way I know to consistently write less code.</p>

<ul>
  <li>Finding Core Path</li>
  <li>View toward Model</li>
</ul>

<h4 id="build-from-ui-down">Build from UI Down</h4>

<blockquote>
  <p>Feature development process</p>
</blockquote>

<ol>
  <li>Take the small feature from earlier.</li>
  <li>Think of one simple thing someone could do with that feature.</li>
  <li>Draw just enough screens for that user to be able to do that thing.</li>
  <li>Describe the path through that action, as if you were telling someone what you were going to do.</li>
  <li>As you describe that path, write out the objects, properties of those objects, and other actions you think you need to develop that path.</li>
</ol>

<h4 id="thinking-in-resources">Thinking in resources</h4>

<p>Rails works well with “resources.” (You can think of a resource as an ActiveRecord model and a controller that has seven actions: <code>index</code>, <code>new</code>, <code>create</code>, <code>show</code>, <code>edit</code>, <code>update</code>, and <code>destroy</code>).</p>

<h4 id="t-shaped-development">T-Shaped development</h4>

<p>When you build something, try to get something rough up as quickly as possible. As long as the core of the feature you want to build is there, it’s fine.</p>

<h4 id="just-in-time-learning">Just-in-time learning</h4>

<p>It means you’re not trying to learn everything at the beginning. That’s the most common way to procrastinate starting something that you’re too nervous to do.</p>

<h3 id="which-feature-do-you-build-next">Which feature do you build next?</h3>

<p>Keeping these tasks as small as possible is the key. And try to follow the questions below.</p>

<ol>
  <li>Ask some questions: What is the app missing? What did you postpone to get that first feature done?</li>
  <li>Try using what you have so far. What would make your life easier if it was built? What annoys you while you’re using your app?</li>
  <li>Ifyou’rebuildingthisappforsomeoneelse,watchhowtheyusetheproject. Where are they struggling? What do they complain about?</li>
</ol>

<h2 id="test-your-code-efficiently">Test Your Code Efficiently</h2>

<h3 id="feature-development-process-with-testing">Feature development process with testing</h3>

<ol>
  <li>Take your small feature.</li>
  <li>Think of one simple thing someone could do with that feature.</li>
  <li>Draw just enough screens for that user to be able to do that thing.</li>
  <li>Translate that sketch into a failing integration test.</li>
  <li>Get the first part of that test to pass:</li>
  <li>Write a failing controller test.</li>
  <li>Write some failing unit tests.</li>
  <li>Write enough code to get the unit and controller tests to pass.</li>
  <li>Repeat until the next part of your integration test passes.</li>
</ol>

<p><strong><em>What do you test?</em></strong></p>

<ul>
  <li>Happy path tests.</li>
  <li>Sad path tests.</li>
  <li>What-if tests, must be documented.</li>
</ul>

<p><strong><em>How do you test?</em></strong></p>

<ol>
  <li>Arrange</li>
  <li>Act</li>
  <li>Assert</li>
</ol>

<p><strong><em>When aren’t you testing enough?</em></strong></p>

<p>Bugs imply that you missed a test somewhere. If you run into a bug in your app that your tests didn’t catch, you’re probably missing a test.</p>

<ol>
  <li>Write a test that fails while the bug exists.</li>
  <li>Fix the bug.</li>
  <li>Make sure the test passes now.</li>
  <li>Check in both your test and fix, so you don’t run into the problem again.</li>
</ol>

<p><strong><em>How to keep TDD?</em></strong></p>

<p>Translate that sketch into a failing <strong>integration test</strong>(Capybara).</p>

<ol>
  <li>Write a failing controller test.</li>
  <li>Write some failing unit tests.</li>
  <li>Write enough code to get the unit and controller tests to pass.</li>
  <li>Repeat until the next part of your integration test passes.</li>
</ol>

<h3 id="organizing-and-structuring-your-tests">Organizing and structuring your tests</h3>

<h4 id="use-object-oriented-design-to-make-your-tests-better">Use object-oriented design to make your tests better</h4>

<p>With minitest, all of your test suites are just classes, tests are methods. That means you can use your object oriented design skills to reorganize your tests.</p>

<p>Guides to follow:</p>

<ol>
  <li><strong>For tests, clarity is better than cleverness.</strong> You don’t have anything testing your tests, so you have to be careful not to make things too abstract. Hard-coding values, copy and pasted code, all that kind of stuff is usually OK in tests, if they make the test easier to understand.</li>
  <li>Organizing your tests is easiest if your test organization matches your code organization. </li>
  <li>Wait until you feel real pain before refactoring your tests.</li>
</ol>

<h4 id="refacoring">Refacoring</h4>

<ul>
  <li>Using Extract Method to write custom assertions.</li>
  <li>Using Extract Method to make mocks easier to write.</li>
  <li>Using modules to share tests between test suites.</li>
</ul>

<h2 id="learning-skill">Learning Skill</h2>

<blockquote>
  <p>The skill of learning.</p>
</blockquote>

<h3 id="learning-stage">Learning Stage</h3>

<ol>
  <li>First stage. Baseline knowledge, bootstrapping your learning process.</li>
  <li>Second stage. You’re past the basics but not an expert, still require conscious thought.</li>
  <li>Thrid stage. Skills in the third stage are mastered. They don’t require thought, you use instinct and intuition when you use them.</li>
</ol>

<p>If all of their skills were at an intermediate level, they’d not only have to think about how to use each of those skills, but how they interacted in this one specific situation, and what kinds of tradeoffs they’ll have to make.</p>

<p>1 + 3 &gt; 2 + 2</p>

<p>So you’ll be much more productive if you have 5 skills in the third stage and 5 skills in the first stage than if you have ten skills in the second stage.</p>

<h3 id="a-to-dont-list">A to-don’t list</h3>

<p>It might seem like you need to master JavaScript before you can write a Rails app. You will, someday. But you won’t get anywhere without starting an app you can get excited about, and you don’t need JavaScript for that first stage. So cross JavaScript off the list. For now.</p>

<p><strong>For now</strong> is powerful. You’re giving yourself permission to set other things aside, so you can focus on something else.</p>

<h3 id="guidance">Guidance</h3>

<p>Search for the things that really resonate with you, the things you get lost in, the things you just want to do for hours.</p>

<p>Take a look at what you know and what you don’t. What you want to learn, and what your app needs you to learn. Set aside some things that seem less important, and turn them into a “Not Right Now” list. Eventually you’ll have a few things you just can’t set aside – learn those thoroughly. And keep moving forward.</p>

<p>Intermediate Rails isn’t about learning all the stuff you learned as a beginner in a little more depth. It’s about the stem of the “T” in T-Shaped Learning. It’s about gaining deep knowledge in a few different areas, one thing at a time. And it’s about using that knowledge to build your own apps, the way you imagined.</p>

<h3 id="google-and-stackoverflow-may-not-be-the-answer">Google and StackOverflow may not be the answer</h3>

<p>This can be the fastest way to get your problem solved, and is much easier than investigating it yourself. But you lose the opportunity to go through the investigation, and you miss the chance to build experience debugging and solving your own problems. This robs you of a chance to get to know your code, the language, and the framework better.</p>

<p>Every problem you run into is an opportunity to learn.</p>

<p>But if you use them to solve a problem, make sure you read the answer, follow references, and immerse yourself in the knowledge the solution brings you. </p>

<p>When you use someone else’s solution to solve your problems, your app will become a mess of inconsistent code that probably only works coincidentally.</p>

<h3 id="dig-into-code-to-understand-it-better">Dig into code to understand it better</h3>

<p>Great developers know how to read and understand code. When you read code, you’ll understand much more than what the documentation tells you. Sometimes, after spending time with the code, you’ll know as much about it as the author does!</p>

<p><strong>Reading code is a skill you’ll have to build like any other, and it’s not like reading a book.</strong></p>

<p>Practice reading code. Learning to read and explore code will teach you things you won’t learn anywhere else. And when you get good enough at reading code, you’ll be able to solve problems you might have thought were impossible before.</p>

<p>Remember, reading code isn’t like reading anything else. It’s about debugging and exploration. <strong>You have to run it.</strong></p>

<h3 id="avoiding-the-temptation-of-the-new">Avoiding the temptation of the new</h3>

<p>You have to separate the things that are interesting because they’re new, from the things that are interesting because they’ll help you get work done.</p>

<h3 id="building-a-good-mental-filter">Building a good mental filter</h3>

<p>Two questions to ask.</p>

<ol>
  <li>Is this something I need to know right now?</li>
  <li>If I knew this a year ago, would it have made my life easier today?</li>
</ol>

<h3 id="push-vs-pull">Push vs. Pull</h3>

<p>Hitting these sites is the “pull” model of receiving tech news. You’re the one digging it up. But these days, I’ve been using the “push” model more and more. I’ve been getting email newsletters, podcasts, things that get delivered to you instead of you looking for them.</p>

<h3 id="system-learning">System learning</h3>

<p>If you find a few good sources, keep a steady learning and practice schedule, and learn things as they become important to you, you’ll make much more progress than those who constantly chase the news sites.</p>

<h3 id="when-to-give-new-tech-a-chance">When to give new tech a chance</h3>

<p>Try it out on a new small project. Then, take the technique as far as it’ll go.</p>

<p>But unfortunately, a lot of the techniques won’t have as much of a benefit in smaller projects. So create a new branch for your experiments, so you don’t wreck your code if you don’t like the technique. And</p>

<ol>
  <li>Make the change.</li>
  <li>Look at the old code next to the new.</li>
  <li>Ask yourself, which code do you prefer?</li>
  <li>Ask a few other people, which code do they prefer?</li>
  <li>If the new way is an improvement, go forward with that.</li>
</ol>

<p><strong>A technique only has value if it improves your code, so a direct comparison is the best way to judge.</strong></p>

<h3 id="catch-up-with-changes">Catch up with changes</h3>

<p>The best way to keep up with changes to your gems is to track down the project’s <em>CHANGELOG</em> file.</p>

<p>These will help you catch up on the big changes from version to version. Usually, they’re just a short summary of each major change.</p>

<h2 id="form-a-habit">Form a habit</h2>

<blockquote>
  <p>Keep your schedule consistent</p>
</blockquote>

<h3 id="why">Why?</h3>

<p><strong>Whenever you try to build a new skill, consistency is much more important than the amount of time you spend.</strong></p>

<p>When you first try to keep a schedule, it’ll feel weird. To me, it feels like I’m just pretending, like I’m just copying what someone else told me to do, instead of actually getting anything done. That feeling starts to hit me around the fourth or fifth day in a row, and it goes away after about three weeks. It’s totally normal, but it can be dangerous.</p>

<p>Anytime you change a routine, you’ll face some internal resistance. Our daily routines seem normal to us, that’s what makes them routines. So building the momentum to change those routines takes a lot of effort, since you’re breaking habits that have taken years to form, in just a few weeks.</p>

<p>You might be tempted to spend 6 hours learning one day and take the rest of the week off. But that doesn’t solve the core problem.</p>

<p><strong>Habits are built off of repetition, not total time.</strong> If you try to jam everything all into a single day, you’ll have less repetition. It’ll be easier to skip. And if your schedule is really so packed that you can’t find time every day to work on this stuff, how will you find a big chunk of time one day a week?</p>

<p><strong>Once you’re consistent enough to form a habit, motivation won’t be as much of an issue. It’s just become something I do, so I do it.</strong></p>

<h3 id="how-to-keep-consistent">How to keep consistent?</h3>

<p>By “consistency,” I don’t mean that you have to spend hours every single night on this stuff. When you first build your schedule, go shorter rather than longer. <strong>Aim for 40 minutes a day to start.</strong></p>

<p>If you can’t find the time anywhere else, staying up 40 minutes later at night usually won’t be too painful. Same thing with waking up a little earlier each day.</p>

<p>But 40 minutes is also short enough that it’ll surprise you when it’s over. You’ll start the next task and leave it unfinished.</p>

<p>When you <strong>leave something unfinished</strong>, it’ll stay in the back of your mind. When this happens, you’ll unconsciously be looking for closure, so you’ll be more receptive to related ideas that just pop into your head. You’ll really want to finish it.</p>

<h4 id="morning-or-evening">Morning or Evening?</h4>

<p>Cons on <strong>evening</strong>:</p>

<ol>
  <li>You don’t really have a set deadline (except sleep), so you can let your motivation carry you beyond the time you set aside.</li>
  <li>You might also be drained. If you’re tired, it’s easy to convince yourself to skip it, “just this once.” And after a frustrating day at work, you’ll start to tell yourself that you’ve had a rough day, you deserve to just get a good night’s sleep. You’ll catch up tomorrow, right?</li>
  <li>It’s also easy to push until later. “If I watch one more episode, I’ll start as soon as it’s done. It’ll only be 10 minutes late.” But before you know it, you’re an hour late, you’ve destroyed your sleeping schedule and you’ll pay for it tomorrow, when you’re drained again and you’ll skip again.</li>
</ol>

<p>While <strong>morning</strong>:</p>

<blockquote>
  <p>You might feel brain-dead and uncreative in the morning, which can be killer if you’re learning and practicing creative work like learning Rails. And it’s hard to wake up early until you get used to it.  </p>

  <p>I heard a lot of people I trust and respect suggest trying waking up a little earlier for a week or so. I did, and it was hard, and I felt totally unproductive.  </p>

  <p>But somehow, once I measured my actual productivity, I found out I was twice as pro- ductive in the mornings as the evenings. This is crazy, because it felt like the exact opposite!</p>
</blockquote>

<p>I really need to give it a shot.</p>

<h3 id="how-to-keep-motivated">How to keep motivated?</h3>

<p>Of course, to form a habit is the best way. But before that, try these.</p>

<h4 id="pre-prepare">Pre-prepare</h4>

<ol>
  <li>Separating the decision about where to start from the decision about what to do.</li>
  <li>It creates an unfinished loop in your mind, they’re just as powerful here.</li>
</ol>

<h4 id="processes">Processes</h4>

<p>Seinfeld method:</p>

<blockquote>
  <p>[Jerry Seinfeld] told me to get a big wall calendar that has a whole year on one page and hang it on a prominent wall. The next step was to get a big red magic marker.</p>

  <p>He said for each day that I do my task of writing, I get to put a big red X over that day. “After a few days you’ll have a chain. Just keep at it and the chain will grow longer every day. You’ll like seeing that chain, especially when you get a few weeks under your belt. Your only job next is to not break the chain.”</p>

  <p>“Don’t break the chain,” he said again for emphasis.</p>
</blockquote>

<p>When you miss a habit and break a chain, you lose all your motivation to keep the streak going. And you lose it at the exact time you need extra motivation to build that streak back up.</p>

<p>So keep consistent with a habit tracker, calendar, or Beeminder.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quotes from Ira Glass]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2014/11/23/quotes-from-ira-glass/"/>
    <updated>2014-11-23T00:21:33+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2014/11/23/quotes-from-ira-glass</id>
    <content type="html"><![CDATA[<p>I was reading <a href="https://www.justinweiss.com/book/">Practicing Rails</a> this weekend. A referenced quotes from <a href="http://en.wikipedia.org/wiki/Ira_Glass">Ira Glass</a> really caught my eyes.</p>

<blockquote>
  <p>Nobody tells this to people who are beginners, I wish someone told me. All of us who do creative work, we get into it because we have good taste. But there is this <strong>gap</strong>. For the first couple years you make stuff, it’s just not that good. It’s trying to be good, it has potential, but it’s not. <strong>But your taste, the thing that got you into the game, is still killer. And your taste is why your work disappoints you.</strong> A lot of people never get past this phase, they quit. Most people I know who do interesting, creative work went through years of this. We know our work doesn’t have this special thing that we want it to have. We all go through this. And if you are just starting out or you are still in this phase, you gotta know its normal and <strong>the most important thing you can do is do a lot of work. Put yourself on a deadline so that every week you will finish one story. It is only by going through a volume of work that you will close that gap, and your work will be as good as your ambitions.</strong> And I took longer to figure out how to do this than anyone I’ve ever met. It’s gonna take awhile. It’s normal to take awhile. You’ve just gotta <strong>fight your way through</strong>.</p>
</blockquote>

<p>Yes, fight your way, and let your taste drag you through.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From irb to Rails console]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2014/11/22/from-irb-to-rails-console/"/>
    <updated>2014-11-22T18:09:51+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2014/11/22/from-irb-to-rails-console</id>
    <content type="html"><![CDATA[<p>From Justing Weiss’s article:</p>

<p><a href="http://www.justinweiss.com/blog/2014/11/17/what-are-the-differences-between-irb/?utm_source=Weissblog+Subscribers&amp;utm_campaign=dc22dc3715-What_are_the_differences_between_irb_11_17_2014&amp;utm_medium=email&amp;utm_term=0_2494b7d197-dc22dc3715-120246897">What’s the Difference Between <em>irb</em>, <em>bundle exec irb</em>, <em>bundle console</em>, and <em>rails console</em>?</a></p>

<ul>
  <li><code>irb</code></li>
</ul>

<p>It can’t easily load gems that Bundler installs outside of RubyGems’ load path. Eg. <code>bundle install --path=vendor/bundle</code></p>

<ul>
  <li><code>bundle exec irb</code></li>
</ul>

<p>It can easily load <em>Gemfile</em> gems by Bundler.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="err">$</span> <span class="n">irb</span>
</span><span class="line"><span class="o">&gt;&gt;</span> <span class="nb">require</span> <span class="s1">&#39;bundler/setup&#39;</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li><code>bundle exec console</code></li>
</ul>

<p>Find and auto-require <em>Gemfile</em> gems.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="err">$</span> <span class="n">irb</span>
</span><span class="line"><span class="o">&gt;&gt;</span> <span class="nb">require</span> <span class="s1">&#39;bundler/setup&#39;</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class="line"><span class="o">&gt;&gt;</span> <span class="no">Rails</span><span class="o">.</span><span class="n">version</span>
</span><span class="line"><span class="ss">NameError</span><span class="p">:</span> <span class="n">uninitialized</span> <span class="n">constant</span> <span class="no">Rails</span>
</span><span class="line">        <span class="n">from</span> <span class="p">(</span><span class="n">irb</span><span class="p">):</span><span class="mi">2</span>
</span><span class="line">        <span class="n">from</span> <span class="sr">/Users/</span><span class="n">wendi</span><span class="o">/.</span><span class="n">rvm</span><span class="o">/</span><span class="n">rubies</span><span class="o">/</span><span class="n">ruby</span><span class="o">-</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">p353</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="ss">irb</span><span class="p">:</span><span class="mi">12</span><span class="ss">:in</span> <span class="s1">&#39;&lt;main&gt;&#39;</span>
</span><span class="line"><span class="o">&gt;&gt;</span> <span class="no">Bundler</span><span class="o">.</span><span class="n">require</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="o">[&lt;</span><span class="ss">Bundler</span><span class="p">:</span><span class="ss">:Dependency</span> <span class="n">type</span><span class="o">=</span><span class="ss">:runtime</span> <span class="nb">name</span><span class="o">=</span><span class="s2">&quot;rails&quot;</span> <span class="n">requirements</span><span class="o">=</span><span class="s2">&quot;= 4.1.6&quot;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="o">]</span>
</span><span class="line"><span class="o">&gt;&gt;</span> <span class="no">Rails</span><span class="o">.</span><span class="n">version</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="s2">&quot;4.1.6&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li><code>rails console</code></li>
</ul>

<p>Find, auto-require <em>Gemfile</em> gems and load Rails Application env.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="err">$</span> <span class="n">irb</span>
</span><span class="line"><span class="o">&gt;&gt;</span> <span class="nb">require</span> <span class="s1">&#39;bundler/setup&#39;</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class="line"><span class="o">&gt;&gt;</span> <span class="no">Rails</span><span class="o">.</span><span class="n">version</span>
</span><span class="line"><span class="ss">NameError</span><span class="p">:</span> <span class="n">uninitialized</span> <span class="n">constant</span> <span class="no">Rails</span>
</span><span class="line">        <span class="n">from</span> <span class="p">(</span><span class="n">irb</span><span class="p">):</span><span class="mi">2</span>
</span><span class="line">        <span class="n">from</span> <span class="sr">/Users/</span><span class="n">wendi</span><span class="o">/.</span><span class="n">rvm</span><span class="o">/</span><span class="n">rubies</span><span class="o">/</span><span class="n">ruby</span><span class="o">-</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="n">p353</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="ss">irb</span><span class="p">:</span><span class="mi">12</span><span class="ss">:in</span> <span class="s1">&#39;&lt;main&gt;&#39;</span>
</span><span class="line"><span class="o">&gt;&gt;</span> <span class="no">Bundler</span><span class="o">.</span><span class="n">require</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="o">[&lt;</span><span class="ss">Bundler</span><span class="p">:</span><span class="ss">:Dependency</span> <span class="n">type</span><span class="o">=</span><span class="ss">:runtime</span> <span class="nb">name</span><span class="o">=</span><span class="s2">&quot;rails&quot;</span> <span class="n">requirements</span><span class="o">=</span><span class="s2">&quot;= 4.1.6&quot;</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="o">]</span>
</span><span class="line"><span class="o">&gt;&gt;</span> <span class="no">Rails</span><span class="o">.</span><span class="n">version</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="s2">&quot;4.1.6&quot;</span>
</span><span class="line"><span class="o">&gt;&gt;</span> <span class="n">require_relative</span> <span class="s1">&#39;config/environment.rb&#39;</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Encryption in Ruby]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2014/11/20/encoding-and-encryption-in-ruby/"/>
    <updated>2014-11-20T00:53:44+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2014/11/20/encoding-and-encryption-in-ruby</id>
    <content type="html"><![CDATA[<h2 id="encode-and-decode">Encode and decode</h2>

<p>Use <strong>Base64</strong>. <a href="http://ruby-doc.org/stdlib-2.1.5/libdoc/base64/rdoc/Base64.html">API</a></p>

<ul>
  <li>Unreadable.</li>
  <li>Translates any binary data into purely printable characters. Eg. in HTTP transmission(MIME).</li>
  <li>Use <code>a-zA-Z0-9+/</code>. When encode URL, use <code>a-zA-Z0-9_-</code></li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;base64&#39;</span>
</span><span class="line">
</span><span class="line"><span class="no">Base64</span><span class="o">.</span><span class="n">encode64</span><span class="p">(</span><span class="s1">&#39;hello world&#39;</span><span class="p">)</span>
</span><span class="line"><span class="c1"># =&gt; &quot;aGVsbG8gd29ybGQ=\n&quot;</span>
</span><span class="line">
</span><span class="line"><span class="no">Base64</span><span class="o">.</span><span class="n">decode64</span><span class="p">(</span><span class="s2">&quot;aGVsbG8gd29ybGQ=</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class="line"><span class="c1"># =&gt; &quot;hello world&quot;</span>
</span><span class="line">
</span><span class="line"><span class="no">Base64</span><span class="o">.</span><span class="n">urlsafe_encode64</span><span class="p">(</span><span class="s1">&#39;hello world&#39;</span><span class="p">)</span>
</span><span class="line"><span class="c1"># =&gt; &quot;aGVsbG8gd29ybGQ=&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="secure-random-string">Secure Random String</h2>

<p>Use <strong>SecureRandom</strong>, an interface for secure random number generator. <a href="http://ruby-doc.org/stdlib-2.1.2/libdoc/securerandom/rdoc/SecureRandom.html">API</a></p>

<ul>
  <li>Generate session key in HTTP cookies.</li>
  <li>Generate OAuth nonce.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;securerandom&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Hex presentation.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># 10 is the length of random number to be generated.</span>
</span><span class="line"><span class="c1"># The resulting string has twice length.</span>
</span><span class="line"><span class="no">SecureRandom</span><span class="o">.</span><span class="n">hex</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class="line"><span class="c1"># =&gt; &quot;91a9e990d11e1b546b5a&quot;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Default is 16, resulting a 32 length string.</span>
</span><span class="line"><span class="no">SecureRandom</span><span class="o">.</span><span class="n">hex</span>
</span><span class="line"><span class="c1"># =&gt; &quot;263e8681a7241ca3dfb43e482f5a26b1&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Base64 presentation.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">SecureRandom</span><span class="o">.</span><span class="n">base64</span>
</span><span class="line"><span class="c1"># =&gt; &quot;0Wl1NAxZi+kk6JhJERKd/Q==&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="digest">Digest</h2>

<p>Use <strong>SHA</strong>(Secure Hash Algorithm) to generate digest and encrypt. <a href="http://ruby-doc.org/stdlib-2.1.0/libdoc/digest/rdoc/Digest.html">API</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;digest&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Binary presentation.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="ss">Digest</span><span class="p">:</span><span class="ss">:SHA1</span><span class="o">.</span><span class="n">digest</span> <span class="s1">&#39;hello world&#39;</span>
</span><span class="line"><span class="c1"># =&gt; &quot;*\xAEl5\xC9O\xCF\xB4\x15\xDB\xE9_@\x8B\x9C\xE9\x1E\xE8F\xED&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Hex presentation.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="ss">Digest</span><span class="p">:</span><span class="ss">:SHA1</span><span class="o">.</span><span class="n">hexdigest</span> <span class="s1">&#39;hello world&#39;</span>
</span><span class="line"><span class="c1"># =&gt; &quot;2aae6c35c94fcfb415dbe95f408b9ce91ee846ed&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Base64 presentation.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="ss">Digest</span><span class="p">:</span><span class="ss">:SHA1</span><span class="o">.</span><span class="n">base64digest</span> <span class="s1">&#39;hello world&#39;</span>
</span><span class="line"><span class="c1"># =&gt; &quot;Kq5sNclPz7QV2+lfQIuc6R7oRu0=&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Bubble-babble (recognizable and pronounceable) presentation</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;digest/bubblebabble&#39;</span>
</span><span class="line">
</span><span class="line"><span class="ss">Digest</span><span class="p">:</span><span class="ss">:SHA1</span><span class="o">.</span><span class="n">bubblebabble</span> <span class="s1">&#39;hello world&#39;</span>
</span><span class="line"><span class="c1"># =&gt; &quot;xepip-varaf-hodig-zefor-gyhyt-rupih-zubym-rulyv-nolov-micyv-taxyx&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Use <strong>SHA2</strong>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="ss">Digest</span><span class="p">:</span><span class="ss">:SHA256</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">(</span><span class="s1">&#39;hello world&#39;</span><span class="p">)</span>
</span><span class="line"><span class="c1"># =&gt; &quot;b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Use <strong>MD5</strong>.(<em>abandoned</em>)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="ss">Digest</span><span class="p">:</span><span class="ss">:MD5</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">(</span><span class="s1">&#39;hello world&#39;</span><span class="p">)</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="s2">&quot;5eb63bbbe01eeed093cb22bb8f5acdc3&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="hmac">HMAC</h2>

<p>Use <strong>OpenSSL::HMAC</strong>. <a href="http://ruby-doc.org/stdlib-2.1.2/libdoc/openssl/rdoc/OpenSSL/HMAC.html">API</a></p>

<p>Hash-based Message Authentication Code. </p>

<ol>
  <li>Generate digest message.</li>
  <li>Sign it.</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">key</span> <span class="o">=</span> <span class="s1">&#39;123456&#39;</span>
</span><span class="line"><span class="n">data</span> <span class="o">=</span> <span class="s1">&#39;hello world&#39;</span>
</span><span class="line"><span class="ss">OpenSSL</span><span class="p">:</span><span class="ss">:HMAC</span><span class="o">.</span><span class="n">digest</span><span class="p">(</span><span class="s1">&#39;sha1&#39;</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class="line"><span class="c1"># =&gt; &quot;Hs\xE8\v2\bv\xFE\xF9\x8B\xD5\x85zqF\xDBA \a\xC7&quot;</span>
</span><span class="line">
</span><span class="line"><span class="ss">OpenSSL</span><span class="p">:</span><span class="ss">:HMAC</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">(</span><span class="s1">&#39;sha1&#39;</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class="line"><span class="c1"># =&gt; &quot;4873e80b320876fef98bd5857a7146db412007c7&quot;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Use Base64 to encode</span>
</span><span class="line"><span class="no">Base64</span><span class="o">.</span><span class="n">encode64</span> <span class="ss">OpenSSL</span><span class="p">:</span><span class="ss">:HMAC</span><span class="o">.</span><span class="n">digest</span><span class="p">(</span><span class="s1">&#39;sha1&#39;</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
</span><span class="line"><span class="c1"># =&gt; &quot;SHPoCzIIdv75i9WFenFG20EgB8c=\n&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="symmetric-encryption-and-decryption">Symmetric Encryption and Decryption</h2>

<p>Use <strong>OpenSSL::Cipher</strong>. <a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/openssl/rdoc/OpenSSL/Cipher.html">API</a></p>

<p>List all supported algorithms.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="ss">OpenSSL</span><span class="p">:</span><span class="ss">:Cipher</span><span class="o">.</span><span class="n">ciphers</span>
</span><span class="line"><span class="c1"># =&gt; [</span>
</span><span class="line"><span class="c1">#  [  0] &quot;AES-128-CBC&quot;,</span>
</span><span class="line"><span class="c1">#  [  1] &quot;AES-128-CBC-HMAC-SHA1&quot;,</span>
</span><span class="line"><span class="c1">#  [  2] &quot;AES-128-CFB&quot;,</span>
</span><span class="line"><span class="c1">#  [  3] &quot;AES-128-CFB1&quot;,</span>
</span><span class="line"><span class="c1">#  ...</span>
</span><span class="line"><span class="c1"># ]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Encrytion.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">data</span> <span class="o">=</span> <span class="s1">&#39;hello world&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">cipher</span> <span class="o">=</span> <span class="ss">OpenSSL</span><span class="p">:</span><span class="ss">:Cipher</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;aes-128-cbc&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Choose a mode</span>
</span><span class="line"><span class="n">cipher</span><span class="o">.</span><span class="n">encrypt</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Choose a key</span>
</span><span class="line"><span class="n">key</span> <span class="o">=</span> <span class="n">cipher</span><span class="o">.</span><span class="n">random_key</span>
</span><span class="line"><span class="c1"># =&gt; &quot;8\f\x1F\xEA\x15T\xACM\x84Q\xD8o\xD3cxv&quot;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Choose an IV, a nonce</span>
</span><span class="line"><span class="n">iv</span> <span class="o">=</span> <span class="n">cipher</span><span class="o">.</span><span class="n">random_iv</span>
</span><span class="line"><span class="c1"># =&gt; &quot;$\xF8$1&gt;\xE8%!\x1D\xE1\x882\xAE\xDC\f\xE5&quot;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Finalization</span>
</span><span class="line"><span class="n">encrypted</span> <span class="o">=</span> <span class="n">cipher</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">+</span> <span class="n">cipher</span><span class="o">.</span><span class="n">final</span>
</span><span class="line"><span class="c1"># =&gt; &quot;^\x93\xDD\x11\xBC&gt;x\f\xE1\v\x19\xD7\xEF\xB6\xE5\x8D&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Decryption.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">decipher</span> <span class="o">=</span> <span class="ss">OpenSSL</span><span class="p">:</span><span class="ss">:Cipher</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;aes-128-cbc&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Choose a mode</span>
</span><span class="line"><span class="n">decipher</span><span class="o">.</span><span class="n">decrypt</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Setup key and IV</span>
</span><span class="line"><span class="n">decipher</span><span class="o">.</span><span class="n">key</span> <span class="o">=</span> <span class="n">key</span>
</span><span class="line"><span class="n">decipher</span><span class="o">.</span><span class="n">iv</span> <span class="o">=</span> <span class="n">iv</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Finalization</span>
</span><span class="line"><span class="n">plain</span> <span class="o">=</span> <span class="n">decipher</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">encrypted</span><span class="p">)</span> <span class="o">+</span> <span class="n">decipher</span><span class="o">.</span><span class="n">final</span>
</span><span class="line"><span class="c1"># =&gt; &quot;hello world&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Review] Design Patterns in Ruby]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2014/10/17/design-patterns-in-ruby/"/>
    <updated>2014-10-17T17:40:01+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2014/10/17/design-patterns-in-ruby</id>
    <content type="html"><![CDATA[<table class="custom">
  <tbody>
    <tr>
      <td><strong>Book</strong></td>
      <td>Design Patterns in Ruby</td>
    </tr>
    <tr>
      <td><strong>Author</strong></td>
      <td>Russ Olsen</td>
    </tr>
    <tr>
      <td><strong>Link</strong></td>
      <td><a href="http://designpatternsinruby.com/">designpatternsinruby.com</a></td>
    </tr>
  </tbody>
</table>

<ul id="markdown-toc">
  <li><a href="#meta-design-pattern">Meta Design Pattern</a></li>
  <li><a href="#about-design-pattern">About Design Pattern</a></li>
  <li><a href="#design-pattern-classification">Design Pattern Classification</a></li>
  <li><a href="#the-template-method">The Template Method</a>    <ul>
      <li><a href="#description">Description</a></li>
      <li><a href="#using-and-abusing">Using and Abusing</a></li>
      <li><a href="#in-the-wild">In the Wild</a></li>
    </ul>
  </li>
  <li><a href="#the-strategy">The Strategy</a>    <ul>
      <li><a href="#description-1">Description</a></li>
      <li><a href="#comparing-to-the-template-method">Comparing to the Template Method</a></li>
      <li><a href="#sharing-data-between-the-context-and-strategy">Sharing Data between the Context and Strategy</a></li>
      <li><a href="#using-and-abusing-1">Using and Abusing</a></li>
      <li><a href="#in-the-wild-1">In the Wild</a></li>
    </ul>
  </li>
  <li><a href="#the-observer">The Observer</a>    <ul>
      <li><a href="#description-2">Description</a></li>
      <li><a href="#code-usage">Code Usage</a></li>
      <li><a href="#interfaces-pull-or-push">Interfaces. Pull or Push?</a></li>
      <li><a href="#using-and-abusing-2">Using and Abusing</a></li>
      <li><a href="#in-the-wild-2">In the Wild</a></li>
    </ul>
  </li>
  <li><a href="#composite">Composite</a>    <ul>
      <li><a href="#description-3">Description</a></li>
      <li><a href="#code-usage-1">Code Usage</a></li>
      <li><a href="#concerns">Concerns</a></li>
      <li><a href="#using-and-abusing-3">Using and Abusing</a></li>
      <li><a href="#in-the-wild-3">In the Wild</a></li>
    </ul>
  </li>
  <li><a href="#the-iterator">The Iterator</a>    <ul>
      <li><a href="#description-4">Description</a></li>
      <li><a href="#internal-iterators-vs-external-iterators">Internal Iterators vs. External Iterators</a></li>
      <li><a href="#the-inimitable-enumerable">The Inimitable Enumerable</a></li>
      <li><a href="#using-and-abusing-4">Using and Abusing</a></li>
      <li><a href="#in-the-wild-4">In the Wild</a></li>
    </ul>
  </li>
  <li><a href="#the-command">The Command</a>    <ul>
      <li><a href="#description-5">Description</a></li>
      <li><a href="#keep-track-of-what-you-have-done">Keep Track of What You Have Done</a></li>
      <li><a href="#undo-or-redo">Undo or Redo</a></li>
      <li><a href="#queuing-up-commands">Queuing Up Commands</a></li>
      <li><a href="#using-and-abusing-5">Using and Abusing</a></li>
      <li><a href="#in-the-wild-5">In the Wild</a></li>
    </ul>
  </li>
  <li><a href="#the-adapter">The Adapter</a>    <ul>
      <li><a href="#description-6">Description</a></li>
      <li><a href="#adapt-or-modify">Adapt or Modify?</a></li>
      <li><a href="#using-and-abusing-6">Using and Abusing</a></li>
      <li><a href="#in-the-wild-6">In the Wild</a></li>
    </ul>
  </li>
  <li><a href="#the-proxy">The Proxy</a>    <ul>
      <li><a href="#description-7">Description</a></li>
      <li><a href="#the-protection-proxy">The Protection Proxy</a></li>
      <li><a href="#the-remove-proxy">The Remove Proxy</a></li>
      <li><a href="#the-virtual-proxy">The Virtual Proxy</a></li>
      <li><a href="#using-and-abusing-7">Using and Abusing</a></li>
      <li><a href="#in-the-wild-7">In the Wild</a></li>
    </ul>
  </li>
  <li><a href="#the-decorator">The Decorator</a>    <ul>
      <li><a href="#description-8">Description</a></li>
      <li><a href="#why-not-the-template-method">Why Not The Template Method?</a></li>
      <li><a href="#code-usage-2">Code Usage</a></li>
      <li><a href="#using-and-abusing-8">Using and Abusing</a></li>
      <li><a href="#in-the-wild-8">In the Wild</a></li>
      <li><a href="#adapter-proxy-or-decorator">Adapter, Proxy or Decorator</a></li>
    </ul>
  </li>
  <li><a href="#singleton">Singleton</a>    <ul>
      <li><a href="#code-usage-3">Code Usage</a></li>
      <li><a href="#alternatives">Alternatives</a></li>
      <li><a href="#using-and-abusing-9">Using and Abusing</a></li>
      <li><a href="#in-the-wild-9">In the Wild</a></li>
    </ul>
  </li>
  <li><a href="#factory">Factory</a>    <ul>
      <li><a href="#description-9">Description</a></li>
      <li><a href="#abstract-factory">Abstract Factory</a></li>
      <li><a href="#factory--abstract-factory">Factory &amp;&amp; Abstract Factory</a></li>
      <li><a href="#using-and-abusing-10">Using and Abusing</a></li>
      <li><a href="#in-the-wild-10">In the Wild</a></li>
    </ul>
  </li>
  <li><a href="#builder">Builder</a>    <ul>
      <li><a href="#description-10">Description</a></li>
      <li><a href="#code-usage-4">Code Usage</a></li>
      <li><a href="#builders-can-ensure-sane-objects">Builders Can Ensure Sane Objects</a></li>
      <li><a href="#resuable-buidlers">Resuable Buidlers</a></li>
      <li><a href="#better-builders-with-magic-methods">Better Builders with Magic Methods</a></li>
      <li><a href="#using-and-abusing-11">Using and Abusing</a></li>
      <li><a href="#in-the-wild-11">In the Wild</a></li>
    </ul>
  </li>
  <li><a href="#interpreter">Interpreter</a>    <ul>
      <li><a href="#description-11">Description</a></li>
      <li><a href="#with-a-parser">With a Parser</a></li>
      <li><a href="#without-a-parser">Without a Parser</a></li>
      <li><a href="#using-and-abusing-12">Using and Abusing</a></li>
      <li><a href="#in-the-wild-12">In the Wild</a></li>
    </ul>
  </li>
  <li><a href="#domain-specific-languages">Domain-Specific Languages</a>    <ul>
      <li><a href="#description-12">Description</a></li>
      <li><a href="#using-and-abusing-13">Using and Abusing</a></li>
      <li><a href="#in-the-wild-13">In the Wild</a></li>
    </ul>
  </li>
  <li><a href="#custom-objects">Custom Objects</a>    <ul>
      <li><a href="#custom-tailoring-technique">Custom-Tailoring Technique</a></li>
      <li><a href="#reflections">Reflections</a></li>
      <li><a href="#using-and-abusing-14">Using and Abusing</a></li>
    </ul>
  </li>
  <li><a href="#convention-over-configuration">Convention Over Configuration</a>    <ul>
      <li><a href="#description-13">Description</a></li>
      <li><a href="#using-and-abusing-15">Using and Abusing</a></li>
    </ul>
  </li>
  <li><a href="#reference">Reference</a></li>
</ul>

<h2 id="meta-design-pattern">Meta Design Pattern</h2>

<ul>
  <li>Seperate out the things that change from thos that stay the same.</li>
  <li>Program to an interface, not an implementation.</li>
  <li>Prefer composition over inheritance.</li>
  <li>Delegate, delegate, delegate.</li>
</ul>

<p>Others:</p>

<ul>
  <li>YAGNI, You ain’t gonna need it.</li>
  <li>A pattern is not just about code: Intent is critical.</li>
</ul>

<p><strong>Seperate out the things that change from thos that stay the same.</strong></p>

<p>A key goal of software engineering is to build systems that allow us to contain the damage. In an ideal system, all changes are local.</p>

<p>You get there by separating the things that are likely to change from the things that are likely to stay the same. If you can identify which aspects of your system design are likely to change, you can isolate those bits from the more stable parts.</p>

<p>But how do you keep the changing parts from infecting the stable parts? <em>Program to an interface, not an implementation.</em></p>

<p><strong>Program to an interface, not an implementation.</strong></p>

<p>A good start is to write code that is less tightly coupled to itself in the first place.</p>

<p>The idea here is to program to the most general type you can.</p>

<p><strong>Prefer composition over inheritance.</strong></p>

<p>The trouble is that inheritance comes with some unhappy strings attached. When you create a subclass of an existing class, you are not really creating two separate entities: Instead, you are making two classes that are bound together by a common implementation core. Inheritance, by its very nature, tends to marry the subclass to the superclass.</p>

<p>If our goal is to build systems that are not tightly coupled together, to build systems where a single change does not ripple through the code like a sonic boom, breaking the glassware as it goes, then probably we should not rely on inheritance as much as we do.</p>

<p>We can assemble the behaviors we need through composition. In short, we try to avoid saying that an object is <em>a kind of</em> something and instead say that it <em>has</em> something.</p>

<p><strong>Delegate, delegate, delegate.</strong></p>

<p>The combination of composition and delegation is a powerful and flexible alternative to inheritance. We get most of the benefits of inheritance, much more flexibility, and none of the unpleasant side effects. Of course, nothing comes for free. Delegation requires an extra method call, as the delegating object passes the buck along. This extra method call will have some performance cost—but in most cases, it will be very minor.</p>

<p>Another cost of delegation is the boilerplate code you need to write.</p>

<p><strong>YAGNI, You ain’t gonna need it.</strong></p>

<p>You Ain’t Gonna Need It (YAGNI for short). The YAGNI principle says simply that you should not implement features, or design in flexibility, that you don’t need right now.</p>

<p>A well-designed system is one that will flex gracefully in the face of bug fixes, changing requirements, the ongoing march of technology, and inevitable redesigns. The YAGNI principle says that you should focus on the things that you need right now, building in only the flexibility that you know you need.</p>

<p>The use of design patterns has somehow become associated with a particularly virulent strain of over-engineering, with code that tries to be infinitely flexible at the cost of being understandable, and maybe even at the cost of just plain working. The proper use of design patterns is the art of making your system just flexible enough to deal with the problems you have today, but no more.</p>

<p>Your system will not work better because you used all 23 of the GoF design patterns in every possible combination. Your code will work better only if it focuses on the job it needs to do right now.</p>

<h2 id="about-design-pattern">About Design Pattern</h2>

<p>Background</p>

<blockquote>
  <p>In 1995, Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides set out to redirect all the effort going into building redundant software wheels into some- thing more useful. That year, building on the work of Christopher Alexander, Kent Beck, and others, they published Design Patterns: Elements of Reusable Object-Oriented Software. The book was an instant hit, with the authors rapidly becoming famous (at least in software engineering circles) as the Gang of Four (GoF).</p>
</blockquote>

<p>Focus on some key questions:</p>

<ul>
  <li>How do objects like the ones you tend to find in most systems relate to one another?</li>
  <li>How should they be coupled together?</li>
  <li>What should they know about each other?</li>
  <li>How can we swap out parts that are likely to change frequently?</li>
</ul>

<p>It’s commonly agreed that the most useful thing about patterns is the way in which they form a vocabulary for articulating design decisions during the normal course of development conversations among programmers.</p>

<p>Design patterns are little spring-loaded solutions to common programming problems. And a reckless use of every design pattern on the menu to solve nonexistent problems gives design patterns a bad name in some circles.</p>

<p><strong>With Ruby</strong></p>

<p>With Ruby, we no longer need to pull out relatively heavyweight design patterns to solve tiny problems. Instead, Ruby allows you to do simple things simply. </p>

<ul>
  <li>
    <p>Like a Command object in the GoF sense is essentially a wrapper around some code that knows how to do one specific thing, to run a particular bit of code at some time. Of course, that is also a fairly accurate description of a Ruby code block object or a <code>Proc</code>.</p>
  </li>
  <li>
    <p>Internal Domain Specific Languages. I believe that his treatment of the subject, as an evolution of the Interpreter pattern, is the first significant reference work in publication on the topic.</p>
  </li>
</ul>

<p>The Ruby programming language makes implementing patterns so easy that sometimes they fade into the background.</p>

<ul>
  <li>Ruby is dynamically typed.</li>
  <li>Ruby has code closures.</li>
  <li>Ruby classes are real objects.</li>
  <li>Ruby has an elegant system of code reuse.</li>
</ul>

<p>The traditional implementations of many design patterns work, but they make you work, too. Ruby allows you to concentrate on the real problems that you are trying to solve instead of the plumbing.</p>

<p>The increasing industry recognition of the value of dynamic and flexible languages such as Ruby has plunged us into yet another wisdom gap.</p>

<blockquote>
  <p>Design Patterns was published is the need for wisdom. </p>

  <p>Bruce Tate is fond of pointing out1 that when a new programming technique or language pops up, there is frequently a wisdom gap. The industry needs time to come to grips with the new technique, to figure out the best way to apply it. How many years had to elapse between the first realization that object- oriented programming was the way to go and the time when we really began to use object-oriented technology effectively? Those years were the object-oriented wisdom gap.</p>
</blockquote>

<h2 id="design-pattern-classification">Design Pattern Classification</h2>

<p><strong>Creational</strong> (5)</p>

<ul>
  <li>Factory Method</li>
  <li>Abstract Factory</li>
  <li>Builder</li>
  <li>Prototype</li>
  <li>Singleton</li>
</ul>

<p><strong>Structural</strong> (7)</p>

<ul>
  <li>Facade</li>
  <li>Adapter</li>
  <li>Proxy</li>
  <li>Decorator</li>
  <li>Bridge</li>
  <li>Composite</li>
  <li>Flyweight</li>
</ul>

<p><strong>Behavioural</strong> (11)</p>

<ul>
  <li>Template Method</li>
  <li>Observer</li>
  <li>State</li>
  <li>Strategy</li>
  <li>Chain of Responsibility</li>
  <li>Command</li>
  <li>Visitor</li>
  <li>Mediator</li>
  <li>Memento</li>
  <li>Iterator</li>
  <li>Interpreter</li>
</ul>

<h2 id="the-template-method">The Template Method</h2>

<p>Basic idea is <em>Seperate out the things that change from thos that stay the same.</em> </p>

<h3 id="description">Description</h3>

<p><img src="http://blog.ifyouseewendy.com/image-repo/template-method.png" alt="template-method" /></p>

<ol>
  <li>Extract the common part into an abstract base class</li>
  <li>Create some hook methods as the interface</li>
  <li>Let the subclass to implement it</li>
</ol>

<p>The Template Method pattern is simply a fancy way of saying that if you want to vary an algorithm, one way to do so is to code the invariant part in a base class and to encapsulate the variable parts in methods that are defined by a number of subclasses.</p>

<p>The abstract base class controls the higher-level processing through the template method; the sub-classes simply fill in the details.</p>

<p>Non-abstract methods that can be overridden in the concrete classes of the Template Method pattern are called <strong>hook methods</strong>.</p>

<p>Duck typing is a trade-off: You give up the compile-time safety of static typing, and in return you get back a lot of code clarity and programming flexibility.</p>

<h3 id="using-and-abusing">Using and Abusing</h3>

<p>The Template Method pattern is at its best when it is at its leanest—that is, when every abstract method and hook is there for a reason. Try to avoid creating a template class that requires each subclass to override a huge number of obscure methods just to cover every conceivable possibility. You also do not want to create a template class that is encrusted with a multitude of hook methods that no one will ever override.</p>

<h3 id="in-the-wild">In the Wild</h3>

<p>There is another very common example of the Template Method pattern that is perhaps so pervasive that it is hard to see. Think about the <code>initialize</code> method that we use to set up our objects. All we know about <code>initialize</code> is that it is called sometime toward the end of the process of creating a new object instance and that it is a method that we can override in our class to do any specific initialization. Sounds like a hook method to me.</p>

<p><code>Class#new</code> calls <code>allocate</code> first, then <code>initialise</code>. Every class inherits the <code>new</code> method, and defines its own concrete <code>initialise</code> method. So, we can treat <code>Class#new</code> as a template method, and <code>initialise</code> as a hook method.</p>

<h2 id="the-strategy">The Strategy</h2>

<p>Basic idea is <em>Delegate, delegate, delegate</em> and <em>Prefer composition over inheritance</em>.</p>

<h3 id="description-1">Description</h3>

<p><img src="http://blog.ifyouseewendy.com/image-repo/strategy.png" alt="strategy" /></p>

<ol>
  <li>Pull the algorithm out into a seperate “strategy” object.</li>
  <li>All of the startegy objects support the same interface. </li>
  <li>Let the context choose.</li>
</ol>

<p>Given that all of the strategy objects look alike from the outside, the user of the strategy—called the <strong>context</strong> class by the GoF—can treat the strategies like interchangeable parts.</p>

<h3 id="comparing-to-the-template-method">Comparing to the Template Method</h3>

<p>The Template Method pattern is built around inheritance.</p>

<p>No matter how carefully you design your code, your subclasses are tangled up with their superclass: It is in the nature of the relationship. On top of this, inheritance-based techniques such as the Template Method pattern limit our runtime flexibility. Once we have selected a particular variation of the algorithm—in our example, once we have created an instance of HTMLReport—changing our mind is hard.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># The Template Method</span>
</span><span class="line"><span class="n">report</span> <span class="o">=</span> <span class="no">HTMLReport</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="n">report</span><span class="o">.</span><span class="n">output_report</span>
</span><span class="line"><span class="n">report</span> <span class="o">=</span> <span class="no">PlainTextReport</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="n">report</span><span class="o">.</span><span class="n">output_report</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Because the Strategy pattern is based on composition and delegation, rather than on inheritance, it is easy to switch strategies at runtime.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># The Strategy</span>
</span><span class="line"><span class="n">report</span> <span class="o">=</span> <span class="no">Report</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">HTMLFormatter</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span><span class="line"><span class="n">report</span><span class="o">.</span><span class="n">output_report</span>
</span><span class="line"><span class="n">report</span><span class="o">.</span><span class="n">formatter</span> <span class="o">=</span> <span class="no">PlainTextFormatter</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="n">report</span><span class="o">.</span><span class="n">output_report</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="sharing-data-between-the-context-and-strategy">Sharing Data between the Context and Strategy</h3>

<ol>
  <li><em>Pass in everything that the strategy needs as arguments when the context calls the methods on the strategy object.</em> The downside of doing things this way is that if there is a lot of complex data to pass between the context and the strategy, then, well, you are going to be passing a lot of complex data around without any guarantee that it will get used.</li>
  <li>Having the context object pass a reference to itself to the strategy object.</li>
</ol>

<h3 id="using-and-abusing-1">Using and Abusing</h3>

<p>Particular attention to the details of the interface between the context and the strategy as well as to the coupling between them. Remember, the Strategy pattern will do you little good if you couple the con- text and your first strategy so tightly together that you cannot wedge a second or a third strategy into the design.</p>

<h3 id="in-the-wild-1">In the Wild</h3>

<p>Ruby code blocks, which are essentially code wrapped up in an instant object (the Proc object), are wonderfully useful for creating quick, albeit simple, strategy objects.  </p>

<p>Use Proc as the lightweight strategy object. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Report</span>
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:text</span>
</span><span class="line">  <span class="kp">attr_accessor</span> <span class="ss">:formatter</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="o">&amp;</span><span class="n">formatter</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@title</span> <span class="o">=</span> <span class="s1">&#39;Monthly Report&#39;</span>
</span><span class="line">    <span class="vi">@text</span> <span class="o">=</span> <span class="o">[</span> <span class="s1">&#39;Things are going&#39;</span><span class="p">,</span> <span class="s1">&#39;really, really well.&#39;</span> <span class="o">]</span>
</span><span class="line">    <span class="vi">@formatter</span> <span class="o">=</span> <span class="n">formatter</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">output_report</span>
</span><span class="line">    <span class="vi">@formatter</span><span class="o">.</span><span class="n">call</span><span class="p">(</span> <span class="nb">self</span> <span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="the-observer">The Observer</h2>

<h3 id="description-2">Description</h3>

<p><img src="http://blog.ifyouseewendy.com/image-repo/observer.png" alt="observer" /></p>

<p>The aiming is to build a system that is highly integrated—that is, a system where every part is aware of the state of the whole.</p>

<p>The GoF called this idea of building a clean interface between the source of the news that some object has changed and the consumers of that news the Observer pattern. The class with the news is the <strong>subject</strong>, and the objects which are interested in getting the news are the <strong>observor</strong>.</p>

<blockquote>
  <p>It has always seemed to me that the Observer pattern is somewhat misnamed. While the observer object gets top billing—in fact, the only billing—it is actually the subject that does most of the work. It is the subject that is responsible for keeping track of the observers. It is also the subject that needs to inform the observers that a change has come down the pike.</p>
</blockquote>

<h3 id="code-usage">Code Usage</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Subject</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="vi">@observers</span><span class="o">=[]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">add_observer</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@observers</span> <span class="o">&lt;&lt;</span> <span class="n">observer</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">delete_observer</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@observers</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">notify_observers</span>
</span><span class="line">    <span class="vi">@observers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">observer</span><span class="o">|</span>
</span><span class="line">      <span class="n">observer</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Employee</span>
</span><span class="line">  <span class="kp">include</span> <span class="no">Subject</span>
</span><span class="line">
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:address</span>
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:salary</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span> <span class="nb">name</span><span class="p">,</span> <span class="n">title</span><span class="p">,</span> <span class="n">salary</span><span class="p">)</span>
</span><span class="line">   <span class="k">super</span><span class="p">()</span>
</span><span class="line">   <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class="line">   <span class="vi">@title</span> <span class="o">=</span> <span class="n">title</span>
</span><span class="line">   <span class="vi">@salary</span> <span class="o">=</span> <span class="n">salary</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">salary</span><span class="o">=</span><span class="p">(</span><span class="n">new_salary</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@salary</span> <span class="o">=</span> <span class="n">new_salary</span>
</span><span class="line">    <span class="n">notify_observers</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The Ruby standard library comes with a fine, prebuilt <a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/observer/rdoc/Observable.html">Observable</a> module that provides all of the support you need to make your object, well, observable.</p>

<p>With the observable module, the observable object must:</p>

<ol>
  <li>assert that it has <code>#changed</code></li>
  <li>call <code>#notify_observers</code></li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;observer&#39;</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Employee</span>
</span><span class="line">  <span class="kp">include</span> <span class="no">Observable</span>
</span><span class="line">
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:address</span>
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:salary</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span> <span class="nb">name</span><span class="p">,</span> <span class="n">title</span><span class="p">,</span> <span class="n">salary</span><span class="p">)</span>
</span><span class="line">   <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class="line">   <span class="vi">@title</span> <span class="o">=</span> <span class="n">title</span>
</span><span class="line">   <span class="vi">@salary</span> <span class="o">=</span> <span class="n">salary</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">salary</span><span class="o">=</span><span class="p">(</span><span class="n">new_salary</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@salary</span> <span class="o">=</span> <span class="n">new_salary</span>
</span><span class="line">    <span class="n">changed</span>
</span><span class="line">    <span class="n">notify_observers</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="interfaces-pull-or-push">Interfaces. Pull or Push?</h3>

<p>The key decisions that you need to make when implementing the Observer pattern all center on the interface between the subject and the observer.</p>

<p>Just have a single method in the observer whose only argument is the subject. The GoF term for this strategy is the <strong>pull</strong> method, because the observers have to pull whatever details about the change that they need out of the subject.</p>

<p>The other possibility—logically enough termed the <strong>push</strong> method—has the subject send the observers a lot of details about the change:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">observer</span><span class="o">.</span><span class="n">update_salary</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">old_salary</span><span class="p">,</span> <span class="n">new_salary</span><span class="p">)</span>
</span><span class="line"><span class="n">observer</span><span class="o">.</span><span class="n">update_title</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">old_title</span><span class="p">,</span> <span class="n">new_title</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The advantage in providing more details is that the observers do not have to work quite as hard to keep track of what is going on. The disadvantage of the push model is that if all of the observers are not interested in all of the details, then the work of passing the data around goes for naught.</p>

<h3 id="using-and-abusing-2">Using and Abusing</h3>

<p><em>The frequency and timing of the updates.</em> The subject class can help with all of this by avoiding broadcasting redundant updates. Just because some- one updates an object, it does not mean that anything really changed.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">salary</span><span class="o">=</span><span class="p">(</span><span class="n">new_salary</span><span class="p">)</span>
</span><span class="line">  <span class="n">old_salary</span> <span class="o">=</span> <span class="vi">@salary</span>
</span><span class="line">  <span class="vi">@salary</span> <span class="o">=</span> <span class="n">new_salary</span>
</span><span class="line">  <span class="k">if</span> <span class="n">old_salary</span> <span class="o">!=</span> <span class="n">new_salary</span>
</span><span class="line">    <span class="n">changed</span>
</span><span class="line">    <span class="n">notify_observers</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>The consistency of the subject as it informs its observers of changes.</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">fred</span> <span class="o">=</span> <span class="no">Employee</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Fred&quot;</span><span class="p">,</span> <span class="s2">&quot;Crane Operator&quot;</span><span class="p">,</span> <span class="mi">30000</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">fred</span><span class="o">.</span><span class="n">salary</span> <span class="o">=</span> <span class="mi">1000000</span>
</span><span class="line"><span class="c1"># Warning! Inconsistent state here!</span>
</span><span class="line"><span class="n">fred</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="s1">&#39;Vice President of Sales&#39;</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="c1"># Don&#39;t inform the observers just yet</span>
</span><span class="line"><span class="n">fred</span><span class="o">.</span><span class="n">salary</span> <span class="o">=</span> <span class="mi">1000000</span>
</span><span class="line"><span class="n">fred</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="s1">&#39;Vice President of Sales&#39;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Now inform the observers!</span>
</span><span class="line"><span class="n">fred</span><span class="o">.</span><span class="n">changes_complete</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>Badly behaved observers.</em> Like responds by raising an exception?</p>

<h3 id="in-the-wild-2">In the Wild</h3>

<p>Use Proc as Observers. Just use <code>call</code> as the interface when notifying observers.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Subject</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">notify_observers</span>
</span><span class="line">    <span class="vi">@observers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">observer</span><span class="o">|</span>
</span><span class="line">      <span class="n">observer</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>ActiveRecord::Observer has been deprecated from Rails 4.0, but we can still get the feature by the extracted gem. <a href="https://github.com/rails/rails-observers">rails-observers</a></p>

<h2 id="composite">Composite</h2>

<h3 id="description-3">Description</h3>

<p><img src="http://blog.ifyouseewendy.com/image-repo/composite.png" alt="composite" /></p>

<ol>
  <li><strong>component</strong>, a common interface or base class for all of your objects.</li>
  <li><strong>leaf</strong>, the class doing simple, indivisible building blocks of process.</li>
  <li><strong>composite</strong>, a component, also a higher-level object that is build from subcomponents.</li>
</ol>

<p>The GoF called the design pattern for our “<em>the sum acts like one of the parts</em>” situa- tion the Composite pattern. You will know that you need to use the Composite pattern when you are trying to build a hierarchy or tree of objects, and you do not want the code that uses the tree to constantly have to worry about whether it is dealing with a single object or a whole bushy branch of the tree. Once you grasp its <em>recursive nature</em>, the Composite pattern is really quite simple.</p>

<h3 id="code-usage-1">Code Usage</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">CompositeTask</span> <span class="o">&lt;</span> <span class="no">Task</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">    <span class="k">super</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@sub_tasks</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">add_sub_task</span><span class="p">(</span><span class="n">task</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@sub_tasks</span> <span class="o">&lt;&lt;</span> <span class="n">task</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">remove_sub_task</span><span class="p">(</span><span class="n">task</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@sub_tasks</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">task</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">get_time_required</span>
</span><span class="line">    <span class="n">time</span><span class="o">=</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span>
</span><span class="line">    <span class="vi">@sub_tasks</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">task</span><span class="o">|</span> <span class="n">time</span> <span class="o">+=</span> <span class="n">task</span><span class="o">.</span><span class="n">get_time_required</span><span class="p">}</span>
</span><span class="line">    <span class="n">time</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">MakeBatterTask</span> <span class="o">&lt;</span> <span class="no">CompositeTask</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="k">super</span><span class="p">(</span><span class="s1">&#39;Make batter&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="n">add_sub_task</span><span class="p">(</span> <span class="no">AddDryIngredientsTask</span><span class="o">.</span><span class="n">new</span> <span class="p">)</span>
</span><span class="line">    <span class="n">add_sub_task</span><span class="p">(</span> <span class="no">AddLiquidsTask</span><span class="o">.</span><span class="n">new</span> <span class="p">)</span>
</span><span class="line">    <span class="n">add_sub_task</span><span class="p">(</span> <span class="no">MixTask</span><span class="o">.</span><span class="n">new</span> <span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="concerns">Concerns</h3>

<p><strong><em>How to handle the difference between a composite and a leaf?</em></strong></p>

<p>The goal of the Composite pattern is to make the leaf objects <em>more or less</em> indistinguishable from the composite objects. But there is one unavoidable difference between a composite and a leaf: The composite has to manage its children, which probably means that it needs to have a method to get at the children and possibly methods to add and remove child objects. The leaf classes, of course, really do not have any children to manage; that is the nature of leafyness.</p>

<p>As I say, how you handle this decision is mostly a matter of taste: Make the leaf and composite classes different, or burden the leaf classes with embarrassing methods that they do not know how to handle. My own instinct is to leave the methods off of the leaf classes. Leaf objects cannot handle child objects, and we may as well admit it.</p>

<p><strong><em>How to traverse the tree structrue which the composite pattern make?</em></strong></p>

<p>Each composite object holds references to its subcomponents but the child compo- nents do not know a thing about their parents, it is easy to traverse the tree from the root to the leaves but hard to go the other way.</p>

<p>Add a parent reference in the component class.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Task</span>
</span><span class="line">  <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:parent</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class="line">    <span class="vi">@parent</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">CompositeTask</span> <span class="o">&lt;</span> <span class="no">Task</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">    <span class="k">super</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@sub_tasks</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">add_sub_task</span><span class="p">(</span><span class="n">task</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@sub_tasks</span> <span class="o">&lt;&lt;</span> <span class="n">task</span>
</span><span class="line">    <span class="n">task</span><span class="o">.</span><span class="n">parent</span> <span class="o">=</span> <span class="nb">self</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">remove_sub_task</span><span class="p">(</span><span class="n">task</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@sub_tasks</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">task</span><span class="p">)</span>
</span><span class="line">    <span class="n">task</span><span class="o">.</span><span class="n">parent</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="using-and-abusing-3">Using and Abusing</h3>

<p>The error that crops up so frequently with the Composite pattern is assuming that the tree is only one level deep—that is, assuming that all of the child components of a composite object are, in fact, leaf objects and not other composites.</p>

<p>Remember, the power of the Composite pattern is that it allows us to build arbi- trarily deep trees.</p>

<h3 id="in-the-wild-3">In the Wild</h3>

<h2 id="the-iterator">The Iterator</h2>

<h3 id="description-4">Description</h3>

<p>Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation.</p>

<p>Iterators in Ruby are a great example of what is right with the language. Instead of providing special-purpose external iterator objects for each aggregate class, Ruby relies on the very flexible idea of Proc objects and code blocks to build internal iterators.</p>

<p><strong>external iterator</strong>, the iterator is a separate object from the aggregate.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="err">#</span> <span class="n">in</span> <span class="n">java</span>
</span><span class="line"><span class="n">ArrayList</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">();</span>
</span><span class="line"><span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;red&quot;</span><span class="o">);</span>
</span><span class="line"><span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;green&quot;</span><span class="o">);</span>
</span><span class="line"><span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;blue&quot;</span><span class="o">);</span>
</span><span class="line"><span class="k">for</span><span class="o">(</span> <span class="n">Iterator</span> <span class="n">i</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span> <span class="n">i</span><span class="o">.</span><span class="na">hasNext</span><span class="o">();)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span> <span class="s">&quot;item: &quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">.</span><span class="na">next</span><span class="o">());</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>internal iterator</strong>, the code block-based iterators, all of the iterating action occurs inside the aggregate object.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># in ruby</span>
</span><span class="line"><span class="k">def</span> <span class="nf">for_each_element</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class="line">  <span class="n">i</span><span class="o">=</span> <span class="mi">0</span>
</span><span class="line">  <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">array</span><span class="o">.</span><span class="n">length</span>
</span><span class="line">    <span class="k">yield</span><span class="p">(</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">)</span>
</span><span class="line">    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="o">]</span>
</span><span class="line"><span class="n">for_each_element</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">element</span><span class="o">|</span> <span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;The element is </span><span class="si">#{</span><span class="n">element</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="internal-iterators-vs-external-iterators">Internal Iterators vs. External Iterators</h3>

<p>With Internal Iterator, the main advantage is simplicity and code clarity.</p>

<p>With External Iterator</p>

<ol>
  <li>
    <p>You have more flexibility on iteration control. With an external iterator, you won’t call <code>next</code> until you are good and ready for the next element. With an internal iterator, by contrast, the aggregate relentlessly pushes the code block to accept item after item.</p>

    <p><em>If you are trying to merge the contents of two sorted arrays into a single array that was itself sorte?</em></p>

    <p>the merge is actually fairly easy with an external iterator, simply create an iterator for the two input arrays and then merge the arrays by repeatedly pushing the smallest value from either of the iterators onto the output array.</p>
  </li>
  <li>
    <p>A second advantage of external iterators is that, because they are external, you can share them—you can pass them around to other methods and objects. Of course, this is a bit of a double-edged sword: You get the flexibility but you also have to know what you are doing. In particular, beware of multiple threads getting hold of a non-thread-safe external iterator.</p>
  </li>
</ol>

<h3 id="the-inimitable-enumerable">The Inimitable Enumerable</h3>

<p>To mix in <code>Enumerable</code>, you need only make sure that your internal iterator method is named <code>each</code> and that the individual elements that you are going to iterate over have a reasonable implementation of the <code>&lt;=&gt;</code> comparison operator. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Account</span>
</span><span class="line">  <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:balance</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">balance</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class="line">    <span class="vi">@balance</span> <span class="o">=</span> <span class="n">balance</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">&lt;=&gt;</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>
</span><span class="line">    <span class="n">balance</span> <span class="o">&lt;=&gt;</span> <span class="n">other</span><span class="o">.</span><span class="n">balance</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Portfolio</span>
</span><span class="line">  <span class="kp">include</span> <span class="no">Enumerable</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="vi">@accounts</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">each</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@accounts</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">add_account</span><span class="p">(</span><span class="n">account</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@accounts</span> <span class="o">&lt;&lt;</span> <span class="n">account</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">my_portfolio</span><span class="o">.</span><span class="n">any?</span> <span class="p">{</span><span class="o">|</span><span class="n">account</span><span class="o">|</span> <span class="n">account</span><span class="o">.</span><span class="n">balance</span> <span class="o">&gt;</span> <span class="mi">2000</span><span class="p">}</span>
</span><span class="line"><span class="n">my_portfolio</span><span class="o">.</span><span class="n">all?</span> <span class="p">{</span><span class="o">|</span><span class="n">account</span><span class="o">|</span> <span class="n">account</span><span class="o">.</span><span class="n">balance</span> <span class="o">&gt;</span> <span class="o">=</span> <span class="mi">10</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="using-and-abusing-4">Using and Abusing</h3>

<p>The main danger is this: What happens if the aggregate object changes while you are iterating through it?</p>

<p>You may use a shallow copy when initializing.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">ChangeResistantArrayIterator</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@array</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@index</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>A Ruby trick example.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">array</span><span class="o">=[</span><span class="s1">&#39;red&#39;</span><span class="p">,</span> <span class="s1">&#39;green&#39;</span><span class="p">,</span> <span class="s1">&#39;blue&#39;</span><span class="p">,</span> <span class="s1">&#39;purple&#39;</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="n">array</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span> <span class="n">color</span> <span class="o">|</span>
</span><span class="line">  <span class="nb">puts</span><span class="p">(</span><span class="n">color</span><span class="p">)</span>
</span><span class="line">  <span class="k">if</span> <span class="n">color</span> <span class="o">==</span> <span class="s1">&#39;green&#39;</span>
</span><span class="line">    <span class="n">array</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">color</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># red</span>
</span><span class="line"><span class="c1"># green</span>
</span><span class="line"><span class="c1"># purple</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>Finally, a multithreaded program is a particularly dangerous home for iterators.</em> You need to take all of the usual care to ensure that one thread does not rip the aggregate rug out from under your iterator.</p>

<h3 id="in-the-wild-4">In the Wild</h3>

<p><strong>IO</strong></p>

<p>The neat thing about the IO object is that it is amphibious—it does both internal and external iterators.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">f</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;names.txt&#39;</span><span class="p">)</span>
</span><span class="line"><span class="k">while</span> <span class="ow">not</span> <span class="n">f</span><span class="o">.</span><span class="n">eof?</span>
</span><span class="line">  <span class="nb">puts</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">readline</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line"><span class="n">f</span><span class="o">.</span><span class="n">close</span>
</span><span class="line">
</span><span class="line"><span class="n">f</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;names.txt&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">f</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">line</span><span class="o">|</span> <span class="nb">puts</span><span class="p">(</span><span class="n">line</span><span class="p">)}</span>
</span><span class="line"><span class="n">f</span><span class="o">.</span><span class="n">close</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Pathname</strong> <a href="http://ruby-doc.org/stdlib-2.1.0/libdoc/pathname/rdoc/Pathname.html">API</a></p>

<p>Pathname tries to offer one-stop shopping for all your directory and path manipulation needs.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">pn</span><span class="o">.</span><span class="n">each_filename</span> <span class="p">{</span><span class="o">|</span><span class="n">file</span><span class="o">|</span> <span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;File: </span><span class="si">#{</span><span class="n">file</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)}</span>
</span><span class="line"><span class="c1"># File: usr</span>
</span><span class="line"><span class="c1"># File: local</span>
</span><span class="line"><span class="c1"># File: lib</span>
</span><span class="line"><span class="c1"># File: ruby</span>
</span><span class="line"><span class="c1"># File: 1.8</span>
</span><span class="line">
</span><span class="line"><span class="n">pn</span><span class="o">.</span><span class="n">each_entry</span> <span class="p">{</span><span class="o">|</span><span class="n">entry</span><span class="o">|</span> <span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;Entry: </span><span class="si">#{</span><span class="n">entry</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)}</span>
</span><span class="line"><span class="c1"># Entry: .</span>
</span><span class="line"><span class="c1"># Entry: ..</span>
</span><span class="line"><span class="c1"># Entry: i686-linux</span>
</span><span class="line"><span class="c1"># Entry: shellwords.rb</span>
</span><span class="line"><span class="c1"># Entry: mailread.rb</span>
</span><span class="line"><span class="c1"># ...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>ObjectSpace</strong> <a href="http://www.ruby-doc.org/core-2.1.3/ObjectSpace.html">API</a></p>

<p>ObjectSpace provides a window into the complete universe of objects that exist within your Ruby interpreter. The fundamental iterator supplied by ObjectSpace is the <code>each_object</code> method. It iterates across all of the Ruby objects—everything that is loaded into your Ruby interpreter:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">ObjectSpace</span><span class="o">.</span><span class="n">each_object</span> <span class="p">{</span><span class="o">|</span><span class="n">object</span><span class="o">|</span> <span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;Object: </span><span class="si">#{</span><span class="n">object</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)}</span>
</span><span class="line">
</span><span class="line"><span class="c1"># If you supply the argument, each_object will iterate over only</span>
</span><span class="line"><span class="c1"># the instances of that class or module.</span>
</span><span class="line"><span class="no">ObjectSpace</span><span class="o">.</span><span class="n">each_object</span><span class="p">(</span><span class="no">Numeric</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;The number is </span><span class="si">#{</span><span class="n">n</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Try this execellent <code>subclasses_of</code> method:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">subclasses_of</span><span class="p">(</span><span class="n">superclass</span><span class="p">)</span>
</span><span class="line">  <span class="n">subclasses</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">
</span><span class="line">  <span class="no">ObjectSpace</span><span class="o">.</span><span class="n">each_object</span><span class="p">(</span><span class="no">Class</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="o">|</span>
</span><span class="line">    <span class="k">next</span> <span class="k">if</span> <span class="o">!</span><span class="n">k</span><span class="o">.</span><span class="n">ancestors</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">superclass</span><span class="p">)</span> <span class="o">||</span> <span class="n">superclass</span> <span class="o">==</span> <span class="n">k</span> <span class="o">||</span> <span class="n">k</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s1">&#39;::&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="n">subclasses</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">k</span><span class="o">.</span><span class="n">to_s</span><span class="p">)</span>
</span><span class="line">    <span class="n">subclasses</span> <span class="o">&lt;&lt;</span> <span class="n">k</span><span class="o">.</span><span class="n">to_s</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="n">subclasses</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">subclasses_of</span><span class="p">(</span><span class="no">Numeric</span><span class="p">)</span>
</span><span class="line"><span class="c1"># =&gt; [&quot;Complex&quot;, &quot;Rational&quot;, &quot;Bignum&quot;, &quot;Float&quot;, &quot;Fixnum&quot;, &quot;Integer&quot;]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="the-command">The Command</h2>

<h3 id="description-5">Description</h3>

<p><img src="http://blog.ifyouseewendy.com/image-repo/command.png" alt="command" /></p>

<p>The idea of factoring out the action code into its own object is the essence of the Command pattern.</p>

<p>The key thing about the Command pattern is that it separates the thought from the deed. When you use this pattern, you are no longer simply saying, “Do this”; instead, you are saying, “Remember how to do this,” and, sometime later, “Do that thing that I told you to remember.”</p>

<p>Command pattern can be useful in</p>

<ol>
  <li>Keeping track of what you need to do, or what you have already done</li>
  <li>Undo or redo</li>
  <li>Queuing up comands</li>
</ol>

<h3 id="keep-track-of-what-you-have-done">Keep Track of What You Have Done</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Command</span>
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:description</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">description</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@description</span> <span class="o">=</span> <span class="n">description</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">execute</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">CreateFile</span> <span class="o">&lt;</span> <span class="no">Command</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">contents</span><span class="p">)</span>
</span><span class="line">    <span class="k">super</span><span class="p">(</span><span class="s2">&quot;Create file: </span><span class="si">#{</span><span class="n">path</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@path</span> <span class="o">=</span> <span class="n">path</span>
</span><span class="line">    <span class="vi">@contents</span> <span class="o">=</span> <span class="n">contents</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">execute</span>
</span><span class="line">    <span class="n">f</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="vi">@path</span><span class="p">,</span> <span class="s2">&quot;w&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="vi">@contents</span><span class="p">)</span>
</span><span class="line">    <span class="n">f</span><span class="o">.</span><span class="n">close</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Use Composite</strong></p>

<p>When we are trying to keep track of what we are about to do—or have done—we will need a class to collect all of our commands. Hmm, a class that acts like a command, but really is just a front for a number of subcommands. Sounds like a composite:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">CompositeCommand</span> <span class="o">&lt;</span> <span class="no">Command</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="vi">@commands</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">add_command</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@commands</span> <span class="o">&lt;&lt;</span> <span class="n">cmd</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">execute</span>
</span><span class="line">    <span class="vi">@commands</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">cmd</span><span class="o">|</span> <span class="n">cmd</span><span class="o">.</span><span class="n">execute</span><span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">description</span>
</span><span class="line">    <span class="n">description</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span><span class="line">    <span class="vi">@commands</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">cmd</span><span class="o">|</span> <span class="n">description</span> <span class="o">+=</span> <span class="n">cmd</span><span class="o">.</span><span class="n">description</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">}</span>
</span><span class="line">    <span class="n">description</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">cmds</span> <span class="o">=</span> <span class="no">CompositeCommand</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="n">cmds</span><span class="o">.</span><span class="n">add_command</span><span class="p">(</span><span class="no">CreateFile</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;file1.txt&#39;</span><span class="p">,</span> <span class="s2">&quot;hello world</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">))</span>
</span><span class="line"><span class="n">cmds</span><span class="o">.</span><span class="n">add_command</span><span class="p">(</span><span class="no">CopyFile</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;file1.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;file2.txt&#39;</span><span class="p">))</span>
</span><span class="line"><span class="n">cmds</span><span class="o">.</span><span class="n">add_command</span><span class="p">(</span><span class="no">DeleteFile</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;file1.txt&#39;</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="n">cmds</span><span class="o">.</span><span class="n">execute</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="undo-or-redo">Undo or Redo</h3>

<p>Every undoable command that we create has two methods. Along with the usual <code>execute</code> method, which does the thing, we add an <code>unexecute</code> method, which undoes the same thing.</p>

<p>As delete a file maybe destructive, so we need to save the contents of the original file.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">DeleteFile</span> <span class="o">&lt;</span> <span class="no">Command</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class="line">    <span class="k">super</span> <span class="s2">&quot;Delete file: </span><span class="si">#{</span><span class="n">path</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="vi">@path</span> <span class="o">=</span> <span class="n">path</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">execute</span>
</span><span class="line">    <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="vi">@path</span><span class="p">)</span>
</span><span class="line">      <span class="vi">@contents</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="vi">@path</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">    <span class="n">f</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="vi">@path</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">unexecute</span>
</span><span class="line">    <span class="k">if</span> <span class="vi">@contents</span>
</span><span class="line">      <span class="n">f</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="vi">@path</span><span class="p">,</span><span class="s2">&quot;w&quot;</span><span class="p">)</span>
</span><span class="line">      <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="vi">@contents</span><span class="p">)</span>
</span><span class="line">      <span class="n">f</span><span class="o">.</span><span class="n">close</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Creating a file with CreateFile could be destructive, too: The file that we are trying to create might already exist and be overwritten as we create the new file. In a real system, we would need to deal with this possibility as well as with a host of issues related to file permissions and ownership. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">CreateFile</span> <span class="o">&lt;</span> <span class="no">Command</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">contents</span><span class="p">)</span>
</span><span class="line">    <span class="k">super</span> <span class="s2">&quot;Create file: </span><span class="si">#{</span><span class="n">path</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="vi">@path</span> <span class="o">=</span> <span class="n">path</span>
</span><span class="line">    <span class="vi">@contents</span> <span class="o">=</span> <span class="n">contents</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">execute</span>
</span><span class="line">    <span class="n">f</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="vi">@path</span><span class="p">,</span> <span class="s2">&quot;w&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="vi">@contents</span><span class="p">)</span>
</span><span class="line">    <span class="n">f</span><span class="o">.</span><span class="n">close</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">unexecute</span>
</span><span class="line">    <span class="no">File</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="vi">@path</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Finnaly, add an <code>unexecute</code> method to the <code>CompositeCommad</code> class.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">CompositeCommand</span> <span class="o">&lt;</span> <span class="no">Command</span>
</span><span class="line">  <span class="c1"># ...</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">unexecute</span>
</span><span class="line">    <span class="vi">@commands</span><span class="o">.</span><span class="n">reverse</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">cmd</span><span class="o">|</span> <span class="n">cmd</span><span class="o">.</span><span class="n">unexecute</span> <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># ...</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="queuing-up-commands">Queuing Up Commands</h3>

<blockquote>
  <p>For example, it frequently takes a minor computer-time eternity to connect to a database. If you need to perform a number of database operations over time, you sometimes face the unpleasant choice of (1) leaving the connection open for the whole time, thereby wasting a scarce resource, or (2) wasting the time it takes to open and close the connection for each operation.</p>
</blockquote>

<p>The Command pattern offers one way out of this kind of bind. Instead of performing each operation as a stand-alone task, you accumulate all of these commands in a list. Periodically, you can open a connection to the database, execute all of your commands, and flush out this list.</p>

<h3 id="using-and-abusing-5">Using and Abusing</h3>

<p>The key thing about the Command pattern is that it separates the thought from the deed. When you use this pattern, you are no longer simply saying, “Do this”; instead, you are saying, “Remember how to do this,” and, sometime later, “Do that thing that I told you to remember.” Make sure that you really need that complexity before you pull the Command pattern out of your bag of tricks.</p>

<p><strong>Creation Time versus Execution Time</strong></p>

<p>Assuming you really do need the Command pattern, to make it work you have to be sure that the initial thought is complete. You have to carefully think through the circumstances in which the command object will find itself when it is executed versus when it was created. Yes, this key file was open, and that vital object was initialized when I cre- ated the command. Will it all still be there for me when the command is executed?</p>

<h3 id="in-the-wild-5">In the Wild</h3>

<p><strong>ActiveRecord::Migration</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">CreateBookTable</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class="line">  <span class="c1"># execute</span>
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">up</span>
</span><span class="line">    <span class="n">create_table</span> <span class="ss">:books</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class="line">      <span class="n">t</span><span class="o">.</span><span class="n">column</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class="line">      <span class="n">t</span><span class="o">.</span><span class="n">column</span> <span class="ss">:author</span><span class="p">,</span> <span class="ss">:string</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># unexecute</span>
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">down</span>
</span><span class="line">    <span class="n">drop_table</span> <span class="ss">:books</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Madeleine</strong></p>

<p><a href="https://github.com/ghostganz/madeleine">repo</a></p>

<blockquote>
  <p>Imagine how slow your system would be if you had to write out a whole airport’s worth of seat assignments every time someone changed his or her mind and wanted that aisle seat after all.</p>
</blockquote>

<p>Madeleine is a transactional, high-performance, object persistence framework that does not need any object relational mapping for the simple reason that it does not use a relational database—or any other kind of database, for that matter. Instead, Madeleine relies on the Ruby Marshal package, a facility for converting live Ruby objects into bytes and for turning those bytes back into objects. Unfortunately, being able to marshal your objects to a file is not by itself a complete solution to application persistence.</p>

<p><a href="https://gist.github.com/ifyouseewendy/c0a3ec5da222779885f0">Example gist using Madeleine</a></p>

<h2 id="the-adapter">The Adapter</h2>

<h3 id="description-6">Description</h3>

<p>An adapter is an object that crosses the chasm between the interface that you have and the interface that you need.</p>

<p><img src="http://blog.ifyouseewendy.com/image-repo/adapter.png" alt="the adapter" /></p>

<p>The client expects the target to have a certain interface. But unknown to the client, the target object is really an adapter, and buried inside of the adapter is a reference to a second object, the adaptee, which actually per- forms the work.</p>

<h3 id="adapt-or-modify">Adapt or Modify?</h3>

<p>The choice of using an adapter or modifying the object really comes down to how well you understand the class in question and the issue of encapsulation.</p>

<p>Lean toward modifying the class in the following circumstances:</p>

<ul>
  <li>The modifications are simple and clear.</li>
  <li>You understand the class you are modifying and the way in which it is used.</li>
</ul>

<p>Lean toward an adapter solution in the following situations:</p>

<ul>
  <li>The interface mismatch is extensive and complex. </li>
  <li>You have no idea how this class works.</li>
</ul>

<p>Engineering is all about trade-offs. Adapters preserve encapsulation at the cost of some complexity. Modifying a class may buy you some simplification, but at the cost of tinkering with the plumbing.</p>

<h3 id="using-and-abusing-6">Using and Abusing</h3>

<p>One of the advantages that Ruby’s duck typing gives to adapter writers is that it allows us to create adapters that support only that part of the target interface that the client will actually use. Partially implemented adapters are something of a double-edged sword: On the one hand, it is very convenient to implement only what you absolutely need; on the other hand, your program can come to grief if the client decides to call a method that you didn’t think you needed.</p>

<h3 id="in-the-wild-6">In the Wild</h3>

<p><code>ActiveRecord</code> deals with all of these differences by defining a standardized interface, encapsulated in a class called <code>AbstractAdapter</code>. The <code>AbstractAdapter</code> class defines the interface to a database that is used throughout <code>ActiveRecord</code>. </p>

<p><code>AbstractAdapter</code> defines a standard method to execute a SQL select statement and return the results, called <code>select_all</code>. Each individual adapter implements the <code>select_all</code> method in terms of the API of the underlying database system.</p>

<h2 id="the-proxy">The Proxy</h2>

<h3 id="description-7">Description</h3>

<p><img src="http://blog.ifyouseewendy.com/image-repo/proxy.png" alt="the proxy" /></p>

<p>The Proxy pattern is essentially built around a little white lie. The counterfeit object, called the <strong>proxy</strong> by the GoF, has a reference to the real object, the <strong>subject</strong>, hidden inside. Whenever the client code calls a method on the proxy, the proxy simply forwards the request to the real object.</p>

<p>Inside the proxy is hidden a reference to the other, real object—an object that the GoF referred to as the subject.</p>

<p>Once we have a proxy, we have a place to stand squarely between the client and the real object. The proxy provides the ideal pinch point to exert control.</p>

<p>The proxy serves as a pinch point between the client and the subject:</p>

<ul>
  <li>“Is this operation authorized?” asks the protection proxy.</li>
  <li>“Does the subject actually live on this other machine?” asks the remote proxy. </li>
  <li>“Have I actually created the subject yet?” asks the virtual proxy. </li>
</ul>

<p>In short, the proxy controls access to the subject.</p>

<h3 id="the-protection-proxy">The Protection Proxy</h3>

<p>A proxy that controls access to the subject.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;etc&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">AccountProtectionProxy</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">real_account</span><span class="p">,</span> <span class="n">owner_name</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@subject</span> <span class="o">=</span> <span class="n">real_account</span>
</span><span class="line">    <span class="vi">@owner_name</span> <span class="o">=</span> <span class="n">owner_name</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">deposit</span><span class="p">(</span><span class="n">amount</span><span class="p">)</span>
</span><span class="line">    <span class="n">check_access</span>
</span><span class="line">    <span class="k">return</span> <span class="vi">@subject</span><span class="o">.</span><span class="n">deposit</span><span class="p">(</span><span class="n">amount</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">withdraw</span><span class="p">(</span><span class="n">amount</span><span class="p">)</span>
</span><span class="line">    <span class="n">check_access</span>
</span><span class="line">    <span class="k">return</span> <span class="vi">@subject</span><span class="o">.</span><span class="n">withdraw</span><span class="p">(</span><span class="n">amount</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">check_access</span>
</span><span class="line">    <span class="k">if</span> <span class="no">Etc</span><span class="o">.</span><span class="n">getlogin</span> <span class="o">!=</span> <span class="vi">@owner_name</span>
</span><span class="line">      <span class="k">raise</span> <span class="s2">&quot;Illegal access: </span><span class="si">#{</span><span class="no">Etc</span><span class="o">.</span><span class="n">getlogin</span><span class="si">}</span><span class="s2"> cannot access account.&quot;</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The advantage of using a proxy for protection is that it gives us a nice separation of concerns: The proxy worries about who is or is not allowed to do what. The only thing that the real bank account object need be concerned with is, well, the bank account.</p>

<p>By splitting the protection cleanly off from the workings of the real object, we can minimize the chance that any important information will inadvertently leak out through our protective shield.</p>

<h3 id="the-remove-proxy">The Remove Proxy</h3>

<p>You could hide the complexity behind a remote proxy, an object that lives on the client machine and looks, to the client code, just like the real BankAccount object. When a request comes in, the remote proxy goes through all the horror of pack- aging up the request, sending it over the network, waiting for a response, unpacking the response, and returning the answer to the unsuspecting client.</p>

<p>From the client’s point of view, it called a method on what it thought was the real BankAccount object and sometime later—perhaps an unusually long time later—the answer came back. This is how virtually all remote procedure call (RPC) systems work.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;soap/wsdlDriver&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">wsdl_url</span> <span class="o">=</span> <span class="s1">&#39;http://www.webservicex.net/WeatherForecast.asmx?WSDL&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">proxy</span> <span class="o">=</span> <span class="ss">SOAP</span><span class="p">:</span><span class="ss">:WSDLDriverFactory</span><span class="o">.</span><span class="n">new</span><span class="p">(</span> <span class="n">wsdl_url</span> <span class="p">)</span><span class="o">.</span><span class="n">create_rpc_driver</span>
</span><span class="line"><span class="n">weather_info</span> <span class="o">=</span> <span class="n">proxy</span><span class="o">.</span><span class="n">GetWeatherByZipCode</span><span class="p">(</span><span class="s1">&#39;ZipCode&#39;</span><span class="o">=&gt;</span><span class="s1">&#39;19128&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Once the proxy object is set up, the client code no longer has to worry about the fact that the service actually lives at www.webservicex.net. Instead, it simply calls GetWeatherByZipCode and leaves all of the network details to the proxy.</p>

<h3 id="the-virtual-proxy">The Virtual Proxy</h3>

<p>In a sense, the virtual proxy is the biggest liar of the bunch. It pretends to be the real object, but it does not even have a reference to the real object until the client code calls a method. Only when the client actually calls a method does the virtual proxy scurry off and create or otherwise get access to the real object.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">VirtualAccountProxy</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">starting_balance</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@starting_balance</span><span class="o">=</span><span class="n">starting_balance</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">deposit</span><span class="p">(</span><span class="n">amount</span><span class="p">)</span>
</span><span class="line">    <span class="n">s</span> <span class="o">=</span> <span class="n">subject</span>
</span><span class="line">    <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="n">deposit</span><span class="p">(</span><span class="n">amount</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">withdraw</span><span class="p">(</span><span class="n">amount</span><span class="p">)</span>
</span><span class="line">    <span class="n">s</span> <span class="o">=</span> <span class="n">subject</span>
</span><span class="line">    <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="n">withdraw</span><span class="p">(</span><span class="n">amount</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">balance</span>
</span><span class="line">    <span class="n">s</span> <span class="o">=</span> <span class="n">subject</span>
</span><span class="line">    <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="n">balance</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">subject</span>
</span><span class="line">    <span class="vi">@subject</span> <span class="o">||</span> <span class="p">(</span><span class="vi">@subject</span> <span class="o">=</span> <span class="no">BankAccount</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@starting_balance</span><span class="p">))</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>That approach tangles the proxy and the subject up a little more than we might like. We can improve on this strategy by applying a little of that Ruby code block magic:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">VirtualAccountProxy</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="o">&amp;</span><span class="n">creation_block</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@creation_block</span> <span class="o">=</span> <span class="n">creation_block</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># Other methods omitted ...</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">subject</span>
</span><span class="line">    <span class="vi">@subject</span> <span class="o">||</span> <span class="p">(</span><span class="vi">@subject</span> <span class="o">=</span> <span class="vi">@creation_block</span><span class="o">.</span><span class="n">call</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Leverage Ruby</strong></p>

<p>Use ghost method <code>method_missing</code> and dynamic dispatch <code>send</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">VirtualProxy</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="o">&amp;</span><span class="n">creation_block</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@creation_block</span> <span class="o">=</span> <span class="n">creation_block</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class="line">    <span class="n">s</span> <span class="o">=</span> <span class="n">subject</span>
</span><span class="line">    <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span> <span class="nb">name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">subject</span>
</span><span class="line">    <span class="vi">@subject</span> <span class="o">=</span> <span class="vi">@creation_block</span><span class="o">.</span><span class="n">call</span> <span class="k">unless</span> <span class="vi">@subject</span>
</span><span class="line">    <span class="vi">@subject</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">array</span> <span class="o">=</span> <span class="no">VirtualProxy</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span> <span class="p">}</span>
</span><span class="line"><span class="n">array</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;hello&#39;</span> <span class="n">array</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;out&#39;</span> <span class="n">array</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;there&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="using-and-abusing-7">Using and Abusing</h3>

<p>Overusing <code>method_missing</code>, like overusing inheritance, is a great way to obscure your code.</p>

<h3 id="in-the-wild-7">In the Wild</h3>

<p><strong>drb using a remote proxy</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># server</span>
</span><span class="line"><span class="k">class</span> <span class="nc">MathService</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;drb/drb&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">math_service</span><span class="o">=</span><span class="no">MathService</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="no">DRb</span><span class="o">.</span><span class="n">start_service</span><span class="p">(</span><span class="s2">&quot;druby://localhost:3030&quot;</span><span class="p">,</span> <span class="n">math_service</span><span class="p">)</span>
</span><span class="line"><span class="no">DRb</span><span class="o">.</span><span class="n">thread</span><span class="o">.</span><span class="n">join</span>
</span><span class="line">
</span><span class="line"><span class="c1"># client</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;drb/drb&#39;</span>
</span><span class="line"><span class="no">DRb</span><span class="o">.</span><span class="n">start_service</span>
</span><span class="line">
</span><span class="line"><span class="c1"># the client-side math_service is actually a remote proxy to the real</span>
</span><span class="line"><span class="c1"># math service, which is running inside the server-side Ruby interpreter.</span>
</span><span class="line"><span class="n">math_service</span> <span class="o">=</span> <span class="no">DRbObject</span><span class="o">.</span><span class="n">new_with_uri</span><span class="p">(</span><span class="s2">&quot;druby://localhost:3030&quot;</span><span class="p">)</span>
</span><span class="line"><span class="n">sum</span><span class="o">=</span><span class="n">math_service</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="the-decorator">The Decorator</h2>

<blockquote>
  <p>But what if you simply need to vary the responsibilities of an object? What do you do when sometimes your object needs to do a little more, but sometimes a little less?</p>
</blockquote>

<h3 id="description-8">Description</h3>

<p><img src="http://blog.ifyouseewendy.com/image-repo/decorator.png" alt="decorator" /></p>

<p>The ConcreteComponent is the “real” object, the object that implements the basic component functionality.</p>

<p>The Decorator pattern is a straightforward technique that you can use to assemble exactly the functionality that you need at runtime. The Decorator class has a reference to a Component—the next Component in the decorator chain—and it implements all of the methods of the Component type. </p>

<p>Each decorator supports the same core interface, but adds its own twist on that interface. The key implementation idea of the Decorator pattern is that the decorators are essentially shells: Each takes in a method call, adds its own special twist, and passes the call on to the next component in line. </p>

<p>The Decorator pattern lets you start with some basic functionality and layer on extra features, one decorator at a time.</p>

<h3 id="why-not-the-template-method">Why Not The Template Method?</h3>

<p>The trouble is that the inheritance-based approach requires you to come up with all possi- ble combinations of features up-front, at design time.</p>

<p><img src="http://blog.ifyouseewendy.com/image-repo/out-of-control-inheritance.png" alt="out-of-control inheritance" /></p>

<h3 id="code-usage-2">Code Usage</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">WriterDecorator</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">real_writer</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@real_writer</span> <span class="o">=</span> <span class="n">real_writer</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">write_line</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@real_writer</span><span class="o">.</span><span class="n">write_line</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">pos</span>
</span><span class="line">    <span class="vi">@real_writer</span><span class="o">.</span><span class="n">pos</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">rewind</span>
</span><span class="line">    <span class="vi">@real_writer</span><span class="o">.</span><span class="n">rewind</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">close</span>
</span><span class="line">    <span class="vi">@real_writer</span><span class="o">.</span><span class="n">close</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">NumberingWriter</span> <span class="o">&lt;</span> <span class="no">WriterDecorator</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">real_writer</span><span class="p">)</span>
</span><span class="line">    <span class="k">super</span><span class="p">(</span><span class="n">real_writer</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@line_number</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">write_line</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@real_writer</span><span class="o">.</span><span class="n">write_line</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@line_number</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">line</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@line_number</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">   <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">writer</span> <span class="o">=</span> <span class="no">NumberingWriter</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">SimpleWriter</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;final.txt&#39;</span><span class="p">))</span>
</span><span class="line"><span class="n">writer</span><span class="o">.</span><span class="n">write_line</span><span class="p">(</span><span class="s1">&#39;Hello out there&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Fowardable module</strong> <a href="http://www.ruby-doc.org/stdlib-2.0/libdoc/forwardable/rdoc/Forwardable.html">API</a></p>

<p>Ruby provides the <strong>Forwardable</strong> module provides delegation of specified methods to a designated object, using the methods <code>def_delegator</code> and <code>def_delegators</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;forwardable&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">WriterDecorator</span>
</span><span class="line">  <span class="kp">extend</span> <span class="no">Forwardable</span>
</span><span class="line">
</span><span class="line">  <span class="n">def_delegators</span> <span class="ss">:@real_writer</span><span class="p">,</span> <span class="ss">:write_line</span><span class="p">,</span> <span class="ss">:rewind</span><span class="p">,</span> <span class="ss">:pos</span><span class="p">,</span> <span class="ss">:close</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">real_writer</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@real_writer</span> <span class="o">=</span> <span class="n">real_writer</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The forwardable module is more of a precision weapon than the <code>method_missing</code> technique. But the <code>method_missing</code> technique really shines when you want to delegate large numbers of calls.</p>

<p><strong>Dynamic Alternatives - Wrapping Methods</strong></p>

<ul>
  <li>Around Alias</li>
  <li>Refinement Wrapper</li>
  <li>Prepended Wrapper</li>
</ul>

<p>Check <a href="http://blog.ifyouseewendy.com/blog/2014/06/03/metaprogrammingi-ruby/#method-wrapper">this</a>.</p>

<p><strong>Dynamic Alternatives - Decorating with Modules</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">w</span> <span class="o">=</span> <span class="no">SimpleWriter</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;out&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">w</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="no">NumberingWriter</span><span class="p">)</span>
</span><span class="line"><span class="n">w</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="no">TimeStampingWriter</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">w</span><span class="o">.</span><span class="n">write_line</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>With both of these techniques, it is hard to undo the decoration. Unwrapping an aliased method is likely to be tedious, and you simply cannot un-include a module.</p>

<h3 id="using-and-abusing-8">Using and Abusing</h3>

<ul>
  <li>The classic Decorator pattern is loved more by the folks who build the thing than by those who use it.</li>
  <li>One thing to keep in mind when implementing the Decorator pattern is that you need to keep the component interface simple.</li>
  <li>Another potential drawback of the Decorator pattern is the performance overhead associated with a long chain of decorators.</li>
  <li>Finally, one drawback of the method-aliasing technique for decorating objects is that it tends to make your code harder to debug.</li>
</ul>

<h3 id="in-the-wild-8">In the Wild</h3>

<p><strong><code>alias_method_chain</code> in ActiveSupport</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">write_line</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span><span class="line">  <span class="nb">puts</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">write_line_with_timestamp</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span><span class="line">  <span class="n">write_line_without_timestamp</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">new</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">line</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">alias_method_chain</span> <span class="ss">:write_line</span><span class="p">,</span> <span class="ss">:timestamp</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>alias_method_chain</code> method will rename the original <code>write_line</code> method to <code>write_line_without_timestamp</code> and rename <code>write_line_with_timestamp</code> to plain old <code>write_line</code>, essentially creating a chain of methods. The nice thing about <code>alias_method_chain</code> is that, as its name suggests, you can chain together a number of enhancing methods.</p>

<h3 id="adapter-proxy-or-decorator">Adapter, Proxy or Decorator</h3>

<p>They are all “<em>one object stands for another</em>”, and the basic idea is <em>Delegate, delegate, delegate</em>.</p>

<ul>
  <li><strong>The Adapter</strong> hides the fact that some object has the wrong interface by wrapping it with an object that has the right interface. </li>
  <li><strong>The Proxy</strong> also wraps another object, but not with the intent of changing the interface. Instead, the proxy has the same interface as the object that it is wrapping. The proxy isn’t there to tre; it is there to control. Proxies are good for tasks such as enforcing security, hiding the fact that an object really lives across the network, and delaying the creation of the real object until the last possible moment. </li>
  <li><strong>The Decorator</strong> enables you to layer features on to a basic object.</li>
</ul>

<h2 id="singleton">Singleton</h2>

<p>A singleton class has exactly one instance, and access to that one instance is available globally.</p>

<h3 id="code-usage-3">Code Usage</h3>

<ol>
  <li>Creating the class variable and initializing it with the singleton instance</li>
  <li>Creating the class-level <code>instance</code> method</li>
  <li>Make <code>new</code> private.</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">SimpleLogger</span>
</span><span class="line">  <span class="c1"># Lots of code deleted...</span>
</span><span class="line">
</span><span class="line">  <span class="vc">@@instance</span> <span class="o">=</span> <span class="no">SimpleLogger</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">instance</span>
</span><span class="line">    <span class="k">return</span> <span class="vc">@@instance</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># make sure there is only one</span>
</span><span class="line">  <span class="nb">private_class_method</span> <span class="ss">:new</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">logger1</span> <span class="o">=</span> <span class="no">SimpleLogger</span><span class="o">.</span><span class="n">instance</span>   <span class="c1"># Returns the logger</span>
</span><span class="line"><span class="n">logger2</span> <span class="o">=</span> <span class="no">SimpleLogger</span><span class="o">.</span><span class="n">instance</span>   <span class="c1"># Returns exactly the same logger</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Creating the singleton instance before you actually need it is called <em>eager instantiation</em>.</p>

<p><strong>Singleton module</strong> <a href="http://www.ruby-doc.org/stdlib-1.9.3/libdoc/singleton/rdoc/Singleton.html">API</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;singleton&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">SimpleLogger</span>
</span><span class="line">  <span class="kp">include</span> <span class="no">Singleton</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># Lots of code deleted...</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The Singleton module, waits until someone calls instance before it actually creates its singleton. This technique is known as <em>lazy instantiation</em>.</p>

<h3 id="alternatives">Alternatives</h3>

<p><strong>Global Variables and Constants</strong></p>

<ol>
  <li>If you use a global variable or a constant for this purpose, there is no way to delay the creation of the singleton object until you need it.</li>
  <li>Neither of these techniques does anything to prevent someone from creating a second or third instance of your supposedly singleton class.</li>
</ol>

<p><strong>Class and Module methods</strong></p>

<p>Lazy initialization remains and all of those <code>self.methods</code> and <code>@@variables</code> makes a strange feel.</p>

<h3 id="using-and-abusing-9">Using and Abusing</h3>

<p><strong>Don’t expect the Singleton module really prevent anything</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;singleton&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Manager</span>
</span><span class="line">  <span class="kp">include</span> <span class="no">Singleton</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">manage_resources</span>
</span><span class="line">    <span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;I am managing my resources&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Use <code>public_class_method</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">m</span> <span class="o">=</span> <span class="no">Manager</span><span class="o">.</span><span class="n">new</span> <span class="c1"># =&gt; private method &#39;new&#39; called for Manager:Class</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Manager</span>
</span><span class="line">  <span class="nb">public_class_method</span> <span class="ss">:new</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">m</span> <span class="o">=</span> <span class="no">Manager</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Use <code>clone</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">m</span> <span class="o">=</span> <span class="no">Manager</span><span class="o">.</span><span class="n">instance</span><span class="o">.</span><span class="n">close</span>
</span><span class="line"><span class="c1"># =&gt; TypeError: can&#39;t clone instance of singleton Manager</span>
</span><span class="line">
</span><span class="line"><span class="no">Foo</span> <span class="o">=</span> <span class="no">Manager</span><span class="o">.</span><span class="n">clone</span>
</span><span class="line"><span class="no">Foo</span><span class="o">.</span><span class="n">instance</span><span class="o">.</span><span class="n">manage_resources</span>
</span><span class="line"><span class="c1"># =&gt; I am managing my resources</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The Ruby philosophy is that if you decide to circumvent the very clear intent of the author of the ClassBasedLogger class by cloning it, the language is there to help you out. You are in the driver’s seat, not the language. By keeping almost everything open to modification, Ruby allows you to do the things that you say you want to do—but it is up to you to say the right things.</p>

<p><strong>Coupling concern</strong></p>

<p>Create a singleton, and you have just made it possible for widely separated bits of your program to use that singleton as a secret channel to communicate with each other and, in the process, tightly couple themselves to each other. The horrible consequences of this coupling are why software engineering got out of the global variable business in the first place.</p>

<p>There is only one solution to this problem: <em>Don’t do that</em>.</p>

<p><strong>Considering the count, Do I really only need one instance?</strong></p>

<p><strong>a Need-to-Know Basis</strong></p>

<p>Another mistake that many people make is to spread the knowledge of a class’s singleton-ness far and wide.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;singleton&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">DatabaseConnectionManager</span>
</span><span class="line">  <span class="kp">include</span> <span class="no">Singleton</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">get_connection</span>
</span><span class="line">    <span class="c1"># Return the database connection...</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>Which classes are actually aware that DatabaseConnectionManager is a singleton?</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">PreferenceManager</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="vi">@reader</span> <span class="o">=</span> <span class="no">PrefReader</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">    <span class="vi">@writer</span> <span class="o">=</span> <span class="no">PrefWriter</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">    <span class="vi">@preferences</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:display_splash</span><span class="o">=&gt;</span><span class="kp">false</span><span class="p">,</span> <span class="ss">:background_color</span><span class="o">=&gt;</span><span class="ss">:blue</span> <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">save_preferences</span>
</span><span class="line">    <span class="n">preferences</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class="line">    <span class="c1"># Preference are in</span>
</span><span class="line">    <span class="vi">@writer</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="vi">@preferences</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">get_preferences</span>
</span><span class="line">    <span class="vi">@preferences</span> <span class="o">=</span> <span class="vi">@reader</span><span class="o">.</span><span class="n">read</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">PrefWriter</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">write</span><span class="p">(</span><span class="n">preferences</span><span class="p">)</span>
</span><span class="line">    <span class="n">connection</span> <span class="o">=</span> <span class="no">DatabaseConnectionManager</span><span class="o">.</span><span class="n">instance</span><span class="o">.</span><span class="n">get_connection</span>
</span><span class="line">    <span class="c1"># Write the preferences out</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">PrefReader</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">read</span>
</span><span class="line">    <span class="n">connection</span> <span class="o">=</span> <span class="no">DatabaseConnectionManager</span><span class="o">.</span><span class="n">instance</span><span class="o">.</span><span class="n">get_connection</span>
</span><span class="line">    <span class="c1"># Read the preferences and return them...</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>A better approach might be to concentrate the knowledge that <code>DatabaseConnectionManager</code> is a singleton in the <code>PreferenceManager</code> class and simply pass it into the preference reader and writer:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">PreferenceManager</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="vi">@reader</span> <span class="o">=</span> <span class="no">PrefReader</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">    <span class="vi">@writer</span> <span class="o">=</span> <span class="no">PrefWriter</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">    <span class="vi">@preferences</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:display_splash</span><span class="o">=&gt;</span><span class="kp">false</span><span class="p">,</span> <span class="ss">:background_color</span><span class="o">=&gt;</span><span class="ss">:blue</span> <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">save_preferences</span>
</span><span class="line">    <span class="n">preferences</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class="line">    <span class="c1"># Preference are in</span>
</span><span class="line">    <span class="vi">@writer</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="no">DatabaseConnectionManager</span><span class="o">.</span><span class="n">instance</span><span class="p">,</span> <span class="vi">@preferences</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">get_preferences</span>
</span><span class="line">    <span class="vi">@preferences</span> <span class="o">=</span> <span class="vi">@reader</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="no">DatabaseConnectionManager</span><span class="o">.</span><span class="n">instance</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Test Interferes</strong></p>

<p>As the Singleton saves the state, there is one exceedingly nasty thing about the Singleton pattern is the way that it interferes with unit testing.</p>

<p>One way to deal with this problem is to create two classes: an ordinary (i.e., non-singleton) class that contains all of the code, and a subclass of the first class that is a singleton. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;singleton&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">SimpleLogger</span>
</span><span class="line">  <span class="c1"># All of the logging functionality in this class...</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">SingletonLogger</span> <span class="o">&lt;</span> <span class="no">SimpleLogger</span>
</span><span class="line">  <span class="kp">include</span> <span class="no">Singleton</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The actual application code uses the <code>SingletonLogger</code>, while the tests can use the plain old, non-singleton <code>Logger</code> class.</p>

<h3 id="in-the-wild-9">In the Wild</h3>

<p><strong>Inflections in ActiveSupport</strong></p>

<p>The <code>Inflections</code> class is a singleton, which saves space and ensures that the same inflection rules are available everywhere.</p>

<p><strong>Rake::Application in rake</strong> <a href="http://ruby-doc.org/stdlib-2.0/libdoc/rake/rdoc/Rake/Application.html">API</a></p>

<p>As it runs, rake—like most build tools—reads in information about what it needs to do: which directories to create, which files to copy, and so on.3 All of this information needs to be available to all of the moving parts of rake, so rake stores it all in a single object (the <code>Rake::Application</code> object, to be precise) that is available as a singleton to the entire rake program.</p>

<h2 id="factory">Factory</h2>

<blockquote>
  <p>picking the right class for the circumstances</p>
</blockquote>

<h3 id="description-9">Description</h3>

<p><img src="http://blog.ifyouseewendy.com/image-repo/factory.png" alt="factory" /></p>

<p>The GoF called this technique of pushing the “which class” decision down on a subclass the Factory Method pattern.</p>

<ul>
  <li>The <strong>creators</strong> are the base and concrete classes that contain the factory methods.</li>
  <li>The <strong>products</strong> are the objects being created.</li>
</ul>

<p>At its heart, this pattern is really just the Template Method pattern applied to the problem of creating new objects. In both the Factory Method pattern and the Template Method pattern, a generic part of the algorithm is coded in the generic base class, and subclasses fill in the blanks left in the base class.  </p>

<p><strong>Parameterized Factory Method</strong></p>

<p>Parameterized factory method is a method that can produce either a plant or an animal, depending on the symbol that is passed in:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Pond</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">number_animals</span><span class="p">,</span> <span class="n">number_plants</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@animals</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">    <span class="n">number_animals</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class="line">      <span class="n">animal</span> <span class="o">=</span> <span class="n">new_organism</span><span class="p">(</span><span class="ss">:animal</span><span class="p">,</span> <span class="s2">&quot;Animal</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class="line">      <span class="vi">@animals</span> <span class="o">&lt;&lt;</span> <span class="n">animal</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@plants</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">    <span class="n">number_plants</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class="line">      <span class="n">plant</span> <span class="o">=</span> <span class="n">new_organism</span><span class="p">(</span><span class="ss">:plant</span><span class="p">,</span> <span class="s2">&quot;Plant</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class="line">      <span class="vi">@plants</span> <span class="o">&lt;&lt;</span> <span class="n">plant</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">  <span class="c1"># ...</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">DuckWaterLilyPond</span> <span class="o">&lt;</span> <span class="no">Pond</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">new_organism</span><span class="p">(</span><span class="n">type</span><span class="p">,</span> <span class="nb">name</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="n">type</span> <span class="o">==</span> <span class="ss">:animal</span>
</span><span class="line">      <span class="no">Duck</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">    <span class="k">elsif</span> <span class="n">type</span> <span class="o">==</span> <span class="ss">:plant</span>
</span><span class="line">      <span class="no">WaterLily</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">      <span class="k">raise</span> <span class="s2">&quot;Unknown organism type: </span><span class="si">#{</span><span class="n">type</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">pond</span> <span class="o">=</span> <span class="no">DuckWaterLilyPond</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Claasses Are Just Objects, Too</strong></p>

<p>While the GoF concentrated on inheritance-based implementations of their fac- tories, we can get the same results with much less code by taking advantage of the fact that in Ruby, classes are just objects.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Pond</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">number_animals</span><span class="p">,</span> <span class="n">animal_class</span><span class="p">,</span>
</span><span class="line">                 <span class="n">number_plants</span><span class="p">,</span> <span class="n">plant_class</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@animal_class</span> <span class="o">=</span> <span class="n">animal_class</span>
</span><span class="line">    <span class="vi">@plant_class</span> <span class="o">=</span> <span class="n">plant_class</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@animals</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">    <span class="n">number_animals</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class="line">      <span class="n">animal</span> <span class="o">=</span> <span class="n">new_organism</span><span class="p">(</span><span class="ss">:animal</span><span class="p">,</span> <span class="s2">&quot;Animal</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class="line">      <span class="vi">@animals</span> <span class="o">&lt;&lt;</span> <span class="n">animal</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@plants</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">    <span class="n">number_plants</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class="line">      <span class="n">plant</span> <span class="o">=</span> <span class="n">new_organism</span><span class="p">(</span><span class="ss">:plant</span><span class="p">,</span> <span class="s2">&quot;Plant</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class="line">      <span class="vi">@plants</span> <span class="o">&lt;&lt;</span> <span class="n">plant</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">simulate_one_day</span>
</span><span class="line">    <span class="vi">@plants</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">plant</span><span class="o">|</span> <span class="n">plant</span><span class="o">.</span><span class="n">grow</span><span class="p">}</span>
</span><span class="line">    <span class="vi">@animals</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">animal</span><span class="o">|</span> <span class="n">animal</span><span class="o">.</span><span class="n">speak</span><span class="p">}</span>
</span><span class="line">    <span class="vi">@animals</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">animal</span><span class="o">|</span> <span class="n">animal</span><span class="o">.</span><span class="n">eat</span><span class="p">}</span>
</span><span class="line">    <span class="vi">@animals</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">animal</span><span class="o">|</span> <span class="n">animal</span><span class="o">.</span><span class="n">sleep</span><span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">new_organism</span><span class="p">(</span><span class="n">type</span><span class="p">,</span> <span class="nb">name</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="n">type</span> <span class="o">==</span> <span class="ss">:animal</span>
</span><span class="line">      <span class="vi">@animal_class</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">    <span class="k">elsif</span> <span class="n">type</span> <span class="o">==</span> <span class="ss">:plant</span>
</span><span class="line">      <span class="vi">@plant_class</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">      <span class="k">raise</span> <span class="s2">&quot;Unknown organism type: </span><span class="si">#{</span><span class="n">type</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">pond</span> <span class="o">=</span> <span class="no">Pond</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="no">Duck</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="no">WaterLily</span><span class="p">)</span>
</span><span class="line"><span class="n">pond</span><span class="o">.</span><span class="n">simulate_one_day</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="abstract-factory">Abstract Factory</h3>

<p><img src="http://blog.ifyouseewendy.com/image-repo/abstract-factory.png" alt="abstract factory" /></p>

<p>An object dedicated to creating a compatible set of objects is called an abstract factory. </p>

<p>The problem is that you need to create sets of compatible objects. The solution is that you write a separate class to handle that creation.</p>

<p>The important thing about the abstract factory is that it encapsulates the knowledge of which product types go together. You can express that encapsulation with classes and subclasses, or you can get to it by storing the class objects as we did in the code above. Either way, you end up with an object that knows which kind of things belong together.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">PondOrganismFactory</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">new_animal</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">    <span class="no">Frog</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">new_plant</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">    <span class="no">Algae</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">JungleOrganismFactory</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">new_animal</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">    <span class="no">Tiger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">new_plant</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">    <span class="no">Tree</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Habitat</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">number_animals</span><span class="p">,</span> <span class="n">number_plants</span><span class="p">,</span> <span class="n">organism_factory</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@organism_factory</span> <span class="o">=</span> <span class="n">organism_factory</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@animals</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">    <span class="n">number_animals</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class="line">      <span class="n">animal</span> <span class="o">=</span> <span class="vi">@organism_factory</span><span class="o">.</span><span class="n">new_animal</span><span class="p">(</span><span class="s2">&quot;Animal</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class="line">      <span class="vi">@animals</span> <span class="o">&lt;&lt;</span> <span class="n">animal</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@plants</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">    <span class="n">number_plants</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class="line">      <span class="n">plant</span> <span class="o">=</span> <span class="vi">@organism_factory</span><span class="o">.</span><span class="n">new_plant</span><span class="p">(</span><span class="s2">&quot;Plant</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class="line">      <span class="vi">@plants</span> <span class="o">&lt;&lt;</span> <span class="n">plant</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">jungle</span> <span class="o">=</span> <span class="no">Habitat</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="no">JungleOrganismFactory</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span><span class="line"><span class="n">jungle</span><span class="o">.</span><span class="n">simulate_one_day</span>
</span><span class="line">
</span><span class="line"><span class="n">pond</span> <span class="o">=</span> <span class="no">Habitat</span><span class="o">.</span><span class="n">new</span><span class="p">(</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="no">PondOrganismFactory</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span><span class="line"><span class="n">pond</span><span class="o">.</span><span class="n">simulate_one_day</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Claasses Are Just Objects, Too</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">OrganismFactory</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">plant_class</span><span class="p">,</span> <span class="n">animal_class</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@plant_class</span> <span class="o">=</span> <span class="n">plant_class</span>
</span><span class="line">    <span class="vi">@animal_class</span> <span class="o">=</span> <span class="n">animal_class</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">new_animal</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@animal_class</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">new_plant</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@plant_class</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">jungle_organism_factory</span> <span class="o">=</span> <span class="no">OrganismFactory</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Tree</span><span class="p">,</span> <span class="no">Tiger</span><span class="p">)</span>
</span><span class="line"><span class="n">pond_organism_factory</span> <span class="o">=</span> <span class="no">OrganismFactory</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">WaterLily</span><span class="p">,</span> <span class="no">Frog</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">jungle</span> <span class="o">=</span> <span class="no">Habitat</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="n">jungle_organism_factory</span><span class="p">)</span>
</span><span class="line"><span class="n">jungle</span><span class="o">.</span><span class="n">simulate_one_day</span>
</span><span class="line"><span class="n">pond</span> <span class="o">=</span> <span class="no">Habitat</span><span class="o">.</span><span class="n">new</span><span class="p">(</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="n">pond_organism_factory</span><span class="p">)</span>
</span><span class="line"><span class="n">pond</span><span class="o">.</span><span class="n">simulate_one_day</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Naming</strong></p>

<p>Another way that we can simplify the implementation of abstract factories is to rely on a consistent naming convention for the product classes. </p>

<h3 id="factory--abstract-factory">Factory &amp;&amp; Abstract Factory</h3>

<ul>
  <li>The Factory Method pattern is really the Template Method pattern applied to object creation.</li>
  <li>the Abstract Factory pattern is simply the Strategy pattern applied to the same problem.</li>
</ul>

<h3 id="using-and-abusing-10">Using and Abusing</h3>

<p>Not every object needs to be produced by a factory. (<em>You Ain’t Goona Need It</em>).</p>

<p>Engineers do have a tendency to build the Queen Mary (or perhaps the Titanic?) when a canoe will suffice. If you have a choice of exactly one class at the moment, put off adding in a factory.</p>

<h3 id="in-the-wild-10">In the Wild</h3>

<p><strong>Base in ActiveRecord</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">adapter</span> <span class="o">=</span> <span class="s2">&quot;mysql&quot;</span>
</span><span class="line"><span class="n">method_name</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">adapter</span><span class="si">}</span><span class="s2">_connection&quot;</span>
</span><span class="line"><span class="no">Base</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="n">config</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="builder">Builder</h2>

<h3 id="description-10">Description</h3>

<p>Builder pattern, a pattern designed to help you configure those complex objects. The builder class takes charge of assembling all of the components of a complex object.</p>

<p><img src="http://blog.ifyouseewendy.com/image-repo/buidler.png" alt="builder" /></p>

<p>The client of the builder object the <strong>director</strong> because it directs the builder in the construction of the new object (called the <strong>product</strong>). Builders not only ease the burden of creating complex objects, but also hide the implementation details.</p>

<p>The idea behind the Builder pattern is that if your object is hard to build, if you have to write a lot of code to configure each object, then you should factor all of that creation code into a separate class, the builder.</p>

<p>The builders are less concerned about picking the right class and more focused on helping you configure your object.</p>

<ul>
  <li>Take control of configuring your object</li>
  <li>Prevent you from constructing an invalid object</li>
</ul>

<h3 id="code-usage-4">Code Usage</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">ComputerBuilder</span>
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:computer</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="vi">@computer</span> <span class="o">=</span> <span class="no">Computer</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">turbo</span><span class="p">(</span><span class="n">has_turbo_cpu</span><span class="o">=</span><span class="kp">true</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@computer</span><span class="o">.</span><span class="n">motherboard</span><span class="o">.</span><span class="n">cpu</span> <span class="o">=</span> <span class="no">TurboCPU</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">display</span><span class="o">=</span><span class="p">(</span><span class="nb">display</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@computer</span><span class="o">.</span><span class="n">display</span><span class="o">=</span><span class="nb">display</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">memory_size</span><span class="o">=</span><span class="p">(</span><span class="n">size_in_mb</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@computer</span><span class="o">.</span><span class="n">motherboard</span><span class="o">.</span><span class="n">memory_size</span> <span class="o">=</span> <span class="n">size_in_mb</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">add_cd</span><span class="p">(</span><span class="n">writer</span><span class="o">=</span><span class="kp">false</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@computer</span><span class="o">.</span><span class="n">drives</span> <span class="o">&lt;&lt;</span> <span class="no">Drive</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:cd</span><span class="p">,</span> <span class="mi">760</span><span class="p">,</span> <span class="n">writer</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">add_dvd</span><span class="p">(</span><span class="n">writer</span><span class="o">=</span><span class="kp">false</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@computer</span><span class="o">.</span><span class="n">drives</span> <span class="o">&lt;&lt;</span> <span class="no">Drive</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:dvd</span><span class="p">,</span> <span class="mi">4000</span><span class="p">,</span> <span class="n">writer</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">add_hard_disk</span><span class="p">(</span><span class="n">size_in_mb</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@computer</span><span class="o">.</span><span class="n">drives</span> <span class="o">&lt;&lt;</span> <span class="no">Drive</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:hard_disk</span><span class="p">,</span> <span class="n">size_in_mb</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">builder</span> <span class="o">=</span> <span class="no">ComputerBuilder</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="n">builder</span><span class="o">.</span><span class="n">turbo</span>
</span><span class="line"><span class="n">builder</span><span class="o">.</span><span class="n">add_cd</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span><span class="line"><span class="n">builder</span><span class="o">.</span><span class="n">add_dvd</span>
</span><span class="line"><span class="n">builder</span><span class="o">.</span><span class="n">add_hard_disk</span><span class="p">(</span><span class="mi">100000</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">computer</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="n">computer</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="builders-can-ensure-sane-objects">Builders Can Ensure Sane Objects</h3>

<p>That final “give me my object” method makes an ideal place to check that the configuration requested by the client really makes sense and that it adheres to the appropriate business rules.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">computer</span>
</span><span class="line">  <span class="k">raise</span> <span class="s2">&quot;Not enough memory&quot;</span> <span class="k">if</span> <span class="vi">@computer</span><span class="o">.</span><span class="n">motherboard</span><span class="o">.</span><span class="n">memory_size</span> <span class="o">&lt;</span> <span class="mi">250</span>
</span><span class="line">  <span class="k">raise</span> <span class="s2">&quot;Too many drives&quot;</span> <span class="k">if</span> <span class="vi">@computer</span><span class="o">.</span><span class="n">drives</span><span class="o">.</span><span class="n">size</span> <span class="o">&gt;</span> <span class="mi">4</span>
</span><span class="line">  <span class="n">hard_disk</span> <span class="o">=</span> <span class="vi">@computer</span><span class="o">.</span><span class="n">drives</span><span class="o">.</span><span class="n">find</span> <span class="p">{</span><span class="o">|</span><span class="n">drive</span><span class="o">|</span> <span class="n">drive</span><span class="o">.</span><span class="n">type</span> <span class="o">==</span> <span class="ss">:hard_disk</span><span class="p">}</span>
</span><span class="line">  <span class="k">raise</span> <span class="s2">&quot;No hard disk.&quot;</span> <span class="k">unless</span> <span class="n">hard_disk</span>
</span><span class="line">  <span class="vi">@computer</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="resuable-buidlers">Resuable Buidlers</h3>

<p>An important issue to consider when writing and using builders is whether you can use a single builder instance to create multiple objects. </p>

<p>One way to deal with this issue is to equip your builder with a <code>reset</code> method, which reinitializes the object under construction.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">LaptopBuilder</span>
</span><span class="line">  <span class="c1"># Lots of code omitted...</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">reset</span>
</span><span class="line">    <span class="vi">@computer</span> <span class="o">=</span> <span class="no">LaptopComputer</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The reset method will let you reuse the builder instance, but it also means that you have to start the configuration process all over again for each computer. If you want to perform the configuration once and then have the builder produce any number of objects based on that configuration, you need to store all of the configuration information in instance attributes and create the actual product only when the client asks for it.</p>

<h3 id="better-builders-with-magic-methods">Better Builders with Magic Methods</h3>

<p>Use ghost method <code>method_missing</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class="line">  <span class="n">words</span> <span class="o">=</span> <span class="nb">name</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;_&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="k">return</span> <span class="k">super</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span> <span class="k">unless</span> <span class="n">words</span><span class="o">.</span><span class="n">shift</span> <span class="o">==</span> <span class="s1">&#39;add&#39;</span>
</span><span class="line">  <span class="n">words</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">word</span><span class="o">|</span>
</span><span class="line">    <span class="k">next</span> <span class="k">if</span> <span class="n">word</span> <span class="o">==</span> <span class="s1">&#39;and&#39;</span>
</span><span class="line">    <span class="n">add_cd</span> <span class="k">if</span> <span class="n">word</span> <span class="o">==</span> <span class="s1">&#39;cd&#39;</span>
</span><span class="line">    <span class="n">add_dvd</span> <span class="k">if</span> <span class="n">word</span> <span class="o">==</span> <span class="s1">&#39;dvd&#39;</span>
</span><span class="line">    <span class="n">add_hard_disk</span><span class="p">(</span><span class="mi">100000</span><span class="p">)</span> <span class="k">if</span> <span class="n">word</span> <span class="o">==</span> <span class="s1">&#39;harddisk&#39;</span>
</span><span class="line">    <span class="n">turbo</span> <span class="k">if</span> <span class="n">word</span> <span class="o">==</span> <span class="s1">&#39;turbo&#39;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">builder</span><span class="o">.</span><span class="n">add_dvd_and_harddisk</span>
</span><span class="line"><span class="n">builder</span><span class="o">.</span><span class="n">add_turbo_and_dvd_and_harddisk</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="using-and-abusing-11">Using and Abusing</h3>

<p>It is usually fairly easy to spot code that is missing a builder: You can find the same object creation logic scat- tered all over the place. Another hint that you need a builder is when your code starts producing invalid objects.====</p>

<p>Builder pattern sometimes creeps up on you as your application becomes increasingly complex.</p>

<h3 id="in-the-wild-11">In the Wild</h3>

<h2 id="interpreter">Interpreter</h2>

<h3 id="description-11">Description</h3>

<p>Interpreter pattern, which suggests that sometimes the best way to solve a problem is to invent a new language for just that purpose. </p>

<p><img src="http://blog.ifyouseewendy.com/image-repo/interpreter.png" alt="Interpreter" /></p>

<p>The heart of the Interpreter pattern is the abstract syntax tree.</p>

<p>The GoF called such values or conditions supplied at the time the AST is interpreted the <code>context</code>.</p>

<ol>
  <li>The parser reads in the program text and produces a data structure, called an abstract syntax tree (AST).</li>
  <li>The AST is evaluated against some set of external conditions, or context, to produce the desired computation.</li>
</ol>

<blockquote>
  <p>ASTs are, in fact, specialized examples of the Composite pattern, with the nonterminal expressions playing the parts of the composites.</p>
</blockquote>

<p>You can supply your clients with an API for building up the tree in code, or you can write a parser that takes strings and turns them into the AST.</p>

<h3 id="with-a-parser">With a Parser</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Parser</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@tokens</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/\(|\)|[\w\.\*]+/</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">next_token</span>
</span><span class="line">    <span class="vi">@tokens</span><span class="o">.</span><span class="n">shift</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">expression</span>
</span><span class="line">    <span class="n">token</span> <span class="o">=</span> <span class="n">next_token</span>
</span><span class="line">    <span class="k">if</span> <span class="n">token</span> <span class="o">==</span> <span class="kp">nil</span>
</span><span class="line">      <span class="k">return</span> <span class="kp">nil</span>
</span><span class="line">    <span class="k">elsif</span> <span class="n">token</span> <span class="o">==</span> <span class="s1">&#39;(&#39;</span>
</span><span class="line">      <span class="n">result</span> <span class="o">=</span> <span class="n">expression</span>
</span><span class="line">      <span class="k">raise</span> <span class="s1">&#39;Expected )&#39;</span> <span class="k">unless</span> <span class="n">next_token</span> <span class="o">==</span> <span class="s1">&#39;)&#39;</span>
</span><span class="line">      <span class="n">result</span>
</span><span class="line">    <span class="k">elsif</span> <span class="n">token</span> <span class="o">==</span> <span class="s1">&#39;all&#39;</span>
</span><span class="line">      <span class="k">return</span> <span class="no">All</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">    <span class="k">elsif</span> <span class="n">token</span> <span class="o">==</span> <span class="s1">&#39;writable&#39;</span>
</span><span class="line">      <span class="k">return</span> <span class="no">Writable</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">    <span class="k">elsif</span> <span class="n">token</span> <span class="o">==</span> <span class="s1">&#39;bigger&#39;</span>
</span><span class="line">      <span class="k">return</span> <span class="no">Bigger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">next_token</span><span class="o">.</span><span class="n">to_i</span><span class="p">)</span>
</span><span class="line">    <span class="k">elsif</span> <span class="n">token</span> <span class="o">==</span> <span class="s1">&#39;filename&#39;</span>
</span><span class="line">      <span class="k">return</span> <span class="no">FileName</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">next_token</span><span class="p">)</span>
</span><span class="line">    <span class="k">elsif</span> <span class="n">token</span> <span class="o">==</span> <span class="s1">&#39;not&#39;</span>
</span><span class="line">      <span class="k">return</span> <span class="no">Not</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">expression</span><span class="p">)</span>
</span><span class="line">    <span class="k">elsif</span> <span class="n">token</span> <span class="o">==</span> <span class="s1">&#39;and&#39;</span>
</span><span class="line">      <span class="k">return</span> <span class="no">And</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="n">expression</span><span class="p">)</span>
</span><span class="line">    <span class="k">elsif</span> <span class="n">token</span> <span class="o">==</span> <span class="s1">&#39;or&#39;</span>
</span><span class="line">      <span class="k">return</span> <span class="no">Or</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="n">expression</span><span class="p">)</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">      <span class="k">raise</span> <span class="s2">&quot;Unexpected token: </span><span class="si">#{</span><span class="n">token</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">parser</span> <span class="o">=</span> <span class="no">Parser</span><span class="o">.</span><span class="n">new</span> <span class="s2">&quot;and (and(bigger 1024)(filename *.mp3)) writable&quot;</span>
</span><span class="line"><span class="n">ast</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">expression</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Let XML or YAML Do The Parsing</strong></p>

<p>Keep in mind that the main motivation behind building an interpreter is to give your users a natural way to express the kind of processing that needs to be done.</p>

<p><strong>Racc</strong></p>

<p>Racc is modeled (and named) after the venerable UNIX YACC utility. Racc takes as input a description of the grammar for your language and spits out a parser, written in Ruby for that language.</p>

<h3 id="without-a-parser">Without a Parser</h3>

<p>Internal Domain-Specifc Languages.</p>

<p>You may implement your Interpreter pattern in such a way that users could write their pro-grams in actual Ruby code. Maybe you could design your AST API in such a way that the code flows so naturally that your users might be unaware that they are, in fact, writing Ruby code.</p>

<h3 id="using-and-abusing-12">Using and Abusing</h3>

<ul>
  <li>The complexity issue. (The sheer number of components is why the Interpreter pattern is in practice limited to relatively simple languages.)</li>
  <li>Program efficiency, it is probably best to limit your use of the Interpreter pattern to areas that do not demand high performance.</li>
</ul>

<h3 id="in-the-wild-12">In the Wild</h3>

<p><strong>SQL</strong></p>

<p><strong>HTML</strong></p>

<p><strong>Ruby</strong>, of course, an interpreted language.</p>

<p><strong>regular expression</strong></p>

<h2 id="domain-specific-languages">Domain-Specific Languages</h2>

<h3 id="description-12">Description</h3>

<p>The DSL pattern suggests that you should focus on the language itself, not on the interpreter.</p>

<p>External DSLs are external in the sense that there is a parser and an interpreter for the DSL, and there are the programs written in the DSL.</p>

<p>An internal DSL, according to Fowler, is one in which we start with some implementation language, perhaps Ruby, and we simply bend that one language into being our DSL.</p>

<h3 id="using-and-abusing-13">Using and Abusing</h3>

<ol>
  <li>You are limited to what you can parse with a Ruby- based internal DSL.</li>
  <li>Error messages.</li>
</ol>

<h3 id="in-the-wild-13">In the Wild</h3>

<p>The most prominent example of a pure internal DSL in the Ruby world is probably rake, Ruby’s answer to ant or make. </p>

<p><strong>rake</strong>, Ruby’s answer to ant or make.</p>

<h2 id="custom-objects">Custom Objects</h2>

<p>Meta-programming certainly takes a different tack in producing the right object, at its heart this pattern focuses on leveraging the flexibility of Ruby.</p>

<ul>
  <li>We can start with a simple object and add individual methods or even whole modules full of methods to it. </li>
  <li>Using <code>class_eval</code>, we can generate completely new methods at runtime.</li>
  <li>We can take advantage of Ruby’s reflection facilities, which allow a program to examine its own structure</li>
</ul>

<p>A note:</p>

<blockquote>
  <p>The <code>attr_accessor</code> method and its friends live in the module <code>Module</code>, which is included by the <code>Object</code> class. If you go looking for the Ruby code for <code>attr_accessor</code>, <code>attr_reader</code>, and <code>attr_writer</code>, however, you are destined to be disappointed. For the sake of efficiency—but purely for efficiency—these methods are written in C.</p>
</blockquote>

<h3 id="custom-tailoring-technique">Custom-Tailoring Technique</h3>

<p>This custom-tailoring technique is particularly useful when you have lots of orthogonal features that you need to assemble into a single object.</p>

<p>Of course, there really is no rule that says you need to start your customizations with a plain-vanilla instance of Object. In real life, you will likely want to start with an instance of a class that provides some base level of functionality and then tweak the methods from there.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">new_animal</span><span class="p">(</span><span class="n">diet</span><span class="p">,</span> <span class="n">awake</span><span class="p">)</span>
</span><span class="line">  <span class="n">animal</span> <span class="o">=</span> <span class="no">Object</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">  <span class="k">if</span> <span class="n">diet</span> <span class="o">==</span> <span class="ss">:meat</span>
</span><span class="line">    <span class="n">animal</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="no">Carnivore</span><span class="p">)</span>
</span><span class="line">  <span class="k">else</span>
</span><span class="line">    <span class="n">animal</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="no">Herbivore</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>No matter whether you tailor your objects one method at a time or in module- sized chunks, the ultimate effect is to create a customized object, uniquely made to order for the requirements of the moment.</p>

<h3 id="reflections">Reflections</h3>

<blockquote>
  <p>If you are meta-programming new functionality into your classes on the fly, how can you tell what any given instance can do?</p>
</blockquote>

<p>Reflection features like <code>public_methods</code> and <code>respond_to?</code> are handy anytime but become real assets as you dive deeper and deeper into meta-programming, when what your objects can do depends more on their history than on their class.</p>

<h3 id="using-and-abusing-14">Using and Abusing</h3>

<p>Tests are absolutely mandatory for systems that use a lot of meta- programming.</p>

<h2 id="convention-over-configuration">Convention Over Configuration</h2>

<blockquote>
  <p>The common message is that you should not just take your lan- guage as you find it, but rather mold it into something closer to the tool that you need to solve the problem at hand.</p>
</blockquote>

<h3 id="description-13">Description</h3>

<p>The Convention Over Configuration pattern suggests that you define a convention that a sensible engineer might use anyway.</p>

<ul>
  <li>
    <p>Try to deduce how your users will behave.</p>
  </li>
  <li>
    <p>You can give your user a kick start by supplying him or her with a model, a template, or an example to follow. You could also supply a utility to generate the outline or <strong>scaffold</strong> of a class. It is easy to discount the value of this scaffold-generating script.</p>
  </li>
</ul>

<h3 id="using-and-abusing-15">Using and Abusing</h3>

<p>One danger in building convention-based systems is that your convention might be incomplete, thereby limiting the range of things that your system can do.</p>

<blockquote>
  <p>Our message gateway, for example, does not really do a thorough job of transforming host names into Ruby class names. The code in this chapter will work fine with a simple host name like <em>russolsen.com</em>, transforming it into <em>RussOlsenDotCom</em>. But feed our current system something like <em>icl-gis.co</em>m and it will go looking for the very illegal <em>Icl-gisDotComAuthorizer</em> class.</p>
</blockquote>

<p>Another potential source of trouble is the possibility that a system that uses a lot of conventions may seem like it is operating by magic to the new user. Configuration files may be a pain in the neck to write and maintain, but they do provide a sort of road map—perhaps a very complicated and hard-to-interpret road map, but a map nevertheless—to the inner workings of the system. A well-done convention-based system, by contrast, needs to supply its operational road map in the form of (gasp!) <strong>documentation</strong>.</p>

<p>Also keep in mind that as the convention magic becomes deeper and more complex, you will need ever more thorough unit tests to ensure that your conventions behave, well, conventionally. </p>

<h2 id="reference">Reference</h2>

<ul>
  <li><a href="https://github.com/nslocum/design-patterns-in-ruby">Examples from the book Design Patterns</a> by <a href="https://github.com/nslocum">Nick Slocum</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Things I Learn from Owning Rails Class]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2014/09/29/things-i-learnt-from-owning-rails-class/"/>
    <updated>2014-09-29T18:36:28+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2014/09/29/things-i-learnt-from-owning-rails-class</id>
    <content type="html"><![CDATA[<table class="custom">
  <tbody>
    <tr>
      <td><strong>Teacher</strong></td>
      <td><a href="http://macournoyer.com/">Marc-André Cournoy</a></td>
    </tr>
    <tr>
      <td><strong>Link</strong></td>
      <td><a href="http://owningrails.com/">Owning Rails</a></td>
    </tr>
  </tbody>
</table>

<p>I’ve participated Marc’s Owning Rails online class recently. AWESOME!</p>

<p>The class has two parts. Marc led us to build a minimal version of Rails on first day, Marc focused on the structure and design pattern behind Rails. Trully I think it’s a live version of <a href="http://blog.ifyouseewendy.com/blog/2014/09/27/rebuilding-rails/">Rebuilding Rails</a>, maybe you can read it as a substitution. Second day is the excellent part, took us diving into the real Rails source. Marc gave us a clear clue on what each part do and how they work, and also some practical introductions on how and where to keep on digging after class. </p>

<p>Beside professional, I should also mention that Marc is a really kind and patient guy.</p>

<p>Thanks a lot, Marc.</p>

<hr />

<p>Following are some specific questions I’ve noted on class.</p>

<p><strong><em>Is <code>yield</code> still available after passing <code>&amp;block</code>?</em></strong></p>

<p>yes.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class="line"><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">*</span>   <span class="nb">p</span> <span class="n">block</span>
</span><span class="line"><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">*</span>   <span class="k">yield</span>
</span><span class="line"><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">*</span> <span class="k">end</span>
</span><span class="line"><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">foo</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s1">&#39;foo&#39;</span> <span class="p">}</span>
</span><span class="line"><span class="c1">#&lt;Proc:0x000001053e7f28@(pry):6&gt;</span>
</span><span class="line"><span class="n">foo</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class="line"><span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="k">def</span> <span class="nf">bar</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class="line"><span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">*</span>   <span class="n">block</span><span class="o">.</span><span class="n">call</span>
</span><span class="line"><span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">*</span>   <span class="k">yield</span>
</span><span class="line"><span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">*</span> <span class="k">end</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class="line"><span class="o">[</span><span class="mi">6</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">bar</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s1">&#39;bar&#39;</span> <span class="p">}</span>
</span><span class="line"><span class="n">bar</span>
</span><span class="line"><span class="n">bar</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="kp">nil</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Passing block directly will omit the block-to-proc process, it can be more efficient.</p>

<p><strong><em>How to make bindings of block get understood in object, which differs the environment the block defines?</em></strong></p>

<blockquote>
  <p>When you define the block, it simply grabs the bindings that are there at that moment, and then it carries those bindings along when you pass the block into a method. </p>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="o">=</span><span class="k">class</span> <span class="nc">Router</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="vi">@routes</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">match</span><span class="p">(</span><span class="n">route</span><span class="p">)</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s1">&#39;#match from Router instance&#39;</span>
</span><span class="line">    <span class="vi">@routes</span><span class="o">.</span><span class="n">update</span> <span class="n">route</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="o">=</span>  <span class="k">def</span> <span class="nf">routes</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class="line">    <span class="k">yield</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">match</span><span class="p">(</span><span class="n">route</span><span class="p">)</span>
</span><span class="line">  <span class="nb">puts</span> <span class="s1">&#39;#match from main object&#39;</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="no">Router</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">routes</span> <span class="k">do</span>
</span><span class="line">  <span class="n">match</span> <span class="s1">&#39;/user&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;users#index&#39;</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># =&gt; #match in main object</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Use <code>instance_eval</code> to eval the new bindings.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">match</span><span class="p">(</span><span class="n">route</span><span class="p">)</span>
</span><span class="line">  <span class="nb">puts</span> <span class="s1">&#39;#match in main object&#39;</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Router</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">routes</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class="line">    <span class="nb">instance_eval</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="no">Router</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">routes</span> <span class="k">do</span>
</span><span class="line">  <span class="n">match</span> <span class="s1">&#39;/user&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;users#index&#39;</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># =&gt; match from Router instance</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong><em>Why using <code>::File</code> in <code>config.ru</code>?</em></strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># config.ru</span>
</span><span class="line">
</span><span class="line"><span class="nb">require</span> <span class="o">::</span><span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../config/environment&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class="line"><span class="n">run</span> <span class="no">Rails</span><span class="o">.</span><span class="n">application</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Actually the code above is defined in module Rack, where <code>Rack::File</code> already exists.</p>

<p><strong><em>How to use <code>include</code> to construct a method chain?</em></strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">A</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">foo</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s1">&#39;foo from A&#39;</span>
</span><span class="line">    <span class="k">super</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">module</span> <span class="nn">B</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">foo</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s1">&#39;foo from B&#39;</span>
</span><span class="line">    <span class="k">super</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Base</span>
</span><span class="line">  <span class="kp">include</span> <span class="n">A</span><span class="p">,</span> <span class="n">B</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">foo</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s1">&#39;foo from Base&#39;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="no">Base</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">foo</span>
</span><span class="line"><span class="c1"># =&gt; foo from Base</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>One way to solve is to use <code>prepend</code> instead of <code>include</code>, introduced by Ruby 2.0.</p>

<p>Considering the compatibility, Rails may not start to use it. Here is the Rails way to solve</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">A</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">foo</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s1">&#39;foo from A&#39;</span>
</span><span class="line">    <span class="k">super</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">module</span> <span class="nn">B</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">foo</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s1">&#39;foo from B&#39;</span>
</span><span class="line">    <span class="k">super</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Metal</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">foo</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s1">&#39;foo from Base&#39;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Base</span>
</span><span class="line">  <span class="kp">include</span> <span class="n">A</span><span class="p">,</span> <span class="n">B</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="no">Base</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">foo</span>
</span><span class="line"><span class="c1"># =&gt; foo from A</span>
</span><span class="line"><span class="c1"># =&gt; foo from B</span>
</span><span class="line"><span class="c1"># =&gt; foo from Base</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong><em>How instance variables shared betweet controller and view?</em></strong></p>

<p>One way is to use <code>instance_varialbles</code> and <code>instance_variable_set/get</code>, to passing instance varaibles defined in action to the view object.</p>

<p>The other way is passing <code>binding</code> directly.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">template</span> <span class="o">=</span> <span class="no">ERB</span><span class="o">.</span><span class="n">new</span><span class="p">(</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">()</span> <span class="p">)</span>
</span><span class="line"><span class="n">template</span><span class="o">.</span><span class="n">result</span><span class="p">(</span><span class="nb">binding</span><span class="p">)</span>
</span><span class="line"><span class="c1"># eval(template.src, binding)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong><em>Truth about binding</em></strong></p>

<ol>
  <li>
    <p><code>Binding.new</code> doesn’t work, you can only call <code>Kernel.binding</code> or <code>Proc#binding</code>.</p>
  </li>
  <li>
    <p>You can only use <code>binding</code> with <code>eval</code>. <code>eval('', binding)</code> or <code>binding.eval('')</code></p>
  </li>
</ol>

<p><strong><em>When we create custom middleware is it a good practise to add new keys and values to env variable to transfer it between middlewares?</em></strong></p>

<blockquote>
  <p>[02:35] &lt;wawka&gt; macournoyer: When we create custom middleware is it a good practise to add new keys and values to env variable to transfer it between middlewares ?<br />
[02:36] &lt;macournoyer&gt;  Rack specs recommend namespacing everything you put in the env var<br />
[02:36] &lt;macournoyer&gt; eg.: Rails will do env[“action_controller.request_id”] = “…” <br />
[02:36] &lt;macournoyer&gt; “action_controller.” is the namespace<br />
[02:36] &lt;wawka&gt; macournoyer: ok</p>
</blockquote>

<p><strong><em>How to check a gem’s dependency and dive into the source code?</em></strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>gem dep rails -v<span class="o">=</span>4.1.6
</span><span class="line">Gem rails-4.1.6
</span><span class="line">  actionmailer <span class="o">(=</span> 4.1.6<span class="o">)</span>
</span><span class="line">  actionpack <span class="o">(=</span> 4.1.6<span class="o">)</span>
</span><span class="line">  actionview <span class="o">(=</span> 4.1.6<span class="o">)</span>
</span><span class="line">  activemodel <span class="o">(=</span> 4.1.6<span class="o">)</span>
</span><span class="line">  activerecord <span class="o">(=</span> 4.1.6<span class="o">)</span>
</span><span class="line">  activesupport <span class="o">(=</span> 4.1.6<span class="o">)</span>
</span><span class="line">  bundler <span class="o">(</span>&lt; 2.0, &gt;<span class="o">=</span> 1.3.0<span class="o">)</span>
</span><span class="line">  railties <span class="o">(=</span> 4.1.6<span class="o">)</span>
</span><span class="line">  sprockets-rails <span class="o">(</span>~&gt; 2.0<span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="nv">$ </span>bundle open activerecord
</span><span class="line">
</span><span class="line"><span class="c"># open the latest version on system, a little bit dangerous </span>
</span><span class="line"><span class="nv">$ </span>gem edit activerecord
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong><em>How to get the source location of the method calling?</em></strong></p>

<p>In Rails, <em>guess</em> the logic part(activerecord, activesupport..) based on the method function, then use <code>bundle open</code> to dive in.</p>

<p>Ruby supports <code>Method#source_location</code>, <code>Proc#source_location</code> to provides some information, not accurate though. Use it like this</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># chech where defined respond_with</span>
</span><span class="line"><span class="k">raise</span> <span class="nb">method</span><span class="p">(</span><span class="ss">:respond_with</span><span class="p">)</span><span class="o">.</span><span class="n">source_location</span><span class="o">.</span><span class="n">inspect</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<hr />

<h3 id="other-stuffs">Other stuffs</h3>

<ol>
  <li>
    <p>Marc’s <a href="https://gist.github.com/macournoyer/1878273">gitconfig</a></p>
  </li>
  <li>
    <p>Don’t try to understand everything.</p>
  </li>
  <li>
    <p>Read concern, callbacks, core_ext and other ActiveSupport parts as a start.</p>
  </li>
  <li>
    <p>Nice word learnt, <strong>Base</strong>ics</p>
  </li>
  <li>
    <p>Try <code>mount</code> a rack-based app in Rails.</p>
  </li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Review] Rebuilding Rails]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2014/09/27/rebuilding-rails/"/>
    <updated>2014-09-27T14:48:48+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2014/09/27/rebuilding-rails</id>
    <content type="html"><![CDATA[<table class="custom">
  <tbody>
    <tr>
      <td><strong>Book</strong></td>
      <td>Rebuilding Rails</td>
    </tr>
    <tr>
      <td><strong>Author</strong></td>
      <td>Noah Gibbs</td>
    </tr>
    <tr>
      <td><strong>Link</strong></td>
      <td><a href="http://rebuilding-rails.com/">rebuilding-rails.com</a></td>
    </tr>
  </tbody>
</table>

<ul id="markdown-toc">
  <li><a href="#zero-to-it-works">1. Zero to “It Works!”</a></li>
  <li><a href="#your-first-controller">2. Your First Controller</a></li>
  <li><a href="#rails-automatic-loading">3. Rails Automatic Loading</a></li>
  <li><a href="#rendering-views">4. Rendering Views</a></li>
  <li><a href="#basic-models">5. Basic Models</a></li>
  <li><a href="#request-response">6. Request, Response</a></li>
  <li><a href="#the-littlest-orm">7. The Littlest ORM</a></li>
  <li><a href="#rack-middleware">8. Rack Middleware</a></li>
  <li><a href="#real-routing">9. Real Routing</a></li>
</ul>

<p>My re-building source code</p>

<ul>
  <li><a href="https://github.com/ifyouseewendy/rulers">rulers</a></li>
  <li><a href="https://github.com/ifyouseewendy/best_quotes">best_quotes</a></li>
</ul>

<p>Work flow diagram</p>

<p><img src="https://raw.githubusercontent.com/ifyouseewendy/best_quotes/master/rebuilding-rails.png" alt="img texrebuilding-rails" style="width:562px" /></p>

<h2 id="zero-to-it-works">1. Zero to “It Works!”</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">gem</span><span class="o">.</span><span class="n">add_development_dependency</span> <span class="s2">&quot;rspec&quot;</span>
</span><span class="line"><span class="n">gem</span><span class="o">.</span><span class="n">add_runtime_dependency</span> <span class="s2">&quot;rest-client&quot;</span>
</span><span class="line"><span class="n">gem</span><span class="o">.</span><span class="n">add_runtime_dependency</span> <span class="s2">&quot;some_gem&quot;</span><span class="p">,</span> <span class="s2">&quot;1.3.0&quot;</span>
</span><span class="line"><span class="n">gem</span><span class="o">.</span><span class="n">add_runtime_dependency</span> <span class="s2">&quot;other_gem&quot;</span><span class="p">,</span> <span class="s2">&quot;&gt;0.8.2&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Each of these adds a runtime dependency (needed to run the gem at all) or a development dependency (needed to develop or test the gem).</p>

<p>Youʼll need to go into the rulers directory and <code>git add .</code> before you rebuild the gem (<code>git add .; gem build rulers.gemspec; gem install rulers-0.0.1.gem</code>). Thatʼs because rulers.gemspec is actually calling git to find out what files to include in your gem.</p>

<p><strong>Rails structure</strong></p>

<ul>
  <li>
    <p><strong>ActiveSupport</strong> is a compatibility library including methods that aren’t necessarily specific to Rails. You’ll see ActiveSupport used by non-Rails libraries because it contains such a lot of useful baseline functionality. ActiveSupport includes methods like how Rails changes words from single to plural, or CamelCase to snake_case. It also includes significantly better time and date support than the Ruby standard library.</p>
  </li>
  <li>
    <p><strong>ActiveModel</strong> hooks into features of your models that aren’t really about the database - for instance, if you want a URL for a given model, ActiveModel helps you there. It’s a thin wrapper around many different ActiveModel implementations to tell Rails how to use them. Most commonly, ActiveModel implementations are ORMs (see ActiveRecord, below), but they can also use non-relational storage like MongoDB, Redis, Memcached or even just local machine memory.</p>
  </li>
  <li>
    <p><strong>ActiveRecord</strong> is an Object-Relational Mapper (ORM). That means that it maps between Ruby objects and tables in a SQL database. When you query from or write to the SQL database in Rails, you do it through ActiveRecord. ActiveRecord also implements ActiveModel. ActiveRecord supports MySQL and SQLite, plus JDBC, Oracle, PostgreSQL and many others.</p>
  </li>
  <li>
    <p><strong>ActionPack</strong> (<em>ActionDispatch, ActionController, Actionview</em>) does routing - the mapping of an incoming URL to a controller and action in Rails. It also sets up your controllers and views, and shepherds a request through its controller action and then through rendering the view. For some of it, ActionPack uses Rack. The template rendering itself is done through an external gem like Erubis for .erb templates, or Haml for .haml templates. ActionPack also handles action- or view-centered functionality like view caching.</p>
  </li>
  <li>
    <p><strong>ActionMailer</strong> is used to send out email, especially email based on templates. It works a lot like you’d hope Rails email would, with controllers, actions and “views” - which for email are text- based templates, not regular web-page templates.</p>
  </li>
</ul>

<h2 id="your-first-controller">2. Your First Controller</h2>

<p>Rails encapsulated the Rack information into a “request” object rather than just including the hash right into the controller. Thatʼs a good idea when you want to abstract it a bit – normalize values for certain variables, for instance, or read and set cookies to store session data.</p>

<h2 id="rails-automatic-loading">3. Rails Automatic Loading</h2>

<p>When debugging or printing error messages I like to use STDERR because itʼs a bit harder to redirect than a normal “puts” and so youʼre more likely to see it even when using a log file, background process or similar.</p>

<p>For simple structures, “inspect” shows them exactly as youʼd type them into Ruby – strings with quotes, numbers bare, symbols with a leading colon and so on.</p>

<p><strong>Reloading Means Convenience</strong></p>

<p><code>gem "rulers", :path =&gt; "../rulers"</code> This trick actually relies on deep Bundler trickery and requires you to always “bundle exec” before running things like rackup. If you forget that, it can look like the gem isnʼt there or (worse) look like an old version.</p>

<p><strong>CamelCase and snake_case</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># rulers/lib/rulers/util.rb</span>
</span><span class="line"><span class="k">module</span> <span class="nn">Rulers</span>
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">to_underscore</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class="line">    <span class="n">string</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/::/</span><span class="p">,</span> <span class="s1">&#39;/&#39;</span><span class="p">)</span><span class="o">.</span>
</span><span class="line">    <span class="nb">gsub</span><span class="p">(</span><span class="sr">/([A-Z]+)([A-Z][a-z])/</span><span class="p">,</span><span class="s1">&#39;\1_\2&#39;</span><span class="p">)</span><span class="o">.</span>
</span><span class="line">    <span class="nb">gsub</span><span class="p">(</span><span class="sr">/([a-z\d])([A-Z])/</span><span class="p">,</span><span class="s1">&#39;\1_\2&#39;</span><span class="p">)</span><span class="o">.</span>
</span><span class="line">    <span class="n">tr</span><span class="p">(</span><span class="s2">&quot;-&quot;</span><span class="p">,</span> <span class="s2">&quot;_&quot;</span><span class="p">)</span><span class="o">.</span>
</span><span class="line">    <span class="n">downcase</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># &#39;HTTPController&#39; -&gt; &#39;http_controller&#39;</span>
</span><span class="line"><span class="c1"># &#39;MD5Controller&#39; -&gt; &#39;md5_controller&#39;</span>
</span><span class="line"><span class="c1"># &#39;HomeController&#39; -&gt; &#39;home_controller&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Put it together</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># rulers/lib/rulers/dependencies.rb</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Object</span>
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">const_missing</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class="line">    <span class="nb">require</span> <span class="no">Rulers</span><span class="o">.</span><span class="n">to_underscore</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">to_s</span><span class="p">)</span>
</span><span class="line">    <span class="no">Object</span><span class="o">.</span><span class="n">const_get</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># rulers/lib/rulers/controller.rb</span>
</span><span class="line"><span class="k">def</span> <span class="nf">controller_name</span>
</span><span class="line">  <span class="n">klass</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">class</span>
</span><span class="line">  <span class="n">klass</span> <span class="o">=</span> <span class="n">klass</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">gsub</span> <span class="sr">/Controller$/</span><span class="p">,</span> <span class="s2">&quot;&quot;</span>
</span><span class="line">  <span class="no">Rulers</span><span class="o">.</span><span class="n">to_underscore</span> <span class="n">klass</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Did it work?</strong></p>

<p>When you load a file called whatever_class.rb, youʼre not actually guaranteed that it contains WhateverClass, or that the constant WhateverClass is actually a class. How would you check?</p>

<p>You might try calling const_get(:WhateverClass)… Except that you just made const_get try to load automatically. If you call it on an unloaded class inside the method call where you try to load, youʼll recurse forever and get a “stack level too deep” and a crash. So const_get isnʼt the full answer.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># rulers/lib/rulers/dependencies.rb</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Object</span>
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">const_missing</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="kp">nil</span> <span class="k">if</span> <span class="vi">@calling_const_missing</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@calling_const_missing</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class="line">    <span class="nb">require</span> <span class="no">Rulers</span><span class="o">.</span><span class="n">to_underscore</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">to_s</span><span class="p">)</span>
</span><span class="line">    <span class="n">klass</span> <span class="o">=</span> <span class="no">Object</span><span class="o">.</span><span class="n">const_get</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@calling_const_missing</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class="line">
</span><span class="line">    <span class="n">klass</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>But thereʼs a reason I say “hideously hacky.” Think about ways this could break. For instance – think about what would happen if you hit this in multiple threads at once. Oops!</p>

<p><strong>Re-re-reloading</strong></p>

<p><a href="https://github.com/alexch/rerun">rerun</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># best_quotes/Gemfile</span>
</span><span class="line"><span class="n">source</span> <span class="s1">&#39;https://rubygems.org&#39;</span>
</span><span class="line"><span class="n">gem</span> <span class="s1">&#39;rulers&#39;</span><span class="p">,</span> <span class="ss">:path</span> <span class="o">=&gt;</span> <span class="s2">&quot;../rulers&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class="line">  <span class="n">gem</span> <span class="s1">&#39;rerun&#39;</span>
</span><span class="line">  <span class="n">gem</span> <span class="s1">&#39;listen&#39;</span><span class="p">,</span> <span class="s1">&#39;=1.3.1&#39;</span> <span class="c1"># for older Ruby</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Running by <code>bundle exec rerun -- rackup -p 3001</code>. The “–” is an old Unix trick. It means “thatʼs all the arguments you get, the rest belong to somebody else.” Specifically, it tells rerun to ignore the “-p” later.</p>

<p><a href="https://github.com/rtomayko/shotgun">shotgun</a></p>

<p>reloading rack development server, forking version of rackup.</p>

<p><strong>In Rails</strong></p>

<ol>
  <li>
    <p><a href="https://github.com/rails/rails/blob/master/activesupport/lib/active_support/dependencies.rb">rails/activesupport/lib/active_support/dependencies.rb</a> Rails uses ActiveSupport for its const_missing support. Most of the code is installing a const_missing that can call through to non-Rails versions of const_missing in other classes, and can be removed or re-added and is appropriately modular. It also works hard to support nested modules like MyLibrary::SubModule::SomeClass.</p>
  </li>
  <li>
    <p><a href="http://urbanautomaton.com/blog/2013/08/27/rails-autoloading-hell/#fn1">Rails autoloading — how it works, and when it doesn’t</a> by Simon Coffey.</p>
  </li>
</ol>

<h2 id="rendering-views">4. Rendering Views</h2>

<p><strong>Erb and Erubis</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># some_directory/erb_test.rb</span>
</span><span class="line"><span class="nb">require</span> <span class="s2">&quot;erubis&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">template</span> <span class="o">=</span> <span class="o">&lt;&lt;</span><span class="no">TEMPLATE</span>
</span><span class="line"><span class="sh">Hello! This is a template.</span>
</span><span class="line"><span class="sh">It has &lt;%= whatever %&gt;.</span>
</span><span class="line"><span class="no">TEMPLATE</span>
</span><span class="line">
</span><span class="line"><span class="n">eruby</span> <span class="o">=</span> <span class="ss">Erubis</span><span class="p">:</span><span class="ss">:Eruby</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">template</span><span class="p">)</span>
</span><span class="line"><span class="nb">puts</span> <span class="n">eruby</span><span class="o">.</span><span class="n">src</span>
</span><span class="line"><span class="nb">puts</span> <span class="s2">&quot;==========&quot;</span>
</span><span class="line"><span class="nb">puts</span> <span class="n">eruby</span><span class="o">.</span><span class="n">result</span><span class="p">(</span><span class="ss">:whatever</span> <span class="o">=&gt;</span> <span class="s2">&quot;ponies!&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Run it with <code>ruby erb_test.rb</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">bash</span><span class="o">-</span><span class="mi">3</span><span class="o">.</span><span class="mi">2</span><span class="err">$</span> <span class="n">ruby</span> <span class="n">erb_test</span><span class="o">.</span><span class="n">rb</span>
</span><span class="line"><span class="n">_buf</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span> <span class="n">_buf</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;Hello!   This is a template. It has &#39;</span><span class="p">;</span>
</span><span class="line"><span class="n">_buf</span> <span class="o">&lt;&lt;</span> <span class="p">(</span> <span class="n">whatever</span> <span class="p">)</span><span class="o">.</span><span class="n">to_s</span><span class="p">;</span> <span class="n">_buf</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;.&#39;</span><span class="p">;</span>
</span><span class="line"><span class="n">_buf</span><span class="o">.</span><span class="n">to_s</span>
</span><span class="line"><span class="o">==========</span>
</span><span class="line"><span class="no">Hello</span><span class="o">!</span> <span class="no">This</span> <span class="n">is</span> <span class="n">a</span> <span class="n">template</span><span class="o">.</span>
</span><span class="line"><span class="no">It</span> <span class="n">has</span> <span class="n">ponies!</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The few lines starting with <code>_buf</code> are interesting. Erubis takes apart our string, appends it to <code>_buf</code> piece by piece, and adds the variables in as well after calling <code>.to_s</code> on them. Then it just returns <code>_buf</code>.</p>

<p><strong>Rack test example</strong></p>

<p><a href="https://github.com/brynary/rack-test">rack-test</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">require_relative</span> <span class="s2">&quot;test_helper&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">TestApp</span> <span class="o">&lt;</span> <span class="ss">Rulers</span><span class="p">:</span><span class="ss">:Application</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">get_controller_and_action</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class="line">    <span class="o">[</span><span class="no">TestController</span><span class="p">,</span> <span class="s2">&quot;index&quot;</span><span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">TestController</span> <span class="o">&lt;</span> <span class="ss">Rulers</span><span class="p">:</span><span class="ss">:Controlle</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">index</span>
</span><span class="line">    <span class="s2">&quot;Hello!&quot;</span>  <span class="c1"># Not rendering a view</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">RulersAppTest</span> <span class="o">&lt;</span> <span class="ss">Test</span><span class="p">:</span><span class="ss">:Unit</span><span class="o">::</span><span class="no">TestCase</span>
</span><span class="line"> <span class="kp">include</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:Test</span><span class="o">::</span><span class="no">Methods</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">app</span>
</span><span class="line">    <span class="no">TestApp</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">test_request</span>
</span><span class="line">    <span class="n">get</span> <span class="s2">&quot;/example/route&quot;</span>
</span><span class="line">    <span class="n">assert</span> <span class="n">last_response</span><span class="o">.</span><span class="n">ok?</span>
</span><span class="line">    <span class="n">body</span> <span class="o">=</span> <span class="n">last_response</span><span class="o">.</span><span class="n">body</span>
</span><span class="line">    <span class="n">assert</span> <span class="n">body</span><span class="o">[</span><span class="s2">&quot;Hello&quot;</span><span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Rake test example</strong></p>

<p>Rake actually ships with a “Rake::TestTask”.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># Rakefile</span>
</span><span class="line"><span class="nb">require</span> <span class="s2">&quot;bundler/gem_tasks&quot;</span>
</span><span class="line"><span class="nb">require</span> <span class="s2">&quot;rake/testtask&quot;</span>
</span><span class="line">
</span><span class="line"><span class="ss">Rake</span><span class="p">:</span><span class="ss">:TestTask</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class="line">  <span class="n">t</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;test&quot;</span>  <span class="c1"># this is the default</span>
</span><span class="line">  <span class="n">t</span><span class="o">.</span><span class="n">libs</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;test&quot;</span>  <span class="c1"># load the test dir</span>
</span><span class="line">  <span class="n">t</span><span class="o">.</span><span class="n">test_files</span> <span class="o">=</span> <span class="no">Dir</span><span class="o">[</span><span class="s1">&#39;test/*test*.rb&#39;</span><span class="o">]</span>
</span><span class="line">  <span class="n">t</span><span class="o">.</span><span class="n">verbose</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>A word of caution</em>: Rake will always run your tests by loading them into the same Ruby process, then running each one in turn. This is a lot faster than running them in individual processes, but it means that your tests can mess with each other in annoying ways. If you find yourself saying, “but I didnʼt set that global variable in this test!” think about whether some other test might have done it. For extra fun, the tests donʼt always run in any predictable order.</p>

<p><strong>In Rails</strong></p>

<p>Rails actually allows registering a number of different template engines at once with a number of different extensions so that Erb files are rendered with Erubis, but .haml files are rendered with the HAML templating engine.</p>

<p>You can find the top-level view code in <a href="https://github.com/rails/rails/blob/master/actionview/lib/action_view.rb">actionpack/lib/action_view.rb</a>, and the whole big chunk of Rails view code in actionpack/lib/action_view/. From there, look in <a href="https://github.com/rails/rails/blob/master/actionview/lib/action_view/template/handlers/erb.rb">template/handlers/erb.rb</a> for a pretty compact description of exactly how Rails uses Erubis to render Erb templates. You can see that most of the bulk of Railsʼ version is setup, interface and dealing with string encodings. You save a lot of trouble by knowing that youʼre basically only dealing with ASCII and/or UTF-8 strings.</p>

<h2 id="basic-models">5. Basic Models</h2>

<p>Use <a href="https://github.com/intridea/multi_json">multi_json</a> (a generic swappable back-end for JSON handling) to built a simple system of models based on JSON files.</p>

<p><strong>In Rails</strong></p>

<p>ActiveRecord is an Object-Relational Mapper so that each of your objects represents a database row. ActiveModel is the interface that Rails uses to all of storage including non-relational stores like Cassandra or MongoDB, to fit particular object types into Rails.</p>

<p>For a good overview of ActiveModel, have a look at a blog post from Yehuda Katz on that topic: <a href="http://yehudakatz.com/2010/01/10/activemodel-make-any-ruby-object-feel-like-activerecord/">ActiveModel: Make Any Ruby Object Feel Like ActiveRecord</a></p>

<h2 id="request-response">6. Request, Response</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># rulers/lib/rulers/controller.rb</span>
</span><span class="line"><span class="k">module</span> <span class="nn">Rulers</span>
</span><span class="line">  <span class="k">class</span> <span class="nc">Controller</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">response</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">status</span> <span class="o">=</span> <span class="mi">200</span><span class="p">,</span> <span class="n">headers</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class="line">      <span class="k">raise</span> <span class="s2">&quot;Already responded!&quot;</span> <span class="k">if</span> <span class="vi">@response</span>
</span><span class="line">      <span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="n">text</span><span class="o">].</span><span class="n">flatten</span>
</span><span class="line">      <span class="vi">@response</span> <span class="o">=</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:Response</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">status</span><span class="p">,</span> <span class="n">headers</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">get_response</span>  <span class="c1"># Only for Rulers</span>
</span><span class="line">      <span class="vi">@response</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">render_response</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class="line">      <span class="n">response</span><span class="p">(</span><span class="n">render</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">))</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># rulers/lib/rulers.rb</span>
</span><span class="line"><span class="k">module</span> <span class="nn">Ruler</span>
</span><span class="line">  <span class="k">class</span> <span class="nc">Application</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>   <span class="c1"># Redefine</span>
</span><span class="line">      <span class="k">if</span> <span class="n">env</span><span class="o">[</span><span class="s1">&#39;PATH_INFO&#39;</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;/favicon.ico&#39;</span>
</span><span class="line">        <span class="k">return</span> <span class="o">[</span><span class="mi">404</span><span class="p">,</span>
</span><span class="line">          <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;text/html&#39;</span><span class="p">},</span> <span class="o">[]]</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">
</span><span class="line">      <span class="n">klass</span><span class="p">,</span> <span class="n">act</span> <span class="o">=</span> <span class="n">get_controller_and_action</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class="line">      <span class="n">controller</span> <span class="o">=</span> <span class="n">klass</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class="line">      <span class="n">text</span> <span class="o">=</span> <span class="n">controller</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">act</span><span class="p">)</span>
</span><span class="line">      <span class="k">if</span> <span class="n">controller</span><span class="o">.</span><span class="n">get_response</span>
</span><span class="line">        <span class="c1"># ensure the code after render_response works</span>
</span><span class="line">        <span class="n">st</span><span class="p">,</span> <span class="n">hd</span><span class="p">,</span> <span class="n">rs</span> <span class="o">=</span> <span class="n">controller</span><span class="o">.</span><span class="n">get_response</span><span class="o">.</span><span class="n">to_a</span>
</span><span class="line">        <span class="o">[</span><span class="n">st</span><span class="p">,</span> <span class="n">hd</span><span class="p">,</span> <span class="o">[</span><span class="n">rs</span><span class="o">.</span><span class="n">body</span><span class="o">].</span><span class="n">flatten</span><span class="o">]</span>
</span><span class="line">      <span class="k">else</span>
</span><span class="line">        <span class="c1"># without explicitly render_response in action,</span>
</span><span class="line">        <span class="c1"># you can add auto render here</span>
</span><span class="line">        <span class="o">[</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;text/html&#39;</span><span class="p">},</span> <span class="o">[</span><span class="n">text</span><span class="o">]]</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In Rails, the return value from the controller is ignored. Instead if you donʼt call render (Railsʼ equivalent of render_response), it will automatically call it for you with the same controller name, and the viewʼs name set to the same name as your action.</p>

<p>Rails doesnʼt return the string when you call “render” (well, usually - some calls to render do!). Instead, it keeps track of the fact that you called render and what you called it on. Then it gives you an error if you call it again, or uses the defaults if you get to the end of a controller action without calling it</p>

<p><strong>Instance Variables</strong></p>

<p>The Rails answer is to set instance variables in the controller, then use them in the view. Try creating a new view object, mostly just to use Erubis to evaluate the view file. Then, make it easy to pass in a hash of instance variables which youʼll set on the view object before doing the evaluation.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># rulers/lib/rulers/controller.rb</span>
</span><span class="line"><span class="k">module</span> <span class="nn">Rulers</span>
</span><span class="line">  <span class="k">class</span> <span class="nc">Controller</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="n">view_name</span><span class="p">,</span> <span class="n">locals</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class="line">      <span class="n">filename</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span> <span class="s1">&#39;app&#39;</span><span class="p">,</span> <span class="s1">&#39;views&#39;</span><span class="p">,</span> <span class="n">controller_name</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">view_name</span><span class="si">}</span><span class="s2">.html.erb&quot;</span>
</span><span class="line">      <span class="n">ivars</span> <span class="o">=</span> <span class="nb">instance_variables</span><span class="o">.</span><span class="n">reduce</span><span class="p">({})</span> <span class="p">{</span><span class="o">|</span><span class="n">ha</span><span class="p">,</span> <span class="n">iv</span><span class="o">|</span> <span class="n">ha</span><span class="o">[</span><span class="n">iv</span><span class="o">]</span> <span class="o">=</span> <span class="nb">instance_variable_get</span><span class="p">(</span><span class="n">iv</span><span class="p">);</span> <span class="n">ha</span> <span class="p">}</span>
</span><span class="line">      <span class="ss">Rulers</span><span class="p">:</span><span class="ss">:View</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">ivars</span><span class="p">,</span> <span class="n">locals</span><span class="p">)</span><span class="o">.</span><span class="n">result</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>In Rails</strong></p>

<p>Rails (more specifically, ActionPack) uses Rack in a very similar way, even exposing the Rack Request object with the “request” method. Especially <a href="https://github.com/rails/rails/blob/master/actionpack%2Flib%2Faction_controller%2Fmetal.rb">metal.rb </a>and metal/*.rb. “Rails Metal” is a name for the lower-level Rails which goes mostly straight through to the “bare metal” – that is, to Rack.</p>

<p>You can find a lot of the Rails implementation of Rack in these directories – for instance, metal/redirecting.rb is the implementation of the redirect_to() helper which returns status 302 (redirect) and a location to Rack. You could steal the code and add a redirect_to to Rulers, if you wanted.</p>

<p>You can also find things like forgery (CSRF) protection, multiple renderers (i.e. Erb vs Haml), forcing SSL if requested and cookies in this directory. Some are complex, while others call to Rack very simply and you could move right over to Rulers.</p>

<h2 id="the-littlest-orm">7. The Littlest ORM</h2>

<p>migration</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># best_quotes/mini_migration.rb</span>
</span><span class="line"><span class="nb">require</span> <span class="s2">&quot;sqlite3&quot;</span>
</span><span class="line"><span class="n">conn</span> <span class="o">=</span> <span class="ss">SQLite3</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">new</span> <span class="s2">&quot;test.db&quot;</span>
</span><span class="line"><span class="n">conn</span><span class="o">.</span><span class="n">execute</span> <span class="o">&lt;&lt;</span><span class="no">SQL</span>
</span><span class="line"><span class="sh">create table my_table (</span>
</span><span class="line"><span class="sh">  id INTEGER PRIMARY KEY,</span>
</span><span class="line"><span class="sh">  posted INTEGER,</span>
</span><span class="line"><span class="sh">  title VARCHAR(30),</span>
</span><span class="line"><span class="sh">  body VARCHAR(32000));</span>
</span><span class="line"><span class="no">SQL</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>sqlite model</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># rulers/lib/rulers/sqlite_model.rb</span>
</span><span class="line"><span class="nb">require</span> <span class="s2">&quot;sqlite3&quot;</span>
</span><span class="line"><span class="nb">require</span> <span class="s2">&quot;rulers/util&quot;</span>
</span><span class="line">
</span><span class="line"><span class="no">DB</span> <span class="o">=</span> <span class="ss">SQLite3</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">new</span> <span class="s2">&quot;test.db&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">module</span> <span class="nn">Rulers</span>
</span><span class="line">  <span class="k">module</span> <span class="nn">Model</span>
</span><span class="line">    <span class="k">class</span> <span class="nc">SQLite</span>
</span><span class="line">
</span><span class="line">      <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class="line">        <span class="k">def</span> <span class="nf">table</span>
</span><span class="line">          <span class="no">Rulers</span><span class="o">.</span><span class="n">to_underscore</span> <span class="nb">name</span>
</span><span class="line">        <span class="k">end</span>
</span><span class="line">
</span><span class="line">        <span class="k">def</span> <span class="nf">schema</span>
</span><span class="line">          <span class="k">return</span> <span class="vi">@schema</span> <span class="k">if</span> <span class="vi">@schema</span>
</span><span class="line">          <span class="vi">@schema</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class="line">          <span class="no">DB</span><span class="o">.</span><span class="n">table_info</span><span class="p">(</span><span class="n">table</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
</span><span class="line">            <span class="vi">@schema</span><span class="o">[</span> <span class="n">row</span><span class="o">[</span><span class="s1">&#39;name&#39;</span><span class="o">]</span> <span class="o">]</span> <span class="o">=</span> <span class="n">row</span><span class="o">[</span><span class="s1">&#39;type&#39;</span><span class="o">]</span>
</span><span class="line">          <span class="k">end</span>
</span><span class="line">          <span class="vi">@schema</span>
</span><span class="line">        <span class="k">end</span>
</span><span class="line">
</span><span class="line">        <span class="k">def</span> <span class="nf">to_sql</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
</span><span class="line">          <span class="k">case</span> <span class="n">val</span>
</span><span class="line">          <span class="k">when</span> <span class="no">Numeric</span>
</span><span class="line">            <span class="n">val</span><span class="o">.</span><span class="n">to_s</span>
</span><span class="line">          <span class="k">when</span> <span class="nb">String</span>
</span><span class="line">            <span class="s2">&quot;&#39;</span><span class="si">#{</span><span class="n">val</span><span class="si">}</span><span class="s2">&#39;&quot;</span>
</span><span class="line">          <span class="k">else</span>
</span><span class="line">            <span class="k">raise</span> <span class="s2">&quot;Can&#39;t change </span><span class="si">#{</span><span class="n">val</span><span class="o">.</span><span class="n">class</span><span class="si">}</span><span class="s2"> to SQL!&quot;</span>
</span><span class="line">          <span class="k">end</span>
</span><span class="line">        <span class="k">end</span>
</span><span class="line">
</span><span class="line">        <span class="k">def</span> <span class="nf">create</span><span class="p">(</span><span class="n">values</span><span class="p">)</span>
</span><span class="line">          <span class="n">values</span><span class="o">.</span><span class="n">delete</span> <span class="s1">&#39;id&#39;</span>
</span><span class="line">          <span class="n">keys</span> <span class="o">=</span> <span class="n">schema</span><span class="o">.</span><span class="n">keys</span> <span class="o">-</span> <span class="o">[</span><span class="s1">&#39;id&#39;</span><span class="o">]</span>
</span><span class="line">          <span class="n">vals</span> <span class="o">=</span> <span class="n">keys</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="o">|</span>
</span><span class="line">            <span class="n">values</span><span class="o">[</span><span class="n">key</span><span class="o">]</span> <span class="p">?</span> <span class="n">to_sql</span><span class="p">(</span><span class="n">values</span><span class="o">[</span><span class="n">key</span><span class="o">]</span><span class="p">)</span> <span class="p">:</span> <span class="s1">&#39;null&#39;</span>
</span><span class="line">          <span class="k">end</span>
</span><span class="line">
</span><span class="line">          <span class="no">DB</span><span class="o">.</span><span class="n">execute</span> <span class="o">&lt;&lt;</span><span class="no">SQL</span>
</span><span class="line"><span class="sh">            INSERT INTO #{table} (#{keys.join(&#39;,&#39;)})</span>
</span><span class="line"><span class="sh">            VALUES (#{vals.join(&#39;,&#39;)});</span>
</span><span class="line"><span class="no">SQL</span>
</span><span class="line">
</span><span class="line">          <span class="n">data</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">[</span><span class="n">keys</span><span class="o">.</span><span class="n">zip</span><span class="p">(</span><span class="n">vals</span><span class="p">)</span><span class="o">]</span>
</span><span class="line">          <span class="n">sql</span> <span class="o">=</span> <span class="s2">&quot;SELECT last_insert_rowid();&quot;</span>
</span><span class="line">          <span class="n">data</span><span class="o">[</span><span class="s1">&#39;id&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="no">DB</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">sql</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span>
</span><span class="line">          <span class="nb">self</span><span class="o">.</span><span class="n">new</span> <span class="n">data</span>
</span><span class="line">        <span class="k">end</span>
</span><span class="line">
</span><span class="line">        <span class="k">def</span> <span class="nf">count</span>
</span><span class="line">          <span class="no">DB</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="o">&lt;&lt;</span><span class="no">SQL</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span>
</span><span class="line"><span class="sh">            SELECT COUNT(*) FROM #{table}</span>
</span><span class="line"><span class="no">SQL</span>
</span><span class="line">        <span class="k">end</span>
</span><span class="line">
</span><span class="line">        <span class="k">def</span> <span class="nf">find</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
</span><span class="line">          <span class="n">row</span> <span class="o">=</span> <span class="no">DB</span><span class="o">.</span><span class="n">execute</span> <span class="o">&lt;&lt;</span><span class="no">SQL</span>
</span><span class="line"><span class="sh">            SELECT #{schema.keys.join(&#39;,&#39;)} from #{table} where id=#{id}</span>
</span><span class="line"><span class="no">SQL</span>
</span><span class="line">          <span class="n">data</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">[</span> <span class="n">schema</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">zip</span> <span class="n">row</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">]</span>
</span><span class="line">          <span class="nb">self</span><span class="o">.</span><span class="n">new</span> <span class="n">data</span>
</span><span class="line">        <span class="k">end</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">
</span><span class="line">      <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">data</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class="line">        <span class="vi">@hash</span> <span class="o">=</span> <span class="n">data</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">
</span><span class="line">      <span class="k">def</span> <span class="nf">[]</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">        <span class="vi">@hash</span><span class="o">[</span><span class="nb">name</span><span class="o">.</span><span class="n">to_s</span><span class="o">]</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">
</span><span class="line">      <span class="k">def</span> <span class="nf">[]=</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class="line">        <span class="vi">@hash</span><span class="o">[</span><span class="nb">name</span><span class="o">.</span><span class="n">to_s</span><span class="o">]</span> <span class="o">=</span> <span class="n">value</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">
</span><span class="line">      <span class="k">def</span> <span class="nf">save!</span>
</span><span class="line">        <span class="k">unless</span> <span class="vi">@hash</span><span class="o">[</span><span class="s1">&#39;id&#39;</span><span class="o">]</span>
</span><span class="line">          <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">create</span>
</span><span class="line">          <span class="k">return</span> <span class="kp">true</span>
</span><span class="line">        <span class="k">end</span>
</span><span class="line">
</span><span class="line">        <span class="n">fields</span> <span class="o">=</span> <span class="vi">@hash</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">|</span>
</span><span class="line">          <span class="s2">&quot;</span><span class="si">#{</span><span class="n">k</span><span class="si">}</span><span class="s2">=</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">to_sql</span><span class="p">(</span><span class="n">v</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">        <span class="k">end</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="no">DB</span><span class="o">.</span><span class="n">execute</span> <span class="o">&lt;&lt;</span><span class="no">SQL</span>
</span><span class="line"><span class="sh">          UPDATE #{self.class.table}</span>
</span><span class="line"><span class="sh">          SET #{fields}</span>
</span><span class="line"><span class="sh">          WHERE id=&quot;#{@hash[&#39;id&#39;]}&quot;</span>
</span><span class="line"><span class="no">SQL</span>
</span><span class="line">        <span class="kp">true</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">
</span><span class="line">      <span class="k">def</span> <span class="nf">save</span>
</span><span class="line">        <span class="n">save!</span> <span class="k">rescue</span> <span class="kp">false</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You can add a method to the SQLite model that takes a column name and a type, and then when saving and loading that column, does something type-dependent to it, like the boolean or JSON fields above.</p>

<p>ActiveRecord allows both ways – you can research the <code>before_save</code> and <code>after_initialize</code> callbacks for how to do it on save/ load.</p>

<p><strong>In Rails</strong></p>

<p>ActiveRecord contains mappings of operations like our gem, but also migrations, cross-database compatibility and a huge amount of optimization and general complexity. And thatʼs even though they use the ARel gem for most of the heavy lifting!</p>

<h2 id="rack-middleware">8. Rack Middleware</h2>

<p>With any Ruby web framework, you can modify how it works by adding Rack components around it. I like thinking of them as pancakes, because Rack lets you build your framework and your application like a stack of pancakes.</p>

<p><strong>Built-in middlewares</strong></p>

<ul>
  <li><strong>Rack::Auth::Basic</strong> - HTTP Basic authentication.</li>
  <li><strong>Rack::Auth::Digest</strong> - HTTP Digest authentication.</li>
  <li><strong>Rack::Cascade</strong> - Pass a request to a series of Rack apps, and use the first request that comes back as good. Itʼs a way to mount one Rack app “on top of” another (or many).</li>
  <li><strong>Rack::Chunked</strong> - A Rack interface to HTTP Chunked transfer.</li>
  <li><strong>Rack::CommonLogger</strong> - Request logging.</li>
  <li><strong>Rack::ConditionalGet</strong> - Implement HTTP If-None-Match and If- Modified-Since with ETags and dates.</li>
  <li><strong>Rack::Config</strong> - Call a given block before each request.</li>
  <li><strong>Rack::ContentLength</strong> - Set Content-Length automatically.</li>
  <li><strong>Rack::ContentType</strong> - Try to guess Content-Type and set it. Rack::Deflater - Compress the response with gzip/deflate.</li>
  <li><strong>Rack::Directory</strong> - Add Apache-style directory listings. This is an endpoint not an intermediate layer, so use it with “run.”</li>
  <li><strong>Rack::ETag</strong> - Generate ETags from MD5s of the content.</li>
  <li><strong>Rack::Head</strong> - Remove response body for HEAD requests.</li>
  <li><strong>Rack::Lint</strong> - Check your responses for correctness.</li>
  <li><strong>Rack::Lock</strong> - Only allow one thread in at once.</li>
  <li><strong>Rack::Reloader</strong> - Reload your app when files change.</li>
  <li><strong>Rack::Runtime</strong> - Times the request, sets X-Runtime in response.</li>
  <li><strong>Rack::Sendfile</strong> - Use the X-Sendfile header to ask your web server to send a file much faster than Ruby can.</li>
  <li><strong>Rack::ShowExceptions</strong> - Show a nice exception page if something breaks.</li>
  <li><strong>Rack::ShowStatus</strong> - Show a pretty page if the result is empty.</li>
  <li><strong>Rack::Static</strong> - Serve from certain directories as static files instead
of calling your framework.</li>
  <li><strong>Rack::URLMap</strong> - Route different directories to different apps or different stacks. You can also use this with a “map” block in config.ru.</li>
</ul>

<p>Rack::URLMap is a way to tell Rack what paths go to what Rack apps - and if thereʼs could be two that match, the longer path always takes precedence.</p>

<p>Rack::ContentType is to set the default HTML content type for everything. Since itʼs at the top, outside the blocks, it applies to all the blocks.</p>

<p>The lobster, by the way, is a simple test app built into Rack. Youʼll see it as an example in many places.</p>

<p><strong>Thrid-party middlewares</strong></p>

<ul>
  <li><a href="https://github.com/rack/rack-contrib">rack-contrib</a></li>
  <li><a href="https://github.com/rack/rack/wiki/List-of-Middleware">middlewares listed in rack wiki</a></li>
</ul>

<p><strong>In Rails</strong></p>

<p>The primary Rack application object in Rails is called ActionController::Dispatcher.</p>

<p>ActionController::Base allows you to get mini-Rack-apps for each controller action because it inherits from Metal, the basic Rails Rack class. So you can call MyController.action(:myaction) and get a Rack app for that action in your controller.</p>

<p><strong>Calling order of Rack middlewares</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Foo</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">arg</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s1">&#39;--&gt; Foo#init&#39;</span>
</span><span class="line">    <span class="vi">@app</span> <span class="o">=</span> <span class="n">app</span>
</span><span class="line">    <span class="vi">@arg</span> <span class="o">=</span> <span class="n">arg</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s1">&#39;--&gt; Foo#initend&#39;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s1">&#39;--&gt; Foo#call&#39;</span>
</span><span class="line">    <span class="n">status</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">content</span> <span class="o">=</span> <span class="vi">@app</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class="line">    <span class="n">content</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@arg</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s1">&#39;--&gt; Foo#callend&#39;</span>
</span><span class="line">    <span class="o">[</span> <span class="n">status</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">content</span> <span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Bar</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">arg</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s1">&#39;--&gt; Bar#init&#39;</span>
</span><span class="line">    <span class="vi">@app</span> <span class="o">=</span> <span class="n">app</span>
</span><span class="line">    <span class="vi">@arg</span> <span class="o">=</span> <span class="n">arg</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s1">&#39;--&gt; Bar#initend&#39;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s1">&#39;--&gt; Bar#call&#39;</span>
</span><span class="line">    <span class="n">status</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">content</span> <span class="o">=</span> <span class="vi">@app</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class="line">    <span class="n">content</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@arg</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s1">&#39;--&gt; Bar#callend&#39;</span>
</span><span class="line">    <span class="o">[</span> <span class="n">status</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">content</span> <span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">use</span> <span class="no">Foo</span><span class="p">,</span> <span class="s1">&#39;, foo&#39;</span>
</span><span class="line"><span class="n">use</span> <span class="no">Bar</span><span class="p">,</span> <span class="s1">&#39;, bar&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">run</span> <span class="nb">proc</span> <span class="p">{</span>
</span><span class="line">  <span class="nb">puts</span> <span class="s1">&#39;--&gt; main#call&#39;</span>
</span><span class="line">  <span class="o">[</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;text/html&#39;</span><span class="p">},</span> <span class="o">[</span><span class="s1">&#39;Hello, world&#39;</span><span class="o">]]</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1"># $ rackup</span>
</span><span class="line"><span class="c1"># --&gt; Bar#init</span>
</span><span class="line"><span class="c1"># --&gt; Bar#initend</span>
</span><span class="line"><span class="c1"># --&gt; Foo#init</span>
</span><span class="line"><span class="c1"># --&gt; Foo#initend</span>
</span><span class="line"><span class="c1"># Thin web server (v1.6.1 codename Death Proof)</span>
</span><span class="line"><span class="c1"># Maximum connections set to 1024</span>
</span><span class="line"><span class="c1"># Listening on 0.0.0.0:9292, CTRL+C to stop</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1"># --&gt; Foo#call</span>
</span><span class="line"><span class="c1"># --&gt; Bar#call</span>
</span><span class="line"><span class="c1"># --&gt; main#call</span>
</span><span class="line"><span class="c1"># --&gt; Bar#callend</span>
</span><span class="line"><span class="c1"># --&gt; Foo#callend</span>
</span><span class="line"><span class="c1"># 127.0.0.1 - wendi [23/Sep/2014 15:56:20] &quot;GET / HTTP/1.1&quot; 200 - 0.0013</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Other samples:</p>

<ul>
  <li><a href="https://gist.github.com/ifyouseewendy/15dd511d2d939e432068#file-config-lobster-ru">lobster</a></li>
  <li><a href="https://gist.github.com/ifyouseewendy/15dd511d2d939e432068#file-config-auth-ru">auth</a></li>
  <li><a href="https://gist.github.com/ifyouseewendy/15dd511d2d939e432068#file-config-benchmark-ru">benchmark</a></li>
</ul>

<h2 id="real-routing">9. Real Routing</h2>

<p>Rails 3 takes this a half-step farther and makes every action on every controller a full-on Rack app that you can extract and use.</p>

<p>Add RouteObject class.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">RouteObject</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="vi">@rules</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># save routing rules</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">match</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class="line">    <span class="n">options</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class="line">    <span class="n">options</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">pop</span> <span class="k">if</span> <span class="n">args</span><span class="o">[-</span><span class="mi">1</span><span class="o">].</span><span class="n">is_a?</span><span class="p">(</span><span class="no">Hash</span><span class="p">)</span>
</span><span class="line">    <span class="n">options</span><span class="o">[</span><span class="ss">:default</span><span class="o">]</span> <span class="o">||=</span> <span class="p">{}</span>
</span><span class="line">
</span><span class="line">    <span class="n">dest</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class="line">    <span class="n">dest</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">pop</span> <span class="k">if</span> <span class="n">args</span><span class="o">.</span><span class="n">size</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class="line">    <span class="k">raise</span> <span class="s1">&#39;Too many args!&#39;</span> <span class="k">if</span> <span class="n">args</span><span class="o">.</span><span class="n">size</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class="line">
</span><span class="line">    <span class="n">parts</span> <span class="o">=</span> <span class="n">url</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="n">parts</span><span class="o">.</span><span class="n">select!</span><span class="p">{</span><span class="o">|</span><span class="nb">p</span><span class="o">|</span> <span class="o">!</span><span class="nb">p</span><span class="o">.</span><span class="n">empty?</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">vars</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">    <span class="n">regexp_parts</span> <span class="o">=</span> <span class="n">parts</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">part</span><span class="o">|</span>
</span><span class="line">      <span class="k">if</span> <span class="n">part</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;:&#39;</span>
</span><span class="line">        <span class="n">vars</span> <span class="o">&lt;&lt;</span> <span class="n">part</span><span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
</span><span class="line">        <span class="s2">&quot;([a-zA-Z0-9_]+)&quot;</span>
</span><span class="line">      <span class="k">elsif</span> <span class="n">part</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;*&#39;</span>
</span><span class="line">        <span class="n">vars</span> <span class="o">&lt;&lt;</span> <span class="n">part</span><span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
</span><span class="line">        <span class="s2">&quot;(.*)&quot;</span>
</span><span class="line">      <span class="k">else</span>
</span><span class="line">        <span class="n">part</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="n">regexp</span> <span class="o">=</span> <span class="n">regexp_parts</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@rules</span><span class="o">.</span><span class="n">push</span><span class="p">({</span>
</span><span class="line">      <span class="ss">:regexp</span> <span class="o">=&gt;</span> <span class="no">Regexp</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;^/</span><span class="si">#{</span><span class="n">regexp</span><span class="si">}</span><span class="s2">$&quot;</span><span class="p">),</span>
</span><span class="line">      <span class="ss">:vars</span> <span class="o">=&gt;</span> <span class="n">vars</span><span class="p">,</span>
</span><span class="line">      <span class="ss">:dest</span> <span class="o">=&gt;</span> <span class="n">dest</span><span class="p">,</span>
</span><span class="line">      <span class="ss">:options</span> <span class="o">=&gt;</span> <span class="n">options</span>
</span><span class="line">    <span class="p">})</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># match rules to url and route to specific controller action.</span>
</span><span class="line">  <span class="c1"># </span>
</span><span class="line">  <span class="c1"># 1. the router just applies them in order -- if more than</span>
</span><span class="line">  <span class="c1">#    one rule matches, the first one wins.</span>
</span><span class="line">  <span class="c1"># 2. the second argument can be a Rack application, </span>
</span><span class="line">  <span class="c1">#    which Rails then calls.</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">check_url</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@rules</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">r</span><span class="o">|</span>
</span><span class="line">      <span class="n">m</span> <span class="o">=</span> <span class="n">r</span><span class="o">[</span><span class="ss">:regexp</span><span class="o">].</span><span class="n">match</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">      <span class="k">if</span> <span class="n">m</span>
</span><span class="line">        <span class="n">options</span> <span class="o">=</span> <span class="n">r</span><span class="o">[</span><span class="ss">:options</span><span class="o">]</span>
</span><span class="line">        <span class="n">params</span> <span class="o">=</span> <span class="n">options</span><span class="o">[</span><span class="ss">:default</span><span class="o">].</span><span class="n">dup</span>
</span><span class="line">
</span><span class="line">        <span class="n">r</span><span class="o">[</span><span class="ss">:vars</span><span class="o">].</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">v</span><span class="p">,</span> <span class="n">i</span><span class="o">|</span>
</span><span class="line">          <span class="n">params</span><span class="o">[</span><span class="n">v</span><span class="o">]</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="n">captures</span><span class="o">[</span><span class="n">i</span><span class="o">]</span>
</span><span class="line">        <span class="k">end</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span> <span class="n">r</span><span class="o">[</span><span class="ss">:dest</span><span class="o">]</span>
</span><span class="line">          <span class="k">return</span> <span class="n">get_dest</span><span class="p">(</span><span class="n">r</span><span class="o">[</span><span class="ss">:dest</span><span class="o">]</span><span class="p">,</span> <span class="n">params</span><span class="p">)</span>
</span><span class="line">        <span class="k">else</span>
</span><span class="line">          <span class="n">controller</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="s1">&#39;controller&#39;</span><span class="o">]</span>
</span><span class="line">          <span class="n">action</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="s1">&#39;action&#39;</span><span class="o">]</span>
</span><span class="line">          <span class="k">return</span> <span class="n">get_dest</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">controller</span><span class="si">}</span><span class="s2">#</span><span class="si">#{</span><span class="n">action</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">params</span><span class="p">)</span>
</span><span class="line">        <span class="k">end</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="kp">nil</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">get_dest</span><span class="p">(</span><span class="n">dest</span><span class="p">,</span> <span class="n">routing_params</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class="line">    <span class="k">return</span> <span class="n">dest</span> <span class="k">if</span> <span class="n">dest</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:call</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="n">dest</span> <span class="o">=~</span> <span class="sr">/^([^#]+)#([^#]+)$/</span>
</span><span class="line">      <span class="nb">name</span> <span class="o">=</span> <span class="vg">$1</span><span class="o">.</span><span class="n">capitalize</span>
</span><span class="line">      <span class="n">cont</span> <span class="o">=</span> <span class="no">Object</span><span class="o">.</span><span class="n">const_get</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">Controller&quot;</span><span class="p">)</span>
</span><span class="line">      <span class="k">return</span> <span class="n">cont</span><span class="o">.</span><span class="n">action</span><span class="p">(</span><span class="vg">$2</span><span class="p">,</span> <span class="n">routing_params</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="k">raise</span> <span class="s2">&quot;No destination: </span><span class="si">#{</span><span class="n">dest</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">!&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Define <code>route</code> to save rules in an instance of RouteObject, and use <code>get_rack_app</code> to route to controller actions. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Rulers</span>
</span><span class="line">  <span class="k">class</span> <span class="nc">Application</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">route</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class="line">      <span class="vi">@route_obj</span> <span class="o">||=</span> <span class="no">RouteObject</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">      <span class="vi">@route_obj</span><span class="o">.</span><span class="n">instance_eval</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">get_rack_app</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class="line">      <span class="k">raise</span> <span class="s1">&#39;No routes!&#39;</span> <span class="k">unless</span> <span class="vi">@route_obj</span>
</span><span class="line">      <span class="vi">@route_obj</span><span class="o">.</span><span class="n">check_url</span> <span class="n">env</span><span class="o">[</span><span class="s1">&#39;PATH_INFO&#39;</span><span class="o">]</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Update Rulers::Controller to use <code>self.action</code> to initialize rack app, and <code>dispatch</code> to specific action.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># rulers/lib/rulers/controller.rb</span>
</span><span class="line"><span class="k">module</span> <span class="nn">Rulers</span>
</span><span class="line">  <span class="k">class</span> <span class="nc">Controller</span>
</span><span class="line">    <span class="kp">include</span> <span class="ss">Rulers</span><span class="p">:</span><span class="ss">:Model</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class="line">      <span class="vi">@env</span> <span class="o">=</span> <span class="n">env</span>
</span><span class="line">      <span class="vi">@routing_params</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">env</span>
</span><span class="line">      <span class="vi">@env</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">action</span><span class="p">(</span><span class="n">act</span><span class="p">,</span> <span class="nb">p</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class="line">      <span class="nb">proc</span> <span class="p">{</span><span class="o">|</span><span class="n">e</span><span class="o">|</span> <span class="nb">self</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="o">.</span><span class="n">dispatch</span><span class="p">(</span><span class="n">act</span><span class="p">,</span> <span class="nb">p</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">dispatch</span><span class="p">(</span><span class="n">action</span><span class="p">,</span> <span class="n">routing_params</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class="line">      <span class="vi">@routing_params</span> <span class="o">=</span> <span class="n">routing_params</span>
</span><span class="line">
</span><span class="line">      <span class="nb">self</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">action</span><span class="p">)</span>
</span><span class="line">      <span class="n">render_response</span> <span class="n">action</span><span class="o">.</span><span class="n">to_sym</span> <span class="k">unless</span> <span class="n">get_response</span>
</span><span class="line">      <span class="n">st</span><span class="p">,</span> <span class="n">hd</span><span class="p">,</span> <span class="n">rs</span> <span class="o">=</span> <span class="n">get_response</span><span class="o">.</span><span class="n">to_a</span>
</span><span class="line">      <span class="o">[</span><span class="n">st</span><span class="p">,</span> <span class="n">hd</span><span class="p">,</span> <span class="o">[</span><span class="n">rs</span><span class="o">.</span><span class="n">body</span><span class="o">].</span><span class="n">flatten</span><span class="o">]</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">params</span>
</span><span class="line">      <span class="n">request</span><span class="o">.</span><span class="n">params</span><span class="o">.</span><span class="n">merge</span> <span class="vi">@routing_params</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>In Rails</strong></p>

<p>Rails connects lots of tiny Rack applications into a single overall application. Itʼs a complicated, multi-layered construction.</p>

<p>Each Rails controller keeps track of a mini-Rack stack of middleware which can be specified per-action like before_filters.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Review] Git Community Book]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2014/09/27/git-community-book/"/>
    <updated>2014-09-27T13:51:25+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2014/09/27/git-community-book</id>
    <content type="html"><![CDATA[<table class="custom">
  <tbody>
    <tr>
      <td><strong>Book</strong></td>
      <td>Git Community Book</td>
    </tr>
    <tr>
      <td><strong>Author</strong></td>
      <td>people in the Git community</td>
    </tr>
    <tr>
      <td><strong>Link</strong></td>
      <td><a href="http://alx.github.io/gitbook/">alx.github.io/gitbook</a></td>
    </tr>
  </tbody>
</table>

<ul id="markdown-toc">
  <li><a href="#git-object-model">Git Object Model</a>    <ul>
      <li><a href="#the-sha">The SHA</a></li>
      <li><a href="#the-objects">The Objects</a></li>
      <li><a href="#different-from-svn">Different from SVN</a></li>
    </ul>
  </li>
  <li><a href="#advanced-git">Advanced Git</a>    <ul>
      <li><a href="#create-new-empty-branches">Create New Empty Branches</a></li>
      <li><a href="#modifying-your-history">Modifying Your History</a></li>
      <li><a href="#advanced-merging">Advanced Merging</a></li>
      <li><a href="#git-and-email">Git and Email</a></li>
      <li><a href="#client-side-hookds">Client Side Hookds</a></li>
      <li><a href="#submodules">Submodules</a></li>
    </ul>
  </li>
  <li><a href="#internals-and-plumbing">Internals and Plumbing</a>    <ul>
      <li><a href="#how-git-stores-objects">How Git Stores Objects</a></li>
      <li><a href="#the-git-index">The Git Index</a></li>
      <li><a href="#the-packfile-index">The Packfile Index</a></li>
      <li><a href="#raw-git">Raw Git</a></li>
    </ul>
  </li>
</ul>

<h2 id="git-object-model">Git Object Model</h2>

<h3 id="the-sha">The SHA</h3>

<ol>
  <li>Represents object name.</li>
  <li>40-digit long.</li>
  <li>Use SHA1 hash to generate based on the object content.</li>
  <li>Keeps the identity.</li>
</ol>

<h3 id="the-objects">The Objects</h3>

<p>Every object consists of three things: <strong>type, size, content</strong>.</p>

<p>There are four different types of objects: <strong>blob, tree, commit, tag</strong>.</p>

<p><strong>blob</strong> is a chunk of binary data, used to stroe file data.</p>

<blockquote>
  <p>The blob is entirely defined by its data, totally independent of its location.</p>
</blockquote>

<p><strong>tree</strong> is basically like a directory - it references a bunch of other trees and/or blobs.</p>

<blockquote>
  <p>Since trees and blobs, like all other objects, are named by the SHA1 hash of their contents, two trees have the same SHA1 name if and only if their contents (including, recursively, the contents of all subdirectories) are identical.</p>
</blockquote>

<p><strong>commit</strong>  points to a single tree, marking it as what the project looked like at a certain point in time. It contains meta-information about that point in time, such as a timestamp, the author of the changes since the last commit, a pointer to the previous commit(s), etc.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">➜  git show --pretty<span class="o">=</span>raw HEAD
</span><span class="line">commit 6cc1a668111eb54ef4dbe976fff24f2e3d8b95f9
</span><span class="line">tree 36df675d7ae80e7eef0faac893b266801a4fa94a
</span><span class="line">parent d448c30aa03fba2884ab87c21081ef0f74d24f7e
</span><span class="line">author wendi &lt;wendi@umeng.com&gt; 1409022714 +0800
</span><span class="line">committer wendi &lt;wendi@umeng.com&gt; 1409022733 +0800
</span><span class="line">
</span><span class="line">    Update error <span class="nb">type </span>service url
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>tag</strong> is a way to mark a specific commit as special in some way. It is normally used to tag certain commits as specific releases or something along those lines.</p>

<blockquote>
  <p>A tag object contains an object name (called simply ‘object’), object type, tag name, the name of the person (“tagger”) who created the tag, and a message, which may contain a signature</p>
</blockquote>

<h3 id="different-from-svn">Different from SVN</h3>

<p>GIT stores a snapshot, while other SCM systems stores the differences between one commit and the next.</p>

<h2 id="advanced-git">Advanced Git</h2>

<h3 id="create-new-empty-branches">Create New Empty Branches</h3>

<p>Use <strong>symobolic-ref</strong>. A symbolic ref is a regular file that stores a string that begins with ref: refs/. For example, your .git/HEAD is a regular file whose contents is ref: refs/heads/master.</p>

<blockquote>
  <p>In the past, .git/HEAD was a symbolic link pointing at
       refs/heads/master. When we wanted to switch to another branch, we did
       ln -sf refs/heads/newbranch .git/HEAD, and when we wanted to find out
       which branch we are on, we did readlink .git/HEAD. But symbolic links
       are not entirely portable, so they are now deprecated and symbolic refs
       (as described above) are used by default.</p>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git symbolic-ref HEAD refs/heads/newbranch
</span><span class="line">  <span class="c"># no branch is created,</span>
</span><span class="line">  <span class="c"># and all files are deleted to index.</span>
</span><span class="line"><span class="nv">$ </span>rm .git/index
</span><span class="line">git clean -fdx
</span><span class="line">&lt;<span class="k">do </span>work&gt;
</span><span class="line">git add your files
</span><span class="line">git commit -m <span class="s1">&#39;Initial commit&#39;</span>
</span><span class="line">  <span class="c"># branch &#39;newbranch&#39; is created.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="modifying-your-history">Modifying Your History</h3>

<p>use <code>git filter-branch</code> to rewrite branches.</p>

<h3 id="advanced-merging">Advanced Merging</h3>

<p>When merging, one parent will be <strong>HEAD</strong>, and the other will be the tip of the other branch, which is stored temporarily in <strong>MERGE_HEAD</strong>.</p>

<p>During the merge, the index holds three versions of each file. Each of these three “file stages” represents a different version of the file:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git show :1:file.txt <span class="c"># the file in a common ancestor of both branches.</span>
</span><span class="line"><span class="nv">$ </span>git show :2:file.txt <span class="c"># the version from HEAD.</span>
</span><span class="line"><span class="nv">$ </span>git show :3:file.txt <span class="c"># the version from MERGE_HEAD.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Some special diff options allow diffing the working directory against any of these stages:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git diff -1 file.txt <span class="c"># diff against stage 1</span>
</span><span class="line"><span class="nv">$ </span>git diff --base file.txt <span class="c"># same as the above</span>
</span><span class="line"><span class="nv">$ </span>git diff -2 file.txt <span class="c"># diff against stage 2</span>
</span><span class="line"><span class="nv">$ </span>git diff --ours file.txt <span class="c"># same as the above</span>
</span><span class="line"><span class="nv">$ </span>git diff -3 file.txt <span class="c"># diff against stage 3</span>
</span><span class="line"><span class="nv">$ </span>git diff --theirs file.txt <span class="c"># same as the above.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="git-and-email">Git and Email</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>man git-format-patch <span class="c"># Prepare patches for email submission</span>
</span><span class="line"><span class="nv">$ </span>man git-am <span class="c"># Apply a series of patches from a mailbox</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>git format-patch origin</code> will produce a numbered series of files in the current directory, one of each patch in the current branch but not in origin/HEAD.</p>

<p><code>git am patches.mbox</code></p>

<h3 id="client-side-hookds">Client Side Hookds</h3>

<p>by example, <code>GIT_DIR/hooks/pre-commit</code></p>

<h3 id="submodules">Submodules</h3>

<p>Create the submodules:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>mkdir ~/git
</span><span class="line"><span class="nv">$ </span><span class="nb">cd</span> ~/git
</span><span class="line"><span class="nv">$ </span><span class="k">for </span>i in a b c d
</span><span class="line"><span class="k">do</span>
</span><span class="line"><span class="k">    </span>mkdir <span class="nv">$i</span>
</span><span class="line">    <span class="nb">cd</span> <span class="nv">$i</span>
</span><span class="line">    git init
</span><span class="line">    <span class="nb">echo</span> <span class="s2">&quot;module $i&quot;</span> &gt; <span class="nv">$i</span>.txt
</span><span class="line">    git add <span class="nv">$i</span>.txt
</span><span class="line">    git commit -m <span class="s2">&quot;Initial commit, submodule $i&quot;</span>
</span><span class="line">    <span class="nb">cd</span> ..
</span><span class="line"><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Create the superproject and add all the submodules:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>mkdir super
</span><span class="line"><span class="nv">$ </span><span class="nb">cd </span>super
</span><span class="line"><span class="nv">$ </span>git init
</span><span class="line"><span class="nv">$ </span><span class="k">for </span>i in a b c d
</span><span class="line"><span class="k">do</span>
</span><span class="line"><span class="k">    </span>git submodule add ~/git/<span class="nv">$i</span>
</span><span class="line"><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>See what files git-submodule created:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>ls -a
</span><span class="line">.  ..  .git  .gitmodules  a  b  c  d
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>git-submodule add</code> command does a couple of things:</p>

<ul>
  <li>It clones the submodule under the current directory and by default checks out the master branch.</li>
  <li>It adds the submodule’s clone path to the gitmodules file and adds this file to the index, ready to be committed.</li>
  <li>It adds the submodule’s current commit ID to the index, ready to be committed.</li>
</ul>

<p>Commit the superproject:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git commit -m <span class="s2">&quot;Add submodules a, b, c and d.&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Clone the superproject:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span><span class="nb">cd</span> ..
</span><span class="line"><span class="nv">$ </span>git clone super cloned
</span><span class="line"><span class="nv">$ </span><span class="nb">cd </span>cloned
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Check submodule status:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git submodule status
</span><span class="line">-d266b9873ad50488163457f025db7cdd9683d88b a
</span><span class="line">-e81d457da15309b4fef4249aba9b50187999670d b
</span><span class="line">-c1536a972b9affea0f16e0680ba87332dc059146 c
</span><span class="line">-d96249ff5d57de5de093e6baff9e0aafa5276a74 d
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Register the submodule into <code>.git/config</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git submodule init
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Clone the submodules and check out the commits specified in the superproject:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git submodule update
</span><span class="line"><span class="nv">$ </span><span class="nb">cd </span>a
</span><span class="line"><span class="nv">$ </span>ls -a
</span><span class="line">.  ..  .git  a.txt
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>One major difference between <code>git-submodule update</code> and <code>git-submodule add</code> is that git-submodule update checks out a specific commit, rather than the tip of a branch. It’s like checking out a tag: <strong>the head is detached</strong>, so you’re not working on a branch.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git branch
</span><span class="line">* <span class="o">(</span>no branch<span class="o">)</span>
</span><span class="line">master
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Check out or create a new branch:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git checkout master
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git checkout -b fix-up
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Do work and commit:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;adding a line again&quot;</span> &gt;&gt; a.txt
</span><span class="line"><span class="nv">$ </span>git commit -a -m <span class="s2">&quot;Updated the submodule from within the superproject.&quot;</span>
</span><span class="line"><span class="nv">$ </span>git push
</span><span class="line"><span class="nv">$ </span><span class="nb">cd</span> ..
</span><span class="line"><span class="nv">$ </span>git diff
</span><span class="line">diff --git a/a b/a
</span><span class="line">index d266b98..261dfac 160000
</span><span class="line">--- a/a
</span><span class="line">+++ b/a
</span><span class="line">@@ -1 +1 @@
</span><span class="line">-Subproject commit d266b9873ad50488163457f025db7cdd9683d88b
</span><span class="line">+Subproject commit 261dfac35cb99d380eb966e102c1197139f7fa24
</span><span class="line"><span class="nv">$ </span>git add a
</span><span class="line"><span class="nv">$ </span>git commit -m <span class="s2">&quot;Updated submodule a.&quot;</span>
</span><span class="line"><span class="nv">$ </span>git push
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Cautions on Submodules</strong>:</p>

<p><em>Always publish the submodule change before publishing the change to the superproject that references it. If you forget to publish the submodule change, others won’t be able to clone the repository:</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span><span class="nb">cd</span> ~/git/super/a
</span><span class="line"><span class="nv">$ </span><span class="nb">echo </span>i added another line to this file &gt;&gt; a.txt
</span><span class="line"><span class="nv">$ </span>git commit -a -m <span class="s2">&quot;doing it wrong this time&quot;</span>
</span><span class="line"><span class="nv">$ </span><span class="nb">cd</span> ..
</span><span class="line"><span class="nv">$ </span>git add a
</span><span class="line"><span class="nv">$ </span>git commit -m <span class="s2">&quot;Updated submodule a again.&quot;</span>
</span><span class="line"><span class="nv">$ </span>git push
</span><span class="line"><span class="nv">$ </span><span class="nb">cd</span> ~/git/cloned
</span><span class="line"><span class="nv">$ </span>git pull
</span><span class="line"><span class="nv">$ </span>git submodule update
</span><span class="line">error: pathspec <span class="s1">&#39;261dfac35cb99d380eb966e102c1197139f7fa24&#39;</span> did not match any file<span class="o">(</span>s<span class="o">)</span> known to git.
</span><span class="line">Did you forget to <span class="s1">&#39;git add&#39;</span>?
</span><span class="line">Unable to checkout <span class="s1">&#39;261dfac35cb99d380eb966e102c1197139f7fa24&#39;</span> in submodule path <span class="s1">&#39;a&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>It’s not safe to run git submodule update if you’ve made and committed changes within a submodule without checking out a branch first. They will be silently overwritten</em>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>cat a.txt
</span><span class="line">module a
</span><span class="line"><span class="nv">$ </span><span class="nb">echo </span>line added from private2 &gt;&gt; a.txt
</span><span class="line"><span class="nv">$ </span>git commit -a -m <span class="s2">&quot;line added inside private2&quot;</span>
</span><span class="line"><span class="nv">$ </span><span class="nb">cd</span> ..
</span><span class="line"><span class="nv">$ </span>git submodule update
</span><span class="line">Submodule path <span class="s1">&#39;a&#39;</span>: checked out <span class="s1">&#39;d266b9873ad50488163457f025db7cdd9683d88b&#39;</span>
</span><span class="line"><span class="nv">$ </span><span class="nb">cd </span>a
</span><span class="line"><span class="nv">$ </span>cat a.txt
</span><span class="line">module a
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="internals-and-plumbing">Internals and Plumbing</h2>

<h3 id="how-git-stores-objects">How Git Stores Objects</h3>

<p><strong>Loose objects</strong> are the simpler format. It is simply the compressed data stored in a single file on disk.</p>

<p>If the sha of your object is <code>ab04d884140f7b0cf8bbf86d6883869f16a46f65</code>, then the file will be stored in the following path:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">GIT_DIR/objects/ab/04d884140f7b0cf8bbf86d6883869f16a46f65
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The Ruby implementation of object storage:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">put_raw_object</span><span class="p">(</span><span class="n">content</span><span class="p">,</span> <span class="n">type</span><span class="p">)</span>
</span><span class="line">  <span class="n">size</span> <span class="o">=</span> <span class="n">content</span><span class="o">.</span><span class="n">length</span><span class="o">.</span><span class="n">to_s</span>
</span><span class="line">
</span><span class="line">  <span class="n">header</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">type</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">size</span><span class="si">}</span><span class="s2">#body&quot;</span>
</span><span class="line">  <span class="n">store</span> <span class="o">=</span> <span class="n">header</span> <span class="o">+</span> <span class="n">content</span>
</span><span class="line">
</span><span class="line">  <span class="n">sha1</span> <span class="o">=</span> <span class="ss">Digest</span><span class="p">:</span><span class="ss">:SHA1</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">(</span><span class="n">store</span><span class="p">)</span>
</span><span class="line">  <span class="n">path</span> <span class="o">=</span> <span class="vi">@git_dir</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="n">sha1</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">2</span><span class="o">]</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="n">sha1</span><span class="o">[</span><span class="mi">2</span><span class="o">.</span><span class="n">.</span><span class="mi">40</span><span class="o">]</span>
</span><span class="line">
</span><span class="line">  <span class="k">if</span> <span class="o">!</span><span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class="line">    <span class="n">content</span> <span class="o">=</span> <span class="ss">Zlib</span><span class="p">:</span><span class="ss">:Deflate</span><span class="o">.</span><span class="n">deflate</span><span class="p">(</span><span class="n">store</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="no">FileUtils</span><span class="o">.</span><span class="n">mkdir_p</span><span class="p">(</span><span class="vi">@directory</span><span class="o">+</span><span class="s1">&#39;/&#39;</span><span class="o">+</span><span class="n">sha1</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">2</span><span class="o">]</span><span class="p">)</span>
</span><span class="line">    <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class="line">      <span class="n">f</span><span class="o">.</span><span class="n">write</span> <span class="n">content</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">  <span class="k">return</span> <span class="n">sha1</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Packed Objects</strong>. In order to save that space, Git utilizes the packfile. This is a format where Git will only save the part that has changed in the second file, with a pointer to the file it is similar to.</p>

<h3 id="the-git-index">The Git Index</h3>

<p>The index is a binary file (generally kept in .git/index) containing a sorted list of path names.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git ls-files --stage
</span><span class="line">100644 63c918c667fa005ff12ad89437f2fdc80926e21c 0
</span><span class="line">100644 5529b198e8d14decbe4ad99db3f7fb632de0439d 0
</span><span class="line">100644 6ff87c4664981e4397625791c8ea3bbb5f2279a3 0
</span><span class="line">100644 a37b2152bd26be2c2289e1f57a292534a51a93c7 0
</span><span class="line">100644 fbefe9a45b00a54b58d94d06eca48b03d40a50e0 0
</span><span class="line">...
</span><span class="line">100644 2511aef8d89ab52be5ec6a5e46236b4b6bcd07ea 0
</span><span class="line">100644 2ade97b2574a9f77e7ae4002a4e07a6a38e46d07 0
</span><span class="line">100644 d5de8292e05e7c36c4b68857c1cf9855e3d2f70a 0
</span><span class="line">.gitignore
</span><span class="line">.mailmap
</span><span class="line">COPYING
</span><span class="line">Documentation/.gitignore
</span><span class="line">Documentation/Makefile
</span><span class="line">xdiff/xtypes.h
</span><span class="line">xdiff/xutils.c
</span><span class="line">xdiff/xutils.h
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>
    <p>The index contains all the information necessary to generate a single (uniquely determined) tree object.</p>
  </li>
  <li>
    <p>The index enables fast comparisons between the tree object it defines and the working tree.</p>
  </li>
  <li>
    <p>It can efficiently represent information about merge conflicts between different tree objects.</p>
  </li>
</ol>

<h3 id="the-packfile-index">The Packfile Index</h3>

<p>Stored in <code>.git/objects/pack</code>.</p>

<p>Importantly, packfile indexes are not neccesary to extract objects from a packfile, they are simply used to quickly retrieve individual objects from a pack.</p>

<h3 id="raw-git">Raw Git</h3>

<p><strong>Creating Blobs</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git <span class="nb">hash</span>-object -w myfile.txt
</span><span class="line">6ff87c4664981e4397625791c8ea3bbb5f2279a3
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Creating Trees</strong></p>

<p>use <code>git mktree</code>.</p>

<p><strong>Creating Commits</strong></p>

<p>use <code>git commit-tree</code>.</p>

<p><strong>Updating a Branch Ref</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;a5f85ba5875917319471dfd98dfc636c1dc65650&#39;</span> &gt; .git/refs/heads/master
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>a safer way of doing that is to use the <code>git update-ref</code> command:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git update-ref refs/heads/master a5f85ba5875917319471dfd98dfc636c1dc65650
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to use Mock and Stub in Minitest and Rspec?]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2014/09/23/how-to-use-mock-and-stub-in-minitest-and-rspec/"/>
    <updated>2014-09-23T20:14:24+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2014/09/23/how-to-use-mock-and-stub-in-minitest-and-rspec</id>
    <content type="html"><![CDATA[<p>Referenced in <a href="http://blog.arvidandersson.se/2012/03/28/minimalicous-testing-in-ruby-1-9">Minimalicious testing in Ruby 1.9 with MiniTest</a></p>

<ul>
  <li>A <strong>stub object</strong> is a pretend object that implement some of the interface of the object it pretends to be and returns predefined responses. </li>
  <li>A <strong>mock object</strong> is similair to a stub but has another use case: <em>it helps decide if the test case it is used in passes by verifying if it’s methods has been called or not.</em></li>
</ul>

<h2 id="minitestmock">Minitest::Mock</h2>

<p><code>require 'minitest/mock'</code></p>

<p><em>stub</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">foo</span> <span class="o">=</span> <span class="ss">Minitest</span><span class="p">:</span><span class="ss">:Mock</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="c1">#&lt;Minitest::Mock:0x82ff7b5c&gt;</span>
</span><span class="line"><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">foo</span><span class="o">.</span><span class="n">expect</span><span class="p">(</span><span class="ss">:hi</span><span class="p">,</span> <span class="s1">&#39;hello&#39;</span><span class="p">)</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="c1">#&lt;Minitest::Mock:0x82ff7b5c&gt;</span>
</span><span class="line"><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">foo</span><span class="o">.</span><span class="n">hi</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="s2">&quot;hello&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>mock</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">bar</span> <span class="o">=</span> <span class="ss">Minitest</span><span class="p">:</span><span class="ss">:Mock</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="c1">#&lt;Minitest::Mock:0x821763e4&gt;</span>
</span><span class="line"><span class="o">[</span><span class="mi">6</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">bar</span><span class="o">.</span><span class="n">expect</span><span class="p">(</span><span class="ss">:hi</span><span class="p">,</span> <span class="s1">&#39;hello&#39;</span><span class="p">,</span> <span class="o">[</span><span class="s1">&#39;arg1&#39;</span><span class="p">,</span> <span class="s1">&#39;arg2&#39;</span><span class="o">]</span><span class="p">)</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="c1">#&lt;Minitest::Mock:0x821763e4&gt;</span>
</span><span class="line"><span class="o">[</span><span class="mi">7</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">bar</span><span class="o">.</span><span class="n">verify</span>
</span><span class="line"><span class="ss">MockExpectationError</span><span class="p">:</span> <span class="n">expected</span> <span class="n">hi</span><span class="p">(</span><span class="s2">&quot;arg1&quot;</span><span class="p">,</span> <span class="s2">&quot;arg2&quot;</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="s2">&quot;hello&quot;</span><span class="p">,</span> <span class="n">got</span> <span class="o">[]</span>
</span><span class="line"><span class="o">[</span><span class="mi">8</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">bar</span><span class="o">.</span><span class="n">hi</span><span class="p">(</span><span class="s1">&#39;arg1&#39;</span><span class="p">,</span> <span class="s1">&#39;arg2&#39;</span><span class="p">)</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="s2">&quot;hello&quot;</span>
</span><span class="line"><span class="o">[</span><span class="mi">9</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">bar</span><span class="o">.</span><span class="n">verify</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="rspecmocks">RSpec::Mocks</h2>

<p><code>require 'rspec/mocks/standalone'</code></p>

<p><em>stub</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">foo</span> <span class="o">=</span> <span class="n">double</span><span class="p">()</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="c1">#&lt;RSpec::Mocks::Mock:0x82c66b78 @name=nil&gt;</span>
</span><span class="line"><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">foo</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:hi</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">)</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class="line"><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">foo</span><span class="o">.</span><span class="n">hi</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="s2">&quot;hello&quot;</span>
</span><span class="line"><span class="o">[</span><span class="mi">7</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">foo</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:hi</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="s1">&#39;world&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="s1">&#39;hello world&#39;</span><span class="p">)</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class="line"><span class="o">[</span><span class="mi">9</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">foo</span><span class="o">.</span><span class="n">hi</span><span class="p">(</span><span class="s1">&#39;world&#39;</span><span class="p">)</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="s2">&quot;hello world&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>mock</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="o">[</span><span class="mi">18</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">foo</span> <span class="o">=</span> <span class="n">double</span><span class="p">()</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="c1">#&lt;RSpec::Mocks::Mock:0x82c66b78 @name=nil&gt;</span>
</span><span class="line"><span class="o">[</span><span class="mi">19</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">foo</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:hi</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="s1">&#39;world&#39;</span><span class="p">)</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="c1">#&lt;RSpec::Mocks::MessageExpectation:0x818c11f4&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="reference">Reference</h3>

<ul>
  <li><a href="http://www.ruby-doc.org/stdlib-2.0/libdoc/minitest/rdoc/MiniTest/Mock.html">Minitest::Mock</a></li>
  <li><a href="https://www.relishapp.com/rspec/rspec-mocks/v/2-3/docs/method-stubs">Rspec Mocks</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASCIIcast of Fundamentals of Design by CodeSchool]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2014/06/22/asciicast-of-fundamentals-of-design-by-codeschool/"/>
    <updated>2014-06-22T23:35:39+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2014/06/22/asciicast-of-fundamentals-of-design-by-codeschool</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#typeface-classifications">Typeface Classifications</a>    <ul>
      <li><a href="#typefaces">Typefaces</a></li>
      <li><a href="#principles">Principles</a></li>
    </ul>
  </li>
  <li><a href="#font-size-leading--weights">Font Size, Leading &amp; Weights</a></li>
  <li><a href="#line-width--widows">Line-Width &amp; Widows</a>    <ul>
      <li><a href="#line-width-is-measured-in-cpl">Line Width Is Measured in CPL</a></li>
      <li><a href="#save-the-orphans--widows">Save the Orphans &amp; Widows.</a></li>
    </ul>
  </li>
  <li><a href="#color-theory">Color Theory</a>    <ul>
      <li><a href="#hsl">HSL</a></li>
    </ul>
  </li>
  <li><a href="#color-scheme">Color Scheme</a>    <ul>
      <li><a href="#colors">Colors</a></li>
      <li><a href="#schemes">Schemes</a></li>
    </ul>
  </li>
  <li><a href="#color--type">Color &amp; Type</a></li>
  <li><a href="#basic-layout">Basic Layout</a></li>
  <li><a href="#the-grid">The Grid</a>    <ul>
      <li><a href="#fixed-or-fluid">Fixed or Fluid</a></li>
      <li><a href="#example">Example</a></li>
    </ul>
  </li>
  <li><a href="#whitespce--balance">Whitespce &amp; Balance</a></li>
</ul>

<h2 id="typeface-classifications">Typeface Classifications</h2>

<p>Content is king.</p>

<p>What’s your audience?</p>

<p>Find the typeface suits the content well.</p>

<h3 id="typefaces">Typefaces</h3>

<p><strong>Serif</strong></p>

<ul>
  <li>
    <p>Humanist Serif, suits for journalism or historical applications.</p>

    <p><img src="https://www.dropbox.com/s/8dpt1vw1senig4o/vlcsnap-2014-06-13-14h32m05s237.png?dl=1" alt="Humanist Serif" /></p>
  </li>
  <li>
    <p>Transitional Serif, suits for traditional academia or legal applications.</p>

    <p><img src="https://www.dropbox.com/s/2206u036n1clj0m/vlcsnap-2014-06-13-14h32m25s106.png?dl=1" alt="Transitional Serif" /></p>
  </li>
  <li>
    <p>Modern Serif, suits for arts or culture applications.</p>

    <p><img src="https://www.dropbox.com/s/nw37ut471ydku6r/vlcsnap-2014-06-13-14h32m36s248.png?dl=1" alt="Modern Serif" /></p>
  </li>
  <li>
    <p>Egyptian (Slab Serif), suits for marketing or promotional applications.</p>

    <p><img src="https://www.dropbox.com/s/uid95y9zkwud13g/vlcsnap-2014-06-13-14h32m57s247.png?dl=1" alt="Egyptian (Slab Serif)" /></p>
  </li>
</ul>

<p><strong>Sans-Serif</strong></p>

<p><em>Sans</em> is the French word for without.</p>

<ul>
  <li>
    <p>Humanist Sans Serif, suits for government or educational applications.  </p>

    <p><img src="https://www.dropbox.com/s/ih12v7cqfolk4ev/vlcsnap-2014-06-13-14h39m01s9.png?dl=1" alt="Humanist Sans Serif" /></p>
  </li>
  <li>
    <p>Transitional Sans Serif, suits for technology or transportation applications.</p>

    <p><img src="https://www.dropbox.com/s/xmb9ynyxq4rz0p2/vlcsnap-2014-06-13-15h16m50s201.png?dl=1" alt="Transitional Sans Serif" /></p>
  </li>
  <li>
    <p>Geometric Sans Serif, suits for science or architecture applications.</p>

    <p><img src="https://www.dropbox.com/s/c2d37eourvgzpv7/vlcsnap-2014-06-13-14h42m35s95.png?dl=1" alt="Geometric Sans Serif" /></p>
  </li>
</ul>

<p><strong>script</strong></p>

<p>Difficult to read, don’t use in body copy.</p>

<p><em>Comic Sans</em> is a script font, not a Sans Serif font. Maybe don’t use it everywhere.</p>

<h3 id="principles">Principles</h3>

<p>Don’t choose two fonts from the same style.</p>

<p><img src="https://www.dropbox.com/s/dxuoaanf7dp453y/vlcsnap-2014-06-13-14h44m57s130.png?dl=1" alt="p1" /></p>

<p>Don’t choose two fonts from the same class.</p>

<p><img src="https://www.dropbox.com/s/lkg7f2o4vtpqk3i/vlcsnap-2014-06-13-14h46m49s85.png?dl=1" alt="p2" /></p>

<p>When mixing classes, find a similar trait using fonts that share one thing in common but are otherwise different.</p>

<p><img src="https://www.dropbox.com/s/elu59eddvnu2pvr/vlcsnap-2014-06-13-14h48m11s213.png?dl=1" alt="p3" />
<img src="https://www.dropbox.com/s/9yonlu6rod30ybx/vlcsnap-2014-06-13-14h48m23s225.png?dl=1" alt="p4" /></p>

<p>Contrast over Harmony. Keep it the same or change it a lot, look for emphatic differences rather than mushy transitions.</p>

<p><img src="https://www.dropbox.com/s/ji0zx7v0kif5buc/vlcsnap-2014-06-13-14h48m52s15.png?dl=1" alt="p5" /></p>

<h2 id="font-size-leading--weights">Font Size, Leading &amp; Weights</h2>

<p><img src="https://www.dropbox.com/s/26lvgz1uyheudam/vlcsnap-2014-06-13-16h19m36s197.png?dl=1" alt="Establish Visual Hierarchy" /></p>

<p>Establish visual relationships between elements on the page is going to allow your users to more quickly process the information.</p>

<p>Use different font size. Huge size is annoying, and 16px is good by suggestion.</p>

<p><img src="https://www.dropbox.com/s/9em7t7q70jhb709/vlcsnap-2014-06-13-16h21m38s168.png?dl=1" alt="Font Size" /></p>

<p>Leading is around 120% to 150% of the body copy size.</p>

<p><img src="https://www.dropbox.com/s/1nnn9pnvqj3rma1/vlcsnap-2014-06-13-16h22m48s94.png?dl=1" alt="Leading" /></p>

<h2 id="line-width--widows">Line-Width &amp; Widows</h2>

<h3 id="line-width-is-measured-in-cpl">Line Width Is Measured in CPL</h3>

<blockquote>
  <p>Robert Bringhurst in “The elements of Typographic style” recommends 45 to 75 characters per line, 66 characters per line is widely considered the ideal. A width of 600px will hold around 75 characters of 18px text.</p>
</blockquote>

<p>Use <code>max-width</code> to control CPL.</p>

<p><img src="https://www.dropbox.com/s/3lmavcczrk9s41r/vlcsnap-2014-06-13-16h40m13s48.png?dl=1" alt="CPL" /></p>

<h3 id="save-the-orphans--widows">Save the Orphans &amp; Widows.</h3>

<p><img src="https://www.dropbox.com/s/nrromwg0ozc5b16/vlcsnap-2014-06-13-16h56m47s155.png?dl=1" alt="widow" /></p>

<p><img src="https://www.dropbox.com/s/18xj5apbq3hrlwf/vlcsnap-2014-06-13-16h57m24s123.png?dl=1" alt="orphan" /></p>

<p>No perfect solution.  </p>

<p>Try tweaking with the font size, weight, line width, and leading to fix the problem.</p>

<h2 id="color-theory">Color Theory</h2>

<ul>
  <li>
    <p>Subtractive Color, using CMYK (Cyan, Megenta, Yellow) color space.</p>

    <p><img src="https://www.dropbox.com/s/6mm2nl7dechq2z5/vlcsnap-2014-06-15-08h25m21s91.png?dl=1" alt="CMYK" /></p>
  </li>
  <li>
    <p>Additive Color, using RGB spectrum.</p>

    <p><img src="https://www.dropbox.com/s/easxunlr4c64opi/vlcsnap-2014-06-15-08h25m57s202.png?dl=1" alt="RGB" /></p>
  </li>
</ul>

<h3 id="hsl">HSL</h3>

<p>RGB is hard, while human process HSL. Hue, Saturation, Lightness.</p>

<p><strong>Hue</strong></p>

<p><img src="https://www.dropbox.com/s/9872tl0uvqx3vaw/vlcsnap-2014-06-15-08h27m27s79.png?dl=1" alt="hue" /></p>

<p><strong>Saturation</strong></p>

<p><img src="https://www.dropbox.com/s/f2aml0jjak4fhe2/vlcsnap-2014-06-15-08h28m27s178.png?dl=1" alt="staturation" /></p>

<p><strong>Lightness</strong></p>

<p><img src="https://www.dropbox.com/s/4f88kprtkoaua44/vlcsnap-2014-06-15-08h28m33s232.png?dl=1" alt="lightness" /></p>

<p>Example</p>

<p><img src="https://www.dropbox.com/s/kkbabl1ou5jut80/vlcsnap-2014-06-15-08h28m43s70.png?dl=1" alt="hsl example" /></p>

<p><strong>How to use?</strong></p>

<p><img src="https://www.dropbox.com/s/wurqrpjx0lxv7ft/vlcsnap-2014-06-15-08h29m20s189.png?dl=1" alt="use1" /></p>

<p><img src="https://www.dropbox.com/s/vdhldtjypl1c45c/vlcsnap-2014-06-15-08h29m22s214.png?dl=1" alt="use2" /></p>

<p><img src="https://www.dropbox.com/s/skfqyxi2tekvrda/vlcsnap-2014-06-15-08h29m37s111.png?dl=1" alt="use3" /></p>

<p><strong>What about HSB, B for brightness?</strong></p>

<p><img src="https://www.dropbox.com/s/btfl63w63dgvxkk/vlcsnap-2014-06-15-08h29m45s191.png?dl=1" alt="hsb" /></p>

<h2 id="color-scheme">Color Scheme</h2>

<p>Start by selecting a Base Color.</p>

<p>Keep Culture in Mind.</p>

<p>Build Scheme around Base Color.</p>

<h3 id="colors">Colors</h3>

<p><img src="https://www.dropbox.com/s/c0xlct808u0egfs/%E6%9C%AA%E5%91%BD%E5%90%8D_meitu_0.jpg?dl=1" alt="colors" /></p>

<h3 id="schemes">Schemes</h3>

<p><strong>Monochromatic</strong></p>

<p><img src="https://www.dropbox.com/s/0zegfh6r5pew0ny/vlcsnap-2014-06-15-13h30m23s77.png?dl=1" alt="monochromatic" /></p>

<p><strong>Analogous</strong></p>

<p>Analogous color schemes require you have colors with hues that both ascend and descend equally on either side of the base color. They also should be less than 40 degrees from the base.</p>

<p><img src="https://www.dropbox.com/s/vtapllnhbe21v5u/vlcsnap-2014-06-15-13h32m19s227.png?dl=1" alt="analogous" /></p>

<p><strong>Complementary</strong></p>

<p><img src="https://www.dropbox.com/s/g4nscjzi025rlxe/vlcsnap-2014-06-15-13h32m17s204.png?dl=1" alt="complementary" />
<img src="https://www.dropbox.com/s/dif5r4pj3u4f1rg/vlcsnap-2014-06-15-13h31m11s38.png?dl=1" alt="complementary2" /></p>

<p>Don’t have to be perfect. Use the methods to tweak as needed to fit your project.</p>

<h2 id="color--type">Color &amp; Type</h2>

<p>Typography must have a high degree of contrast between it and its background.</p>

<p>Black and white are the best.</p>

<p><img src="https://www.dropbox.com/s/aqgc6u6z8q6s76r/vlcsnap-2014-06-15-21h17m52s0.png?dl=1" alt="black and white" /></p>

<p>Colors that are the same hue but have a very high saturation and lightness contrast are a close second.</p>

<p><img src="https://www.dropbox.com/s/5h1b8ly733u2tfo/vlcsnap-2014-06-15-21h17m54s23.png?dl=1" alt="same hue" /></p>

<p>Some colors are intrinsically difficult for humans to distinguish, such as red, green, blue, and orange.</p>

<p><img src="https://www.dropbox.com/s/xt5sz3qp1q48mit/vlcsnap-2014-06-15-21h19m05s218.png?dl=1" alt="hard distinguish" /></p>

<p>Some colors are light colors, warm colors, like yellow, and some colors are dark colors, cool colors, like blue. So creating contrast in which the yellow is darker than the blue creates a very awkward experience.</p>

<p><img src="https://www.dropbox.com/s/nm0c0nr68wvf4nl/vlcsnap-2014-06-15-21h22m13s51.png?dl=1" alt="light and dark colors" /></p>

<p><img src="https://www.dropbox.com/s/pebe0b2kcvf6ak4/vlcsnap-2014-06-15-21h21m01s107.png?dl=1" alt="yellow and blue" /></p>

<p>Making yellow light, and blue dark is much more legible.</p>

<p><img src="https://www.dropbox.com/s/kmpd6cgbr8we42v/vlcsnap-2014-06-15-21h22m00s181.png?dl=1" alt="legible colors" /></p>

<p>Warm and cool colors can be used to create depth, as warm colors appear closer to the screen or to the user. So use cool colors as the background and warm colors as the foreground.</p>

<p><img src="https://www.dropbox.com/s/a8rf1a4mt3stsb2/vlcsnap-2014-06-15-21h23m52s24.png?dl=1" alt="warm colors are closer to the user" /></p>

<p>You should combine colors to reinforce <strong>Visual Hierarchy</strong>. As an example, the CodeSchool website get progressively darker as you scroll, which anchors the page and create a more stable viewing experience.</p>

<p><img src="https://www.dropbox.com/s/nu4btrmzrw5xi0n/vlcsnap-2014-06-15-21h35m30s84.png?dl=1" alt="codeschool" /></p>

<p>Dont’ be tacky. And treat the image behind the text to make it stand out. </p>

<p><img src="https://www.dropbox.com/s/ujn4xfnha8kcq9e/vlcsnap-2014-06-15-21h29m29s200.png?dl=1" alt="Treat image behind text" /></p>

<h2 id="basic-layout">Basic Layout</h2>

<p><img src="https://www.dropbox.com/s/7kk0h969n7deob1/vlcsnap-2014-06-17-13h40m49s203.png?dl=1" alt="layout1" /></p>

<p><img src="https://www.dropbox.com/s/hpzsgrw3dumdspd/vlcsnap-2014-06-17-13h40m57s24.png?dl=1" alt="layout2" /></p>

<p><img src="https://www.dropbox.com/s/5vfogp9jvplgajb/vlcsnap-2014-06-17-13h41m06s122.png?dl=1" alt="layout3" /></p>

<p>Reinforces the <strong>Visual Hierarchy</strong>.</p>

<p><img src="https://www.dropbox.com/s/uuf91hcg23xlblf/vlcsnap-2014-06-17-13h41m23s22.png?dl=1" alt="layout4" /></p>

<p><img src="https://www.dropbox.com/s/7gkg2anbmg3tfhz/vlcsnap-2014-06-17-13h43m31s29.png?dl=1" alt="layout5" /></p>

<p><img src="https://www.dropbox.com/s/uum2iooo7ko6bn3/vlcsnap-2014-06-17-13h47m26s72.png?dl=1" alt="layout6" /></p>

<h2 id="the-grid">The Grid</h2>

<p>It is made up of a system of horizontal and vetical lines.</p>

<ul>
  <li>
    <p>The vertical lines create columns with gutters in between them that are used to proportionally distribute elements across the page.</p>

    <p><img src="https://www.dropbox.com/s/tvmsme4tsvmu5lq/vlcsnap-2014-06-21-02h29m42s176.png?dl=1" alt="vertical lines" /></p>

    <p>Avoid clutter by respecting the gutters. Don’t put design elements or type in between the columns.</p>

    <p><img src="https://www.dropbox.com/s/dgn6il3m17asxdb/vlcsnap-2014-06-21-02h41m13s209.png?dl=1" alt="avoid clutter" /></p>
  </li>
  <li>
    <p>The horizontal lines are used to create a baseline for text that shoudl be equal to the line height.</p>

    <p><img src="https://www.dropbox.com/s/nmqltmky7rx16e2/vlcsnap-2014-06-21-02h30m23s114.png?dl=1" alt="horizontal lines" /></p>
  </li>
</ul>

<p>Use them in Photoshop or another graphics software as a reference when designing.</p>

<h3 id="fixed-or-fluid">Fixed or Fluid</h3>

<ul>
  <li>
    <p>With a fixed grid, the browser can get bigger or smaller, and the grid will remain constant.</p>
  </li>
  <li>
    <p>With a fluid grid, it grows or shrinks with the browser window. And columns are either added or dropped to better serve that size.</p>
  </li>
</ul>

<h3 id="example">Example</h3>

<p><img src="https://www.dropbox.com/s/ndabm6ddf0sd6ts/vlcsnap-2014-06-21-02h38m41s189.png?dl=1" alt="the grid1" /></p>

<p><img src="https://www.dropbox.com/s/00mrqaelqww8qdi/vlcsnap-2014-06-21-02h38m44s7.png?dl=1" alt="the grid2" /></p>

<h2 id="whitespce--balance">Whitespce &amp; Balance</h2>

<p>Balance all the things.</p>

<p><strong>Symmetry</strong></p>

<p><strong>Asymmetry</strong></p>

<p>All of the principles together contribute to balance.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inside ActiveSupport Notifications]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2014/06/03/inside-activesupport-notifications/"/>
    <updated>2014-06-03T00:45:35+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2014/06/03/inside-activesupport-notifications</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#preparation">Preparation</a></li>
  <li><a href="#activesupportnotifications">ActiveSupport::Notifications</a>    <ul>
      <li><a href="#file-name">File name</a></li>
      <li><a href="#dependency">Dependency</a></li>
      <li><a href="#brief">Brief</a></li>
      <li><a href="#specification">Specification</a>        <ul>
          <li><a href="#class-variables">Class Variables</a></li>
          <li><a href="#class-methods">Class Methods</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#activesupportnotificationsfanout">ActiveSupport::Notifications::Fanout</a>    <ul>
      <li><a href="#file-name-1">File name</a></li>
      <li><a href="#dependency-1">Dependency</a></li>
      <li><a href="#brief-1">Brief</a></li>
      <li><a href="#specification-1">Specification</a>        <ul>
          <li><a href="#instance-variables">Instance Variables</a></li>
          <li><a href="#instance-methods">Instance Methods</a></li>
          <li><a href="#modules">Modules</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#activesupportnotificationsinstrumenter">ActiveSupport::Notifications::Instrumenter</a>    <ul>
      <li><a href="#file-name-2">File name</a></li>
      <li><a href="#dependency-2">Dependency</a></li>
      <li><a href="#brief-2">Brief</a></li>
      <li><a href="#specification-2">Specification</a>        <ul>
          <li><a href="#instance-variables-1">Instance Variables</a></li>
          <li><a href="#instance-methods-1">Instance Methods</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#activesupportnotificationsevent">ActiveSupport::Notifications::Event</a>    <ul>
      <li><a href="#file-name-3">File name</a></li>
      <li><a href="#dependency-3">Dependency</a></li>
      <li><a href="#specification-3">Specification</a></li>
    </ul>
  </li>
  <li><a href="#main-working-flow">Main Working Flow</a>    <ul>
      <li><a href="#activesupportnotificationssubscribe">ActiveSupport::Notifications.subscribe</a></li>
      <li><a href="#activesupportnotificationsinstrument">ActiveSupport::Notifications.instrument</a></li>
    </ul>
  </li>
  <li><a href="#misc">MISC</a></li>
  <li><a href="#reference">Reference</a></li>
</ul>

<h2 id="preparation">Preparation</h2>

<ul>
  <li>Read API doc first, <a href="ActiveSupport::Notifications">ActiveSupport::Notifications</a>.</li>
  <li>About hooks inside Rails for instrumentation, check the edge doc on <a href="http://edgeguides.rubyonrails.org/active_support_instrumentation.html">Active Support Instrumentation</a>.</li>
</ul>

<p>Then let’s read through the <strong>ActiveSupport::Notifications</strong> source code.</p>

<h2 id="activesupportnotifications">ActiveSupport::Notifications</h2>

<h3 id="file-name">File name</h3>

<p><a href="https://github.com/rails/rails/blob/master/activesupport%2Flib%2Factive_support%2Fnotifications.rb">activesupport/lib/active_support/notifications.rb</a></p>

<h3 id="dependency">Dependency</h3>

<ul>
  <li><code>active_support/notifications/instrumenter</code></li>
  <li><code>active_support/notifications/fanout</code></li>
  <li><code>active_support/per_thread_registry</code></li>
</ul>

<h3 id="brief">Brief</h3>

<ol>
  <li>A class attribute accessor <code>notifier</code>, which is initialized by <code>Fanout.new</code>.</li>
  <li>Several class methods as the interfaces exposed, which encapsulate <code>notifer</code> to do the real work.</li>
  <li>A class named <strong>InstrumentationRegistry</strong>.</li>
</ol>

<h3 id="specification">Specification</h3>

<h4 id="class-variables">Class Variables</h4>

<p><code>self.notifier = Fanout.new</code></p>

<h4 id="class-methods">Class Methods</h4>

<ul>
  <li>
    <p><code>subscribe</code>, <code>unsubscribe</code> and <code>publish</code> all delegate to <code>notifier</code>, like</p>

    <p><code>ruby
  def subscribe(*args, &amp;block)
    notifier.subscribe(*args, &amp;block)
  end
 </code></p>
  </li>
  <li>
    <p><code>subscribed(callback, *args, &amp;block)</code>, <code>subscribe</code> while <code>block</code> is running, and <code>unsubscribe</code> while running is over.</p>

    <p><code>ruby
  def subscribed(callback, *args, &amp;block)
    subscriber = subscribe(*args, &amp;callback)
    yield
  ensure
    unsubscribe(subscriber)
  end
 </code></p>
  </li>
  <li>
    <p><code>instrument(name, payload = {})</code></p>

    <p><code>ruby
  def instrument(name, payload = {})
    if notifier.listening?(name)
      instrumenter.instrument(name, payload) { yield payload if block_given? }
    else
      yield payload if block_given?
    end
  end
 </code></p>
  </li>
</ul>

<p><code>notifier.listening?(name)</code> is checking if there are subscribers listening on the event name.</p>

<p><strong><em>And what’s an instrumenter?</em></strong></p>

<p>Check out the <strong>ActiveSupport::Notifications::Instrumenter</strong> below or skip this part temporally.</p>

<p>Let’s talk about <strong>InstrumentationRegistry</strong> first, it is a sub-class defined in <strong>ActiveSupport::Notifications</strong>. It extends <strong>ActiveSupport::PerThreadRegistry</strong> to keep thread safe, and defines <code>#instrumenter_for</code> used for recording <strong>Instrumenter</strong> instance for specific <code>notifier</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># This class is a registry which holds all of the +Instrumenter+ objects</span>
</span><span class="line"><span class="c1"># in a particular thread local. To access the +Instrumenter+ object for a</span>
</span><span class="line"><span class="c1"># particular +notifier+, you can call the following method:</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1">#   InstrumentationRegistry.instrumenter_for(notifier)</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1"># The instrumenters for multiple notifiers are held in a single instance of</span>
</span><span class="line"><span class="c1"># this class.</span>
</span><span class="line"><span class="k">class</span> <span class="nc">InstrumentationRegistry</span> <span class="c1"># :nodoc:</span>
</span><span class="line">  <span class="kp">extend</span> <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:PerThreadRegistry</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="vi">@registry</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">instrumenter_for</span><span class="p">(</span><span class="n">notifier</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@registry</span><span class="o">[</span><span class="n">notifier</span><span class="o">]</span> <span class="o">||=</span> <span class="no">Instrumenter</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">notifier</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Then look back in <strong>ActiveSupport::Notifications</strong> for its usage:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">instrumenter</span>
</span><span class="line">  <span class="no">InstrumentationRegistry</span><span class="o">.</span><span class="n">instance</span><span class="o">.</span><span class="n">instrumenter_for</span><span class="p">(</span><span class="n">notifier</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Extending <strong>ActiveSupport::PerThreadRegistry</strong> gives <strong>InstrumentationRegistry</strong> the <code>instance</code> class methods, returns a thread local <strong>InstrumentationRegistry</strong> instance. Check the <strong>ActiveSupport::PerThreadRegistry</strong> <a href="http://api.rubyonrails.org/classes/ActiveSupport/PerThreadRegistry.html">api</a> for details.</p>

<h2 id="activesupportnotificationsfanout">ActiveSupport::Notifications::Fanout</h2>

<h3 id="file-name-1">File name</h3>

<p><a href="https://github.com/rails/rails/blob/master/activesupport%2Flib%2Factive_support%2Fnotifications%2Ffanout.rb">activesupport/lib/active_support/notifications/fanout.rb</a></p>

<h3 id="dependency-1">Dependency</h3>

<ul>
  <li><code>mutex_m</code>, a Ruby Std-lib module. <a href="http://www.ruby-doc.org/stdlib-2.1.2//libdoc/mutex_m/rdoc/Mutex_m.html">api</a></li>
  <li><code>thread_safe</code>, a collection of thread-safe versions of common core Ruby classes. <a href="https://github.com/headius/thread_safe">api</a></li>
</ul>

<h3 id="brief-1">Brief</h3>

<p>This is a default queue implementation that ships with Notifications. It just pushes events to all registered log subscribers.</p>

<p>This class is thread safe. All methods are reentrant.</p>

<h3 id="specification-1">Specification</h3>

<h4 id="instance-variables">Instance Variables</h4>

<p><code>@subscribers</code>, an array, records the subscribers.</p>

<p><code>@listeners_for</code>, a reverse map(hash). It maps the event name to the subscribers. Initialized by <code>ThreadSafe::Cache.new</code>, <a href="https://github.com/headius/thread_safe">thread_safe</a> gem says:</p>

<blockquote>
  <p><code>ThreadSafe::Cache</code> also exists, as a hash-like object, and should have
much better performance characteristics esp. under high concurrency than
<code>ThreadSafe::Hash</code>. However, <code>ThreadSafe::Cache</code> is not strictly semantically
equivalent to a ruby <code>Hash</code> – for instance, it does not necessarily retain
ordering by insertion time as <code>Hash</code> does. For most uses it should do fine
though, and we recommend you consider <code>ThreadSafe::Cache</code> instead of
<code>ThreadSafe::Hash</code> for your concurrency-safe hash needs. It understands some
options when created (depending on your ruby platform) that control some of the
internals.</p>
</blockquote>

<h4 id="instance-methods">Instance Methods</h4>

<ul>
  <li>
    <p><code>subscribe(pattern = nil, block = Proc.new)</code></p>

    <p><code>ActiveSupport::Notifications.subscribe</code> use this method on <code>notifier</code> to subscribe event name based on <code>pattern</code> and a <code>block</code> to do the instrumentation callback.</p>

    <p>It initialize a <em>subscriber</em> with <code>Subscribers.new pattern, block</code>, use <code>synchronize</code>(for thread safe) to record <em>subscriber</em> into <code>@subscribers</code>, and clear the <code>@listeners_for</code>, then returns the <em>subscriber</em>.</p>

    <p><code>ruby
  def subscribe(pattern = nil, block = Proc.new)
    subscriber = Subscribers.new pattern, block
    synchronize do
      @subscribers &lt;&lt; subscriber
      @listeners_for.clear
    end
    subscriber
  end
 </code></p>
  </li>
  <li>
    <p><code>unsubscribe(subscriber)</code></p>

    <p><code>ruby
  synchronize do
    @subscribers.reject! { |s| s.matches?(subscriber) }
      @listeners_for.clear
    end
  end
 </code></p>

    <p>Note the <code>matches?</code> method on subscriber. Every subscriber object defines this method, <strong>Subscribers::Evented</strong> and <strong>Subscribers::Timed</strong> defines it like this:</p>

    <p><code>ruby
  def matches?(subscriber_or_name)
    self === subscriber_or_name ||
      @pattern &amp;&amp; @pattern === subscriber_or_name
  end
 </code></p>

    <p>Unsubscribe a subscriber object or unsubscribe based on the <code>@pattern</code> matching.</p>

    <p><strong>Subscribers::AllMessages</strong> alias <code>matches?</code> to <code>===</code>, just do the type matching.</p>
  </li>
  <li>
    <p><code>start</code>, <code>finish</code>, <code>publish(name, id, payload)</code></p>

    <p>just delegates to subscribers based on the event name.</p>

    <p><code>ruby
  def start(name, id, payload)
    listeners_for(name).each { |s| s.start(name, id, payload) }
  end
 </code></p>
  </li>
  <li>
    <p><code>listeners_for(name)</code></p>

    <p>a helper method, equals fetch or set on <code>@listeners_for</code>, returns the subscribers based on the event name.</p>

    <p><code>ruby
  def listeners_for(name)
    # this is correctly done double-checked locking (ThreadSafe::Cache's lookups have volatile semantics)
    @listeners_for[name] || synchronize do
      # use synchronisation when accessing @subscribers
      @listeners_for[name] ||= @subscribers.select { |s| s.subscribed_to?(name) }
    end
  end
 </code></p>
  </li>
  <li>
    <p><code>listening?(name)</code></p>

    <p>a helper method, checks if <code>listeners_for(name).any?</code>.</p>
  </li>
  <li>
    <p><code>wait</code></p>

    <p>as this is a sync queue, this method is left blank.</p>
  </li>
</ul>

<h4 id="modules">Modules</h4>

<ul>
  <li>
    <p><strong>Subscribers</strong></p>

    <p><strong>Subscribers</strong> defines a class method <code>new</code> and three sub-classes: <strong>Evented</strong>, <strong>Timed</strong>, and <strong>AllMessages</strong>. <strong>Timed</strong> inheritates <strong>Evented</strong>, and <strong>AllMessages</strong> encapsulates an <strong>Evented</strong> object.</p>

    <p>About <code>self.new(pattern, listener)</code>, remember where does <code>Subscribers.new</code> get called?</p>

    <p>It’s in <code>Fanout#subscribe(pattern = nil, block = Proc.new)</code>. If the <code>block</code> can duck-typing <code>:start</code> and <code>:finish</code>, it’ll initialize a subscriber by <strong>Evented</strong> with <code>pattern</code> and <code>block</code> recorded, otherwise by <strong>Timed</strong>. And if <code>pattern</code> is nil, which means calling <code>ActiveSupport::Notifications.subscribe</code> without event name, <code>Subscribers.new</code> returns an <strong>AllMessages</strong> object which initialized with a subscriber defined above. Otherwise(if <code>pattern</code> presents) returns a subscriber directly.</p>

    <p>Normally we use <code>ActiveSupport::Notifications.subscribe</code> in two ways:</p>

    <ul>
      <li>subscribe all events, which means no <code>pattern</code> passed, and a <strong>Subscribers::AllMessages</strong> instance saved.</li>
      <li>the <code>block</code> we pass to <code>ActiveSupport::Notifications.subscribe</code> won’t respond to <code>start</code> and <code>finish</code>, which means a <strong>Subscribers::Timed</strong> instance saved.</li>
    </ul>

    <p>These two ways have no conflicts: if passing a nil pattern and a block, it just returns an <strong>Subscribers::AllMessages</strong> instance which has a <strong>Subscribers::Timed</strong> instance wrapped.</p>

    <p>So let’s check it out what does a <strong>Subscribers::Timed</strong> instance respond?</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="nb">id</span><span class="p">,</span> <span class="n">payload</span><span class="p">)</span>
</span><span class="line">  <span class="n">timestack</span> <span class="o">=</span> <span class="no">Thread</span><span class="o">.</span><span class="n">current</span><span class="o">[</span><span class="ss">:_timestack</span><span class="o">]</span> <span class="o">||=</span> <span class="o">[]</span>
</span><span class="line">  <span class="n">timestack</span><span class="o">.</span><span class="n">push</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">finish</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="nb">id</span><span class="p">,</span> <span class="n">payload</span><span class="p">)</span>
</span><span class="line">  <span class="n">timestack</span> <span class="o">=</span> <span class="no">Thread</span><span class="o">.</span><span class="n">current</span><span class="o">[</span><span class="ss">:_timestack</span><span class="o">]</span>
</span><span class="line">  <span class="n">started</span> <span class="o">=</span> <span class="n">timestack</span><span class="o">.</span><span class="n">pop</span>
</span><span class="line">  <span class="vi">@delegate</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">started</span><span class="p">,</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="p">,</span> <span class="nb">id</span><span class="p">,</span> <span class="n">payload</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">publish</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class="line">  <span class="vi">@delegate</span><span class="o">.</span><span class="n">call</span> <span class="nb">name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">subscribed_to?</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">  <span class="vi">@pattern</span> <span class="o">===</span> <span class="nb">name</span><span class="o">.</span><span class="n">to_s</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">matches?</span><span class="p">(</span><span class="n">subscriber_or_name</span><span class="p">)</span>
</span><span class="line">  <span class="nb">self</span> <span class="o">===</span> <span class="n">subscriber_or_name</span> <span class="o">||</span>
</span><span class="line">    <span class="vi">@pattern</span> <span class="o">&amp;&amp;</span> <span class="vi">@pattern</span> <span class="o">===</span> <span class="n">subscriber_or_name</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="activesupportnotificationsinstrumenter">ActiveSupport::Notifications::Instrumenter</h2>

<h3 id="file-name-2">File name</h3>

<p><a href="https://github.com/rails/rails/blob/master/activesupport%2Flib%2Factive_support%2Fnotifications%2Finstrumenter.rb">activesupport/lib/active_support/notifications/instrumenter.rb</a></p>

<h3 id="dependency-2">Dependency</h3>

<p><code>securerandom</code>, <a href="http://ruby-doc.org/stdlib-2.1.0/libdoc/securerandom/rdoc/SecureRandom.html">api</a></p>

<h3 id="brief-2">Brief</h3>

<h3 id="specification-2">Specification</h3>

<h4 id="instance-variables-1">Instance Variables</h4>

<p><code>@id</code>, with an <code>attr_reader</code>, generated by <code>SecureRandom.hex(10)</code>.</p>

<p><code>@notifier</code>, records the <strong>Fanout</strong> instance.</p>

<h4 id="instance-methods-1">Instance Methods</h4>

<ul>
  <li><code>start(name, payload)</code>, <code>finish(name, payload)</code></li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">payload</span><span class="p">)</span>
</span><span class="line">  <span class="vi">@notifier</span><span class="o">.</span><span class="n">start</span> <span class="nb">name</span><span class="p">,</span> <span class="vi">@id</span><span class="p">,</span> <span class="n">payload</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">finish</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">payload</span><span class="p">)</span>
</span><span class="line">  <span class="vi">@notifier</span><span class="o">.</span><span class="n">finish</span> <span class="nb">name</span><span class="p">,</span> <span class="vi">@id</span><span class="p">,</span> <span class="n">payload</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li><code>instrument(name, payload={})</code></li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">instrument</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">payload</span><span class="o">=</span><span class="p">{})</span>
</span><span class="line">  <span class="n">start</span> <span class="nb">name</span><span class="p">,</span> <span class="n">payload</span>
</span><span class="line">  <span class="k">begin</span>
</span><span class="line">    <span class="k">yield</span> <span class="n">payload</span>
</span><span class="line">  <span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class="line">    <span class="n">payload</span><span class="o">[</span><span class="ss">:exception</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="n">e</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">e</span><span class="o">.</span><span class="n">message</span><span class="o">]</span>
</span><span class="line">    <span class="k">raise</span> <span class="n">e</span>
</span><span class="line">  <span class="k">ensure</span>
</span><span class="line">    <span class="n">finish</span> <span class="nb">name</span><span class="p">,</span> <span class="n">payload</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<pre><code>Where does this method get called? in `ActiveSupport::Notifications.instrument`:
</code></pre>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">instrumenter</span><span class="o">.</span><span class="n">instrument</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">payload</span><span class="p">)</span> <span class="p">{</span> <span class="k">yield</span> <span class="n">payload</span> <span class="k">if</span> <span class="nb">block_given?</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<pre><code>The processing begins with `start`, ends with `finish`, instrumenter delegates it to `@notifier`, and `notifier` turns to `@subscribers` which are listening for the event name. And what does `@subscribers` do with `start` and `finish`? Normally we use subscriber objects defined by `Subscribers::Timed`, which use `start` to save a beginning timestamp, and `finish` to save an ending timestamp, and calling the block user passed.

Attention on the control flow, the events get sent even if an error occurs in the passed-in block.
</code></pre>

<h2 id="activesupportnotificationsevent">ActiveSupport::Notifications::Event</h2>

<h3 id="file-name-3">File name</h3>

<p><a href="https://github.com/rails/rails/blob/master/activesupport%2Flib%2Factive_support%2Fnotifications%2Finstrumenter.rb">activesupport/lib/active_support/notifications/instrumenter.rb</a></p>

<h3 id="dependency-3">Dependency</h3>

<h3 id="specification-3">Specification</h3>

<p>Note that this class has a <code>@children</code> instance variable recording associations between events, and these two methods:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">&lt;&lt;</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>
</span><span class="line">  <span class="vi">@children</span> <span class="o">&lt;&lt;</span> <span class="n">event</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">parent_of?</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>
</span><span class="line">  <span class="vi">@children</span><span class="o">.</span><span class="n">include?</span> <span class="n">event</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="main-working-flow">Main Working Flow</h2>

<h3 id="activesupportnotificationssubscribe">ActiveSupport::Notifications.subscribe</h3>

<ol>
  <li><code>ActiveSupport::Notifications.subscribe(name) {|*args| }</code>.</li>
  <li>in <strong>Notficiations.subscribe</strong>, <code>notifier.subscribe(*args, &amp;block)</code>.</li>
  <li>in <strong>Fanout#subscribe</strong>, <code>subscriber = Subscribers.new pattern, block</code>, then records subscriber into <code>@subscribers</code>.</li>
</ol>

<h3 id="activesupportnotificationsinstrument">ActiveSupport::Notifications.instrument</h3>

<ol>
  <li><code>ActiveSupport::Notifications.instrument(name, payload) { }</code>.</li>
  <li>in <strong>Notficiations.instrument</strong>, <code>instrumenter.instrument(name, payload) { yield payload if block_given? }</code>.</li>
  <li>in <strong>Instrumenter#instrument</strong>, <code>@notifier.start</code>, <code>yield payload</code> and then <code>@notifier.finish</code>.</li>
  <li>in <strong>Fanout::Subscribers::Timed#start</strong>, records beginning time.</li>
  <li>in <strong>Fanout::Subscribers::Timed#finish</strong>, records ending time, and passing <code>name, start_time, end_time, id, payload</code> to the subscribers callbacks.</li>
</ol>

<h2 id="misc">MISC</h2>

<p><strong><em>How does ActiveSupport::Notifications keep thread safe?</em></strong></p>

<p><code>extend</code> <strong>ActiveSupport::PerThreadRegistry</strong> in <strong>InstrumentationRegistry</strong>.</p>

<h2 id="reference">Reference</h2>

<p>Unit test:</p>

<ul>
  <li><a href="https://github.com/rails/rails/blob/master/activesupport%2Ftest%2Fnotifications_test.rb">activesupport/test/notifications_test.rb</a></li>
  <li><a href="https://github.com/rails/rails/blob/master/activesupport%2Ftest%2Fnotifications%2Fevented_notification_test.rb">activesupport/test/notifications/evented_notification_test.rb</a></li>
  <li><a href="https://github.com/rails/rails/blob/master/activesupport%2Ftest%2Fnotifications%2Finstrumenter_test.rb">activesupport/test/notifications/instrumenter_test.rb</a></li>
</ul>

<p><a href="http://www.paperplanes.de/2012/3/14/on-notifications-logsubscribers-and-bringing-sanity-to-rails-logging.html">On Notifications, Log Subscribers, and Bringing Sanity to Rails’ Logging</a><br />
<a href="http://railscasts.com/episodes/249-notifications-in-rails-3">#249 Notifications in Rails 3</a><br />
<a href="https://speakerdeck.com/nextmat/digging-deep-with-activesupportnotifications">Digging Deep with ActiveSupport::Notifications</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Review] Metaprogramming Ruby]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2014/06/03/metaprogrammingi-ruby/"/>
    <updated>2014-06-03T00:44:28+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2014/06/03/metaprogrammingi-ruby</id>
    <content type="html"><![CDATA[<table class="custom">
  <tbody>
    <tr>
      <td><strong>Book</strong></td>
      <td>Metaprogramming Ruby 2: Program Like the Ruby Pros</td>
    </tr>
    <tr>
      <td><strong>Author</strong></td>
      <td>Paolo Perrotta</td>
    </tr>
    <tr>
      <td><strong>Link</strong></td>
      <td><a href="https://pragprog.com/book/ppmetr2/metaprogramming-ruby-2">pragprog.com/book/ppmetr2/metaprogramming-ruby-2</a></td>
    </tr>
  </tbody>
</table>

<ul id="markdown-toc">
  <li><a href="#the-object-model">The Object Model</a>    <ul>
      <li><a href="#instance-variable">Instance variable</a></li>
      <li><a href="#instance-method">Instance method</a></li>
      <li><a href="#truth-about-classes">Truth about classes</a></li>
      <li><a href="#constant">Constant</a></li>
      <li><a href="#method-lookup">Method lookup</a></li>
      <li><a href="#refinement">Refinement</a></li>
    </ul>
  </li>
  <li><a href="#methods">Methods</a>    <ul>
      <li><a href="#dynamic-dispatch">Dynamic Dispatch</a></li>
      <li><a href="#dynamic-method">Dynamic Method</a></li>
      <li><a href="#ghost-method">Ghost Method</a></li>
    </ul>
  </li>
  <li><a href="#callables">Callables</a>    <ul>
      <li><a href="#the-callables">the Callables</a></li>
      <li><a href="#blocks">Blocks</a></li>
      <li><a href="#proc-objects">Proc Objects</a>        <ul>
          <li><a href="#methods-1">Methods</a></li>
          <li><a href="#unbound-methods">Unbound Methods</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#class-definitions">Class Definitions</a>    <ul>
      <li><a href="#the-current-class">The Current Class</a></li>
      <li><a href="#class-instance-variables">Class Instance Variables</a></li>
      <li><a href="#singleton-methods">Singleton Methods</a></li>
      <li><a href="#singleton-class">Singleton Class</a></li>
      <li><a href="#method-wrapper">Method Wrapper</a>        <ul>
          <li><a href="#around-alias">Around Alias</a></li>
          <li><a href="#refinement-wrapper">Refinement Wrapper</a></li>
          <li><a href="#prepended-wrapper">Prepended Wrapper</a></li>
          <li><a href="#an-interesting-quiz-solving-by-around-alias">An interesting quiz solving by Around Alias</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#eval-and-binding">Eval and Binding</a></li>
</ul>

<h1 id="the-object-model">The Object Model</h1>

<p><img src="https://raw.githubusercontent.com/ifyouseewendy/ifyouseewendy.github.io/source/image-repo/the_object_model.png?token=AA-NIz5OzBmOp0hOsRZjkMM8T5S4ndT_ks5UqkyIwA%3D%3D" alt="the_object_model" /></p>

<p>An object contains its instance variables and a reference to a class.</p>

<h2 id="instance-variable">Instance variable</h2>

<p>Instance variables just spring into existence when you assign them a value, so you can have objects of the same class that carry different instance variables.</p>

<h2 id="instance-method">Instance method</h2>

<p>You can get a list of an object’s methods by calling <code>Object#methods</code>.</p>

<p>When you talk about the class, you call it an instance method, and when you talk about the object, you simply call it a method.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">String</span><span class="o">.</span><span class="n">instance_methods</span> <span class="o">==</span> <span class="s2">&quot;abc&quot;</span><span class="o">.</span><span class="n">methods</span> <span class="c1"># =&gt; true</span>
</span><span class="line"><span class="nb">String</span><span class="o">.</span><span class="n">methods</span> <span class="o">==</span> <span class="s2">&quot;abc&quot;</span><span class="o">.</span><span class="n">methods</span> <span class="c1"># =&gt; false</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>An object’s instance variables live in the object itself, and an object’s methods live in the object’s class. That’s why objects of the same class share methods but don’t share instance variables.</p>

<h2 id="truth-about-classes">Truth about classes</h2>

<p>The truth about classes: classes themselves are nothing but objects.</p>

<p>The methods of an object are also the instance methods of its class. In turn, this means that the methods of a class are the instance methods of <code>Class</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Class</span><span class="o">.</span><span class="n">instance_methods</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span> <span class="c1"># =&gt; [:allocate, :new, :superclass]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong><em>What’s the difference between <code>class</code> and <code>superclass</code>?</em></strong></p>

<ul>
  <li><code>class</code> is about the type which an object belongs to.</li>
  <li><code>superclass</code> is about inheritance, between classes.</li>
</ul>

<p>The <code>superclass</code> of Class is Module—which is to say, every class is also a module. To be precise, a class is a module with three additional instance methods (new, allocate, and superclass) that allow you to create objects or arrange classes into hierarchies.</p>

<p><strong><em>Which to pick between Class and Module?</em></strong></p>

<p>Usually, you pick a module when you mean it to be included somewhere, and you pick a class when you mean it to be instantiated or inherited.</p>

<p><strong><em>What’s an Object, and what’s a Class?</em></strong></p>

<ul>
  <li>
    <p>What’s an object? It’s a bunch of instance variables, plus a link to a class. The object’s methods don’t live in the object—they live in the object’s class, where they’re called the instance methods of the class.</p>
  </li>
  <li>
    <p>What’s a class? It’s an object (an instance of Class), plus a list of instance methods and a link to a superclass. Class is a subclass of Module, so a class is also a module.</p>
  </li>
</ul>

<p><strong><em>What’s the difference between <code>load</code> and <code>require</code>?</em></strong></p>

<p>You use load to execute code, and you use require to import libraries.</p>

<ol>
  <li>use <code>require</code>, no need to appends ‘.rb’.</li>
  <li><code>require</code> loads only once.</li>
</ol>

<p><strong><em>As <code>load</code> executes codes, how does <code>load</code> avoid conlicts?</em></strong></p>

<p><code>load('motd.rb', true)</code></p>

<p>If you load a file this way, Ruby creates an anonymous module, uses that module as a Namespace to contain all the constants from motd.rb, and then destroys the module.</p>

<h2 id="constant">Constant</h2>

<p>classes are nothing but objects, class names are nothing but constants.</p>

<p><strong><em>How is a constant really different from a variable?</em></strong></p>

<p>The one important difference has to do with their scope.</p>

<p>Constants are arranged in a tree similar to a file system, where the names of modules and classes play the part of directories and regular constants play the part of files.</p>

<h2 id="method-lookup">Method lookup</h2>

<p><strong><em>What does Ruby do, when you call a method?</em></strong></p>

<ol>
  <li>It finds the method. This is a process called method lookup.</li>
  <li>It executes the method. To do that, Ruby needs something called <code>self</code>.</li>
</ol>

<p><strong><em>How does Ruby lookup methods?</em></strong></p>

<p><em>“one step to the right, then up”</em> rule: go one step to the right into the receiver’s class, and then go up the ancestors chain until you find the method.</p>

<p><strong><em>What does ancestor chain look like, when <code>prepend</code> or <code>include</code> multiple modules?</em></strong></p>

<p>The <code>prepend</code> method. It works like <code>include</code>, but it inserts the module below the including class.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">C</span>
</span><span class="line">  <span class="kp">include</span> <span class="no">M1</span>
</span><span class="line">  <span class="kp">include</span> <span class="no">M2</span>
</span><span class="line">
</span><span class="line">  <span class="n">prepend</span> <span class="no">M3</span>
</span><span class="line">  <span class="n">prepend</span> <span class="no">M4</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">D</span> <span class="o">&lt;</span> <span class="n">C</span><span class="p">;</span> <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">D</span><span class="o">.</span><span class="n">ancestors</span> <span class="c1"># =&gt; [&#39;M4&#39;, &#39;M3&#39;, &#39;C&#39;, &#39;M2&#39;, &#39;M1&#39;]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong><em>What does Ruby do, when <code>prepend</code> or <code>include</code> a module multiple times?</em></strong></p>

<p>If that module is already in the chain, Ruby silently ignores the second inclusion. As a result, a module can only appear once in the same chain of ancestors.</p>

<p><strong>Basic ancestor chain</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">MyClass</span><span class="p">;</span> <span class="k">end</span>
</span><span class="line"><span class="no">MyClass</span><span class="o">.</span><span class="n">ancestors</span> <span class="c1"># =&gt; [MyClass, Object, Kernel, BasicObject]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong><em>What <code>private</code> really means?</em></strong></p>

<p><code>private</code> methods come from two rules working together:</p>

<ol>
  <li>you need an explicit receiver to call a method on an object that is not yourself.</li>
  <li><code>private</code> methods can be called only with an <strong>implicit <code>self</code></strong>.</li>
</ol>

<p>Put these two rules together, and you’ll see that you can only call a <code>private</code> method on yourself. You can call this the “private rule.“</p>

<p><strong><em>What’s the env when you start the <code>irb</code>?</em></strong></p>

<p>As soon as you start a Ruby program, you’re sitting within an object named <code>main</code> that the Ruby interpreter created for you.</p>

<h2 id="refinement">Refinement</h2>

<p>Refinements are similar to Monkeypatches, but they’re not global. A Refinement is only active in two places:</p>

<ul>
  <li>The <code>refine</code> block itself.</li>
  <li>The code starting from the place where you call <code>using</code> until the end of the module definition (if you’re in a module definition) or the end of the file (if you’re at the top level).</li>
</ul>

<p><strong><em>Which has the precedence, Refinement or Method lookup?</em></strong></p>

<p>Refinements are like pieces of code patched right over a class, and they override normal method lookup. On the other hand, a Refinement works in a limited area of the program: the lines of code between the call to <code>using</code> and the end of the file, or the end of the module definition.</p>

<p>Code in an active Refinement takes precedence over code in the refined class, and also over code in modules that are included or prepended by the class. Refining a class is like slapping a patch right onto the original code of the class.</p>

<p>A trivia example about Refinement:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">my_method</span>
</span><span class="line">    <span class="s2">&quot;original my_method()&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">another_method</span>
</span><span class="line">    <span class="n">my_method</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">module</span> <span class="nn">MyClassRefinement</span>
</span><span class="line">  <span class="n">refine</span> <span class="no">MyClass</span> <span class="k">do</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">my_method</span>
</span><span class="line">      <span class="s2">&quot;refined my_method()&quot;</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">using</span> <span class="no">MyClassRefinement</span>
</span><span class="line"><span class="no">MyClass</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">my_method</span>     <span class="c1"># =&gt; &quot;refine my_method()&quot;</span>
</span><span class="line"><span class="no">MyClass</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">another_method</span> <span class="c1"># =&gt; &quot;original my_method()&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Even if you call <code>another_method</code> after the <code>using</code>, the call to <code>my_method</code> itself happens before the <code>using</code>—so it calls the original, unrefined version of the method.</p>

<p>A help reference, <a href="http://timelessrepo.com/refinements-in-ruby">Refinements in Ruby</a> by The timeless repository.</p>

<h1 id="methods">Methods</h1>

<h2 id="dynamic-dispatch">Dynamic Dispatch</h2>

<p>Why would you use <code>send</code> instead of the plain old dot notation? Because with <code>send</code>, the name of the method that you want to call becomes just a regular argument. You can wait literally until the very last moment to decide which method to call, while the code is running. This technique is called Dynamic Dispatch.</p>

<p><strong>An example of Dynamic Dispatch</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>gems/pry-0.9.12.2/lib/pry/pry_instance.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">refresh</span><span class="p">(</span><span class="n">options</span><span class="o">=</span><span class="p">{})</span>
</span><span class="line">  <span class="n">defaults</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class="line">  <span class="n">attributes</span> <span class="o">=</span> <span class="o">[</span>
</span><span class="line">          <span class="ss">:input</span><span class="p">,</span> <span class="ss">:output</span><span class="p">,</span> <span class="ss">:commands</span><span class="p">,</span> <span class="ss">:print</span><span class="p">,</span> <span class="ss">:quiet</span><span class="p">,</span>
</span><span class="line">          <span class="ss">:exception_handler</span><span class="p">,</span> <span class="ss">:hooks</span><span class="p">,</span> <span class="ss">:custom_completions</span><span class="p">,</span>
</span><span class="line">          <span class="ss">:prompt</span><span class="p">,</span> <span class="ss">:memory_size</span><span class="p">,</span> <span class="ss">:extra_sticky_locals</span>
</span><span class="line">
</span><span class="line">        <span class="o">]</span>
</span><span class="line">
</span><span class="line">  <span class="n">attributes</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">attribute</span><span class="o">|</span>
</span><span class="line">    <span class="n">defaults</span><span class="o">[</span><span class="n">attribute</span><span class="o">]</span> <span class="o">=</span> <span class="no">Pry</span><span class="o">.</span><span class="n">send</span> <span class="n">attribute</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># ...</span>
</span><span class="line">
</span><span class="line">  <span class="n">defaults</span><span class="o">.</span><span class="n">merge!</span><span class="p">(</span><span class="n">options</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
</span><span class="line">    <span class="nb">send</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="s2">=&quot;</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="k">if</span> <span class="nb">respond_to?</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="s2">=&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kp">true</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong><em>What’s the concern about <code>send</code>?</em></strong></p>

<p>You can call any method with <code>send</code>, including private methods.</p>

<p>You can use <code>public_send</code> instead. It’s like send, but it makes a point of respecting the receiver’s privacy.</p>

<h2 id="dynamic-method">Dynamic Method</h2>

<p>There is one important reason to use <code>Module#define_method</code>(<strong>private</strong>) over the more familiar def keyword: <code>define_method</code> allows you to decide the name of the defined method at runtime.</p>

<h2 id="ghost-method">Ghost Method</h2>

<p><code>BasicObject#method_missing</code> (<strong>private</strong>)</p>

<p>Ghost Methods are usually icing on the cake, but some objects actually rely almost exclusively on them. They collect method calls through <code>method_missing</code> and forward them to the wrapped object.</p>

<p><strong><em>How can <code>respond_to?</code> missing methods?</em></strong></p>

<p>refernced from <a href="http://blog.marc-andre.ca/2010/11/15/methodmissing-politely/">Method_missing, Politely</a> by Marc Andre.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">StereoPlayer</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="nb">method</span><span class="o">.</span><span class="n">to_s</span> <span class="o">=~</span> <span class="sr">/play_(\w+)/</span>
</span><span class="line">      <span class="nb">puts</span> <span class="s2">&quot;Here&#39;s </span><span class="si">#{</span><span class="vg">$1</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">      <span class="k">super</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="nb">p</span> <span class="o">=</span> <span class="no">StereoPlayer</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="c1"># ok:</span>
</span><span class="line"><span class="nb">p</span><span class="o">.</span><span class="n">play_some_Beethoven</span> <span class="c1"># =&gt; &quot;Here&#39;s some_Beethoven&quot;</span>
</span><span class="line"><span class="c1"># not very polite:</span>
</span><span class="line"><span class="nb">p</span><span class="o">.</span><span class="n">respond_to?</span> <span class="ss">:play_some_Beethoven</span> <span class="c1"># =&gt; false</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">StereoPlayer</span>
</span><span class="line">  <span class="c1"># def method_missing ...</span>
</span><span class="line">  <span class="c1">#   ...</span>
</span><span class="line">  <span class="c1"># end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">respond_to?</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="o">*</span><span class="p">)</span>
</span><span class="line">    <span class="nb">method</span><span class="o">.</span><span class="n">to_s</span> <span class="o">=~</span> <span class="sr">/play_(\w+)/</span> <span class="o">||</span> <span class="k">super</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line"><span class="nb">p</span><span class="o">.</span><span class="n">respond_to?</span> <span class="ss">:play_some_Beethoven</span> <span class="c1"># =&gt; true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You can specialize <code>respond_to?</code>, but it doesnot make a missing method behaves exactly like a method.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">p</span><span class="o">.</span><span class="n">method</span> <span class="ss">:play_some_Beethoven</span>
</span><span class="line"><span class="c1"># =&gt; NameError: undefined method `play_some_Beethoven&#39;</span>
</span><span class="line"><span class="c1">#               for class `StereoPlayer&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ruby 1.9.2 introduces <code>respond_to_missing?</code> that provides for a clean solution to the problem. Instead of specializing <code>respond_to?</code> one specializes <code>respond_to_missing?</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">StereoPlayer</span>
</span><span class="line">  <span class="c1"># def method_missing ...</span>
</span><span class="line">  <span class="c1">#   ...</span>
</span><span class="line">  <span class="c1"># end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">respond_to_missing?</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="o">*</span><span class="p">)</span>
</span><span class="line">    <span class="nb">method</span> <span class="o">=~</span> <span class="sr">/play_(\w+)/</span> <span class="o">||</span> <span class="k">super</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="nb">p</span> <span class="o">=</span> <span class="no">StereoPlayer</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="nb">p</span><span class="o">.</span><span class="n">play_some_Beethoven</span> <span class="c1"># =&gt; &quot;Here&#39;s some_Beethoven&quot;</span>
</span><span class="line"><span class="nb">p</span><span class="o">.</span><span class="n">respond_to?</span> <span class="ss">:play_some_Beethoven</span> <span class="c1"># =&gt; true</span>
</span><span class="line"><span class="n">m</span> <span class="o">=</span> <span class="nb">p</span><span class="o">.</span><span class="n">method</span><span class="p">(</span><span class="ss">:play_some_Beethoven</span><span class="p">)</span> <span class="c1"># =&gt; #&lt;Method: StereoPlayer#play_some_Beethoven&gt;</span>
</span><span class="line"><span class="c1"># m acts like any other method:</span>
</span><span class="line"><span class="n">m</span><span class="o">.</span><span class="n">call</span> <span class="c1"># =&gt; &quot;Here&#39;s some_Beethoven&quot;</span>
</span><span class="line"><span class="n">m</span> <span class="o">==</span> <span class="nb">p</span><span class="o">.</span><span class="n">method</span><span class="p">(</span><span class="ss">:play_some_Beethoven</span><span class="p">)</span> <span class="c1"># =&gt; true</span>
</span><span class="line"><span class="n">m</span><span class="o">.</span><span class="n">name</span> <span class="c1"># =&gt; :play_some_Beethoven</span>
</span><span class="line"><span class="no">StereoPlayer</span><span class="o">.</span><span class="n">send</span> <span class="ss">:define_method</span><span class="p">,</span> <span class="ss">:ludwig</span><span class="p">,</span> <span class="n">m</span>
</span><span class="line"><span class="nb">p</span><span class="o">.</span><span class="n">ludwig</span> <span class="c1"># =&gt; &quot;Here&#39;s some_Beethoven&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong><em>What about the constant missing?</em></strong></p>

<p><code>Module#const_missing</code>(<strong>public</strong>)</p>

<p><strong><em>What’s the concern about <code>method_missing</code>?</em></strong></p>

<p>This is a common problem with Ghost Methods: since unknown calls become calls to <code>method_missing</code>, your object might accept a call that’s just plain wrong. Finding a bug like this one in a large program can be pretty painful.
To avoid this kind of trouble, take care not to introduce too many Ghost Methods.</p>

<p>Ghost Methods can be dangerous. You can avoid most of their problems by following a few basic recommendations (always call <code>super</code>, always redefine <code>respond_to_missing?</code>)</p>

<p>And you may call some methods <code>Object</code> or some others classes in ancestor chain defined.</p>

<p><strong><em>How to solve it? Blank Slate!</em></strong></p>

<p>Remove methods from an object to turn them into Ghost Methods.</p>

<ul>
  <li>Inheriting from <code>BasicObject</code> is the quicker way to define a Blank Slate in Ruby.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">im</span> <span class="o">=</span> <span class="no">BasicObject</span><span class="o">.</span><span class="n">instance_methods</span>
</span><span class="line"><span class="n">im</span> <span class="c1"># =&gt; [:==, :equal?, :!, :!=, :instance_eval, :instance_exec, :__send__, :__id__]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <p>Inheriting from <code>Object</code> by default, and remove method inherited.</p>

    <p>Don’t hide <code>instance_eval</code> or any method beginning with <code>__</code>. One example of a reserved method is <code>BasicObject#__send__</code>, that behaves the same as send, but gives you a scary warning when you try to remove it.</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Compter</span>
</span><span class="line">  <span class="nb">instance_methods</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span>
</span><span class="line">    <span class="n">undef_method</span> <span class="n">m</span> <span class="k">unless</span> <span class="n">m</span><span class="o">.</span><span class="n">to_s</span> <span class="o">=~</span> <span class="sr">/^__|method_missing|respond_to/</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Or you can write a BlankSlate class to inherit.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">BlankSlate</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">hide</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="k">unless</span> <span class="nb">instance_methods</span><span class="o">.</span><span class="n">include?</span> <span class="nb">name</span><span class="o">.</span><span class="n">to_s</span>
</span><span class="line">    <span class="k">return</span> <span class="k">if</span> <span class="nb">name</span><span class="o">.</span><span class="n">to_s</span> <span class="o">=~</span> <span class="sr">/^__|method_missing|respond_to/</span>
</span><span class="line">    <span class="vi">@hidden_methods</span> <span class="o">||=</span> <span class="p">{}</span>
</span><span class="line">    <span class="vi">@hidden_methods</span><span class="o">[</span><span class="nb">name</span><span class="o">.</span><span class="n">to_sym</span><span class="o">]</span> <span class="o">=</span> <span class="nb">instance_method</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class="line">    <span class="n">undef_method</span> <span class="nb">name</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="nb">instance_methods</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="n">hide</span> <span class="n">m</span> <span class="p">}</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong><em>What’s the difference between <code>undef_method</code> and <code>remove_method</code>?</em></strong></p>

<ul>
  <li>The drastic <code>undef_method</code> removes any method, including the inherited ones.</li>
  <li>The kinder <code>remove_method</code> removes the method from the receiver, but it leaves inherited methods alone.</li>
</ul>

<p><strong><em>What’s the boiling down facts between Ghost Method and really methods?</em></strong></p>

<p>Ghost Method are just a way to intercept method calls. Because of this fact, they behave different than actual methods.</p>

<p><strong><em>What’s the choice between <code>define_method</code> and <code>method_missing</code>?</em></strong></p>

<p>There are times when Ghost Methods are your only viable option. This usually happens</p>

<ul>
  <li>When you have a large number of method calls.</li>
  <li>When you don’t know what method calls you might need at runtime.</li>
</ul>

<p><em>Use Dynamic Methods if you can, and Ghost Methods if you have to.</em></p>

<h1 id="callables">Callables</h1>

<h2 id="the-callables">the Callables</h2>

<blockquote>
  <p>Package code, and call it later</p>
</blockquote>

<ul>
  <li><strong>block</strong>, evaluated in the scope which they’re defined.</li>
  <li><strong>proc</strong>, which is basically a block turned object, and evaluated in the scope which they’re defined.</li>
  <li><strong>lambda</strong>, which is a slight variation on a proc.</li>
  <li><strong>method</strong>, bound to an object, which are evaluated in that object’s scope. They can also be unbound from their scope and rebound to another object or class.</li>
</ul>

<p><strong>block</strong> is not an object, while <strong>proc</strong> and <strong>lambda</strong> are Proc objects, and <strong>method</strong> is <a href="http://stackoverflow.com/questions/2602340/methods-in-ruby-objects-or-not">in question</a>.</p>

<h2 id="blocks">Blocks</h2>

<p>The main point about blocks is that they are all inclusive and come ready to run. They contain both the <strong>code</strong> and <strong>a set of bindings</strong>.</p>

<p><strong>When you define the block, it simply grabs the bindings that are there at that moment</strong>, and then it carries those bindings along when you pass the block into a method.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">my_method</span>
</span><span class="line">  <span class="n">x</span> <span class="o">=</span> <span class="s2">&quot;Goodbye&quot;</span>
</span><span class="line">  <span class="k">yield</span><span class="p">(</span><span class="s2">&quot;cruel&quot;</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">x</span> <span class="o">=</span> <span class="s2">&quot;Hello&quot;</span>
</span><span class="line"><span class="n">my_method</span> <span class="p">{</span><span class="o">|</span><span class="n">y</span><span class="o">|</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">x</span><span class="si">}</span><span class="s2">, </span><span class="si">#{</span><span class="n">y</span><span class="si">}</span><span class="s2"> world&quot;</span> <span class="p">}</span> <span class="c1"># =&gt; &quot;Hello, cruel world&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong><em>What if I define additional bindings inside a block?</em></strong></p>

<p>They disappear after the block ends.</p>

<p><strong><em>What’s the meaning of “a block is a closure”?</em></strong></p>

<p>a block is a closure, this means a block captures the local bindings and carries them along with it.</p>

<p><strong>scope</strong></p>

<p>You can see bindings all over the scope.</p>

<p><code>class</code>, <code>module</code>, and <code>def</code>, respectively. Each of these keywords acts like a <strong>Scope Gate</strong>.</p>

<p><strong>A subtle difference between <code>class</code>, <code>module</code> and <code>def</code></strong></p>

<p>The code in a <code>class</code> or <code>module</code> definition is executed immediately. Conversely, the code in a method definition is executed later, when you eventually call the method.</p>

<p><strong><em>Whenever the program changes scope, some bindings are replaced by a new set of bindings. RIGHT?</em></strong></p>

<p>For <code>local_varialbes</code>, that’s right, but <code>instance_variables</code>, <code>class_variables</code> and <code>global_variables</code> can go through the Scope Gate.</p>

<p><strong><em>What’s the difference between Global Variables and Top-Level Instance Variables?</em></strong></p>

<p>when it comes to global variables, use them sparingly, if ever.</p>

<p>You can access a top-level instance variable whenever <code>main</code> takes the role of self. When any other object is <code>self</code>, the top-level instance variable is out of scope.</p>

<p><strong><em>How to cross the Scope Gate, and Why?</em></strong></p>

<p>You can use these techniques:</p>

<ul>
  <li>Use Flat Scope (<code>Class.new</code>, <code>Module.new</code>, and <code>define_method</code>)</li>
  <li>Use Shared Scope</li>
  <li>Use Context Probe (<code>BasicObject#instance_eval</code>)</li>
</ul>

<p>to mix code and bindings at will.</p>

<p><strong><em>What is Flat Scope?</em></strong></p>

<p>“flattening the scope,” meaning that the two scopes share variables as if the scopes were squeezed together. For short, you can call this spell a Flat Scope.</p>

<p>Use <code>Class.new</code>, <code>Module.new</code> and <code>define_method</code>.</p>

<p><strong><em>What is Shared Scope?</em></strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># use `def` to do seperate</span>
</span><span class="line"><span class="k">def</span> <span class="nf">define_methods</span>
</span><span class="line">  <span class="n">shared</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">
</span><span class="line">  <span class="no">Kernel</span><span class="o">.</span><span class="n">send</span> <span class="ss">:define_method</span><span class="p">,</span> <span class="ss">:counter</span> <span class="k">do</span>
</span><span class="line">    <span class="n">shared</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="no">Kernel</span><span class="o">.</span><span class="n">send</span> <span class="ss">:define_method</span><span class="p">,</span> <span class="ss">:inc</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class="line">    <span class="n">shared</span> <span class="o">+=</span> <span class="n">x</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">define_methods</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="n">counter</span> <span class="c1"># =&gt; 0</span>
</span><span class="line"><span class="n">inc</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class="line"><span class="n">counter</span> <span class="c1"># =&gt; 4</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If you define multiple methods in the same Flat Scope, maybe protected by a Scope Gate, all those methods can share bindings. That’s called a <strong>Shared Scope</strong></p>

<p><strong><em>What is Context Probe?</em></strong></p>

<p><code>instance_eval</code> has a slightly more flexible twin brother named <code>instance_exec</code>, that allows you to pass arguments to the block.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">C</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="vi">@x</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">D</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">twisted_method</span>
</span><span class="line">    <span class="vi">@y</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class="line">    <span class="n">C</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">instance_eval</span> <span class="p">{</span> <span class="s2">&quot;@x: </span><span class="si">#{</span><span class="vi">@x</span><span class="si">}</span><span class="s2">, @y: </span><span class="si">#{</span><span class="vi">@y</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">D</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">twisted_method</span> <span class="c1"># =&gt; &quot;@x: 1, @y: &quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>However, instance variables depend on <code>self</code>, so when <code>instance_eval</code> switches <code>self</code> to the receiver, all the instance variables in the caller fall out of scope.</p>

<p><strong>Clean Room</strong></p>

<p>Blank Slates are good candidates for Clean Room.</p>

<p>The ideal Clean Room doesn’t have many methods or instance variables, because the names of those methods and instance variables could clash with the names in the environment that the block comes from. For this reason, instances of <code>BasicObject</code> usually make for good Clean Rooms, because they’re Blank Slates.</p>

<p>You might think of using a <code>BasicObject</code> instead of an Object for your Clean Room. However, remember that <code>BasicObject</code> is also a Blank Slate, and as such it lacks some common methods such as puts.</p>

<p><strong><em>What’s the different use for Shared Scope and Clean Room?</em></strong></p>

<p><em>Shared Scope</em> is used in definition, to make variables(bindings) shared between methods, while <em>Clean Room</em> is used to run code, to help reduce the modifications on shared variables(like instance variables).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># lambda which is called immediatley is the Shared Scope</span>
</span><span class="line"><span class="nb">lambda</span> <span class="p">{</span>
</span><span class="line">  <span class="n">setups</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">  <span class="n">events</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">
</span><span class="line">  <span class="no">Kernel</span><span class="o">.</span><span class="n">send</span> <span class="ss">:define_method</span><span class="p">,</span> <span class="ss">:event</span> <span class="k">do</span> <span class="o">|</span><span class="n">description</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="o">|</span>
</span><span class="line">    <span class="n">events</span> <span class="o">&lt;&lt;</span> <span class="p">{</span><span class="ss">:description</span> <span class="o">=&gt;</span> <span class="n">description</span><span class="p">,</span> <span class="ss">:condition</span> <span class="o">=&gt;</span> <span class="n">block</span><span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="no">Kernel</span><span class="o">.</span><span class="n">send</span> <span class="ss">:define_method</span><span class="p">,</span> <span class="ss">:setup</span> <span class="k">do</span> <span class="o">|&amp;</span><span class="n">block</span><span class="o">|</span>
</span><span class="line">    <span class="n">setups</span> <span class="o">&lt;&lt;</span> <span class="n">block</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="no">Kernel</span><span class="o">.</span><span class="n">send</span> <span class="ss">:define_method</span><span class="p">,</span> <span class="ss">:each_event</span> <span class="k">do</span> <span class="o">|&amp;</span><span class="n">block</span><span class="o">|</span>
</span><span class="line">    <span class="n">events</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">event</span><span class="o">|</span>
</span><span class="line">      <span class="n">block</span><span class="o">.</span><span class="n">call</span> <span class="n">event</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="no">Kernel</span><span class="o">.</span><span class="n">send</span> <span class="ss">:define_method</span><span class="p">,</span> <span class="ss">:each_setup</span> <span class="k">do</span> <span class="o">|&amp;</span><span class="n">block</span><span class="o">|</span>
</span><span class="line">    <span class="n">setups</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">setup</span><span class="o">|</span>
</span><span class="line">      <span class="n">block</span><span class="o">.</span><span class="n">call</span> <span class="n">setup</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="p">}</span><span class="o">.</span><span class="n">call</span>
</span><span class="line">
</span><span class="line"><span class="nb">load</span> <span class="s1">&#39;events.rb&#39;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># env is created for each event to be a Clean Room</span>
</span><span class="line"><span class="n">each_event</span> <span class="k">do</span> <span class="o">|</span><span class="n">event</span><span class="o">|</span>
</span><span class="line">  <span class="n">env</span> <span class="o">=</span> <span class="no">Object</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">  <span class="n">each_setup</span> <span class="k">do</span> <span class="o">|</span><span class="n">setup</span><span class="o">|</span>
</span><span class="line">    <span class="n">env</span><span class="o">.</span><span class="n">instance_eval</span> <span class="o">&amp;</span><span class="n">setup</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">  <span class="nb">puts</span> <span class="s2">&quot;ALERT: </span><span class="si">#{</span><span class="n">event</span><span class="o">[</span><span class="ss">:description</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">env</span><span class="o">.</span><span class="n">instance_eval</span> <span class="o">&amp;</span><span class="p">(</span><span class="n">event</span><span class="o">[</span><span class="ss">:condition</span><span class="o">]</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong><em>When is <code>yield</code> not enough to use?</em></strong></p>

<ul>
  <li>You want to pass the block to another method (or even another block).</li>
  <li>You want to convert the block to a <code>Proc</code>.</li>
</ul>

<h2 id="proc-objects">Proc Objects</h2>

<p>as blocks are not objects, Ruby provides the standard library class <code>Proc</code>. A <code>Proc</code> is a block that has been turned into an object. You can create a <code>Proc</code> by passing the block to <code>Proc.new</code>. Later, you can evaluate the block-turned-object with <code>Proc#call</code>.</p>

<p><strong>Deferred Evaluation</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">inc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class="line"><span class="c1"># more code...</span>
</span><span class="line"><span class="n">inc</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1"># =&gt; 3</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>4 ways to create Procs explicitly</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class="line"><span class="nb">proc</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class="line"><span class="nb">lambda</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class="line"><span class="o">-&gt;</span> <span class="n">x</span> <span class="p">{</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span> <span class="c1"># stabby lambda</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Ways to create Procs implicitly</strong></p>

<p>use <code>&amp;</code> to convert block into a proc:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">make_proc</span><span class="p">(</span><span class="o">&amp;</span><span class="nb">p</span><span class="p">)</span>
</span><span class="line">  <span class="nb">p</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">make_proc</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>4 ways to call Procs</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">p</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">41</span><span class="p">)</span>
</span><span class="line"><span class="nb">p</span><span class="o">[</span><span class="mi">41</span><span class="o">]</span>
</span><span class="line"><span class="nb">p</span> <span class="o">===</span> <span class="mi">41</span>
</span><span class="line"><span class="nb">p</span><span class="o">.</span><span class="p">(</span><span class="mi">41</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Use <code>&amp;</code> to convert a block to Proc</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">my_method</span><span class="p">(</span><span class="o">&amp;</span><span class="n">the_proc</span><span class="p">)</span>
</span><span class="line">  <span class="n">the_proc</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="nb">p</span> <span class="o">=</span> <span class="n">my_method</span> <span class="p">{</span><span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="s2">&quot;Hello, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">!&quot;</span> <span class="p">}</span>
</span><span class="line"><span class="nb">p</span><span class="o">.</span><span class="n">class</span>     <span class="c1"># =&gt; Proc</span>
</span><span class="line"><span class="nb">p</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="s2">&quot;Bill&quot;</span><span class="p">)</span>  <span class="c1"># =&gt; &quot;Hello, Bill!&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Use <code>&amp;</code> to convert a Proc to block</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">my_method</span><span class="p">(</span><span class="n">greeting</span><span class="p">)</span>
</span><span class="line">    <span class="s2">&quot;</span><span class="si">#{</span><span class="n">greeting</span><span class="si">}</span><span class="s2">, </span><span class="si">#{</span><span class="k">yield</span><span class="si">}</span><span class="s2">!&quot;</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">my_proc</span> <span class="o">=</span> <span class="nb">proc</span> <span class="p">{</span> <span class="s2">&quot;Bill&quot;</span> <span class="p">}</span>
</span><span class="line"><span class="n">my_method</span><span class="p">(</span><span class="s2">&quot;Hello&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">my_proc</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong><em>What’s a lambda?</em></strong></p>

<p>Procs created with <code>lambda</code> are called <em>lambdas</em>, while the others are simply called <em>procs</em>. (You can use the <code>Proc#lambda?</code> method to check whether the <code>Proc</code> is a lambda).</p>

<p><strong>Procs vs. Lambdas</strong></p>

<ul>
  <li>
    <p><code>return</code></p>

    <p><code>lambda</code> returns just returns from the lambda, while a proc returns from the scope where the proc itself was defined.</p>
  </li>
  <li>
    <p><strong>arity</strong></p>

    <p>Call a <code>lambda</code> with the wrong arity, and it fails with an <code>ArgumentError</code>, while if there are too many arguments, a proc drops the excess arguments. If there are too few arguments, it assigns <code>nil</code> to the missing arguments.</p>
  </li>
</ul>

<p>Generally speaking, <code>lambdas</code> are more intuitive than procs because they’re more similar to methods. They’re pretty strict about arity, and they simply exit when you call <code>return</code>.</p>

<p><strong>About the tolerance on arguments</strong></p>

<p>method == lambda &lt; proc == block</p>

<h3 id="methods-1">Methods</h3>

<p>By calling <code>Kernel#method</code>, you get the method itself as a Method object, which you can later execute with <code>Method#call</code>. In Ruby 2.1, you also have <code>Kernel#singleton_method</code>, that converts the name of a Singleton Method to a Method object.</p>

<p><strong>Conversions between methods and procs</strong></p>

<ul>
  <li>Use <code>Method#to_proc</code> to convert a method into proc.</li>
  <li>Use <code>define_method</code> to convert a proc into method.</li>
</ul>

<p><strong>An important difference between methods and procs</strong></p>

<p>a <code>lambda</code> is evaluated in the scope it’s defined in (it’s a closure, remember?), while a <code>Method</code> is evaluated in the scope of its object.</p>

<h3 id="unbound-methods">Unbound Methods</h3>

<p><code>UnboundMethods</code> are like <code>Methods</code> that have been detached from their original class or module.</p>

<p><strong>You can’t call an <code>UnboundMethod</code></strong>, but you can use it to generate a normal method that you can call.</p>

<p><strong>generate</strong></p>

<ul>
  <li>use <code>Method#unbind</code></li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">foo</span><span class="p">;</span> <span class="k">end</span>
</span><span class="line"><span class="n">unbound</span> <span class="o">=</span> <span class="nb">method</span><span class="p">(</span><span class="ss">:foo</span><span class="p">)</span><span class="o">.</span><span class="n">unbind</span>
</span><span class="line"><span class="n">unbound</span><span class="o">.</span><span class="n">class</span>   <span class="c1"># =&gt; UnboundMethod</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>use <code>Module#instance_method</code></li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">MyModule</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">my_method</span>
</span><span class="line">  <span class="mi">42</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">unbound</span> <span class="o">=</span> <span class="no">MyModule</span><span class="o">.</span><span class="n">instance_method</span><span class="p">(</span><span class="ss">:my_method</span><span class="p">)</span>
</span><span class="line"><span class="n">unbound</span><span class="o">.</span><span class="n">class</span>   <span class="c1"># =&gt; UnboundMethod</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>Note:</em> <code>instance_methods</code> is totally different, it’s like <code>methods</code>, just return an array of symbols.</p>

<p><strong>usage</strong></p>

<ul>
  <li>bind the UnboundMethod to an object with <code>UnboundMethod#bind</code>. UnboundMethods that come from a class can only be bound to objects of the same class (or a subclass), while UnboundMethods that come from a module have no such limitation from Ruby 2.0 onwards.</li>
  <li>use an UnboundMethod to define a brand new method by passing it to <code>Module#define_method</code>.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">String</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class="line">  <span class="n">define_method</span> <span class="ss">:another_method</span><span class="p">,</span> <span class="n">unbound</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="s2">&quot;abc&quot;</span><span class="o">.</span><span class="n">another_method</span> <span class="c1"># =&gt; 42</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>example</strong></p>

<p>In ActiveSupport, the ‘autoloading’ system includes a <code>Loadable</code> module, which redefines the standard <code>Kernel#load</code>. If a class includes <code>Loadable</code>, then <code>Loadable#load</code> gets lower then <code>Kernel#load</code> on its chain of ancestors.</p>

<p>And what if you want to stop using <code>Loadable#load</code> and go back to the plain vanilla <code>Kernel#load</code>?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span># gems/activesupport-4.0.2/lib/active_support/dependencies.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Loadable</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">exclude_from</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
</span><span class="line">    <span class="n">base</span><span class="o">.</span><span class="n">class_eval</span> <span class="p">{</span> <span class="n">define_method</span> <span class="ss">:load</span><span class="p">,</span> <span class="no">Kernel</span><span class="o">.</span><span class="n">instance_method</span><span class="p">(</span><span class="ss">:load</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="class-definitions">Class Definitions</h1>

<p>In Java and C#, defining a class is like making a deal between you and the compiler.</p>

<p>In Ruby, class definitions are different. When you use the class keyword, you aren’t just dictating how objects will behave in the future. On the contrary, you’re actually running code.</p>

<h2 id="the-current-class">The Current Class</h2>

<p>Wherever you are in a Ruby program, you always have a current object: <code>self</code>. Likewise, you always have a current class (or module). As The Ruby interpreter always keeps a reference to the current class (or module), when you define a method, that method becomes an instance method of the current class.</p>

<p>Although you can get a reference to the current object through <code>self</code>, there’s no equivalent keyword to get a reference to the current class.</p>

<p><strong><em>How to keep track of the current class?</em></strong></p>

<ul>
  <li>At the top level of your program, the current class is <code>Object</code>, the class of <code>main</code>. (That’s why, if you define a method at the top level, that method becomes an instance method of <code>Object</code>).</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">foo</span><span class="p">;</span> <span class="nb">puts</span> <span class="s1">&#39;foo&#39;</span><span class="p">;</span> <span class="k">end</span>
</span><span class="line"><span class="no">Object</span><span class="o">.</span><span class="n">instance_methods</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="ss">:foo</span><span class="p">)</span>      <span class="c1"># =&gt; []</span>
</span><span class="line"><span class="no">Object</span><span class="o">.</span><span class="n">private_instance_methods</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="ss">:foo</span><span class="p">)</span> <span class="c1"># =&gt; [:foo]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="o">[</span><span class="mi">6</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="k">def</span> <span class="nf">foo</span><span class="p">;</span> <span class="nb">puts</span> <span class="s1">&#39;foo&#39;</span><span class="p">;</span> <span class="k">end</span>
</span><span class="line"><span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class="line"><span class="o">[</span><span class="mi">7</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">cd</span> <span class="no">Object</span>
</span><span class="line"><span class="o">[</span><span class="mi">8</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="no">Object</span><span class="p">):</span><span class="mi">1</span><span class="o">&gt;</span> <span class="n">show</span><span class="o">-</span><span class="nb">method</span> <span class="n">foo</span>
</span><span class="line">
</span><span class="line"><span class="ss">From</span><span class="p">:</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">4</span><span class="p">:</span>
</span><span class="line"><span class="ss">Owner</span><span class="p">:</span> <span class="no">Object</span>
</span><span class="line"><span class="ss">Visibility</span><span class="p">:</span> <span class="kp">private</span>
</span><span class="line"><span class="no">Number</span> <span class="n">of</span> <span class="ss">lines</span><span class="p">:</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">foo</span><span class="p">;</span> <span class="nb">puts</span> <span class="s1">&#39;foo&#39;</span><span class="p">;</span> <span class="k">end</span>
</span><span class="line"><span class="o">[</span><span class="mi">9</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="no">Object</span><span class="p">):</span><span class="mi">1</span><span class="o">&gt;</span> <span class="n">cd</span> <span class="o">.</span><span class="n">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># foo.rb</span>
</span><span class="line"><span class="k">def</span> <span class="nf">foo</span><span class="p">;</span> <span class="nb">puts</span> <span class="s1">&#39;foo&#39;</span><span class="p">;</span> <span class="k">end</span>
</span><span class="line"><span class="nb">p</span> <span class="no">Object</span><span class="o">.</span><span class="n">private_instance_methods</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="ss">:foo</span><span class="p">)</span> <span class="c1"># =&gt; [:foo]</span>
</span><span class="line">
</span><span class="line"><span class="c1"># console</span>
</span><span class="line"><span class="err">$</span> <span class="n">ruby</span> <span class="n">foo</span><span class="o">.</span><span class="n">rb</span> <span class="c1"># =&gt; [:foo]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>
    <p>In a method, the current class is the class of the current object.</p>
  </li>
  <li>
    <p>When you open a class with the <code>class</code> keyword (or a module with the <code>module</code> keyword), that class becomes the current class.</p>
  </li>
</ul>

<p><strong><em>How can you open the class if you don’t know its name?</em></strong></p>

<p>Use <code>Module#class_eval</code>.</p>

<p><strong><em>What’s the advantage of <code>Module#class_eval</code> other than <code>class</code>?</em></strong></p>

<ul>
  <li><code>Module#class_eval</code> is actually more flexible than class. You can use <code>class_eval</code> on any variable that references the class, while <code>class</code> requires a constant.</li>
  <li><code>class</code> opens a new scope, losing sight of the current bindings, while <code>class_eval</code> has a <em>Flat Scope</em>.</li>
</ul>

<p><strong><em>When to use <code>class_eval</code>, and when <code>instance_eval</code>?</em></strong></p>

<p>Use <code>instance_eval</code> to open an object that is not a class, and <code>class_eval</code> to open a class definition and define methods with <code>def</code>.</p>

<p><strong><em>What’s the difference between <code>class_eval</code> and <code>instance_eval</code>?</em></strong></p>

<p>Both changes <code>self</code>, and <code>class_eval</code> changes the current class to the caller’s class, while <code>instance_eval</code> changes the current class to the caller’s singleton class.</p>

<p><strong>An interesting knowledge about <code>Class.new</code></strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">c</span> <span class="o">=</span> <span class="no">Class</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">Array</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">my_method</span>
</span><span class="line">    <span class="s1">&#39;Hello!&#39;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="no">MyClass</span> <span class="o">=</span> <span class="n">c</span>
</span><span class="line"><span class="n">c</span><span class="o">.</span><span class="n">name</span>  <span class="c1"># =&gt; &#39;MyClass&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>When you assign an anonymous class to a constant, Ruby understands that you’re trying to give a name to the class, and it does something special: it turns around to the class and says, “Here’s your new name.” Now the constant references the Class, and the Class also references the constant. If it weren’t for this trick, a class wouldn’t be able to know its own name</p>

<h2 id="class-instance-variables">Class Instance Variables</h2>

<p>They’re just regular instance variables that happen to belong to an object of class <code>Class</code>. Because of that, a Class Instance Variable can be accessed only by the class itself— not by an instance or by a subclass.</p>

<p>No weird behaviors like Class Variables, which subclass and class share the same variable.</p>

<h2 id="singleton-methods">Singleton Methods</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">obj</span> <span class="o">=</span> <span class="no">Object</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="k">def</span> <span class="nc">obj</span><span class="o">.</span><span class="nf">foo</span><span class="p">;</span> <span class="nb">puts</span> <span class="s1">&#39;foo&#39;</span><span class="p">;</span> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>A method which is specific to a single object, is called Singleton Methods.</p>

<p>You can also use <code>Object#define_singleton_method</code>: (Remeber <code>Module#define_method</code>?)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">obj</span><span class="o">.</span><span class="n">define_singleton_method</span> <span class="ss">:bar</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s1">&#39;bar&#39;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong><em>What is the Class Macro?</em></strong></p>

<p>A method such as <code>attr_accessor</code> is called a Class Macro. Class Macros look like keywords, but they’re just regular class methods that are meant to be used in a class definition.</p>

<h2 id="singleton-class">Singleton Class</h2>

<p>A singleton class is where an object’s Singleton Methods live</p>

<p><strong><em>How to get?</em></strong></p>

<ul>
  <li>Use the <code>&lt;&lt;</code> syntax.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nc">obj</span><span class="o">.</span><span class="nf">my_singleton_method</span><span class="p">;</span> <span class="k">end</span>
</span><span class="line"><span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="n">obj</span><span class="p">;</span> <span class="nb">instance_methods</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="sr">/my_/</span><span class="p">);</span> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Foo</span>
</span><span class="line">  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">bar</span><span class="p">;</span> <span class="nb">puts</span> <span class="s1">&#39;Foo.bar&#39;</span><span class="p">;</span> <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">foo</span> <span class="o">=</span> <span class="no">Foo</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="n">foo</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">bar</span><span class="p">;</span> <span class="nb">puts</span> <span class="s1">&#39;foo.bar&#39;</span><span class="p">;</span> <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Use <code>Object#singleton_class</code></li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">obj</span><span class="o">.</span><span class="n">singleton_class</span><span class="o">.</span><span class="n">instance_methods</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="sr">/my_/</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Singleton classes and inheritance</strong></p>

<p><img src="https://raw.githubusercontent.com/ifyouseewendy/ifyouseewendy.github.io/source/image-repo/singleton_classes_and_inheritance.png?token=AA-NI08_F1rOD2C2U8j70uOwanbIUUEPks5UqkyNwA%3D%3D" alt="singleton_classes_and_inheritance" /></p>

<p><strong>7 rules of the Ruby object model</strong></p>

<blockquote>
  <p>The Ruby object model is a beautiful place,” Bill notes, with a dreamy expres- sion on his face. “There are classes, singleton classes, and modules. There are instance methods, class methods, and singleton methods.</p>
</blockquote>

<ol>
  <li>There is only one kind of object—be it a regular object or a module.</li>
  <li>There is only one kind of module—be it a regular module, a class, or a singleton class.</li>
  <li>There is only one kind of method, and it lives in a module—most often in a class.</li>
  <li>Every object, classes included, has its own “real class,” be it a regular class or a singleton class.</li>
  <li>Every class, with the exception of <code>BasicObject</code>, has exactly one ancestor— either a superclass, or a module. This means you have a single chain of ancestors from any class up to <code>BasicObject</code>.</li>
  <li>The superclass of the singleton class of an object is the object’s class. The superclass of the singleton class of a class is the singleton class of the class’s superclass.</li>
  <li>When you call a method, Ruby goes “right” in the receiver’s real class and then “up” the ancestors chain. That’s all there is to know about the way Ruby finds methods.</li>
</ol>

<p><strong><em>Can object’s Singleton Class touch the its Instance Variable?</em></strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># exampel 1</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">name</span><span class="p">;</span> <span class="vi">@name</span><span class="p">;</span> <span class="k">end</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">name</span><span class="o">=</span><span class="p">(</span><span class="n">n</span><span class="p">);</span> <span class="vi">@name</span><span class="o">=</span><span class="n">n</span><span class="p">;</span> <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">obj</span> <span class="o">=</span> <span class="no">MyClass</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="n">obj</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;foo&#39;</span>
</span><span class="line"><span class="n">obj</span><span class="o">.</span><span class="n">name</span> <span class="c1"># =&gt; &#39;foo&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">obj</span><span class="o">.</span><span class="n">instance_eval</span> <span class="p">{</span> <span class="k">def</span> <span class="nf">to_s</span><span class="p">;</span> <span class="s2">&quot;My name is </span><span class="si">#@name</span><span class="s2">&quot;</span><span class="p">;</span> <span class="k">end</span> <span class="p">}</span>
</span><span class="line"><span class="n">obj</span><span class="o">.</span><span class="n">to_s</span> <span class="c1"># =&gt; &quot;My name is foo&quot;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># example2</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class="line">  <span class="vi">@age</span> <span class="o">=</span> <span class="mi">42</span>
</span><span class="line">  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">age</span><span class="p">;</span> <span class="vi">@age</span><span class="p">;</span> <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="no">MyClass</span><span class="o">.</span><span class="n">age</span> <span class="c1"># =&gt; 42</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Yes, it can. So I can assume the obj’s Instance Variable lives in its Singleton Class.</p>

<p><strong><em>Can a module’s singleton methods be included?</em></strong></p>

<p>No!</p>

<p>When a class includes a module, it gets the module’s instance methods—not the class methods. Class methods stay out of reach, in the module’s singleton class.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">M</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">foo</span><span class="p">;</span> <span class="nb">puts</span> <span class="s1">&#39;foo&#39;</span><span class="p">;</span> <span class="k">end</span>
</span><span class="line">  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">bar</span><span class="p">;</span> <span class="nb">puts</span> <span class="s1">&#39;bar&#39;</span><span class="p">;</span> <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">C</span>
</span><span class="line">  <span class="kp">include</span> <span class="n">M</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">C</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">foo</span> <span class="c1"># =&gt; &#39;foo&#39;</span>
</span><span class="line"><span class="n">C</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">bar</span> <span class="c1"># =&gt; NoMethodError</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">C</span>
</span><span class="line">  <span class="kp">extend</span> <span class="n">M</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">C</span><span class="o">.</span><span class="n">bar</span> <span class="c1"># =&gt; NoMethodError</span>
</span><span class="line"><span class="n">C</span><span class="o">.</span><span class="n">foo</span> <span class="c1"># =&gt; &#39;foo&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong><em>What’s the difference between <code>Module#include</code> and <code>Object#extend</code>?</em></strong></p>

<ul>
  <li><code>Module#include</code> includes a module in the receiver’s class.</li>
  <li><code>Object#extend</code> includes a module in the receiver’s singleton class.</li>
</ul>

<h2 id="method-wrapper">Method Wrapper</h2>

<ul>
  <li>Around Alias</li>
  <li>Refinement Wrapper</li>
  <li>Prepended Wrapper(<code>Module#prepend</code>)</li>
</ul>

<p>Selection: Prepended Wrapper &gt; Refinement Wrapper &gt; Around Alias</p>

<h3 id="around-alias">Around Alias</h3>

<p><strong><code>alias</code> vs. <code>alias_method</code></strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class="line">  <span class="k">alias</span> <span class="ss">:new_foo</span> <span class="ss">:foo</span>
</span><span class="line">  <span class="n">alias_method</span> <span class="ss">:another_new_foo</span><span class="p">,</span> <span class="ss">:foo</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li><code>alias</code> is a keyword.</li>
  <li><code>alias_method</code> is an instance method of Module. <code>Module#alias_method</code></li>
</ul>

<p><strong><em>Can you alias a method before it defined?</em></strong></p>

<p>No!</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class="line">  <span class="n">alias_method</span> <span class="ss">:new_foo</span><span class="p">,</span> <span class="ss">:foo</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">foo</span><span class="p">;</span> <span class="nb">puts</span> <span class="s1">&#39;foo&#39;</span><span class="p">;</span> <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># =&gt; NameError: undefined method `foo&#39; for class `MyClass&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong><em>Can aliases break the class’s encapsulation?</em></strong></p>

<p>Yes!</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class="line">  <span class="n">alias_method</span> <span class="ss">:new_foo</span><span class="p">,</span> <span class="ss">:foo</span>
</span><span class="line">
</span><span class="line">  <span class="kp">private</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">foo</span><span class="p">;</span> <span class="nb">puts</span> <span class="s1">&#39;foo&#39;</span><span class="p">;</span> <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="no">MyClass</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">foo</span>     <span class="c1"># =&gt; NoMethodError: private method `foo&#39; called</span>
</span><span class="line">  <span class="no">MyClass</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">new_foo</span> <span class="c1"># =&gt; &#39;foo&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong><em>How to write an Around Alias?</em></strong></p>

<ol>
  <li>You alias a method.</li>
  <li>You redefine it.</li>
  <li>You call the old method from the new method.</li>
</ol>

<p><strong>Downsides</strong></p>

<ul>
  <li>They pollute your classes with one additional method name. You can fix this small problem somehow by making the old version of the method <code>private</code> after you alias it.</li>
  <li>The loading issue. You should never load an Around Alias twice, unless you want to end up with an exception when you call the method.</li>
</ul>

<p>The main issue with Around Aliases, however, is that they are a form of Monkeypatching. Like all Monkeypatches, they can break existing code that wasn’t expecting the method to change.</p>

<h3 id="refinement-wrapper">Refinement Wrapper</h3>

<p><strong>Advantage over Around Alias</strong></p>

<p>If you call <code>super</code> from a refined method, you will call the original, unrefined method.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">StringRefinement</span>
</span><span class="line">  <span class="n">refine</span> <span class="nb">String</span> <span class="k">do</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">length</span>
</span><span class="line">      <span class="k">super</span> <span class="o">&gt;</span> <span class="mi">5</span> <span class="o">?</span> <span class="s1">&#39;long&#39;</span> <span class="p">:</span> <span class="s1">&#39;short&#39;</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">using</span> <span class="no">StringRefinement</span>
</span><span class="line"><span class="s2">&quot;War and Peace&quot;</span><span class="o">.</span><span class="n">length</span> <span class="c1"># =&gt; &quot;long&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="prepended-wrapper">Prepended Wrapper</h3>

<p>A method in a prepended module can override a method in the includer, and call the non- overridden version with <code>super</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">ExplicitString</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">length</span>
</span><span class="line">    <span class="k">super</span> <span class="o">&gt;</span> <span class="mi">5</span> <span class="o">?</span> <span class="s1">&#39;long&#39;</span> <span class="p">:</span> <span class="s1">&#39;short&#39;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="nb">String</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class="line">  <span class="n">prepend</span> <span class="no">ExplicitString</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="s2">&quot;War and Peace&quot;</span><span class="o">.</span><span class="n">length</span> <span class="c1"># =&gt; &quot;long&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong><em>Advantage over Refinement Wrapper and Around Alias?</em></strong></p>

<p>It’s generally considered cleaner and more explicit than both a Refinement Wrapper and an Around Alias.</p>

<h3 id="an-interesting-quiz-solving-by-around-alias">An interesting quiz solving by Around Alias</h3>

<p>Make it work:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span> <span class="c1"># =&gt; 3</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You can solve this quiz with an Open Class. Just reopen <code>Fixnum</code>, and redefine <code>+</code> so that <code>(x+y)</code> becomes <code>(x+y+1)</code>. This is not as easy as it seems, however. The new version of + relies on the old version of +, so you need to wrap your old version with the new version.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Fixnum</span>
</span><span class="line">  <span class="n">alias_method</span> <span class="ss">:old_plus</span><span class="p">,</span> <span class="ss">:+</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">+</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class="line">    <span class="nb">self</span><span class="o">.</span><span class="n">old_plus</span><span class="p">(</span><span class="n">value</span><span class="p">)</span><span class="o">.</span><span class="n">old_plus</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="eval-and-binding">Eval and Binding</h1>

<p><code>Kernel#eval</code> Evaluates the Ruby expression(s) in string. If binding is given, which must be a <code>Binding</code> object, the evaluation is performed in its context.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">get_binding</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
</span><span class="line">  <span class="nb">binding</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">str</span> <span class="o">=</span> <span class="s1">&#39;hello&#39;</span>
</span><span class="line"><span class="nb">eval</span> <span class="s2">&quot;str + &#39; Fred&#39;&quot;</span>                     <span class="c1"># =&gt; &quot;hello Fred&quot;</span>
</span><span class="line"><span class="nb">eval</span> <span class="s2">&quot;str + &#39; Fred&#39;&quot;</span><span class="p">,</span> <span class="n">get_binding</span><span class="p">(</span><span class="s1">&#39;bye&#39;</span><span class="p">)</span> <span class="c1"># =&gt; &quot;bye Fred&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>Kernel#binding</code> Returns a <code>Binding</code> object, describing the variable and method bindings at the point of call. This object can be used when calling eval to execute the evaluated command in this environment.</p>

<p>Ruby also provides a predefined constant named <code>TOPLEVEL_BINDING</code>, which is just a Binding of the top-level scope.</p>

<p>You can also use <code>Proc#binding</code> to return a <code>Binding</code> object.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">get_proc</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
</span><span class="line">  <span class="o">-&gt;</span> <span class="p">{}</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="nb">eval</span> <span class="s2">&quot;str + &#39;Fred&#39;&quot;</span><span class="p">,</span> <span class="n">get_proc</span><span class="p">(</span><span class="s1">&#39;bye&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">binding</span> <span class="c1"># =&gt; &quot;bye Fred&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">l</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="nb">name</span> <span class="o">=</span> <span class="s1">&#39;wendi&#39;</span> <span class="p">}</span>
</span><span class="line"><span class="nb">eval</span> <span class="s2">&quot;puts name&quot;</span><span class="p">,</span> <span class="n">l</span><span class="o">.</span><span class="n">binding</span>
</span><span class="line"><span class="c1"># =&gt; NameError: undefined local variable or method `name&#39; for main:Object`</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">bar</span>
</span><span class="line">  <span class="nb">name</span> <span class="o">=</span> <span class="s1">&#39;wendi&#39;</span>
</span><span class="line">  <span class="o">-&gt;</span> <span class="p">{}</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line"><span class="nb">eval</span> <span class="s2">&quot;puts name&quot;</span><span class="p">,</span> <span class="n">bar</span><span class="o">.</span><span class="n">binding</span>
</span><span class="line"><span class="c1"># =&gt; wendi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong><em>What’s to concern when using <code>eval</code>?</em></strong></p>

<ul>
  <li>
    <p>As it only accepts strings of codes but not blocks, it’s not editor friendly(syntax highlighting) and hard to trace syntax errors.</p>
  </li>
  <li>
    <p>Code Injection.</p>
  </li>
</ul>

<p><strong><em>What’s the soluction Ruby provided for <code>eval</code> insecurity?</em></strong></p>

<ul>
  <li>
    <p>Tainted Objects, <code>Object#tainted?</code>, <code>Object#untaint</code></p>
  </li>
  <li>
    <p>Safe Levels, <code>$SAFE</code></p>

    <ul>
      <li>0, “hippie commune”, where you can hug trees and format hard disks.</li>
      <li>Any safe level greater than 0 also causes Ruby to flat-out refuse to evaluate tainted string.</li>
      <li>2, disallows most file-related operations.</li>
      <li>3, “military dictatorship,” where every object you create is tainted by default.</li>
    </ul>
  </li>
</ul>

<p><strong><em>How to write a Sandbox for <code>eval</code>?</em></strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">ERB</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">result</span><span class="p">(</span><span class="n">b</span><span class="o">=</span><span class="n">new_toplevel</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="vi">@safe_level</span>
</span><span class="line">      <span class="nb">proc</span> <span class="p">{</span>
</span><span class="line">        <span class="vg">$SAFE</span> <span class="o">=</span> <span class="vi">@safe_level</span>
</span><span class="line">        <span class="nb">eval</span><span class="p">(</span><span class="vi">@src</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="p">(</span><span class="vi">@filename</span> <span class="o">||</span> <span class="s1">&#39;(erb)&#39;</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">      <span class="p">}</span><span class="o">.</span><span class="n">call</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">      <span class="nb">eval</span><span class="p">(</span><span class="vi">@src</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="p">(</span><span class="vi">@filename</span> <span class="o">||</span> <span class="s1">&#39;(erb)&#39;</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>Updated 2014-09-28</em></p>

<p>As I was looking API and fiddling around, I found 3 new methods only supported by Ruby 2.1.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nf">foo</span>
</span><span class="line">  <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line">  <span class="nb">binding</span><span class="o">.</span><span class="n">local_variable_defined?</span><span class="p">(</span><span class="ss">:a</span><span class="p">)</span> <span class="c1"># =&gt; true</span>
</span><span class="line">  <span class="c1"># binding.eval(&quot;defined?(#{symbol}) == &#39;local-variable&#39;&quot;)</span>
</span><span class="line">
</span><span class="line">  <span class="nb">binding</span><span class="o">.</span><span class="n">local_variable_get</span><span class="p">(</span><span class="ss">:a</span><span class="p">)</span> <span class="c1">#=&gt; 1</span>
</span><span class="line">  <span class="c1"># binding.eval(&quot;#{symbol}&quot;)</span>
</span><span class="line">
</span><span class="line">  <span class="nb">binding</span><span class="o">.</span><span class="n">local_variable_set</span><span class="p">(</span><span class="ss">:a</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="c1">#=&gt; 2</span>
</span><span class="line">  <span class="c1"># binding.eval(&quot;#{symbol} = #{obj}&quot;)</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[includes vs. joins in Rails]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2014/06/03/rails-includes-vs-joins/"/>
    <updated>2014-06-03T00:32:18+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2014/06/03/rails-includes-vs-joins</id>
    <content type="html"><![CDATA[<p><code>includes</code></p>

<p>Eager load the included associations into memory. Fire two queries:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">SELECT "products".* FROM "products" ORDER BY name
</span><span class="line">SELECT "categories".* FROM "categories" WHERE "categories"."id" IN (2, 1, 5, 4, 3)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>joins</code></p>

<p>Sometimes,<code>includes</code> will load many redundant fields in association table, <code>joins</code> help to control what columns after <code>SELECT</code>.</p>

<p><em>Reference</em></p>

<ul>
  <li><a href="http://stackoverflow.com/questions/1208636/rails-include-vs-joins/10129946">ruby - Rails :include vs. :joins - Stack Overflow</a></li>
  <li><a href="http://railscasts.com/episodes/181-include-vs-joins?language=zh&amp;view=asciicast">#181 Include vs Joins - RailsCasts</a></li>
  <li><a href="https://gist.github.com/ifyouseewendy/6d0feb90d76fb894814a">N+1 Benchmark Gist - IBM Developer Works</a></li>
</ul>

<hr />

<p><strong><em>Does query with <code>includes</code> and <code>joins</code> return the same count?</em></strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>activerecord-includes-joins-query-count</span><a href="https://gist.github.com/ifyouseewendy/429544e5b8f49a347e95">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="n">has_many</span> <span class="ss">:comments</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Comment</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="n">belongs_to</span> <span class="ss">:post</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">BugTest</span> <span class="o">&lt;</span> <span class="ss">Minitest</span><span class="p">:</span><span class="ss">:Test</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">test_association_stuff</span>
</span><span class="line">    <span class="n">post1</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">create!</span>
</span><span class="line">    <span class="n">post2</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">create!</span>
</span><span class="line">
</span><span class="line">    <span class="n">post1</span><span class="o">.</span><span class="n">comments</span> <span class="o">&lt;&lt;</span> <span class="no">Comment</span><span class="o">.</span><span class="n">create!</span>
</span><span class="line">    <span class="n">post1</span><span class="o">.</span><span class="n">comments</span> <span class="o">&lt;&lt;</span> <span class="no">Comment</span><span class="o">.</span><span class="n">create!</span>
</span><span class="line">    <span class="n">post2</span><span class="o">.</span><span class="n">comments</span> <span class="o">&lt;&lt;</span> <span class="no">Comment</span><span class="o">.</span><span class="n">create!</span>
</span><span class="line">    <span class="n">post2</span><span class="o">.</span><span class="n">comments</span> <span class="o">&lt;&lt;</span> <span class="no">Comment</span><span class="o">.</span><span class="n">create!</span>
</span><span class="line">    <span class="n">post2</span><span class="o">.</span><span class="n">comments</span> <span class="o">&lt;&lt;</span> <span class="no">Comment</span><span class="o">.</span><span class="n">create!</span>
</span><span class="line">
</span><span class="line">    <span class="n">assert_equal</span> <span class="mi">2</span><span class="p">,</span> <span class="no">Post</span><span class="o">.</span><span class="n">includes</span><span class="p">(</span><span class="ss">:comments</span><span class="p">)</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">post1</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="n">post2</span><span class="o">.</span><span class="n">id</span><span class="p">)</span><span class="o">.</span><span class="n">count</span>
</span><span class="line">    <span class="c1"># =&gt; SELECT &quot;posts&quot;.* FROM &quot;posts&quot; WHERE &quot;posts&quot;.&quot;id&quot; IN (1, 2)</span>
</span><span class="line">    <span class="c1"># =&gt; SELECT &quot;comments&quot;.* FROM &quot;comments&quot; WHERE &quot;comments&quot;.&quot;post_id&quot; IN (1, 2)</span>
</span><span class="line">
</span><span class="line">    <span class="n">assert_equal</span> <span class="mi">5</span><span class="p">,</span> <span class="no">Post</span><span class="o">.</span><span class="n">joins</span><span class="p">(</span><span class="ss">:comments</span><span class="p">)</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="o">[</span><span class="n">post1</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="n">post2</span><span class="o">.</span><span class="n">id</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">count</span>
</span><span class="line">    <span class="c1"># =&gt; SELECT COUNT(*) FROM &quot;posts&quot; INNER JOIN &quot;comments&quot; ON &quot;comments&quot;.&quot;post_id&quot; = &quot;posts&quot;.&quot;id&quot; WHERE &quot;posts&quot;.&quot;id&quot; IN (1, 2)</span>
</span><span class="line">
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong><em>Does <code>includes</code> work with Mongoid?</em></strong></p>

<p>Check list:</p>

<ul>
  <li><a href="http://stackoverflow.com/questions/3912706/n1-problem-in-mongoid">N+1 problem in mongoid - Stack Overflow</a></li>
  <li><a href="http://mongoid.org/en/mongoid/docs/querying.html#queries">Eager Loading - Mongoid Doc</a></li>
</ul>

<p>By now ( <em>2014-05-08</em> ) the latest version <em>4.0.0.beta1</em> behaves much better than last stable version <em>3.1.6</em>, check the <a href="https://gist.github.com/ifyouseewendy/0069c0498274d2dd5a6d">gist</a>.</p>

<p><img src="https://raw.githubusercontent.com/ifyouseewendy/ifyouseewendy.github.io/source/image-repo/rails-includes_vs_joins_selected.png?token=AA-NI7Boc2dYZfduWv_nTlZ7RqfuModHks5Uqkq3wA%3D%3D" alt="rails-includes_vs_joins" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Review] The Rails 4 Way - Environments and Configurations]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2014/05/18/the-rails-4-way-environments-and-configurations/"/>
    <updated>2014-05-18T16:10:42+08:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2014/05/18/the-rails-4-way-environments-and-configurations</id>
    <content type="html"><![CDATA[<table class="custom">
  <tbody>
    <tr>
      <td><strong>Book</strong></td>
      <td>The Rails 4 Way</td>
    </tr>
    <tr>
      <td><strong>Author</strong></td>
      <td>Obie Fernandez, Kevin Faustino, Vitaly Kushner</td>
    </tr>
    <tr>
      <td><strong>Link</strong></td>
      <td><a href="http://amzn.com/0321944275">amzn.com/0321944275</a></td>
    </tr>
  </tbody>
</table>

<h2 id="bundler-refhttpbundlerio">Bundler <a href="http://bundler.io">ref</a></h2>

<p>Bundler does gem dependency resolution based on Gemfile.</p>

<h4 id="operator"><code>~&gt;</code> operator</h4>

<p>The specifier <strong>~&gt;</strong> has a special meaning, best shown by example. <code>~&gt; 2.0.3</code> is identical to <code>&gt;= 2.0.3</code> and <code>&lt; 2.1</code>. <code>~&gt; 2.1</code> is identical to <code>&gt;= 2.1</code> and <code>&lt; 3.0</code>. <code>~&gt; 2.2.beta</code> will match prerelease versions like <code>2.2.beta.12</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">gem</span> <span class="s1">&#39;thin&#39;</span><span class="p">,</span>  <span class="s1">&#39;~&gt;1.1&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="require"><code>require</code></h4>

<p>Occasionally, the name of the gem that should be used in a require statement is
different than the name of that gem in the repository. In those cases, the <strong>:require</strong>
option solves this simply and declaratively right in the Gemfile.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">gem</span> <span class="s1">&#39;sqlite3-ruby&#39;</span><span class="p">,</span> <span class="ss">:require</span> <span class="o">=&gt;</span> <span class="s1">&#39;sqlite3&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="group">group</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">gem</span> <span class="s1">&#39;wirble&#39;</span><span class="p">,</span> <span class="ss">:group</span> <span class="o">=&gt;</span> <span class="ss">:development</span>
</span><span class="line"><span class="n">gem</span> <span class="s1">&#39;ruby-debug&#39;</span><span class="p">,</span> <span class="ss">:group</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:development</span><span class="p">,</span> <span class="ss">:test</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class="line">  <span class="n">gem</span> <span class="s1">&#39;rspec&#39;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="bundle-installupdate">bundle install/update</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="o">-&gt;</span> <span class="n">calculate</span> <span class="n">a</span> <span class="n">dependency</span> <span class="n">tree</span> <span class="o">-&gt;</span> <span class="n">generate</span> <span class="no">Gemfile</span><span class="o">.</span><span class="n">lock</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="bundle-package">bundle package</h4>

<blockquote>
  <p>it will package up all your gems in <strong>vendor/cache</strong> directory. Running <strong>bundle install</strong> will use the gems in package and skip connecting to rubygems.org. use this to avoid external dependencies at deploy time, or if you depend on private gems that you are not available in any public repository.</p>
</blockquote>

<h4 id="bundle-exec">bundle exec</h4>

<p>Non-Rails scripts must be executed with this to get a properly initialized RubyGems environment.</p>

<h4 id="bundle-install---path-venderbundle---binstubs">bundle install –path vender/bundle –binstubs</h4>

<p>The default location for gems installed by bundler is directory named <strong>.bundle</strong> in your user directory.</p>

<p>This command will generate <strong>.bundle/config</strong> file:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>.bundle/config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="o">---</span>
</span><span class="line"><span class="no">BUNDLE_BIN</span><span class="p">:</span> <span class="n">bundler_stubs</span>
</span><span class="line"><span class="no">BUNDLE_PATH</span><span class="p">:</span> <span class="n">vendor</span><span class="o">/</span><span class="n">bundle</span>
</span><span class="line"><span class="no">BUNDLE_DISABLE_SHARED_GEMS</span><span class="p">:</span> <span class="s2">&quot;1&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>gems in <strong>verdor/cache</strong>, and installed in <strong>vendor/bundle</strong>.</p>

<h4 id="bundle-install-vendor---disable-shared-gems">bundle install vendor –disable-shared-gems</h4>

<blockquote>
  <p>This command tells Bundler to install gems even if they are already installed in the system. Normally Bunlder avoids that symlinks to already downloaded gems that exists in your system. This option is useful when you are trying to package up an application that all dependencies unpacked.</p>
</blockquote>

<h2 id="startup-and-application-settings">Startup and Application Settings</h2>

<p><code>boot.rb</code></p>

<ul>
  <li>sets up Bundler and load paths</li>
</ul>

<p><code>application.rb</code></p>

<ul>
  <li>require ‘boot’</li>
  <li>load rails gems, gems for the specified Rail.env, and configures the application ( <strong>define Application class</strong> ).</li>
</ul>

<p><code>environment.rb</code></p>

<ul>
  <li>require ‘application’</li>
  <li>runs all initializers ( <code>Application.initialize!</code> )</li>
</ul>

<p><code>environments/development.rb | test.rb | production.rb</code></p>

<ul>
  <li>makes environmental configuraions.</li>
  <li>application.rb makes unenvironmental configurations, like time-zone, autoload_paths, encoding.</li>
</ul>

<h2 id="configurations">Configurations</h2>

<h4 id="wrap-parameters">Wrap Parameters</h4>

<p>Introduced in Rails 3.1, the <code>wrap_parameters.rb</code> initializer configures your application to work with JavaScript MVC frameworks.</p>

<p>When submitting JSON parameters to a controller, Rails will wrap the parameters into a nested hash, with the controller’s name being set as the key. To illustrate, consider the following JSON:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="p">{</span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="s2">&quot;TheRails4Way&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If a client submitted the above JSON to a controller named ArticlesController, Rails would nest the params hash under the key “article”. This ensures the setting of model attributes from request parameters is consistent with the convention used when submitting from Rails form helpers.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="p">{</span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="s2">&quot;TheRails4Way&quot;</span><span class="p">,</span> <span class="s2">&quot;article&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="s2">&quot;title&quot;</span><span class="p">:</span> <span class="s2">&quot;TheRails4Way&quot;</span><span class="p">}}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="schema-dumper">Schema Dumper</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">config</span><span class="o">.</span><span class="n">active_record</span><span class="o">.</span><span class="n">schema_format</span> <span class="o">=</span> <span class="ss">:sql</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Every time you run tests, Rails dumps the schema of your development database and copies it to the test database using an auto generated <code>schema.rb</code> script. It looks very similar to an Active Record migration script; in fact, it uses the same API.</p>

<h4 id="automatic-class-reloading">Automatic Class Reloading</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">config</span><span class="o">.</span><span class="n">cache_classes</span> <span class="o">=</span> <span class="kp">false</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Without getting into too much nitty-gritty detail, when the config.cache_classes setting is true,Rails willuse Ruby’s <code>require</code> statement to do its class loading, and when it is false, it will use <code>load</code> instead.</p>

<p>When you require a Ruby file, the interpreter executes and caches it. If the file is required again (as in subsequent requests), the interpreter ignores the require statement and moves on. When you load a Ruby file, the interpreter executes the file again, no matter how many times it has been loaded before.</p>

<h4 id="auto-loading-code">Auto-Loading Code</h4>

<p>By following the naming convention, Rails will search <code>$LOAD_PATH</code> to find the undefined constant. So when using Rails console, <strong>you never have to explicitly <code>require</code> anything!</strong></p>

<p>Rails takes advantage of the fact that Ruby provides a callback mechanism for missing constants. When Rails encounters an undefined constant in the code, it uses a class loader routine based on file-naming conventions to find and require the needed Ruby script.</p>

<h4 id="eager-load">Eager Load</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">config</span><span class="o">.</span><span class="n">eager_load</span> <span class="o">=</span> <span class="kp">false</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In your production environment, you will want this set to true, as it copies most of your application in memory. This provides a performance increase to web servers that copy on write, such as Unicorn.</p>

<h4 id="explain-for-slow-queries">Explain for Slow Queries</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">config</span><span class="o">.</span><span class="n">active_record</span><span class="o">.</span><span class="n">auto_explain_threshold_in_seconds</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Introduced in Rails 3.2, Active Record now monitors the threshold of SQL queries being made. If any query takes longer than the specified threshold, the query plan is logged with a warning.</p>

<h4 id="assets">Assets</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">debug</span> <span class="o">=</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Setting config.assets.debug to false, would result in Sprockets concatenating and running preprocessors on all assets.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">compile</span> <span class="o">=</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If an asset is requested that does not exist in the public/assets folder, Rails will throw an exception. To enable live asset compilation fallback on production, set config.assets.compile to true.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">enable</span> <span class="o">=</span> <span class="kp">false</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Like most features in Rails, the usage of the Asset Pipeline is completely optional. To include assets in your project as it was done in Rails 3.0, set config.assets.enabled to false.</p>

<h4 id="tagged-logging-refhttparunim2011x-request-id-tracking-taggedlogging-rails">Tagged Logging <a href="http://arun.im/2011/x-request-id-tracking-taggedlogging-rails">ref</a></h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">config</span><span class="o">.</span><span class="n">log_tags</span> <span class="o">=</span> <span class="o">[</span> <span class="ss">:subdomain</span><span class="p">,</span> <span class="ss">:uuid</span> <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Rails 3.2 introduced the ability to tag your log messages. <code>:subdomain</code> example by <em>www</em>, <code>:uuid</code> is a string to identify request, try <code>request.uuid</code>.</p>
]]></content>
  </entry>
  
</feed>
