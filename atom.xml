<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Wendi's Blog]]></title>
  <link href="http://blog.ifyouseewendy.com/atom.xml" rel="self"/>
  <link href="http://blog.ifyouseewendy.com/"/>
  <updated>2019-09-17T21:50:32-04:00</updated>
  <id>http://blog.ifyouseewendy.com/</id>
  <author>
    <name><![CDATA[wendi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Notes on DDD Quickly]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2019/05/27/notes-on-ddd/"/>
    <updated>2019-05-27T11:43:15-04:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2019/05/27/notes-on-ddd</id>
    <content type="html"><![CDATA[<table class="custom">
  <tbody>
    <tr>
      <td><strong>Book</strong></td>
      <td>Domain Driven Design Quickly</td>
    </tr>
    <tr>
      <td><strong>Author</strong></td>
      <td>Floyd Marinescu &amp; Abel Avram</td>
    </tr>
    <tr>
      <td><strong>Link</strong></td>
      <td><a href="https://www.infoq.com/minibooks/domain-driven-design-quickly">InfoQ</a></td>
    </tr>
  </tbody>
</table>

<ul id="markdown-toc">
  <li><a href="#what-is-ddd">What is DDD?</a></li>
  <li><a href="#the-ubiquitous-language">The Ubiquitous Language</a></li>
  <li><a href="#model-driven-design">Model-Driven Design</a>    <ul>
      <li><a href="#building-blocks">building blocks</a></li>
      <li><a href="#layered-architecture">Layered Architecture</a></li>
      <li><a href="#express-model-with-entities-value-objects-and-services">Express Model with Entities, Value Objects and Services</a></li>
      <li><a href="#struct-model-with-modules">Struct model with Modules</a></li>
      <li><a href="#manage-a-domain-object">Manage a domain object</a></li>
    </ul>
  </li>
  <li><a href="#refactoring-toward-deeper-insight">Refactoring Toward Deeper Insight</a></li>
  <li><a href="#preserving-model-integrity">Preserving Model Integrity</a>    <ul>
      <li><a href="#bounded-context">Bounded Context</a></li>
      <li><a href="#continuous-integration">Continuous integration</a></li>
      <li><a href="#context-map">Context map</a></li>
      <li><a href="#shared-kernel">Shared Kernel</a></li>
      <li><a href="#customer-supplier">Customer-supplier</a></li>
      <li><a href="#conformist">Conformist</a></li>
      <li><a href="#anticorruption-layer">Anticorruption layer</a></li>
      <li><a href="#separate-ways">Separate ways</a></li>
      <li><a href="#open-host-service">Open host service</a></li>
      <li><a href="#distillation">Distillation</a></li>
    </ul>
  </li>
  <li><a href="#advices">Advices</a></li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/ddd/ddd-mind-map.png" alt="ddd-mind-map" /></p>

<h2 id="what-is-ddd">What is DDD?</h2>

<p>The main idea is to identify the <strong>domain model</strong> and design your system around it. Usually, a software designer will talk with the domain expert to figure out the domain.</p>

<blockquote>
  <p>You cannot create a banking software system unless you have a good understanding of what banking is all about, one must understand the domain of banking.
How can we make the software fit harmoniously with the domain? The best way to do it is to make software a reflection of the domain. Software needs to incorporate the core concepts and elements of the domain, and to precisely realize the relationships between them. Software has to <strong>model</strong> the domain.</p>
</blockquote>

<p>So, what is domain model? It’s an abstraction of the domain. It’s an internal representation of the target domain.</p>

<blockquote>
  <p>A model is an abstraction of the domain. It is not just the knowledge in a domain expert’s head; it is a rigorously organized and selective abstraction of that knowledge. The model is our internal representation of the target domain,</p>
</blockquote>

<h2 id="the-ubiquitous-language">The Ubiquitous Language</h2>

<p>A core <strong>principle</strong> of DDD is to use a language to communicate the domain. Use the model as the backbone of a language. Request that the team use the language consistently in all communications, and also in the code. While sharing knowledge and hammering out the model, the team uses speech, writing and diagrams. Make sure this language appears consistently in all the communication forms used by the team; for this reason, the language is called <strong>the Ubiquitous Language</strong>.</p>

<p>Building a language like that has a clear outcome: the model and the language are strongly interconnected with one another. A change in the language should become a change to the model.</p>

<h2 id="model-driven-design">Model-Driven Design</h2>

<h3 id="building-blocks">building blocks</h3>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/ddd/ddd-building-blocks.png" alt="ddd-building-blocks" /></p>

<h3 id="layered-architecture">Layered Architecture</h3>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/ddd/ddd-layered-architecture.png" alt="ddd-layered-architecture" /></p>

<h3 id="express-model-with-entities-value-objects-and-services">Express Model with Entities, Value Objects and Services</h3>

<p><strong>Entity</strong>: implementing entities in software means creating identity.</p>

<p><strong>Value Object</strong>: is an object that is used to describe certain aspects of a domain, being immutable, having no identity, thus can be shared.</p>

<p>It is recommended to select as entities only those objects which conform to the entity definition. And make the rest of the objects Value Objects.</p>

<p><strong>Service</strong>: without an internal state, its purpose is to simply provide functionality for the domain. There are three characters of a Service</p>

<ol>
  <li>The operation performed by the Service refers to a domain concept which does not naturally belong to an Entity or Value Object.</li>
  <li>The operation performed refers to other objects in the domain.</li>
  <li>The operation is stateless.</li>
</ol>

<p>While using Services, is important to keep the domain layer isolated. It is easy to get confused between services which belong to the domain layer, and those belonging to the infrastructure.</p>

<h3 id="struct-model-with-modules">Struct model with Modules</h3>

<p>Modules are used as a method of organizing related concepts and tasks in order to reduce complexity. Choose Modules that tell the story of the system and contain a cohesive set of concepts.</p>

<p>It is recommended to group highly related classes into modules to provide maximum cohesion possible. There are several types of cohesion. Two of the most used are <em>communicational cohesion *and *functional cohesion</em>.</p>

<ul>
  <li>Communicational cohesion is achieved when parts of the module operate on the same data. It makes sense to group them, because there is a strong relationship between them.</li>
  <li>Functional cohesion is achieved when all parts of the module work together to perform a well-defined task. This is considered the best type of cohesion.</li>
</ul>

<h3 id="manage-a-domain-object">Manage a domain object</h3>

<p><strong>Ownership &amp; Boundary: Aggregates</strong></p>

<p>Aggregate is a domain pattern used to define object ownership and boundaries.</p>

<p>An Aggregate is a group of associated objects which are considered as one unit with regard to data changes. The Aggregate is demarcated by a boundary which separates the objects inside from those outside. Each Aggregate has one root. The root is an Entity, which has global identity and it’s responsible for maintaining the invariants, and it is the only object accessible from outside.</p>

<ol>
  <li>Cluster the Entities and Value Objects into Aggregates and define boundaries around each.</li>
  <li>Choose one Entity to be the root of each Aggregate, and control all access to the objects inside the boundary through the root.</li>
</ol>

<p><strong>Creation: Factories</strong></p>

<p>Factories are used to encapsulate the knowledge necessary for object creation, and they are especially useful to create Aggregates. When the root of the Aggregate is created, all the objects contained by the Aggregate are created along with it, and all the invariants are enforced.</p>

<p>It is important for the creation process to be atomic. Another observation is that Factories need to create new objects from scratch.</p>

<p><strong>Storage: Repositories</strong></p>

<p>A client needs a practical means of acquiring references to preexisting domain objects. Use a Repository to encapsulate all the logic needed to obtain object references.</p>

<p>The Repository acts as a storage place for globally accessible objects.</p>

<ul>
  <li>For each type of object that needs global access, create an object that can provide the illusion of an in-memory collection of all objects of that type.</li>
  <li>Set up access through a well-known global interface.</li>
  <li>Provide methods to add and remove objects, which will encapsulate the actual insertion or removal of data in the data store.</li>
  <li>Provide methods that select objects based on some criteria and return fully instantiated objects or collections of objects whose attribute values meet the criteria, thereby encapsulating the actual storage and query technology. Use a Specification.</li>
  <li>Provide repositories only for Aggregate roots that actually need direct access.</li>
  <li>Keep the client focused on the model, delegating all object storage and access to the Repositories.
It can be noted that the implementation of a repository can be closely liked to the infrastructure, but that the repository interface will be pure domain model.</li>
</ul>

<p>There is a relationship between Factory and Repository. They are both patterns of the model-driven design, and they both help us to manage the life cycle of domain objects.</p>

<ul>
  <li>While the Factory should create new objects, while the Repository should find already created objects. When a new object is to be added to the Repository, it should be created first using the Factory, and then it should be given to the Repository which will store it like in the example below.</li>
  <li>Another way this is noted is that Factories are “pure domain”, but that Repositories can contain links to the infrastructure, e g the database.</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/ddd/ddd-factories-and-repositories.png" alt="ddd-factories-and-repositories" /></p>

<h2 id="refactoring-toward-deeper-insight">Refactoring Toward Deeper Insight</h2>

<p>A good model is the result of deep thinking, insight, experience, and flair.
Refactoring is done in small steps. The result is also a series of small improvements. There are times when lots of small changes add very little value to the design, and there are times when few changes make a lot of difference. It’s a Breakthrough. Each refinement adds more clarity to the design. This creates in turn the premises for a Breakthrough.</p>

<p>To reach a Breakthrough, we need to make the implicit concepts explicit.</p>

<ul>
  <li>Listen to the language</li>
  <li>Use domain literature</li>
  <li>Constraint, Process and Specification.
    <ul>
      <li>A Constraint is a simple way to express an invariant. Whatever happens to the object data, the invariant is respected. This is simply done by putting the invariant logic into a Constraint.</li>
      <li>Processes are usually expressed in code with procedures. The best way to implement processes is to use a Service.</li>
      <li>a Specification is used to test an object to see if it satisfies a certain criteria.</li>
    </ul>
  </li>
</ul>

<h2 id="preserving-model-integrity">Preserving Model Integrity</h2>

<p>It is so easy to start from a good model and progress toward an inconsistent one. The internal consistency of a model is called <strong>unification</strong>. Instead of trying to keep one big model that will fall apart later, we should consciously divide it into several models. Several models well integrated can evolve independently as long as they obey the contract they are bound to.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/ddd/ddd-data-integrity-patterns.png" alt="ddd-data-integrity-patterns" /></p>

<h3 id="bounded-context">Bounded Context</h3>

<p>The main idea is to define the scope of a model, to draw up the boundaries of its context, then do the most possible to keep the model unified. Explicitly define the context within which a model applies. Explicitly set boundaries in terms of team organization, usage within specific parts of the application, and physical manifestations such as code bases and database schemas. A model should be small enough to be assigned to one team.</p>

<p>**A Bounded Context is not a Module. **A Bounded Context provides the logical frame inside of which the model evolves. Modules are used to organize the elements of a model, so Bounded Context encompasses the Module.</p>

<h3 id="continuous-integration">Continuous integration</h3>

<p>Continuous Integration is a necessary process within a Bounded Context. Another necessary requirement is to perform automated tests.</p>

<h3 id="context-map">Context map</h3>

<p>A Context Map is a document which outlines the different Bounded Contexts and the relationships between them.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/ddd/ddd-context-map.png" alt="ddd-context-map" /></p>

<p>Each Bounded Context should have a name which should be part of the Ubiquitous Language. A common practice is to define the contexts, then create modules for each context, and use a naming convention to indicate the context each module belongs to.</p>

<h3 id="shared-kernel">Shared Kernel</h3>

<p>The purpose is to reduce duplication, but still keep two separate contexts.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/ddd/ddd-shared-kernel.png" alt="ddd-shared-kernel" /></p>

<h3 id="customer-supplier">Customer-supplier</h3>

<p>There are times when two subsystems have a special relationship: one depends a lot on the other. The contexts in which those two subsystems exist are different, and the processing result of one system is fed into the other. Establish a clear customer/supplier relationship between the two teams.</p>

<p>A Customer-Supplier relationship is viable when both teams are interested in the relationship. When two development teams have a Customer-Supplier relationship in which the supplier team has no motivation to provide for the customer team’s needs, the customer team is helpless.</p>

<p>The customer team has few options:</p>

<ul>
  <li><strong>Conform</strong> entirely to supplier team’s model</li>
  <li>Protect itself by using an <strong>Anticorruption Layer</strong></li>
  <li><strong>Separate Ways</strong>. We need to closely evaluate the benefits of integration and use it only if there is real value in doing so. If we reach the conclusion that integration is more trouble than it is worth, then we should go the Separate Ways.</li>
</ul>

<h3 id="conformist">Conformist</h3>

<p>If the customer has to use the supplier team’s model, and if that is well done, it may be time for conformity. The customer team could adhere to the supplier team’s model, conforming entirely to it.
Compared to the Shared Kernel, but there is an important difference. The customer team cannot make changes to the kernel. They can only use it as part of their model, and they can build on the existing code provided.</p>

<h3 id="anticorruption-layer">Anticorruption layer</h3>

<p>From our model’s perspective, the Anticorruption Layer is a natural part of the model; it does not look like something foreign. It operates with concepts and actions familiar to our model. But the Anticorruption Layer talks to the external model using the external language not the client one. This layer works as a two way translator between two domains and languages.</p>

<p>How should we implement the Anticorruption Layer? A very good solution is to see the layer as a Service from the client model. The Service will be done as a Façade, along with a Adapter and translator.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/ddd/ddd-anticorruption-layer.png" alt="ddd-anticorruption-layer" /></p>

<p>Adapter is to convert the interface of a class to the one understood by the client. Translator is to do object and data conversion.</p>

<h3 id="separate-ways">Separate ways</h3>

<p>Before going on Separate Ways we need to make sure that we won’t be coming back to an integrated system.</p>

<p>The Separate Ways pattern addresses the case when an enterprise application can be made up of several smaller applications which have little or nothing in common from a modeling perspective. From the user’s perspective this is one application, but from a modeling and design point of view it may done using separate models with distinct implementations.</p>

<h3 id="open-host-service">Open host service</h3>

<p>When we try to integrate two subsystems, we usually create a translation layer between them. This layer acts as a buffer between the client subsystem and the external subsystem we want to integrate with. This layer can be a consistent one, depending on the complexity of relationships and how the external subsystem was designed. If the external subsystem turns out to be used not by one client subsystem, but by several ones, we need to create translation layers for all of them.</p>

<p>The solution is to see the external subsystem as a provider of services. If we can wrap a set of Services around it, then all the other subsystems will access these Services, and we won’t need any translation layer.</p>

<p>Define a protocol that gives access to your subsystem as a set of Services. Open the protocol so that all who need to integrate with you can use it.</p>

<h3 id="distillation">Distillation</h3>

<p>A large domain has a large model even after we have refined it and created many abstractions. It can remain big even after many refactorings. In situations like this, it may be time for a distillation. The idea is to define a Core Domain which represents the essence of the domain. The byproducts of the distillation process will be Generic Subdomains which will comprise the other parts of the domain.</p>

<p>When working with a large model, we should try to separate the essential concepts from generic ones. Identify cohesive subdomains that are not the motivation for your project. Factor out generic models of these subdomains and place them in separate Modules. There are different ways to implement a Generic Subdomain:</p>

<ul>
  <li>Off-the-shelf Solution</li>
  <li>Outsourcing</li>
  <li>Existing Model</li>
  <li>In-House Implementation</li>
</ul>

<h2 id="advices">Advices</h2>

<p>Keep in mind some of the pitfalls of domain modeling:</p>

<ol>
  <li>Stay hands-on. Modelers need to code.</li>
  <li>Focus on concrete scenarios. Abstract thinking has to be anchored in concrete cases.</li>
  <li>Don’t try to apply DDD to everything. Draw a context map and decide on where you will make a push for DDD and where you will not. And then don’t worry about it outside those boundaries.</li>
  <li>Experiment a lot and expect to make lots of mistakes. Modeling is a creative process.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I've done in 2019]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2019/04/15/what-ive-done-in-2019/"/>
    <updated>2019-04-15T11:59:16-04:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2019/04/15/what-ive-done-in-2019</id>
    <content type="html"><![CDATA[<blockquote>
  <p>A weekly log on my life and personal growth</p>
</blockquote>

<h2 id="w38-0909---0915">W38 (09/09 - 09/15)</h2>

<ul>
  <li>周一是赵四一周岁生日！你真是越来越招人喜欢，尤其是狗子来了咱们家之后。祝你保持对这个世界的冷漠，永远年轻，永远无所事事。</li>
  <li>周二告别了魏哥，Amy 和 Molly，虽然早有准备，但还是会觉着生活断了根线。有缘再见啦！</li>
  <li>Go to St. Louis for StrangeLoop 2019. There are three talks that I really like
    <ul>
      <li><a href="https://www.youtube.com/watch?v=g1ib43q3uXQ&amp;feature=youtu.be">How to teach programming (and other things) - Felienne Hermans</a> It brings up an interesting idea that people prefer “exploration and self-taught” over “explanation and exercise” only in computer science, which worths us a second thoughts.</li>
      <li><a href="https://www.youtube.com/watch?v=ItASl4SdPO0">Towards an open and Reason(ML)able web - Parker Ziegler</a> Great intro to ReasonML. I’ve got more interest in OCaml now.</li>
      <li><a href="https://www.youtube.com/watch?v=JMZLBB_BFNg">Parser Parser Combinators for Program Transformation” by Rijnard van Tonder</a> Try this fancy tool for program transformation <a href="https://comby.live/">comby.live</a></li>
    </ul>
  </li>
  <li>去参加这个会议的私心在于能跟表格团聚。四年半不见，还是一如既往的舒服。最后一晚在 Bailey’s Range 喝的飞起，开心。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w38-strange-loop.jpg" alt="w38-strange-loop" /></p>

<h2 id="w37-0902---0908">W37 (09/02 - 09/08)</h2>

<ul>
  <li>Finish <a href="https://github.com/rust-lang/rustlings?ref=hackr.io">rustlings</a> and start reading <a href="https://rust-unofficial.github.io/too-many-lists">Too Many Lists</a>.</li>
  <li>Teach Nikki the second command, “d-o-w-n”.</li>
  <li>看了很多精彩比赛，男篮世界杯，F1 蒙扎，美网。印象最深的还是我国面对逆波兰了，疼啊疼。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w37-anjing.jpg" alt="w37-anjing" /></p>

<h2 id="w36-0826---0901">W36 (08/26 - 09/01)</h2>

<ul>
  <li>Get a basic idea on how <a href="http://mruby.org/">MRuby</a> works. Such a fun experience.</li>
  <li>Read a chapter of Super Thinking on decision making. I love the reasoning about disadvantages of pro-con list, that the cost-benefit analysis comes into play. One new thing I learnt is the <a href="https://www.wikiwand.com/en/Le_Chatelier%27s_principle">Le Chatelier’s principle</a>, aka The Equilibrium Law or homeostasis, which roughly means “system always kicks back (in some situation)”. Neat.</li>
  <li>超级开心喜福一次就通过了路试，终于结束我们互相看不顺眼的学车之旅了 🎉</li>
  <li>这个 Labour Day 长周末主要是看比赛和伺候狗子。Nikki is our brand new $2000 alarm, organic. 六点半的阳光，总能带给我希望，砥砺前行 😐</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w36-a-day-of-nikki.jpg" alt="w36-a-day-of-nikki" /></p>

<h2 id="w35-0819---0825">W35 (08/19 - 08/25)</h2>

<ul>
  <li>这周的工作，一天团建，三天 Hackday，以组织的名义认真划水。</li>
  <li>养狗第一周，我和喜福都是精力被榨干。六点半起，遛狗喂猫，不想上班。什么“从今天起，砍柴喂马，春暖花开”都是骗人的。</li>
  <li>爸妈的签证第三次申请，几近曲折，竟然有发了递签信又收回的时候，这周终于过了 ✅</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w35-nikki-at-peace.gif" alt="w35-nikki-at-peace" /></p>

<h2 id="w34-0812---0818">W34 (08/12 - 08/18)</h2>

<ul>
  <li>Work-wise, catch up after vacation and start looking into how <a href="https://github.com/artichoke/artichoke">Artichoke</a> works, which is a project on compiling mruby into Web Assembly. After reading the Go book and Rust book, finally, I start coding in C 😇</li>
  <li>Pick up our new home member, Nikki, who is a puppy girl of English type golden retriever.</li>
  <li>利用每天的失眠，看完了毛姆的<a href="https://book.douban.com/subject/26803714/">人性的枷锁</a>。主人公的故事大概在三十岁戛然而止，而我正好在这个年纪捡起这本书。看到了好多我心中的疑虑，关于人生的意义书中也给出了明确的答案。我没法认可或是怀疑，因为最终也都是要自己一点点寻找。期待下一次重读。</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w34-nikki.jpg" alt="w34-nikki" /></p>

<h2 id="w32-33-0729---0811-vacation">W32-33 (07/29 - 08/11) Vacation</h2>

<p>一年一度的旅行终于到来。今年的主题是趁着下一代来临前最后一聚。地点选在温哥华，维多利亚和班芙。史称加西之旅。</p>

<p>虽然旅途是 7.31（周三）出发，但是因为周一周二公司年会，我懒得飞来飞去选了远程参加，所以实际上，我之前的周末就开始放飞自我了。擦擦 PS 的灰，买了 Fifa19 和 Call of Duty: WWII；和朋友玩 VR，吃日料，玩牌，逛公园；跟喜福吃火锅看综艺；开始读 Good Math 和人性的枷锁。好久没这么轻松了。最直接的感受是，这几天早上可以神清气爽自然醒，让我怀疑是不是脑子放下了工作就少去了紧张和压力。周二收拾行李，把赵四送走，开始旅程。</p>

<p>（写不动游记，简单记些流水好了）</p>

<ul>
  <li>7.31 - 抵达温哥华。午餐 Marutama 拉面，入住 Airbnb，到附近的 Jericho Beach 闲逛。晚上 Gyukaku 烤肉，到 Lighthouse Park 徒步，赶到海边发现太阳已经下山。</li>
  <li>8.1 - 早餐 JJ Bean，到 Tsawwassen 轮渡去 Victoria。下午 Buchart Garden，Fishhook 午餐，然后 Downtown 闲逛。晚上回来已经夜里，在宽窄巷子串串烧烤小龙虾。</li>
  <li>8.2 - A&amp;W 早餐，在家 Mario Party。中午 Lynn Canyon 徒步，然后 English Bay, Stanley Park 骑行。晚上海鲜大餐。</li>
  <li>8.3 - 中午郝记羊肉，然后 Flyover Canada，Gastown。晚上 Kokoro 日本拉面，然后在 Granville Island 看了烟花。</li>
  <li>8.4 - 早起飞去卡尔加里，中午在 OMO 日本铁板烧，开去班芙。Airbnb 超级赞，下午去 Banff Gondola，上去第一眼有点惊到我了。幅员辽阔，心旷神怡。晚上在 The Park 西餐。</li>
  <li>8.5 - Lake Louise 划船，应该是本次行程我个人眼里的高光了，像是划进了画一样。之后是梦莲湖。晚上在家 BBQ，德州。</li>
  <li>8.6 - 中午在 Tavern Pizza，然后 Fairmont 酒店下午茶，之后是 Emerald Lake。晚上回来去 High Roller 打了保龄，之后部队火锅，继续德州。</li>
  <li>8.7 - 早餐 Wild Flouver，之后开到 Peyto Lake 徒步，欣赏景色。一路美景开到 Columbia Icefield，体验 Anthabasca 冰川。晚上麦当劳，收拾行李，打牌。</li>
  <li>8.8 - 告别班芙，开回卡尔加里。逛了 Costco，在 Popeye 吃午餐。早早到机场，在候机口德州。五点飞回温哥华，晚上正宗小郡肝串串香。</li>
  <li>8.9 - 中午 Marutama 拉面，然后到渔人码头，离港观鲸。一路颠簸，好在看到了很多 Orca 和傻呵呵的海狮。回程路上听到了司机 Trevor 的传奇故事，买了他的 Natural Hy。晚上海鲜加部队火锅，最后一次德州。</li>
  <li>8.10 - 早餐 JJ Bean，十一点半拥抱，散伙。我和喜福飞机延误，十一点才飞回多伦多。</li>
  <li>8.11 - 和大舅视频，看了英超第一轮曼联 4:0 切尔西。下午出门和 Amy 魏哥午餐，接赵四和三哥回家。一起看乐队夏天最后一集。晚上和老妈视频，给大家算本次行程开销。</li>
</ul>

<iframe width="560" height="315" src="https://www.youtube.com/embed/GZPkZxGW_Ts" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<h2 id="w31-0722---0728">W31 (07/22 - 07/28)</h2>

<ul>
  <li>Good working week, by putting my most focus on wrapping up work before my two weeks vacation 😍 We made a few great improvements over our DDD-ish Rails app.</li>
  <li>Watch <a href="https://movie.douban.com/subject/1292215/">Amelie</a> again at Princess Original, still fascinated by its unrestrained delight.</li>
  <li>Start of my vacation with Fifa 19 and Call of Duty WWII</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w31-mr-bernard.jpg" alt="w31-mr-bernard" /></p>

<p>^Hectic Monday</p>

<h2 id="w30-0715---0721">W30 (07/15 - 07/21)</h2>

<ul>
  <li>Finish reading <a href="https://book.douban.com/subject/30396640/">WebAssembly 标准入门</a>, a good intro for WASM spec.</li>
  <li>Go to Leslie Ting’s <a href="https://stratfordsummermusic.ca/artist.php?id=214">Speculation</a> at Stratford with friends. I enjoy the <a href="https://www.wikiwand.com/en/4%E2%80%B233%E2%80%B3">4′33</a> part, which brings me to a meditation state.</li>
  <li>和喜福看了两部王竞导演的电影，<a href="https://movie.douban.com/subject/10537853/">万箭穿心</a>和<a href="https://movie.douban.com/subject/2363843/">一年到头</a>，真是纠结拧巴，让人无力张口辩驳（所以才有了天注定吗？）</li>
  <li>Enjoy the nice weekend with strawberry picking and VR playing.</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w30-collage.jpg" alt="w30-collage" /></p>

<h2 id="w29-0708---0714">W29 (07/08 - 07/14)</h2>

<ul>
  <li>Re-read <em>Programming WebAssembly with Rust</em>. After getting to know Rust and having a general idea about WebAssembly, it makes much more sense to me now, especially that I follow the code exercise to write some raw wat this time <a href="https://github.com/ifyouseewendy/wasm-rust-playground">ifyouseewendy/wasm-rust-playground</a></li>
  <li>Have a talk with Syrus, which definitely makes me believe recording this weekly log is worthwhile. I’m glad that we build up a connection with the wasmer team.</li>
  <li>Play a co-op PS game <a href="https://www.ea.com/games/a-way-out">A Way Out</a> with Jasmine, which is pretty fun.</li>
  <li>Watch <a href="https://movie.douban.com/subject/1308755/">Shaun of the Dead</a> on the big screen at Princess Original 😍. This might be my 8th time watching it. Once every year.</li>
  <li>Watch the sensational final between Djokovic and Federer at Wimbledon. Such a weird game that Federer outplayed Djokovic at every metric on statistics, but lost due to few big points.</li>
  <li>Ride to the company using my 🚲!!! (second time since I bought it three months ago, good job)</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w29-collage.jpg" alt="w29-collage" /></p>

<h2 id="w28-0701---0707">W28 (07/01 - 07/07)</h2>

<ul>
  <li>Finish reading <a href="https://doc.rust-lang.org/">The Rust Programming Language</a>. I cannot say I fully understand ownership and lifetime, but I think I’ve grasped the idea of it. Looking forward to jumping into the wild world.</li>
  <li>I like this article <a href="https://blog.cleancoder.com/uncle-bob/2019/06/16/ObjectsAndDataStructures.html">Classes vs. Data Structures</a> by Uncle Bob articulating the subtle difference between these two. I figured this idea out when learning Haskell out last year, which gives me another orthogonal thinking against OO in terms of data and operation. In short, “An Object is a set of functions that operate upon implied data elements. A Data Structure is a set of data elements operated upon by implied functions”.</li>
  <li>Remember the smile of Brad</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w28-brad.jpg" alt="w28-brad" /></p>

<h2 id="w27-0624---0630">W27 (06/24 - 06/30)</h2>

<ul>
  <li>Read an hour <a href="https://doc.rust-lang.org/">The Rust Programming Language</a> everyday through chapter 15. I’ll finish next week, but I need more practice.</li>
  <li>Keep implementing <a href="https://github.com/kanaka/mal">https://github.com/kanaka/mal</a>. I’m at Step 3 now.</li>
  <li>Finish watching <a href="https://movie.douban.com/subject/30465634/">Formula 1: Drive to Survive</a>. Such exciting documentary over the F1 2018 season. It shows me another angle to think about the game, especially for the racers struggling on the edge. The problem they are trying to solve is interesting, how to improve from top 15 to top 10. We also watched the Austrian Grand Prix. Such a crazy win for Max Verstappen.</li>
  <li>看了<a href="https://movie.douban.com/subject/27059130/">大佛普拉斯</a>，嵌套着画外人讲画内人的黑色幽默，好看的</li>
  <li>Trail at Shade’s Mills Conservation Area</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w27-collage.jpg" alt="w27-collage" /></p>

<h2 id="w26-0617---0623">W26 (06/17 - 06/23)</h2>

<ul>
  <li>Keep my read over <a href="https://doc.rust-lang.org/">The Rust Programming Language</a>, with practice at work.</li>
  <li>Start playing around <a href="https://github.com/kanaka/mal">https://github.com/kanaka/mal</a>, which is a practice for using different language to implement a simple Lisp. I’m working on the Ruby version now, then I’ll try the Rust one.</li>
  <li>Finish the fourth and fifth chapter of <em>Quiet</em></li>
  <li>Celebrate our first 💒 anniversary, taking a photo in the morning, having lunch at Watami, and going hiking with friends at Knutz Park.</li>
  <li>Set up our BBQ grill, and have a perfect night</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w26-anniversary.jpg" alt="w26-anniversary" /></p>

<h2 id="w25-0610---0616">W25 (06/10 - 06/16)</h2>

<ul>
  <li>Restart reading through <a href="https://doc.rust-lang.org/">The Rust Programming Language</a>. Some ideas start to make more sense to me after the recent Go learning, eg slice, rune and reference.</li>
  <li>Watch Raptors winning the title with Jasmine and David at Apollo. This might be the season I watch the most games. Such an intense journey. Besides that, finally, Sarri joined Juventus 😳 and AD joined Lakers 😊</li>
  <li>After two months searching, we finally found a favourite breeder and sent the deposit for having a female English type Golden Retriever at mid Aug. Excited.</li>
  <li>Submit the third round of application for my parents’ visitor VISA 🤞</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w25-raptors.jpg" alt="w25-raptors" /></p>

<h2 id="w24-0603---0609">W24 (06/03 - 06/09)</h2>

<ul>
  <li>Keep reading <a href="https://www.gopl.io/">The Go Programming Language</a> and finish first half of the book (Chapter 7 Interface)</li>
  <li><a href="https://nav.al/how-to-get-rich">Naval - How to Get Rich</a> This is another podcast I enjoy a lot, which is not mainly about finance, but different thoughts and angles to see the world.</li>
  <li>Finish the show <a href="https://movie.douban.com/subject/27098632/">Chernobyl</a>, a cold dark reality mixing with special politic circumstance. I can definitely not sense the similarity with my dear god country.</li>
  <li>Enjoy the French Open semi-final, at which Djokovic lost to Thiem by 5:7 at the fifth set. Sad.</li>
  <li>Have a great trip to <a href="https://www.google.ca/maps/place/African+Lion+Safari/@43.3409762,-80.1800999,17z/data=!3m1!4b1!4m5!3m4!1s0x882c7f322d46f773:0x7c093dc107321082!8m2!3d43.3409762!4d-80.1800999?hl=en">African Lion Safari</a> at the weekend. Simba is truly a big cat.</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w24-nick.jpg" alt="w24-nick" /></p>

<h2 id="w23-0527---0602">W23 (05/27 - 06/02)</h2>

<ul>
  <li>Work wise, I feel pretty good on spending one hour reading in the morning everyday. After reading through ¼ of <a href="https://blog.arkency.com/domain-driven-rails/">Domain Driven Rails</a>, (which is a pretty good book, taking Rails as example to talk about DDD), I make it a pause consciously as I need more experience (or mistakes) to digest better. To put it into practice, I start building our new service using <a href="http://hanamirb.org/">Hanami</a>, which I’ve got a pretty positive feeling for being our DDD choice. Other than that, finish reading the first two chapters of <a href="https://www.gopl.io/">GOPL</a>.</li>
  <li>I really enjoy this episode of Tim Ferris Show that I listened twice. <a href="https://tim.blog/2019/05/07/ramit-sethi/">Ramit Sethi — Automating Finances, Negotiating Prenups, Disagreeing with Tim, and More (#371)</a></li>
  <li>After two months learning and researching, I finally set up my FIRE account on May 29th, 2019 🎉</li>
  <li>Such a relief after visiting Nadine and Casey.</li>
  <li>The best weekend this year, for pushing trivial stuff forward proactively, reading books, watching sports (Liverpool 2:0 Tottenham Hotspur, Raptors 1:1 Warriors), having hotpot, watching shows, enjoying the great weather, and wasting time together with Jasmine. Everything is perfect.</li>
  <li><a href="https://media.giphy.com/media/f9H9ZXcZ46YR4EMnBN/giphy.gif">Just dance</a></li>
</ul>

<h2 id="w22-0520---0526">W22 (05/20 - 05/26)</h2>

<ul>
  <li>Finish reading <a href="https://www.infoq.com/minibooks/domain-driven-design-quickly">Domain-driven Design Quick</a> last week and concluded some <a href="http://blog.ifyouseewendy.com/blog/2019/05/27/notes-on-ddd/">notes</a> here. It makes a lot of sense to me on connecting the dots I’ve collected over time. The book is also a great one as an intro which helps me grash the main idea of DDD. The next step is to gain more insight in practice.</li>
  <li>GoT 潦草终结，没等到我的夜王反推大陆，难过。看完了<a href="https://movie.douban.com/subject/26339248/">一拳超人</a>，超级喜欢，见识了终极大招：Consecutive Normal Punch!</li>
  <li>Finally, what makes my week? <a href="https://media.giphy.com/media/JPrylygv1Vnr3bB0QH/giphy.gif">A stupid big smile</a> (<a href="https://media.giphy.com/media/XG0WTXvFuZdEnCyL45/giphy.gif">..bounce version</a>)</li>
</ul>

<h2 id="w21-0513---0519">W21 (05/13 - 05/19)</h2>

<ul>
  <li>Keep my reading on <em>Quiet</em></li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w21-nick.jpg" alt="w21-nick" /></p>

<h2 id="w20-0506---0512">W20 (05/06 - 05/12)</h2>

<ul>
  <li>Such a busy week, for being on call at work. I didn’t have much energy on pushing personal growth stuff.
However, it’s been a fantastic week for various sports games.</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w20-collage.jpeg" alt="w20-collage" /></p>

<h2 id="w19-0429---05-05">W19 (04/29 - 05-05)</h2>

<ul>
  <li>Research on a few candidates on portfolios and start building <a href="https://quip.com/TCQjAdmOkJMR">My portfolio</a></li>
  <li>Visit Stratford to enjoy spring and celebrate Jasmine’s birthday</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w19-jasmine-birthday.jpg" alt="w19-jasmine-birthday" /></p>

<h2 id="w18-0422---0428">W18 (04/22 - 04/28)</h2>

<ul>
  <li>Start reading <a href="https://www.amazon.ca/Quiet-Power-Introverts-World-Talking/dp/0307352153/ref=sr_1_1?keywords=quiet&amp;qid=1555941549&amp;s=gateway&amp;sr=8-1">Quiet: The Power of Introverts in a World That Can’t Stop Talking</a>
    <ul>
      <li>Being an introvert has been a bittersweet journey for me. Hope this book could help know myself better. (Recommended by Mitch)</li>
    </ul>
  </li>
  <li>Start taking an online course on economics
    <ul>
      <li>薛兆丰的经济学课。作为 financial learning 的后续，本来已经开始读 Value Investing，但是发现好多普遍又根本的问题更吸引我。</li>
    </ul>
  </li>
  <li>Watch <a href="https://movie.douban.com/subject/26728669/">风中有朵雨做的云</a>
    <ul>
      <li>我很同意这个故事有“知音”体，人物关系复杂又随意，所以导演打乱了时间序是为了掩盖还是故作玄虚？我不是在乎。我喜欢这里边的人物，没有人让我出戏。最迷的还是光影，没机会去影院，但是在家就已经让我沉醉了。</li>
    </ul>
  </li>
  <li>Get my 🚲</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/2019/w18-bike.jpg" alt="w18-bike" /></p>

<h2 id="w17-0415---0421">W17 (04/15 - 04/21)</h2>

<ul>
  <li>Finish the first draft of my <a href="https://quip.com/RbITAH4Spbvt/Planning-investing">financial planning and investment</a></li>
  <li>Have a trip to Detroit with Jasmine
    <ul>
      <li>MOCA, DIA, Pistons vs Bucks game, Belle Isle</li>
    </ul>
  </li>
</ul>

<h2 id="w16-0408---0412">W16 (04/08 - 04/12)</h2>

<ul>
  <li>Listen to <a href="https://changelog.com/podcast/341?utm_medium=email&amp;utm_campaign=Weekly%20-%20Issue%20250&amp;utm_content=Weekly%20-%20Issue%20250+CID_3afe8cb9c4b1c3d53cfff50448829a21&amp;utm_source=changelog%20email&amp;utm_term=Wasmer%20is%20taking%20WebAssembly%20beyond%20the%20browser">Wasmer is taking WebAssembly beyond the browser</a>
    <ul>
      <li>Surprisingly find and listen to this new released podcast, which happens to match exactly with what we are working on.</li>
    </ul>
  </li>
  <li>Finish reading <a href="https://www.goodreads.com/book/show/23485557-the-value-of-simple?from_search=true">The Value of Simple</a>
    <ul>
      <li>A great to book to start one’s personal finance adventure, especially for Canadians. It’s to be noted that the author also provides a list of tools and book guides, which is super helpful.</li>
    </ul>
  </li>
  <li>Start my first <a href="https://quip.com/8agjAbpkTxTx/Monthly-Expense#TZHACANmrl0">Monthly Expense</a> review</li>
  <li>Research on <a href="https://quip.com/SsMFA531heag/Pay-back-mortgage-or-invest-in-bond">Pay back mortgage or invest in bond?</a> and discuss with friends</li>
  <li>House work to welcome spring</li>
</ul>

<h2 id="w15-0401---0405">W15 (04/01 - 04/05)</h2>

<ul>
  <li>Lost the basketball game in semi-final
    <ul>
      <li>继去年在半决赛一分惜败后，这次输了两分 😥</li>
    </ul>
  </li>
  <li>Watch <a href="https://movie.douban.com/subject/1294438/">Persona</a>
    <ul>
      <li>看过之后非常困惑，整个过程就是慢慢跟不上导演的节奏。即便如此，很多画面深刻地印在了我的脑海，回来的路上一直不断地回放。在豆瓣上看到了这篇影评我很赞同，基本上解释了我所有的疑问。即使单纯作为一遍散文来读，也是很有收获，<a href="https://movie.douban.com/review/1275074/">Persona (假面)：沉默的假面</a></li>
    </ul>
  </li>
  <li>Finish reading <a href="https://www.goodreads.com/book/show/23885906-wealthing-like-rabbits">Wealthing Like Rabbits</a>
    <ul>
      <li>It’s a good start for my personal financial learning. The examples in the book are really persuasive, which I appreciate the most. However, I don’t really agree with the saving part. I understand the fact that we should figure out what we truly need or what the money could buy us indeed, but what I infer from the part is kinda what the author tries to avoid, which is to sacrifice your living quality for future. Especially, to ask for used baby clothes from a friend implicitly sounds manipulative to me.</li>
    </ul>
  </li>
  <li>Finish the second chapter of <a href="https://interpreterbook.com/"><em>Writing An Interpreter In Go</em></a> for parsing techniques</li>
  <li>Skim over the <a href="https://www.goodreads.com/book/show/42977609-programming-webassembly-with-rust"><em>Programming WebAssembly with Rust</em></a>.
    <ul>
      <li>It’s an ok book that I put my main focus on WebAssembly even though half of the book are examples for using Rust to write WA modules. It gives me some context knowledge of WA, like how it’s developed over time and how it gets used inside and outside of the browser.</li>
    </ul>
  </li>
</ul>

<h2 id="w14-0325---0329">W14 (03/25 - 03/29)</h2>

<ul>
  <li>First glance at WebAssembly with my note <a href="https://quip.com/zFqEAHsgPhfs/From-Compiler-to-WebAssembly">From Compiler to WebAssembly</a>
    <ul>
      <li>Lin Clark’s <a href="https://hacks.mozilla.org/2017/02/a-cartoon-intro-to-webassembly/">A cartoon intro to WebAssembly</a> is such a good read</li>
      <li>Excited to see this happens to be an extension of my Go learning with <a href="https://interpreterbook.com/">Writing an interpreter in Golang</a></li>
    </ul>
  </li>
  <li>Start building my  <a href="https://quip.com/RpYkAB7LjzV6">Financial Knowledge Base</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Essential Difference Between OOP and FP]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2018/07/01/an-essential-difference-between-oop-and-fp/"/>
    <updated>2018-07-01T23:03:54-04:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2018/07/01/an-essential-difference-between-oop-and-fp</id>
    <content type="html"><![CDATA[<p>A few months ago, I told my friend that I was learning Haskell recently. After giving him
a quick introduction, he asked me an intuitive but hard question that I was not able to give
the answer, “What is the difference between OOP and FP?”.</p>

<p>I thought hard, I asked around and I took it on my way learning Haskell, but apparently there
are no easy answers, considering they usually appear at the opposite position on the spectrum
of programming paradgim.</p>

<p>Anyway, today when I was reviewing my notes for recapping type system in Haskell, the question
got popped up again. But this time, I think I’ve got an answer:</p>

<p>Other than the obvious language characteristics, <strong>the essential difference between OOP and FP
is how they structure values and operations</strong>. OOP groups values and operations together in the
objects, while FP separates values and operations apart strictly.</p>

<p>Seriously, is that an answer? I konw, it’s not perfect, but definitely helpful to myself. I’ll make
a detailed explanation.</p>

<h2 id="what-is-a-program">What is a program?</h2>

<p>We use programming languages to write programs, which can be considered as a series of calculations
executed in many stacks of control flows. It’s not hard to figure out that, in essence, a program is
about <strong>operating values</strong>.</p>

<p>As the definition for <em>turing complete</em> says, language is about <em>data-manipulation</em>.</p>

<blockquote>
  <p>In computability theory, a system of data-manipulation rules (such as a computer’s instruction set,
a programming language, or a cellular automaton) is said to be Turing complete or computationally
universal if it can be used to simulate any Turing machine.</p>
</blockquote>

<h2 id="what-is-a-value">What is a value?</h2>

<p><strong><em>The first question is what are basic values?</em></strong></p>

<p>No matter what language you are using, there must be</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">1
</span><span class="line">'c'
</span><span class="line">True # somehow boolean value can also be considered as a integer</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong><em>But what if I want to represent more compliated values?</em></strong></p>

<p>We use data structures:</p>

<ul>
  <li>List, <code>[1,2,3]</code>, a set of independent values</li>
  <li>Tuple, <code>(1,2,3)</code>, several values compound over each other as one value</li>
  <li>Tree, values structured with a purpose to be manipulated easily</li>
  <li>Dictionary? It seems like a combination for value and algorithm</li>
</ul>

<p><strong><em>Apparently, that’s not enough for us to carve the real world. What’s the ultimate way to represent data no matter how complicated it is?</em></strong></p>

<p>It depends on what mechanism a language supports. Here jumps in the discussion for difference between
OOP and FP language, which I’ll take Ruby and Haskell as examples.</p>

<p>In Ruby, we use class to model the real world problem and use objects to hold values, which we also call
it state in OO.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="rb"><span class="line"><span class="k">class</span> <span class="nc">Person</span>
</span><span class="line">  <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:age</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">person</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Di&quot;</span><span class="p">,</span> <span class="mi">18</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As we can see, class defines what pattern of data (<code>name</code> and <code>age</code>) we want to hold.
After initializing, an object will wrap the plain data <code>"Di"</code> and <code>18</code> together as a
whole new value.</p>

<p>In Haskell, we use type to model the real world values and everytime we create a customized type,
there will also come with a data constructor, which holds the values together.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kr">data</span> <span class="kt">Person</span> <span class="ow">=</span> <span class="kt">Person</span> <span class="kt">String</span> <span class="kt">Integer</span>
</span><span class="line">
</span><span class="line"><span class="nf">person</span> <span class="ow">=</span> <span class="kt">Person</span> <span class="s">&quot;Di&quot;</span> <span class="mi">18</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As a summary, no matter how complicated the value is, we can always represent it by
applying this kind of mechanisms the language provides over and over again.</p>

<h2 id="how-to-operate-value">How to operate value?</h2>

<p>By rules, laws, or formulas. In another saying, methods or functions.</p>

<p>In Ruby, we define methods in class definition to empower the object to apply onto its states.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="rb"><span class="line"><span class="k">class</span> <span class="nc">Person</span>
</span><span class="line">  <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:age</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">gets_older</span><span class="p">;</span> <span class="n">age</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span> <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">person</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Bart&quot;</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>When we call <code>person.gets_older</code>, we’ll alter the <code>age</code> value by incrementing it by one. If we
have a peek into our memory, there will be data blobs like in below. Each object exists as
a bundle of values and operations.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"> <span class="o">+-----------------+</span>   <span class="o">+-----------------+</span>   <span class="o">+-----------------+</span>
</span><span class="line"> <span class="o">|</span><span class="n">_class_</span><span class="kt">:</span> <span class="kt">Person</span>  <span class="o">|</span>   <span class="o">|</span><span class="n">_class_</span><span class="kt">:</span> <span class="kt">Person</span>  <span class="o">|</span>   <span class="o">|</span><span class="n">_class_</span><span class="kt">:</span> <span class="kt">Person</span>  <span class="o">|</span>
</span><span class="line"> <span class="o">|</span>                 <span class="o">|</span>   <span class="o">|</span>                 <span class="o">|</span>   <span class="o">|</span>                 <span class="o">|</span>
</span><span class="line"> <span class="o">|</span><span class="n">name</span><span class="kt">:</span> <span class="s">&quot;Bart&quot;</span>     <span class="o">|</span>   <span class="o">|</span><span class="n">name</span><span class="kt">:</span> <span class="s">&quot;Lisa&quot;</span>     <span class="o">|</span>   <span class="o">|</span><span class="n">name</span><span class="kt">:</span> <span class="s">&quot;Maggie&quot;</span>   <span class="o">|</span>
</span><span class="line"> <span class="o">|</span><span class="n">age</span><span class="kt">:</span>  <span class="mi">10</span>         <span class="o">|</span>   <span class="o">|</span><span class="n">age</span><span class="kt">:</span>  <span class="mi">8</span>          <span class="o">|</span>   <span class="o">|</span><span class="n">age</span><span class="kt">:</span>  <span class="mi">1</span>          <span class="o">|</span>
</span><span class="line"> <span class="o">|</span>                 <span class="o">|</span>   <span class="o">|</span>                 <span class="o">|</span>   <span class="o">|</span>                 <span class="o">|</span>
</span><span class="line"> <span class="o">|#</span><span class="n">gets_older</span>      <span class="o">|</span>   <span class="o">|#</span><span class="n">gets_older</span>      <span class="o">|</span>   <span class="o">|#</span><span class="n">gets_older</span>      <span class="o">|</span>
</span><span class="line"> <span class="o">+-----------------+</span>   <span class="o">+-----------------+</span>   <span class="o">+-----------------+</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>However, in Haskell, we make use of functions to operate values, with limits put on their types.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kr">data</span> <span class="kt">Person</span> <span class="ow">=</span> <span class="kt">Person</span> <span class="kt">String</span> <span class="kt">Integer</span>
</span><span class="line"><span class="nf">person</span> <span class="ow">=</span> <span class="kt">Person</span> <span class="s">&quot;Bart&quot;</span> <span class="mi">10</span>
</span><span class="line">
</span><span class="line"><span class="nf">getsOlder</span> <span class="ow">::</span> <span class="kt">Person</span> <span class="ow">-&gt;</span> <span class="kt">Person</span>
</span><span class="line"><span class="nf">getsOlder</span> <span class="p">(</span><span class="kt">Person</span> <span class="n">name</span> <span class="n">age</span><span class="p">)</span> <span class="ow">=</span> <span class="kt">Person</span> <span class="n">name</span> <span class="p">(</span><span class="n">age</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>When we call <code>getsOlder person</code>, we’ll create a new copy of person data with <code>age</code> incremented
by one, conforming to immutability. As a comparison, if we look into our memory, we’ll see what’s
in below.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"> <span class="o">+-----------------+</span>   <span class="o">+-----------------+</span>   <span class="o">+-----------------+</span>
</span><span class="line"> <span class="o">|</span><span class="n">_type_</span><span class="kt">:</span> <span class="kt">Person</span>   <span class="o">|</span>   <span class="o">|</span><span class="n">_type_</span><span class="kt">:</span> <span class="kt">Person</span>   <span class="o">|</span>   <span class="o">|</span><span class="n">_type_</span><span class="kt">:</span> <span class="kt">Person</span>   <span class="o">|</span>
</span><span class="line"> <span class="o">|</span>                 <span class="o">|</span>   <span class="o">|</span>                 <span class="o">|</span>   <span class="o">|</span>                 <span class="o">|</span>
</span><span class="line"> <span class="o">|</span><span class="n">name</span><span class="kt">:</span> <span class="s">&quot;Bart&quot;</span>     <span class="o">|</span>   <span class="o">|</span><span class="n">name</span><span class="kt">:</span> <span class="s">&quot;Lisa&quot;</span>     <span class="o">|</span>   <span class="o">|</span><span class="n">name</span><span class="kt">:</span> <span class="s">&quot;Maggie&quot;</span>   <span class="o">|</span>
</span><span class="line"> <span class="o">|</span><span class="n">age</span><span class="kt">:</span>  <span class="mi">10</span>         <span class="o">|</span>   <span class="o">|</span><span class="n">age</span><span class="kt">:</span> <span class="mi">8</span>           <span class="o">|</span>   <span class="o">|</span><span class="n">age</span><span class="kt">:</span> <span class="mi">1</span>           <span class="o">|</span>
</span><span class="line"> <span class="o">+-----------------+</span>   <span class="o">+-----------------+</span>   <span class="o">+-----------------+</span>
</span><span class="line">
</span><span class="line"><span class="o">+---------------------------------------------------------------+</span>
</span><span class="line">
</span><span class="line"> <span class="o">+---------------------+</span>
</span><span class="line"> <span class="o">|</span><span class="n">_type_</span><span class="kt">:</span> <span class="kt">Function</span>     <span class="o">|</span>
</span><span class="line"> <span class="o">|</span>                     <span class="o">|</span>
</span><span class="line"> <span class="o">|</span><span class="n">name</span><span class="kt">:</span> <span class="n">getsOlder</span>      <span class="o">|</span>
</span><span class="line"> <span class="o">|</span><span class="n">sig</span><span class="kt">:</span> <span class="kt">Person</span> <span class="ow">-&gt;</span> <span class="kt">Person</span><span class="o">|</span>
</span><span class="line"> <span class="o">+---------------------+</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="wrap-up">Wrap up</h2>

<p>As a conclusion, I think OOP and FP take a different approach to operating values. OOP packs up
values and permitted operations together via objects, wheras FP separates values and operations
apart strictly.</p>

<p><em>PS. How does polymorphism fit in the discussion?</em></p>

<p>We can keep following the imaginary memory snapshot above. In OOP, it’ll work as long as
objects repond to the same method, whereas in Haskell, we can loose the function to allow
more general types passed in.</p>

<p>In Ruby, it’s about duck typing.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="rb"><span class="line"><span class="k">class</span> <span class="nc">Person</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">gets_older</span><span class="p">;</span> <span class="n">age</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span> <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Duck</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">gets_older</span><span class="p">;</span> <span class="n">age</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span> <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">as_time_goes_by</span><span class="p">(</span><span class="n">a_living</span><span class="p">)</span>
</span><span class="line">  <span class="n">a_living</span><span class="o">.</span><span class="n">gets_older</span> <span class="c1"># no matter it&#39;s a person or a duck</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In Haskell, we use type to represent a set of values and typeclass to enforce rules on what kind
of operations can be applied onto the type (the set of values).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kr">data</span> <span class="kt">Person</span> <span class="ow">=</span> <span class="kt">Person</span> <span class="kt">String</span> <span class="kt">Integer</span> <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Show</span><span class="p">)</span>
</span><span class="line"><span class="kr">data</span> <span class="kt">Duck</span> <span class="ow">=</span> <span class="kt">Duck</span> <span class="kt">Integer</span> <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Show</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kr">class</span> <span class="kt">Living</span> <span class="n">a</span> <span class="kr">where</span>
</span><span class="line">  <span class="n">getsOlder</span> <span class="ow">::</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">a</span>
</span><span class="line">
</span><span class="line"><span class="kr">instance</span> <span class="kt">Living</span> <span class="kt">Person</span> <span class="kr">where</span>
</span><span class="line">  <span class="n">getsOlder</span> <span class="p">(</span><span class="kt">Person</span> <span class="n">name</span> <span class="n">age</span><span class="p">)</span> <span class="ow">=</span> <span class="kt">Person</span> <span class="n">name</span> <span class="p">(</span><span class="n">age</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="kr">instance</span> <span class="kt">Living</span> <span class="kt">Duck</span> <span class="kr">where</span>
</span><span class="line">  <span class="n">getsOlder</span> <span class="p">(</span><span class="kt">Duck</span> <span class="n">age</span><span class="p">)</span> <span class="ow">=</span> <span class="kt">Duck</span> <span class="p">(</span><span class="n">age</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nf">asTimeGoesBy</span> <span class="ow">::</span> <span class="kt">Living</span> <span class="n">a</span> <span class="ow">=&gt;</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">a</span>
</span><span class="line"><span class="nf">asTimeGoesBy</span> <span class="n">living</span> <span class="ow">=</span> <span class="n">getsOlder</span> <span class="n">living</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Peep at Types in Haskell]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2018/04/21/a-peep-at-types-in-haskell/"/>
    <updated>2018-04-21T10:15:19-04:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2018/04/21/a-peep-at-types-in-haskell</id>
    <content type="html"><![CDATA[<p>Functional programming is a shining and trending topic on the other side of the spectrum of programming, which has been
proven to be a better choice in some specific area of problem solving. I could still remember the mind blowing of various
ideas and thoughts in FP when I first learnt Elm two years ago. It just shows me yet another possibility of thinking
after being immersed in the world I took for granted, all kinds of the imperative languages, C, Java, Ruby, Javascript.
It’s a whole new world.</p>

<p>Recently, I picked up the FP learning by taking part in a book reading club in the company I work, for
<a href="http://haskellbook.com/">“Haskell Programming from first principles”</a>. My girlfriend was teasing me that I’ve never
showed up in a Haskell class at the university, why the heck you talk about it all the time now. I should admit that I might
still feel bored if I could jump back in time. It’s just I don’t have the mind power or experience to think about the
problem in a big picture at that time. Anyway, I’m glad it’s never too late. It’s been two months for the fun journey.
I want to share some thoughts on it.</p>

<p>I just finished reading about algebraic data types in Haskell. Basically, it’s done talking about type systems in the
book. By getting to know types in Haskell, I questioned about why type exists all the time. I cannot help myself
thinking about how would I solve the same problem in OO world, like what is the difference about how data is
structured between OO and FP. Gradually, keeping punching my head, I feel like I start to see something through. I start
to realize that, <strong>programming is all about data and operations</strong>. Different paradigms, OO and FP, are two different
approaches. Under the big picture, languages choose to implement different characteristics, like
inheritance, encapsulation, polymorphism, prototype, immutability, static and dynamic types, etc, to reach a same goal,
to represent and manipulate data in an effective way.</p>

<p>Since it’s all about data, what is data? I consider it as a general name for all possible values, like primitive ones, <code>1, 'a',
True</code>, which are usually bulit into the language, like a list <code>[]</code> and a map <code>{}</code>, working as a group of values following some basic
simple rules. To better fit the language into modeling various realistic problems, OO introduces class, which packs up the states
(data) and methods (operation) together (In some sense, class is a set of data and rules applied onto the data). In the meantime, FP
provides a different path, with type as a representation of a set of data and function (operation) as a way to transform data. For
example, in OO <code>obj</code> has a state <code>value</code>, and <code>obj.foo</code> might migrate the state. In FP, we just do <code>foo(value)</code>
directly. (The limitation or visibility of the operation comes from encapsulation in OO, but type matching in FP)</p>

<p>So what is type? Type, in short, is a set of values (data). For example, <code>Int8</code> is a built-in type in Haskell as a set of 256
numbers, starting from -128 to 127, <code>Char</code> is a set of all possible charaters, <code>String</code> is a list of <code>Char</code>. How
to represent a binary tree:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">  2
</span><span class="line">  /   \
</span><span class="line">1      3</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>What exactly do we need to know about the tree? Three nodes with three values, and the connections among them.</p>

<p>In OO, we are going to create a structure regarding the node, with a state recording the value and two links for the
connection.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Node</span>
</span><span class="line">  <span class="kp">attr_accessor</span> <span class="ss">:left</span><span class="p">,</span> <span class="n">right</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@value</span> <span class="o">=</span> <span class="n">value</span>
</span><span class="line">    <span class="n">left</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class="line">    <span class="n">right</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">root</span>        <span class="o">=</span> <span class="no">Node</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line"><span class="n">root</span><span class="o">.</span><span class="n">left</span>   <span class="o">=</span> <span class="no">Node</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line"><span class="n">root</span><span class="o">.</span><span class="n">right</span>  <span class="o">=</span> <span class="no">Node</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To make it a tree, instead of a plie of nodes, we can create a structure like</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">BinaryTree</span>
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:root_node</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">root_value</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@root_node</span> <span class="o">=</span> <span class="no">Node</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">root_value</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">insert</span><span class="p">(</span><span class="n">node_value</span><span class="p">)</span>
</span><span class="line">    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>So a final representation for the binary tree in Ruby, it’ll be</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">bt</span> <span class="o">=</span> <span class="no">BinaryTree</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>What about in Haskell? At first, we create a type to represent the tree like below, which basically means a binary tree
is either a leaf, or a node with a value and two nodes, which are both binary trees.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kr">data</span> <span class="kt">BinaryTree</span> <span class="n">a</span> <span class="ow">=</span> <span class="kt">Leaf</span> <span class="o">|</span> <span class="kt">Node</span> <span class="p">(</span><span class="kt">BinaryTree</span> <span class="n">a</span><span class="p">)</span> <span class="n">a</span> <span class="p">(</span><span class="kt">BinaryTree</span> <span class="n">a</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To represent the tree,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">bt</span> <span class="ow">=</span> <span class="kt">Node</span> <span class="p">(</span><span class="kt">Node</span> <span class="kt">Leaf</span> <span class="mi">2</span> <span class="kt">Leaf</span><span class="p">)</span> <span class="mi">1</span> <span class="p">(</span><span class="kt">Node</span> <span class="kt">Leaf</span> <span class="mi">3</span> <span class="kt">Leaf</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It’s done! To be honest, I was totally blown away by the second I understand how things work here. It’s neat, elegant
and way over my thinking.</p>

<p>Cool, so how it works? Between two cases in two languages. Here is my understanding: in the perspective of a
compiler (or interpreter),</p>

<ul>
  <li>In Ruby, it sees a reference to a chunk of memory, which contains the necessary info about getting to know that, there
is an object, which has a state and maybe a reference to its parent, which contains operations allowed to do.</li>
  <li>In Haskell, it sees a sequence of tokens, literally all the data about it. According to the types definition, it
could parse out the tokens in the right pattern, thus understand it.</li>
</ul>

<p><img src="https://raw.githubusercontent.com/ifyouseewendy/ifyouseewendy.github.io/source/image-repo/binary-tree-oo-and-haskell.png" alt="binary-tree-oo-and-haskell" /></p>

<p>Bascially, this is a note of thinking while I was learning it. I’m still digesting and trying to find out a path to fit the FP ideas into my system of knowledge.</p>

<p>At last, I want to share some materials which is truly helpful to me</p>

<ul>
  <li><a href="http://www.defmacro.org/2006/06/19/fp.html">Functional Programming For The Rest of Us - Slava Akhmechet</a> Such a pleasant article as a beginner read, the history, the features, everything you need to know</li>
  <li><a href="https://youtu.be/yVuEPwNuCHw">Types, and why you should care - Ron Minsky</a> An intro video about the pros and cons
about types</li>
  <li><a href="https://youtu.be/V1po0BT7kac">Type Systems Will Make You a Better JavaScript Developer - Jared Forsyth</a> A video talking about why Facebook Flow works effectively for JS. I use it at work, but sometimes I stumble upon it and end up complaining about its stupidity. Next time, I’ll watch the video again.</li>
  <li><a href="https://flow.org/en/docs/lang/">Type Systems - Facebook Flow</a> I find it as a good supplyment after getting understand
the types in Haskell, maybe because it is a standalone type system?</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mr. Curiosity]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2018/03/18/mr-curiosity/"/>
    <updated>2018-03-18T12:18:44-04:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2018/03/18/mr-curiosity</id>
    <content type="html"><![CDATA[<p>一直很喜欢自己的 tech lead。从不在意外在穿着，一年四季几乎同一条裤子，偶尔为了绑住裤脚，直接系个软绳在上边。大胡子，大肚子，大嗓门。爽朗的笑声，经常回荡在整个办公室上空。他有十足的表达欲，对几乎所有事情都充满见解，因而也经常话语锋利。面对不喜欢的人，不喜欢的事，话会变少，表情也会变不屑，但是始终坚决捍卫自己的观点。有趣的是，相处久了，你会发现他内心分明住着个柔软的孩子。他喜欢吃糖，捧着个小碗告诉同事公司新进的酸奶葡萄干不如以前；他不吝惜赞美，直接告诉你和同事，干的漂亮；他花钱买各蝴蝶形状的键盘，乐呵呵地向每个人展示。今天本来是想翻他的 Github，结果又到了他古老的博客，翻到了他在 Flickr 的相册。我知道，好多都是用他那个老的全键盘蓝莓手机拍的照片，毫无修饰地记录着生活美好的瞬间。每次想到他，我总会觉着开心与羡慕。我不知道怎么构建一个世界，能抛开世人的眼光，自得其乐。</p>

<p>我总觉着自己的心里不够强大，怯于别人的目光，即使快到三十岁，也依旧是这个世界的一个聆听者。我害怕说错话，与人沟通越来越小心翼翼，因此交流也就成了费神的事。我害怕做错事，回想有时竟然怕有不好的结果，就不做一些事，也因此就会有错过。这些年不断地努力，一方面是自己渴望进步，一方面心中会有恐惧，如何 live up to your name。我讨厌这部分的自己，它只会给我压力，而不是快乐。要看有用的书，做有用的事，考虑时间考虑收益。慢慢的，快乐只来自成就，而不是事情本身。而我一点点贪婪地前进，活在虚荣的快乐里。认识到这个问题已经好久，自己也在慢慢改变。希望自己多追寻兴趣，享受简单的快乐。</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/ryZeSZEvcck" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen=""></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Review] You Don't Know JS: this &amp; Object Prototypes]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2017/07/03/review-you-dont-know-js-this-and-object-prototypes/"/>
    <updated>2017-07-03T14:01:05-04:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2017/07/03/review-you-dont-know-js-this-and-object-prototypes</id>
    <content type="html"><![CDATA[<table class="custom">
  <tbody>
    <tr>
      <td><strong>Book</strong></td>
      <td>You Don’t Know JS: this &amp; Object Prototypes</td>
    </tr>
    <tr>
      <td><strong>Author</strong></td>
      <td><a href="https://github.com/getify">Kyle Simpson</a></td>
    </tr>
    <tr>
      <td><strong>Link</strong></td>
      <td><a href="https://github.com/getify/You-Dont-Know-JS/blob/master/this%20&amp;%20object%20prototypes/README.md#you-dont-know-js-this--object-prototypes">https://github.com/getify/You-Dont-Know-JS/blob/master/this &amp; object prototypes/README.md</a></td>
    </tr>
  </tbody>
</table>

<ul id="markdown-toc">
  <li><a href="#objects-in-js">Objects in JS</a>    <ul>
      <li><a href="#type">1. Type</a></li>
      <li><a href="#contents">2. Contents</a>        <ul>
          <li><a href="#properties">Properties</a></li>
          <li><a href="#computed-property-names">Computed Property Names</a></li>
          <li><a href="#arrays">Arrays</a></li>
          <li><a href="#duplicating-objects">Duplicating Objects</a></li>
          <li><a href="#property-descriptors">Property Descriptors</a></li>
          <li><a href="#get--">[ [ Get ] ]</a></li>
          <li><a href="#existence">Existence</a></li>
        </ul>
      </li>
      <li><a href="#iteration">3. Iteration</a></li>
    </ul>
  </li>
  <li><a href="#prototypes">Prototypes</a>    <ul>
      <li><a href="#my-understanding">1. My understanding</a></li>
      <li><a href="#what-is-a-prototype">2. What is a prototype?</a></li>
      <li><a href="#how-to-get-an-objects-prototype">3. How to get an object’s prototype?</a></li>
      <li><a href="#what-is-the-prototype-">4. What is the <code>prototype</code> ?</a></li>
      <li><a href="#whats-the-difference-between-proto-and-prototype">5. What’s the difference between <code>__proto__</code> and <code>prototype</code>?</a></li>
      <li><a href="#whats-process-of-method-lookup-via-prototype-chain">6. What’s process of method lookup via prototype chain?</a></li>
    </ul>
  </li>
  <li><a href="#class">“Class”</a>    <ul>
      <li><a href="#misconception">1. Misconception</a></li>
      <li><a href="#constructors">2. “Constructors”</a>        <ul>
          <li><a href="#does-constructor-mean-was-constructed-by-no">Does “constructor” mean “was constructed by”? NO!</a></li>
          <li><a href="#what-is-exactly-a-constructor">What is exactly a “constructor”?</a></li>
          <li><a href="#do-we-have-to-capitalize-the-constructor-function-no">Do we have to capitalize the constructor function? NO!</a></li>
          <li><a href="#is-constructorreliable-to-be-used-as-a-reference-no">Is <code>.constructor</code>reliable to be used as a reference? NO!</a></li>
        </ul>
      </li>
      <li><a href="#what-happened-when-we-callnew-">3. What happened when we call<code>new</code> ?</a></li>
      <li><a href="#introspection">4. Introspection</a>        <ul>
          <li><a href="#instanceof"><code>instanceof</code></a></li>
          <li><a href="#objectprototypeisprototypeof"><code>Object.prototype.isPrototypeOf()</code></a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#behavior-delegation">Behavior Delegation</a>    <ul>
      <li><a href="#my-understanding-1">1. My understanding</a></li>
      <li><a href="#background">2. Background</a>        <ul>
          <li><a href="#compared-to-traditional-inheritance">Compared to traditional inheritance</a></li>
          <li><a href="#prototypal-inheritance--differential-inheritance">Prototypal Inheritance &amp;&amp; Differential Inheritance</a></li>
        </ul>
      </li>
      <li><a href="#create-delegations-by-objectcreate">3. Create delegations by <code>Object.create</code></a>        <ul>
          <li><a href="#how-to-make-plain-object-delegations">How to make plain object delegations?</a></li>
          <li><a href="#how-to-make-delegations-to-perform-prototypal-inheritance">How to make delegations to perform “prototypal inheritance”?</a></li>
          <li><a href="#how-to-envision-your-own-objectcreate">How to envision your own <code>Object.create</code>?</a></li>
        </ul>
      </li>
      <li><a href="#towards-delegation-oriented-design">4. Towards Delegation-Oriented Design</a>        <ul>
          <li><a href="#avoid-shadowing-naming-things-the-same-if-at-all-possible">Avoid shadowing (naming things the same) if at all possible</a></li>
          <li><a href="#save-state-on-delegators">Save state on delegators</a></li>
          <li><a href="#comparison">Comparison</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h1 id="objects-in-js">Objects in JS</h1>

<p>Source: <a href="https://github.com/getify/You-Dont-Know-JS/blob/master/this %26 object prototypes/ch3.md">You Don’t Know JS: this &amp; Object Prototypes - Chapter 3: Objects</a></p>

<h2 id="type">1. Type</h2>

<p>Primary types (language types)</p>

<ul>
  <li>number</li>
  <li>boolean</li>
  <li>string</li>
  <li>null</li>
  <li>undefined</li>
  <li>object</li>
</ul>

<p>Many people mistakenly claim “everything in JavaScript is an object”, but this is incorrect. Objects are one of the 6 (or 7, depending on your perspective) primitive types. Objects have sub-types, including<code>function</code>, and also can be behavior-specialized, like<code>[object Array]</code>as the internal label representing the array object sub-type.</p>

<p><img src="https://raw.githubusercontent.com/ifyouseewendy/ifyouseewendy.github.io/source/image-repo/you-dont-know-js/types.png" alt="types" /></p>

<p>What are object sub-types?</p>

<p>In JS, object sub-types are actually just built-in functions. Each of these built-in functions can be used as a constructor (that is, a function call with the new operator), with the result being a newly constructed object of the sub-type.</p>

<p>Why do we need object sub-types?</p>

<p>The primitive value <code>"I am a string"</code>is not an object, it’s a primitive literal and immutable value. To perform operations on it, such as checking its length, accessing its individual character contents, etc, a<code>String</code>object is required.the language automatically coerces a<code>"string"</code>primitive to a<code>String</code>object when necessary, which means you almost never need to explicitly create the Object form.</p>

<p>What is exactly the function?</p>

<p>Functions are callable objects which are special in that they have an optional name property and a code property (which is the body of the function that actually does stuff).</p>

<p>How to remember?</p>

<p>Excluding from the self-defined object, we can always use <code>typeof</code> first to check out the primary types and then use <code>instanceof</code> to find out its object sub-types.</p>

<h2 id="contents">2. Contents</h2>

<p>Objects are collections of key/value pairs. The values can be accessed as properties, via<code>.propName</code>or<code>["propName"]</code>syntax. Whenever a property is accessed, the engine actually invokes the internal default<code>[[Get]]</code>operation (and<code>[[Put]]</code>for setting values), which not only looks for the property directly on the object, but which will traverse the<code>[[Prototype]]</code>chain (see Chapter 5) if not found.</p>

<p>Properties have certain characteristics that can be controlled through property descriptors, such as<code>writable</code>and<code>configurable</code>. In addition, objects can have their mutability (and that of their properties) controlled to various levels of immutability using<code>Object.preventExtensions(..)</code>,<code>Object.seal(..)</code>, and<code>Object.freeze(..)</code>.</p>

<p>Properties don’t have to contain values – they can be “accessor properties” as well, with getters/setters. They can also be either <em>enumerable</em> or not, which controls if they show up in<code>for..in</code>loop iterations, for instance.</p>

<h3 id="properties">Properties</h3>

<p>In objects, property names are **always **strings. If you use any other value besides a <code>string</code>(primitive) as the property, it will first be converted to a string.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">myObject</span> <span class="o">=</span> <span class="p">{</span> <span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="nx">myObject</span><span class="p">[</span><span class="kc">true</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;foo&quot;</span><span class="p">;</span>
</span><span class="line"><span class="nx">myObject</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;bar&quot;</span><span class="p">;</span>
</span><span class="line"><span class="nx">myObject</span><span class="p">[</span><span class="nx">myObject</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;baz&quot;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="nx">myObject</span><span class="p">[</span><span class="s2">&quot;true&quot;</span><span class="p">];</span>                <span class="c1">// &quot;foo&quot;</span>
</span><span class="line"><span class="nx">myObject</span><span class="p">[</span><span class="s2">&quot;3&quot;</span><span class="p">];</span>                    <span class="c1">// &quot;bar&quot;</span>
</span><span class="line"><span class="nx">myObject</span><span class="p">[</span><span class="s2">&quot;[object Object]&quot;</span><span class="p">];</span>                  <span class="c1">// &quot;baz&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="computed-property-names">Computed Property Names</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">prefix</span> <span class="o">=</span> <span class="s2">&quot;foo&quot;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">myObject</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="p">[</span><span class="nx">prefix</span> <span class="o">+</span> <span class="s2">&quot;bar&quot;</span><span class="p">]</span><span class="o">:</span> <span class="s2">&quot;hello&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="p">[</span><span class="nx">prefix</span> <span class="o">+</span> <span class="s2">&quot;baz&quot;</span><span class="p">]</span><span class="o">:</span> <span class="s2">&quot;world&quot;</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="nx">myObject</span><span class="p">[</span><span class="s2">&quot;foobar&quot;</span><span class="p">];</span> <span class="c1">// hello</span>
</span><span class="line"><span class="nx">myObject</span><span class="p">[</span><span class="s2">&quot;foobaz&quot;</span><span class="p">];</span> <span class="c1">// world</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="arrays">Arrays</h3>

<p>Arrays are objects. <strong>Be careful</strong>: If you try to add a property to an array, but the property name looks like a number, it will end up instead as a numeric index (thus modifying the array contents):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">myArray</span> <span class="o">=</span> <span class="p">[</span> <span class="s2">&quot;foo&quot;</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="s2">&quot;bar&quot;</span> <span class="p">];</span>
</span><span class="line">
</span><span class="line"><span class="nx">myArray</span><span class="p">[</span><span class="s2">&quot;3&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;baz&quot;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="nx">myArray</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>    <span class="c1">// 4</span>
</span><span class="line">
</span><span class="line"><span class="nx">myArray</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>        <span class="c1">// &quot;baz&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="duplicating-objects">Duplicating Objects</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">function</span> <span class="nx">anotherFunction</span><span class="p">()</span> <span class="p">{</span> <span class="cm">/*..*/</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">anotherObject</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">c</span><span class="o">:</span> <span class="kc">true</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">anotherArray</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">myObject</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">a</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class="line">    <span class="nx">b</span><span class="o">:</span> <span class="nx">anotherObject</span><span class="p">,</span>    <span class="c1">// reference, not a copy!</span>
</span><span class="line">    <span class="nx">c</span><span class="o">:</span> <span class="nx">anotherArray</span><span class="p">,</span>    <span class="c1">// another reference!</span>
</span><span class="line">    <span class="nx">d</span><span class="o">:</span> <span class="nx">anotherFunction</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="nx">anotherArray</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span> <span class="nx">anotherObject</span><span class="p">,</span> <span class="nx">myObject</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It’s hard to tell which of shallow and deep copy is right without the use case.</p>

<p>One subset solution is that objects which are JSON-safe (that is, can be serialized to a JSON string and then re-parsed to an object with the same structure and values) can easily be <em>duplicated</em> with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">newObj</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span> <span class="nx">someObj</span> <span class="p">)</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>A shallow copy is fairly understandable and has far less issues, so ES6 has now defined <code>Object.assign(..)</code> for this task. <code>Object.assign(..)</code> takes a target object as its first parameter, and one or more source objects as its subsequent parameters. It iterates over all the <em>enumerable</em> (see below), <em>owned keys (immediately present)</em> on the source object(s) and copies them (via = assignment only) to target.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">newObj</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span> <span class="p">{},</span> <span class="nx">myObject</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nx">newObj</span><span class="p">.</span><span class="nx">a</span><span class="p">;</span>                        <span class="c1">// 2</span>
</span><span class="line"><span class="nx">newObj</span><span class="p">.</span><span class="nx">b</span> <span class="o">===</span> <span class="nx">anotherObject</span><span class="p">;</span>        <span class="c1">// true</span>
</span><span class="line"><span class="nx">newObj</span><span class="p">.</span><span class="nx">c</span> <span class="o">===</span> <span class="nx">anotherArray</span><span class="p">;</span>        <span class="c1">// true</span>
</span><span class="line"><span class="nx">newObj</span><span class="p">.</span><span class="nx">d</span> <span class="o">===</span> <span class="nx">anotherFunction</span><span class="p">;</span>    <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="property-descriptors">Property Descriptors</h3>

<p>Prior to ES5, the JavaScript language gave no direct way for your code to inspect or draw any distinction between the characteristics of properties, such as whether the property was read-only or not. But as of ES5, all properties are described in terms of a <strong>property descriptor</strong>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">myObject</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">a</span><span class="o">:</span> <span class="mi">2</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="p">(</span> <span class="nx">myObject</span><span class="p">,</span> <span class="s2">&quot;a&quot;</span> <span class="p">);</span>
</span><span class="line"><span class="c1">// {</span>
</span><span class="line"><span class="c1">//    value: 2,</span>
</span><span class="line"><span class="c1">//    writable: true,</span>
</span><span class="line"><span class="c1">//    enumerable: true,</span>
</span><span class="line"><span class="c1">//    configurable: true</span>
</span><span class="line"><span class="c1">// }</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We can use<code>Object.defineProperty(..)</code>to add a new property, or modify an existing one (if it’s<code>configurable</code>!), with the desired characteristics.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">myObject</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class="line">
</span><span class="line"><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span> <span class="nx">myObject</span><span class="p">,</span> <span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">value</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class="line">    <span class="nx">writable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class="line">    <span class="nx">configurable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class="line">    <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">true</span>
</span><span class="line"><span class="p">}</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nx">myObject</span><span class="p">.</span><span class="nx">a</span><span class="p">;</span> <span class="c1">// 2</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I consider this as something about plumbing facts, which features some higher level operations. Like</p>

<p><strong>Seal</strong>: <code>Object.seal(..)</code> creates a “sealed” object, which means it takes an existing object and essentially calls <code>Object.preventExtensions(..)</code> on it, but also marks all its existing properties as <code>configurable:false</code>.</p>

<p><strong>Freeze</strong>: <code>Object.freeze(..)</code> creates a frozen object, which means it takes an existing object and essentially calls <code>Object.seal(..)</code> on it, but it also marks all “data accessor” properties as <code>writable:false</code>, so that their values cannot be changed.</p>

<p>For details, check <a href="https://github.com/getify/You-Dont-Know-JS/blob/master/this %26 object prototypes/ch3.md#property-descriptors">this section</a></p>

<h3 id="get--">[ [ Get ] ]</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">myObject</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">a</span><span class="o">:</span> <span class="mi">2</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="nx">myObject</span><span class="p">.</span><span class="nx">a</span><span class="p">;</span> <span class="c1">// 2</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The<code>myObject.a</code>is a property access, but it doesn’t <em>just</em> look in <code>myObject</code>for a property of the name <code>a</code>, as it might seem. According to the spec, the code above actually performs a<code>[[Get]]</code>operation (kinda like a function call:<code>[[Get]]()</code>) on the<code>myObject</code>. The default built-in<code>[[Get]]</code>operation for an object <em>first</em> inspects the object for a property of the requested name, and if it finds it, it will return the value accordingly.</p>

<p>One important result of this<code>[[Get]]</code>operation is that if it cannot through any means come up with a value for the requested property, it instead returns the value<code>undefined</code>(instead of a<code>ReferenceError</code>).</p>

<p>Define an **accessor descriptor **(getter and putter)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">myObject</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// define a getter for `a`</span>
</span><span class="line">    <span class="nx">get</span> <span class="nx">a</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_a_</span><span class="p">;</span>
</span><span class="line">    <span class="p">},</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// define a setter for `a`</span>
</span><span class="line">    <span class="nx">set</span> <span class="nx">a</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">this</span><span class="p">.</span><span class="nx">_a_</span> <span class="o">=</span> <span class="nx">val</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="nx">myObject</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="nx">myObject</span><span class="p">.</span><span class="nx">a</span><span class="p">;</span> <span class="c1">// 4</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="existence">Existence</h3>

<p>We showed earlier that a property access like<code>myObject.a</code>may result in an<code>undefined</code>value if either the explicit<code>undefined</code>is stored there or the<code>a</code>property doesn’t exist at all. So, if the value is the same in both cases, how else do we distinguish them?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">myObject</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">a</span><span class="o">:</span> <span class="mi">2</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="s2">&quot;a&quot;</span> <span class="k">in</span> <span class="nx">myObject</span><span class="p">);</span>                <span class="c1">// true</span>
</span><span class="line"><span class="p">(</span><span class="s2">&quot;b&quot;</span> <span class="k">in</span> <span class="nx">myObject</span><span class="p">);</span>                <span class="c1">// false</span>
</span><span class="line">
</span><span class="line"><span class="nx">myObject</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span> <span class="s2">&quot;a&quot;</span> <span class="p">);</span>    <span class="c1">// true</span>
</span><span class="line"><span class="nx">myObject</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span> <span class="s2">&quot;b&quot;</span> <span class="p">);</span>    <span class="c1">// false</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The<code>in</code>operator will check to see if the property is <em>in</em> the object, or if it exists at any higher level of the <em><code>[[Prototype]]</code></em> chain object traversal (see Chapter 5). By contrast, <em><code>hasOwnProperty(..)</code></em> checks to see if <em>only</em> <code>myObject</code>has the property or not, and will <em>not</em> consult the<code>[[Prototype]]</code>chain.</p>

<p><code>hasOwnProperty(..)</code>is accessible for all normal objects via delegation to<code>Object.prototype</code>(see Chapter 5). But it’s possible to create an object that does not link to<code>Object.prototype</code>(via<code>Object.create(null)</code>– see Chapter 5). In this case, a method call like<code>myObject.hasOwnProperty(..)</code>would fail.</p>

<p>In that scenario, a more robust way of performing such a check is<code>Object.prototype.hasOwnProperty.call(myObject,"a")</code>, which borrows the base<code>hasOwnProperty(..)</code>method and uses_explicit<em><code>this</code>_binding</em>(see Chapter 2) to apply it against our<code>myObject</code>.</p>

<h2 id="iteration">3. Iteration</h2>

<p>The<code>for..in</code>loop iterates over the list of enumerable properties on an object (including its<code>[[Prototype]]</code>chain). But what if you instead want to iterate over the values?</p>

<p><code>for..in</code>loops applied to arrays can give somewhat unexpected results, in that the enumeration of an array will include not only all the numeric indices, but also any enumerable properties. It’s a good idea to use<code>for..in</code>loops <em>only</em> on objects, and traditional<code>for</code>loops with numeric index iteration for the values stored in arrays.</p>

<p>ES5 also added several iteration helpers for arrays, including <code>forEach(..)</code>, <code>every(..)</code>, and <code>some(..)</code>.</p>

<ul>
  <li><code>forEach(..)</code>will iterate over all values in the array, and ignores any callback return values.</li>
  <li><code>every(..)</code>keeps going until the end <em>or</em> the callback returns a<code>false</code>(or “falsy”) value, whereas</li>
  <li><code>some(..)</code>keeps going until the end <em>or</em> the callback returns a <code>true</code>(or “truthy”) value.</li>
</ul>

<p>As contrasted with iterating over an array’s indices in a numerically ordered way (<code>for</code>loop or other iterators), the order of iteration over an object’s properties is **not guaranteed **and may vary between different JS engines. **Do not rely **on any observed ordering for anything that requires consistency among environments, as any observed agreement is unreliable.</p>

<p>You can also iterate over **the values **in data structures (arrays, objects, etc) using the ES6<code>for..of</code>syntax, which looks for either a built-in or custom<code>@@iterator</code>object consisting of a<code>next()</code>method to advance through the data values one at a time.</p>

<h1 id="prototypes">Prototypes</h1>

<p>Source: <a href="https://github.com/getify/You-Dont-Know-JS/blob/master/this %26 object prototypes/ch5.md">You Don’t Know JS: this &amp; Object Prototypes - Chapter 5: Prototypes</a></p>

<h2 id="my-understanding">1. My understanding</h2>

<p>After reading this part, I realize that <code>Arary</code>, <code>Function</code>, <code>Object</code>are all functions. I should admit that this refreshes my impression on JS. I know functions are first-class citizen in JS but it seems that it is all built on functions. Every object is created by functions:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="c1">// simple primitives are auto boxing: new Number(1)</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">number</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class="line">
</span><span class="line"><span class="c1">// object created by constructor</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">date</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="s2">&quot;2017-07-01&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// object literal</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{}</span> <span class="c1">// is equivalent to: Object.create(Object.prototype);</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">foo</span><span class="o">:</span> <span class="s2">&quot;hello&quot;</span> <span class="p">}</span> <span class="c1">// is equivalent to</span>
</span><span class="line">
</span><span class="line"><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span>
</span><span class="line"><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="nx">foo</span><span class="o">:</span> <span class="p">{</span>
</span><span class="line">            <span class="nx">writable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class="line">            <span class="nx">configurable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class="line">            <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;hello&#39;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="what-is-a-prototype">2. What is a prototype?</h2>

<p>Objects in JavaScript have an internal property, denoted in the specification as<code>[[Prototype]]</code>, which is simply a reference to another object. Almost all objects are given a non-<code>null</code>value for this property, at the time of their creation.</p>

<h2 id="how-to-get-an-objects-prototype">3. How to get an object’s prototype?</h2>

<p>via <code>__proto__</code>or <code>Object.getPrototypeOf</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;wendi&quot;</span> <span class="p">};</span>
</span><span class="line"><span class="nx">a</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// true</span>
</span><span class="line"><span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// true</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">Foo</span><span class="p">()</span> <span class="p">{};</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Foo</span><span class="p">();</span>
</span><span class="line"><span class="nx">b</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span>
</span><span class="line"><span class="nx">b</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>So where is <code>__proto__</code>defined? <code>Object.prototype.__proto__</code></p>

<p>We could roughly envision <code>__proto__</code> implemented like this</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="s2">&quot;__proto__&quot;</span><span class="p">,</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">get</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span> <span class="k">this</span> <span class="p">);</span>
</span><span class="line">    <span class="p">},</span>
</span><span class="line">    <span class="nx">set</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="c1">// setPrototypeOf(..) as of ES6</span>
</span><span class="line">        <span class="nb">Object</span><span class="p">.</span><span class="nx">setPrototypeOf</span><span class="p">(</span> <span class="k">this</span><span class="p">,</span> <span class="nx">o</span> <span class="p">);</span>
</span><span class="line">            <span class="k">return</span> <span class="nx">o</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>**Note: **The JavaScript community unofficially coined a term for the double-underscore, specifically the leading one in properties like<code>__proto__</code>: “dunder”. So, the “cool kids” in JavaScript would generally pronounce<code>__proto__</code>as “dunder proto”.</p>

<h2 id="what-is-the-prototype-">4. What is the <code>prototype</code> ?</h2>

<p><code>prototype</code> is an object automatically created as a special property of a <strong>function</strong>, which is used to establish the delegation (inheritance) chain, aka prototype chain.</p>

<p>When we create a function <code>a</code>, <code>prototype</code> is automatically created as a special property on <code>a</code> and saves the function code on as the <code>constructor</code> on <code>prototype</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">function</span> <span class="nx">Foo</span><span class="p">()</span> <span class="p">{};</span>
</span><span class="line"><span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// Object {constructor: function}</span>
</span><span class="line"><span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">===</span> <span class="nx">Foo</span> <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I’d love to consider this property as the place to store the properties (including methods) of a function object. That’s also the reason why utility functions in JS are defined like <code>Array.prototype.forEach()</code> , <code>Function.prototype.bind()</code>, <code>Object.prototype.toString().</code></p>

<p>Why to emphasize the property of a <strong>function</strong>?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="p">{}.</span><span class="nx">prototype</span> <span class="c1">// undefined;</span>
</span><span class="line"><span class="p">(</span><span class="kd">function</span><span class="p">(){}).</span><span class="nx">prototype</span> <span class="c1">// Object {constructor: function}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// The example above shows object does not have the prototype property.</span>
</span><span class="line"><span class="c1">// But we have Object.prototype, which implies an interesting fact that</span>
</span><span class="line"><span class="k">typeof</span> <span class="nb">Object</span> <span class="o">===</span> <span class="s2">&quot;function&quot;</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="whats-the-difference-between-proto-and-prototype">5. What’s the difference between <code>__proto__</code> and <code>prototype</code>?</h2>

<p><code>__proto__</code>a reference works on every <strong>object</strong> to refer to its <code>[[Prototype]]</code>property.</p>

<p><code>prototype</code> is an object automatically created as a special property of a <strong>function</strong>, which is used to store the properties (including methods) of a function object.</p>

<p>With these two, we could mentally map out the prototype chain. Like this picture illustrates:</p>

<p><img src="https://raw.githubusercontent.com/ifyouseewendy/ifyouseewendy.github.io/source/image-repo/you-dont-know-js/__proto__-vs-prototype.png" alt="__proto__-vs-prototype.png" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">function</span> <span class="nx">Foo</span><span class="p">()</span> <span class="p">{}</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Foo</span><span class="p">();</span>
</span><span class="line">
</span><span class="line"><span class="nx">b</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// true</span>
</span><span class="line"><span class="nx">Foo</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// true</span>
</span><span class="line"><span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Refer to: <a href="https://stackoverflow.com/questions/9959727/proto-vs-prototype-in-javascript">__proto__ VS. prototype in JavaScript</a></p>

<h2 id="whats-process-of-method-lookup-via-prototype-chain">6. What’s process of method lookup via prototype chain?</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="nb">Object</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">);</span> <span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">Foo</span><span class="p">()</span> <span class="p">{}</span>
</span><span class="line"><span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">bar</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">foo</span><span class="p">();</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;bar&quot;</span><span class="p">);</span> <span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Foo</span><span class="p">();</span>
</span><span class="line"><span class="nx">a</span><span class="p">.</span><span class="nx">baz</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span> <span class="k">this</span><span class="p">.</span><span class="nx">bar</span><span class="p">();</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;baz&quot;</span><span class="p">);</span> <span class="p">};</span>
</span><span class="line"><span class="nx">a</span><span class="p">.</span><span class="nx">baz</span><span class="p">();</span>
</span><span class="line">
</span><span class="line"><span class="c1">// foo</span>
</span><span class="line"><span class="c1">// bar</span>
</span><span class="line"><span class="c1">// baz</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The top-end of every _normal _<code>[[Prototype]]</code>chain is the built-in <code>Object.prototype</code>. This object includes a variety of common utilities used all over JS.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span>
</span><span class="line">
</span><span class="line"><span class="nx">constructor</span><span class="o">:</span> <span class="kd">function</span> <span class="nb">Object</span><span class="p">()</span>
</span><span class="line"><span class="nx">hasOwnProperty</span><span class="o">:</span> <span class="kd">function</span> <span class="nx">hasOwnProperty</span><span class="p">()</span>
</span><span class="line"><span class="nx">isPrototypeOf</span><span class="o">:</span> <span class="kd">function</span> <span class="nx">isPrototypeOf</span><span class="p">()</span>
</span><span class="line"><span class="nx">propertyIsEnumerable</span><span class="o">:</span> <span class="kd">function</span> <span class="nx">propertyIsEnumerable</span><span class="p">()</span>
</span><span class="line"><span class="nx">toLocaleString</span><span class="o">:</span> <span class="kd">function</span> <span class="nx">toLocaleString</span><span class="p">()</span>
</span><span class="line"><span class="nx">toString</span><span class="o">:</span> <span class="kd">function</span> <span class="nx">toString</span><span class="p">()</span>
</span><span class="line"><span class="nx">valueOf</span><span class="o">:</span> <span class="kd">function</span> <span class="nx">valueOf</span><span class="p">()</span>
</span><span class="line"><span class="nx">__defineGetter__</span><span class="o">:</span> <span class="kd">function</span> <span class="nx">__defineGetter__</span><span class="p">()</span>
</span><span class="line"><span class="nx">__defineSetter__</span><span class="o">:</span> <span class="kd">function</span> <span class="nx">__defineSetter__</span><span class="p">()</span>
</span><span class="line"><span class="nx">__lookupGetter__</span><span class="o">:</span> <span class="kd">function</span> <span class="nx">__lookupGetter__</span><span class="p">()</span>
</span><span class="line"><span class="nx">__lookupSetter__</span><span class="o">:</span> <span class="kd">function</span> <span class="nx">__lookupSetter__</span><span class="p">()</span>
</span><span class="line"><span class="nx">get</span> <span class="nx">__proto__</span><span class="o">:</span> <span class="kd">function</span> <span class="nx">__proto__</span><span class="p">()</span>
</span><span class="line"><span class="nx">set</span> <span class="nx">__proto__</span><span class="o">:</span> <span class="kd">function</span> <span class="nx">__proto__</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="class">“Class”</h1>

<p>Source: <a href="https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch4.md">You Don’t Know JS: this &amp; Object Prototypes - Chapter 4: Mixing (Up) “Class” Objects</a></p>

<h2 id="misconception">1. Misconception</h2>

<p>There’s a peculiar kind of behavior in JavaScript that has been shamelessly abused for years to <em>hack</em> something that <em>looks</em> like “classes”. JS developers have strived to simulate as much as they can of class-orientation.</p>

<p>JS has had <em>some</em> class-like syntactic elements (like<code>new</code>and<code>instanceof</code>) for quite awhile, and more recently in ES6, some additions, like the<code>class</code>keyword (see Appendix A). But does that mean JavaScript actually <em>has</em> classes? Plain and simple: <strong>No.</strong></p>

<p>**Classes mean copies. **JavaScript **does not automatically **create copies (as classes imply) between objects.</p>

<p>Read <a href="https://github.com/getify/You-Dont-Know-JS/blob/master/this %26 object prototypes/ch4.md">You Don’t Know JS: this &amp; Object Prototypes - Chapter 4: Mixing (Up) “Class” Objects</a> for details:</p>

<ul>
  <li>Why does JavaScript not feature class inheritance?</li>
  <li>Why does mixin pattern (both explicit and implicit) as the common sort of emulating class copy behavior, not work in JavaScript?</li>
</ul>

<h2 id="constructors">2. “Constructors”</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">function</span> <span class="nx">Foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// ...</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">===</span> <span class="nx">Foo</span><span class="p">;</span> <span class="c1">// true</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Foo</span><span class="p">();</span>
</span><span class="line"><span class="nx">a</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">===</span> <span class="nx">Foo</span><span class="p">;</span> <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The<code>Foo.prototype</code>object by default (at declaration time on line 1 of the snippet!) gets a public, non-enumerable property called<code>.constructor</code>, and this property is a reference back to the function (<code>Foo</code>in this case) that the object is associated with.</p>

<h3 id="does-constructor-mean-was-constructed-by-no">Does “constructor” mean “was constructed by”? NO!</h3>

<p>The fact is,<code>.constructor</code>on an object arbitrarily points, by default, at a function who, reciprocally, has a reference back to the object – a reference which it calls<code>.prototype</code>. The words “constructor” and “prototype” only have a loose default meaning that might or might not hold true later. The best thing to do is remind yourself, “constructor does not mean constructed by”.</p>

<h3 id="what-is-exactly-a-constructor">What is exactly a “constructor”?</h3>

<p>In other words, in JavaScript, it’s most appropriate to say that a “constructor” is <strong>any function called with the</strong><code>new</code><strong>keyword</strong> in front of it. Functions aren’t constructors, but function calls are “constructor calls” if and only if<code>new</code>is used.</p>

<h3 id="do-we-have-to-capitalize-the-constructor-function-no">Do we have to capitalize the constructor function? NO!</h3>

<p>By convention in the JavaScript world, “class”es are named with a capital letter, so the fact that it’s <code>Foo</code> instead of <code>foo</code> is a strong clue that we intend it to be a “class”. But the capital letter doesn’t mean <strong>anything</strong> at all to the JS engine.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{}</span>
</span><span class="line">
</span><span class="line"><span class="k">new</span> <span class="nx">foo</span><span class="p">()</span> <span class="c1">// foo {}</span>
</span><span class="line">
</span><span class="line"><span class="nx">foo</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// Object {constructor: function}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In reality,<code>Foo</code>is no more a “constructor” than any other function in your program. Functions themselves are <strong>not</strong> constructors. However, when you put the<code>new</code>keyword in front of a normal function call, that makes that function call a “constructor call”. In fact,<code>new</code>sort of hijacks any normal function and calls it in a fashion that constructs an object, <strong>in addition to whatever else it was going to do</strong>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">function</span> <span class="nx">NothingSpecial</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="s2">&quot;Don&#39;t mind me!&quot;</span> <span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">NothingSpecial</span><span class="p">();</span>
</span><span class="line"><span class="c1">// &quot;Don&#39;t mind me!&quot;</span>
</span><span class="line">
</span><span class="line"><span class="nx">a</span><span class="p">;</span> <span class="c1">// {}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>NothingSpecial</code>is just a plain old normal function, but when called with<code>new</code>, it constructs an object, almost as a side-effect, which we happen to assign to <em><code>a</code></em>. The <strong>call</strong> was a constructor call, but <code>NothingSpecial</code> is not, in and of itself, a constructor.</p>

<h3 id="is-constructorreliable-to-be-used-as-a-reference-no">Is <code>.constructor</code>reliable to be used as a reference? NO!</h3>

<p>Some arbitrary object-property reference like<code>a1.constructor</code>cannot actually be <em>trusted</em> to be the assumed default function reference. Moreover, as we’ll see shortly, just by simple omission,<code>a1.constructor</code>can even end up pointing somewhere quite surprising and insensible.<code>a1.constructor</code>is extremely unreliable, and an unsafe reference to rely upon in your code.<strong>Generally, such references should be avoided where possible.</strong></p>

<p><code>.constructor</code>is not a magic immutable property. It <em>is</em> non-enumerable (see snippet above), but its value is writable (can be changed), and moreover, you can add or overwrite (intentionally or accidentally) a property of the name<code>constructor</code>on any object in any<code>[[Prototype]]</code>chain, with any value you see fit.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">function</span> <span class="nx">Foo</span><span class="p">()</span> <span class="p">{}</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Foo</span><span class="p">();</span>
</span><span class="line"><span class="nx">a</span><span class="p">.</span><span class="nx">constructor</span>  <span class="o">===</span> <span class="nx">Foo</span> <span class="c1">// true</span>
</span><span class="line">
</span><span class="line"><span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line"><span class="nx">a</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">===</span> <span class="nx">Foo</span> <span class="c1">// false</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If you create a new object, and replace a function’s default<code>.prototype</code>object reference, the new object will not by default magically get a<code>.constructor</code>on it.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">function</span> <span class="nx">Foo</span><span class="p">()</span> <span class="p">{</span> <span class="cm">/* .. */</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span> <span class="cm">/* .. */</span> <span class="p">};</span> <span class="c1">// create a new prototype object</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">a1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Foo</span><span class="p">();</span>
</span><span class="line"><span class="nx">a1</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">===</span> <span class="nx">Foo</span><span class="p">;</span> <span class="c1">// false!</span>
</span><span class="line"><span class="nx">a1</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">===</span> <span class="nb">Object</span><span class="p">;</span> <span class="c1">// true!</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>What’s happening?<code>a1</code>has no<code>.constructor</code>property, so it delegates up the<code>[[Prototype]]</code>chain to<code>Foo.prototype</code>. But that object doesn’t have a<code>.constructor</code>either (like the default<code>Foo.prototype</code>object would have had!), so it keeps delegating, this time up to<code>Object.prototype</code>, the top of the delegation chain.<em>That</em> object indeed has a<code>.constructor</code>on it, which points to the built-in<code>Object(..)</code>function.</p>

<p>Of course, you can add<code>.constructor</code>back to the<code>Foo.prototype</code>object, but this takes manual work, especially if you want to match native behavior and have it be non-enumerable.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">function</span> <span class="nx">Foo</span><span class="p">()</span> <span class="p">{</span> <span class="cm">/* .. */</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span> <span class="cm">/* .. */</span> <span class="p">};</span> <span class="c1">// create a new prototype object</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Need to properly &quot;fix&quot; the missing `.constructor`</span>
</span><span class="line"><span class="c1">// property on the new object serving as `Foo.prototype`.</span>
</span><span class="line"><span class="c1">// See Chapter 3 for `defineProperty(..)`.</span>
</span><span class="line"><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span> <span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="s2">&quot;constructor&quot;</span> <span class="p">,</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class="line">    <span class="nx">writable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class="line">    <span class="nx">configurable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class="line">    <span class="nx">value</span><span class="o">:</span> <span class="nx">Foo</span>    <span class="c1">// point `.constructor` at `Foo`</span>
</span><span class="line"><span class="p">}</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>That’s a lot of manual work to fix<code>.constructor</code>. Moreover, all we’re really doing is perpetuating the misconception that “constructor” means “was constructed by”. That’s an <em>expensive</em> illusion.</p>

<h2 id="what-happened-when-we-callnew-">3. What happened when we call<code>new</code> ?</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">function</span> <span class="nx">New</span><span class="p">(</span><span class="nx">func</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">res</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="nx">func</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">res</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="nx">func</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">ret</span> <span class="o">=</span> <span class="nx">func</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span> <span class="mi">1</span><span class="p">));</span>
</span><span class="line">    <span class="k">if</span> <span class="p">((</span><span class="k">typeof</span> <span class="nx">ret</span> <span class="o">===</span> <span class="s2">&quot;object&quot;</span> <span class="o">||</span> <span class="k">typeof</span> <span class="nx">ret</span> <span class="o">===</span> <span class="s2">&quot;function&quot;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">ret</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="nx">ret</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">res</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nx">New</span><span class="p">(</span><span class="nx">A</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class="line"><span class="c1">// equals to</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">A</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>It creates a new object. The type of this object, is simply <em>object</em></li>
  <li>It sets this new object’s internal, inaccessible, <em>[[prototype]]</em>(i.e. <strong>__proto__</strong>) property to be the constructor function’s external, accessible, <em>prototype</em> object (every function object automatically has a <em>prototype</em> property).</li>
  <li>It makes the <code>this</code>variable point to the newly created object.</li>
  <li>It executes the constructor function, using the newly created object whenever <code>this</code>is mentioned.</li>
  <li>It returns the newly created object, unless the constructor function returns a non-<code>null</code>object reference. In this case, that object reference is returned instead.</li>
</ol>

<p>Reference</p>

<ul>
  <li><a href="https://stackoverflow.com/questions/1646698/what-is-the-new-keyword-in-javascript">What is the ‘new’ keyword in JavaScript?</a></li>
  <li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new">new operator - MDN</a></li>
</ul>

<h2 id="introspection">4. Introspection</h2>

<h3 id="instanceof"><code>instanceof</code></h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">Foo</span><span class="p">;</span> <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The<code>instanceof</code>operator takes a plain object as its left-hand operand and a<strong>function</strong>as its right-hand operand. The question<code>instanceof</code>answers is:<strong>in the entire</strong><code>[[Prototype]]</code><strong>chain of</strong><code>a</code><strong>, does the object arbitrarily pointed to by</strong><code>Foo.prototype</code><strong>ever appear?</strong></p>

<p>What if you have two arbitrary objects, say<code>a</code>and<code>b</code>, and want to find out if <em>the objects</em> are related to each other through a<code>[[Prototype]]</code>chain?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="c1">// helper utility to see if `o1` is</span>
</span><span class="line"><span class="c1">// related to (delegates to) `o2`</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">isRelatedTo</span><span class="p">(</span><span class="nx">o1</span><span class="p">,</span> <span class="nx">o2</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">function</span> <span class="nx">F</span><span class="p">(){}</span>
</span><span class="line">    <span class="nx">F</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">o2</span><span class="p">;</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">o1</span> <span class="k">instanceof</span> <span class="nx">F</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span> <span class="nx">a</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nx">isRelatedTo</span><span class="p">(</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">a</span> <span class="p">);</span> <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="objectprototypeisprototypeof"><code>Object.prototype.isPrototypeOf()</code></h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">isPrototypeOf</span><span class="p">(</span> <span class="nx">a</span> <span class="p">);</span> <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The question<code>isPrototypeOf(..)</code>answers is:<strong>in the entire</strong><code>[[Prototype]]</code><strong>chain of</strong><code>a</code><strong>, does</strong><code>Foo.prototype</code><strong>ever appear?</strong></p>

<p>What if you have two arbitrary objects, say<code>a</code>and<code>b</code>, and want to find out if <em>the objects</em> are related to each other through a<code>[[Prototype]]</code>chain?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="c1">// Simply: does `a` appear anywhere in</span>
</span><span class="line"><span class="c1">// `b`s [[Prototype]] chain?</span>
</span><span class="line"><span class="nx">a</span><span class="p">.</span><span class="nx">isPrototypeOf</span><span class="p">(</span> <span class="nx">b</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="behavior-delegation">Behavior Delegation</h1>

<p>Source: <a href="https://github.com/getify/You-Dont-Know-JS/blob/master/this %26 object prototypes/ch6.md">You Don’t Know JS: this &amp; Object Prototypes - Chapter 6: Behavior Delegation</a></p>

<h2 id="my-understanding-1">1. My understanding</h2>

<p>Considering we don’t actually have <code>class</code> in JavaScript, but we want the benefit of behaviour sharing around code entities. JavaScript employs behaviour delegation as the <code>[[Prototype]]</code>mechanism. It kinda differs from the traditional class-instance  thinking, but it’s still in the spectrum of OO, as a form of plain objects linking (delegation) instead of inheritance.</p>

<p>Classical inheritance is a code arrangement technique. For the cost of arranging objects in a hierarchy, you get message delegation for free. Delegation arranges objects in a horizontal space (side-by-side as peers) instead of a vertical hierarchy. So, can I say one outweighs another between behaviour delegation and traditional class theory? No, they are different assumptions that we don’t have true <code>class</code> in JavaScript.</p>

<p>Behavior delegation looks like a side-effect outcome on the way JavaScript strives to simulate class-oriented code to meet the expectations of most OO developers. For instance, <code>new</code> creates an automatic message delegation just like inheritance, name of <code>constructor</code> , introducing <code>class</code>in ES6. It’s probable that people added <code>prototype</code> aiming to simulate class behaviours.</p>

<p>Anyway, behaviour delegation works and I consider it as the right mental model to illustrate the chaos in JavaScript, which is much better than the contrived class thinking.</p>

<h2 id="background">2. Background</h2>

<p>JavaScript is <strong>almost unique</strong> among languages as perhaps the only language with the right to use the label “object oriented”, because it’s one of a very short list of languages where <strong>an object can be created directly, without a class at all.</strong></p>

<p>In JavaScript, there are no abstract patterns/blueprints for objects called “classes” as there are in class-oriented languages. <strong>JavaScript just has objects</strong>. In JavaScript, we don’t make <em>copies</em> from one object (“class”) to another (“instance”). <strong>We make links between objects.</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">function</span> <span class="nx">Foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// ...</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Foo</span><span class="p">();</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Foo</span><span class="p">();</span>
</span><span class="line">
</span><span class="line"><span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span> <span class="nx">a</span> <span class="p">)</span> <span class="o">===</span> <span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span> <span class="c1">// true</span>
</span><span class="line"><span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span> <span class="nx">b</span> <span class="p">)</span> <span class="o">===</span> <span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span> <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>When<code>a</code>is created by calling<code>new Foo()</code>, one of the things (see Chapter 2 for all four steps) that happens is that<code>a</code>gets an internal<code>[[Prototype]]</code>link to the object that<code>Foo.prototype</code>is pointing at. <strong>We end up with two objects, linked to each other.</strong></p>

<p>The actual mechanism, the essence of what’s important to the functionality we can leverage in JavaScript, is <strong>all about objects being linked to other objects.</strong></p>

<h3 id="compared-to-traditional-inheritance">Compared to traditional inheritance</h3>

<p>In class-oriented languages, multiple copies (aka, “instances”) of a class can be made, like stamping something out from a mold. But in JavaScript, there are no such copy-actions performed. You don’t create multiple instances of a class. You can create multiple objects that <code>[[Prototype]]</code>link to a common object. But by default, no copying occurs, and thus these objects don’t end up totally separate and disconnected from each other, but rather, quite <strong>linked</strong>.</p>

<p>“inheritance” (and “prototypal inheritance”) and all the other OO terms just do not make sense when considering how JavaScript <em>actually</em> works (not just applied to our forced mental models).</p>

<p>Instead, “delegation” is a more appropriate term, because <strong>these relationships are not **<em>copies</em></strong> but delegation <strong><em>links</em></strong>.</p>

<h3 id="prototypal-inheritance--differential-inheritance">Prototypal Inheritance &amp;&amp; Differential Inheritance</h3>

<p>This mechanism is often called “<strong>prototypal inheritance</strong>” (we’ll explore the code in detail shortly), which is commonly said to be the dynamic-language version of “classical inheritance”. The word “inheritance” has a very strong meaning (see Chapter 4), with plenty of mental precedent. Merely adding “prototypal” in front to distinguish the <em>actually nearly opposite</em> behavior in JavaScript has left in its wake nearly two decades of miry confusion.”Inheritance” implies a <em>copy</em> operation, and JavaScript doesn’t copy object properties (natively, by default). Instead, JS creates a link between two objects, where one object can essentially <em>delegate</em> property/function access to another object. “<strong>Delegation</strong>” is a much more accurate term for JavaScript’s object-linking mechanism.</p>

<p>Another term which is sometimes thrown around in JavaScript is “<strong>differential inheritance</strong>”. The idea here is that we describe an object’s behavior in terms of what is <em>different</em> from a more general descriptor. For example, you explain that a car is a kind of vehicle, but one that has exactly 4 wheels, rather than re-describing all the specifics of what makes up a general vehicle (engine, etc).</p>

<p>But just like with “prototypal inheritance”, “differential inheritance” pretends that your mental model is more important than what is physically happening in the language. It overlooks the fact that object <code>B</code>is not actually differentially constructed, but is instead built with specific characteristics defined, alongside “holes” where nothing is defined. It is in these “holes” (gaps in, or lack of, definition) that delegation <em>can</em> take over and, on the fly, “fill them in” with delegated behavior.</p>

<h2 id="create-delegations-by-objectcreate">3. Create delegations by <code>Object.create</code></h2>

<p><code>Object.create(..)</code> creates a “new” object out of thin air, and links that new object’s internal <code>[[Prototype]]</code>to the object you specify.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;wendi&quot;</span> <span class="p">};</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nx">b</span><span class="p">.</span><span class="nx">name</span> <span class="c1">// &quot;wendi&quot;</span>
</span><span class="line"><span class="nx">b</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nx">a</span> <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="how-to-make-plain-object-delegations">How to make plain object delegations?</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">something</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="s2">&quot;Tell me something good...&quot;</span> <span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">bar</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span> <span class="nx">foo</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nx">bar</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nx">foo</span> <span class="c1">// true</span>
</span><span class="line"><span class="nx">bar</span><span class="p">.</span><span class="nx">something</span><span class="p">();</span> <span class="c1">// Tell me something good...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="how-to-make-delegations-to-perform-prototypal-inheritance">How to make delegations to perform “prototypal inheritance”?</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">function</span> <span class="nx">Foo</span><span class="p">()</span> <span class="p">{};</span>
</span><span class="line"><span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">);</span> <span class="p">};</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">Bar</span><span class="p">()</span> <span class="p">{};</span>
</span><span class="line">
</span><span class="line"><span class="nx">Bar</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span>
</span><span class="line"><span class="nx">Bar</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// true</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Bar</span><span class="p">();</span>
</span><span class="line"><span class="nx">b</span><span class="p">.</span><span class="nx">foo</span><span class="p">();</span> <span class="c1">// foo</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Inspection: <code>Bar.prototype</code> has changed</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">function</span> <span class="nx">Foo</span><span class="p">()</span> <span class="p">{};</span>
</span><span class="line"><span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">);</span> <span class="p">};</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">Bar</span><span class="p">()</span> <span class="p">{};</span>
</span><span class="line">
</span><span class="line"><span class="nx">Bar</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// Object {constructor: function}</span>
</span><span class="line"><span class="nx">Bar</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span>
</span><span class="line"><span class="nx">Bar</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// Foo {}</span>
</span><span class="line"><span class="nx">Bar</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">bar</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;bar&quot;</span><span class="p">);</span> <span class="p">};</span>
</span><span class="line"><span class="nx">Bar</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// Foo {bar: function}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Inspection: <code>Bar.prototype</code> is not a reference (separated) to <code>Foo.prototype</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">function</span> <span class="nx">Foo</span><span class="p">()</span> <span class="p">{};</span>
</span><span class="line"><span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">);</span> <span class="p">};</span>
</span><span class="line"><span class="kd">function</span> <span class="nx">Bar</span><span class="p">()</span> <span class="p">{};</span>
</span><span class="line">
</span><span class="line"><span class="nx">Bar</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span>
</span><span class="line"><span class="nx">Bar</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">bar</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;bar&quot;</span><span class="p">);</span> <span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// Object {foo: function, constructor: function}</span>
</span><span class="line"><span class="nx">Bar</span><span class="p">.</span><span class="nx">prototype</span> <span class="c1">// Function {bar: function}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Why not?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="nx">Bar</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)</span>
</span><span class="line"><span class="c1">// Cause it ends up Bar is no longer a function object.</span>
</span><span class="line">
</span><span class="line"><span class="nx">Bar</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">Foo</span><span class="p">)</span>
</span><span class="line"><span class="c1">// This links Bar.prototype to Foo, which is the function object. Foo.foo() is not a function.</span>
</span><span class="line">
</span><span class="line"><span class="nx">Bar</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span>
</span><span class="line"><span class="c1">// It just makes Bar.prototype be another reference to Foo.prototype</span>
</span><span class="line">
</span><span class="line"><span class="nx">Bar</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Foo</span><span class="p">();</span>
</span><span class="line"><span class="c1">// It creates a new object, but Foo might have unexpected behaviours in constructor calling</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>ES6-standardized techniques</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="c1">// pre-ES6</span>
</span><span class="line"><span class="c1">// throws away default existing `Bar.prototype`</span>
</span><span class="line"><span class="nx">Bar</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span> <span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// ES6+</span>
</span><span class="line"><span class="c1">// modifies existing `Bar.prototype`</span>
</span><span class="line"><span class="nb">Object</span><span class="p">.</span><span class="nx">setPrototypeOf</span><span class="p">(</span> <span class="nx">Bar</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="how-to-envision-your-own-objectcreate">How to envision your own <code>Object.create</code>?</h3>

<p>This polyfill shows a very basic idea without handling the second parameter <code>propertiesObject</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">function</span> <span class="nx">createAndLinkObject</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">function</span> <span class="nx">F</span><span class="p">(){}</span>
</span><span class="line">    <span class="nx">F</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">o</span><span class="p">;</span>
</span><span class="line">    <span class="k">return</span> <span class="k">new</span> <span class="nx">F</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Polyfill on <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create">Object.create - MDN</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span> <span class="o">!=</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">Temp</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{};</span>
</span><span class="line">    <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">prototype</span><span class="p">,</span> <span class="nx">propertiesObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="k">if</span><span class="p">(</span><span class="nx">prototype</span> <span class="o">!==</span> <span class="nb">Object</span><span class="p">(</span><span class="nx">prototype</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">        <span class="k">throw</span> <span class="nx">TypeError</span><span class="p">(</span>
</span><span class="line">          <span class="s1">&#39;Argument must be an object, or null&#39;</span>
</span><span class="line">        <span class="p">);</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">      <span class="nx">Temp</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">prototype</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class="line">      <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Temp</span><span class="p">();</span>
</span><span class="line">      <span class="nx">Temp</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class="line">      <span class="k">if</span> <span class="p">(</span><span class="nx">propertiesObject</span> <span class="o">!==</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperties</span><span class="p">(</span><span class="nx">result</span><span class="p">,</span> <span class="nx">propertiesObject</span><span class="p">);</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">
</span><span class="line">      <span class="c1">// to imitate the case of Object.create(null)</span>
</span><span class="line">      <span class="k">if</span><span class="p">(</span><span class="nx">prototype</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">         <span class="nx">result</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">      <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">  <span class="p">})();</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="towards-delegation-oriented-design">4. Towards Delegation-Oriented Design</h2>

<p>Pseudo-code for class theory</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kr">class</span> <span class="nx">Task</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">id</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// constructor `Task()`</span>
</span><span class="line">    <span class="nx">Task</span><span class="p">(</span><span class="nx">ID</span><span class="p">)</span> <span class="p">{</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">ID</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">    <span class="nx">outputTask</span><span class="p">()</span> <span class="p">{</span> <span class="nx">output</span><span class="p">(</span> <span class="nx">id</span> <span class="p">);</span> <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kr">class</span> <span class="nx">XYZ</span> <span class="nx">inherits</span> <span class="nx">Task</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">label</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// constructor `XYZ()`</span>
</span><span class="line">    <span class="nx">XYZ</span><span class="p">(</span><span class="nx">ID</span><span class="p">,</span><span class="nx">Label</span><span class="p">)</span> <span class="p">{</span> <span class="kr">super</span><span class="p">(</span> <span class="nx">ID</span> <span class="p">);</span> <span class="nx">label</span> <span class="o">=</span> <span class="nx">Label</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">    <span class="nx">outputTask</span><span class="p">()</span> <span class="p">{</span> <span class="kr">super</span><span class="p">();</span> <span class="nx">output</span><span class="p">(</span> <span class="nx">label</span> <span class="p">);</span> <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kr">class</span> <span class="nx">ABC</span> <span class="nx">inherits</span> <span class="nx">Task</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// ...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Pseudo-code for delegation theory</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">Task</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">setID</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ID</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="nx">ID</span><span class="p">;</span> <span class="p">},</span>
</span><span class="line">    <span class="nx">outputID</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">id</span> <span class="p">);</span> <span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="c1">// make `XYZ` delegate to `Task`</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">XYZ</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span> <span class="nx">Task</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nx">XYZ</span><span class="p">.</span><span class="nx">prepareTask</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ID</span><span class="p">,</span><span class="nx">Label</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">this</span><span class="p">.</span><span class="nx">setID</span><span class="p">(</span> <span class="nx">ID</span> <span class="p">);</span>
</span><span class="line">    <span class="k">this</span><span class="p">.</span><span class="nx">label</span> <span class="o">=</span> <span class="nx">Label</span><span class="p">;</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="nx">XYZ</span><span class="p">.</span><span class="nx">outputTaskDetails</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">this</span><span class="p">.</span><span class="nx">outputID</span><span class="p">();</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">label</span> <span class="p">);</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="c1">// ABC = Object.create( Task );</span>
</span><span class="line"><span class="c1">// ABC ... = ...</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="avoid-shadowing-naming-things-the-same-if-at-all-possible">Avoid shadowing (naming things the same) if at all possible</h3>

<p>With the class design pattern, we intentionally named<code>outputTask</code>the same on both parent (<code>Task</code>) and child (<code>XYZ</code>), so that we could take advantage of overriding (polymorphism). In behavior delegation, we do the opposite: <strong>we avoid if at all possible naming things the same</strong> at different levels of the<code>[[Prototype]]</code>chain (called <strong>shadowing</strong>), because having those name collisions creates awkward/brittle syntax to disambiguate references, and we want to avoid that if we can.</p>

<p>This design pattern calls for less of general method names which are prone to overriding and instead more of descriptive method names, specific to the type of behavior each object is doing.<strong>This can actually create easier to understand/maintain code</strong>, because the names of methods (not only at definition location but strewn throughout other code) are more obvious (self documenting).</p>

<p>Setting properties on an object was more nuanced than just adding a new property to the object or changing an existing property’s value. Usually, shadowing is more complicated and nuanced than it’s worth, <strong>so you should try to avoid it if possible</strong>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">anotherObject</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">a</span><span class="o">:</span> <span class="mi">2</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">myObject</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span> <span class="nx">anotherObject</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nx">anotherObject</span><span class="p">.</span><span class="nx">a</span><span class="p">;</span> <span class="c1">// 2</span>
</span><span class="line"><span class="nx">myObject</span><span class="p">.</span><span class="nx">a</span><span class="p">;</span> <span class="c1">// 2</span>
</span><span class="line">
</span><span class="line"><span class="nx">anotherObject</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span> <span class="s2">&quot;a&quot;</span> <span class="p">);</span> <span class="c1">// true</span>
</span><span class="line"><span class="nx">myObject</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span> <span class="s2">&quot;a&quot;</span> <span class="p">);</span> <span class="c1">// false</span>
</span><span class="line">
</span><span class="line"><span class="nx">myObject</span><span class="p">.</span><span class="nx">a</span><span class="o">++</span><span class="p">;</span> <span class="c1">// oops, implicit shadowing!</span>
</span><span class="line">
</span><span class="line"><span class="nx">anotherObject</span><span class="p">.</span><span class="nx">a</span><span class="p">;</span> <span class="c1">// 2</span>
</span><span class="line"><span class="nx">myObject</span><span class="p">.</span><span class="nx">a</span><span class="p">;</span> <span class="c1">// 3</span>
</span><span class="line">
</span><span class="line"><span class="nx">myObject</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span> <span class="s2">&quot;a&quot;</span> <span class="p">);</span> <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Though it may appear that<code>myObject.a++</code>should (via delegation) look-up and just increment the<code>anotherObject.a</code>property itself <em>in place</em>, instead the<code>++</code>operation corresponds to<code>myObject.a = myObject.a + 1</code>.</p>

<p>That’s the reason why we use delegation on prototype chain, we should avoid using the same name as traditional class inheritance would do.</p>

<h3 id="save-state-on-delegators">Save state on delegators</h3>

<p>In general, with<code>[[Prototype]]</code>delegation involved, <strong>you want state to be on the delegators</strong>(<code>XYZ</code>,<code>ABC</code>), not on the delegate (<code>Task</code>). We benefit it from the implicit call-site <code>this</code>binding rules.</p>

<h3 id="comparison">Comparison</h3>

<p>OO style</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">function</span> <span class="nx">Foo</span><span class="p">(</span><span class="nx">who</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">this</span><span class="p">.</span><span class="nx">me</span> <span class="o">=</span> <span class="nx">who</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">identify</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="s2">&quot;I am &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">me</span><span class="p">;</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kd">function</span> <span class="nx">Bar</span><span class="p">(</span><span class="nx">who</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">Foo</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span> <span class="k">this</span><span class="p">,</span> <span class="nx">who</span> <span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="nx">Bar</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span> <span class="nx">Foo</span><span class="p">.</span><span class="nx">prototype</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nx">Bar</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">speak</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">alert</span><span class="p">(</span> <span class="s2">&quot;Hello, &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">identify</span><span class="p">()</span> <span class="o">+</span> <span class="s2">&quot;.&quot;</span> <span class="p">);</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">b1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Bar</span><span class="p">(</span> <span class="s2">&quot;b1&quot;</span> <span class="p">);</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">b2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Bar</span><span class="p">(</span> <span class="s2">&quot;b2&quot;</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nx">b1</span><span class="p">.</span><span class="nx">speak</span><span class="p">();</span>
</span><span class="line"><span class="nx">b2</span><span class="p">.</span><span class="nx">speak</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>OO style features <code>constructor</code> which introduces a lot of extra details that you don’t <em>technically</em> need to know at all times.</p>

<p><img src="https://raw.githubusercontent.com/ifyouseewendy/ifyouseewendy.github.io/source/image-repo/you-dont-know-js/OO.png" alt="OO.png" /></p>

<p>OLOO style</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">Foo</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">init</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">who</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">this</span><span class="p">.</span><span class="nx">me</span> <span class="o">=</span> <span class="nx">who</span><span class="p">;</span>
</span><span class="line">    <span class="p">},</span>
</span><span class="line">    <span class="nx">identify</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="s2">&quot;I am &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">me</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">Bar</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span> <span class="nx">Foo</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nx">Bar</span><span class="p">.</span><span class="nx">speak</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">alert</span><span class="p">(</span> <span class="s2">&quot;Hello, &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">identify</span><span class="p">()</span> <span class="o">+</span> <span class="s2">&quot;.&quot;</span> <span class="p">);</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kd">var</span> <span class="nx">b1</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span> <span class="nx">Bar</span> <span class="p">);</span>
</span><span class="line"><span class="nx">b1</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span> <span class="s2">&quot;b1&quot;</span> <span class="p">);</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">b2</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span> <span class="nx">Bar</span> <span class="p">);</span>
</span><span class="line"><span class="nx">b2</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span> <span class="s2">&quot;b2&quot;</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="nx">b1</span><span class="p">.</span><span class="nx">speak</span><span class="p">();</span>
</span><span class="line"><span class="nx">b2</span><span class="p">.</span><span class="nx">speak</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>OLOO-style code has <em>vastly less stuff</em> to worry about, because it embraces the <strong>fact **that the only thing we ever really cared about was the **objects linked to other objects</strong>.</p>

<p><img src="https://raw.githubusercontent.com/ifyouseewendy/ifyouseewendy.github.io/source/image-repo/you-dont-know-js/OLOO.png" alt="OLOO.png" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Review] 学习乐观]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2016/08/30/review-xue-xi-le-guan/"/>
    <updated>2016-08-30T10:03:04-04:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2016/08/30/review-xue-xi-le-guan</id>
    <content type="html"><![CDATA[<table class="custom">
  <tbody>
    <tr>
      <td><strong>Book</strong></td>
      <td>学习乐观</td>
    </tr>
    <tr>
      <td><strong>Author</strong></td>
      <td><a href="https://en.wikipedia.org/wiki/Martin_Seligman">Martin Seligman</a></td>
    </tr>
    <tr>
      <td><strong>Link</strong></td>
      <td><a href="https://book.douban.com/subject/4934590/">book.douban.com/subject/4934590/</a></td>
    </tr>
  </tbody>
</table>

<ul id="markdown-toc">
  <li><a href="#section">前言</a></li>
  <li><a href="#section-1">第1章 - 悲观者与乐观者的画像</a></li>
  <li><a href="#section-2">第2章 - 悲观者的无助源自何处</a></li>
  <li><a href="#section-3">第3章 - 悲观者严重的挫折</a></li>
  <li><a href="#section-4">第4章 - 从悲观滑向抑郁</a></li>
  <li><a href="#section-5">第5章 - 想法决定悲喜人生</a></li>
  <li><a href="#section-6">第6~11章 - 乐观的好处</a></li>
  <li><a href="#section-7">第6章 - 乐观奠定成功的事业</a></li>
  <li><a href="#section-8">第7~8章 - 解释风格对孩子的影响</a></li>
  <li><a href="#section-9">第12章 - 怎样习得乐观</a></li>
  <li><a href="#section-10">第15章 - 乐观可以有弹性</a></li>
  <li><a href="#section-11">总结</a></li>
</ul>

<h3 id="section">前言</h3>

<p>前两天，看了占东分享的这个关于 Optimism 的演讲 <a href="https://github.com/raganwald/presentations/blob/master/optimism.md">raganwald/presentations</a>。有点感触，一直自认为是悲观主义者。所以在这个演讲的介绍下，找到了 Martin Seligman 博士的这本书 Learned Optimism，中文名为《活出最乐观的自己/学习乐观》。</p>

<p>如果感兴趣，可以尝试下这个在线测试 <a href="https://www.authentichappiness.sas.upenn.edu/questionnaires/optimism-test">optimism-test</a>。如果已经足够乐观，那大可不必阅读这本书。</p>

<p><strong>思维导图</strong></p>

<p><img src="https://raw.githubusercontent.com/ifyouseewendy/ifyouseewendy.github.io/source/image-repo/learned_optimism.png" alt="learned_optimism" /></p>

<h3 id="section-1">第1章 - 悲观者与乐观者的画像</h3>

<blockquote>
  <p>悲观的人的特征是，他相信坏事都是因为自己的错，这件事会毁掉他的一切，会持续很久。而乐观的人在遇到同样的厄运时，会认为现在的失败是暂时性的，每个失败都有它的原因，不是自己的错，可能是环境、运气或其他人为原因的后果。这种人不会被失败击倒。在面对恶劣环境时，他们会把它看成是一种挑战，更努力地去克服它。</p>
</blockquote>

<p>心理学在过去20年最显著的发现就是：人可以选择他想要的思维模式。</p>

<p>我们从个人控制理论开始，主要涉及两个彼此交错的概念：</p>

<ul>
  <li>习惯性无助 Learned helplessness 是一个放弃的反应，是源自『无论你怎么努力都于事无补』的想法的行为。</li>
  <li>解释风格 Explanatory style 是习惯性无助的核心，是你对为什么这件事会发生的习惯性的解释方式。（每个人在碰到不如意的事情时，第一件事就是去解释这个不如意。这些解释决定了我们下一步怎么做。我们的解释风格和想法不仅影响着我们的行动，也影响着我们的感觉和情绪。）</li>
</ul>

<h3 id="section-2">第2章 - 悲观者的无助源自何处</h3>

<p>关于心理学简史：</p>

<ul>
  <li>心理分析学派、佛洛依德派，强调精神活动的隐意识方面，并大胆的以性为切入点，将人的精神问题归因为童年的心理创伤（佛洛依德认为梦到牙齿掉下来代表着阉割以及手淫的罪恶感，做梦的人害怕他的父亲用阉割的方式惩罚他手淫的罪恶。）</li>
  <li>行为主义学派，坚持一个人的所有行为只受他得到的奖励和惩罚所决定：一个被奖励的行为可能会重复，而一个被惩罚的行为则可能会被压抑，如此是已。</li>
  <li>认知心理学，它保留了对改变的乐观信念，认为『自我』可以改进自己。</li>
</ul>

<h3 id="section-3">第3章 - 悲观者严重的挫折</h3>

<p>解释风格有三种维度——永久性、普遍性和人格化。普遍性和永久性控制着你的行为，你的无助感的持久性，以及无助感涉及的层面；人格化控制着你如何看待自己，对自己的感受。当不好的事情发生时，悲观的人怪罪自己，乐观的人怪罪旁人或环境；当好事情发生时，悲观的人归功于旁人或环境，而乐观的人归功于自己。</p>

<p>根据书中第3章的调查问卷，自己做了如下笔记：</p>

<p><img src="https://raw.githubusercontent.com/ifyouseewendy/ifyouseewendy.github.io/source/image-repo/learned_optimism_questionaire_0826.jpeg" alt="learned_optimism_questionaire_0826" /></p>

<p>将最后的总结内容誊写在这：</p>

<ul>
  <li>总体上，我得到了『中等悲观』的分数。</li>
  <li>我只在 PvB 上表现出了乐观，即我不会认为事情会普遍的不好。</li>
  <li>但是我在其他『解释风格』，即永久性和人格化上，我的表现非常糟糕。这说明了
    <ul>
      <li>我惯于把坏的事情当做永久、一成不变的状态，而好的事情只作一时之幸</li>
      <li>我的自尊非常低，关于将错误归咎自己，而将成功归因环境与他人</li>
    </ul>
  </li>
  <li>我理解自己的得分，不禁对自己一直以来希望秉承的『谦虚』和『客观』表示强烈怀疑！</li>
</ul>

<h3 id="section-4">第4章 - 从悲观滑向抑郁</h3>

<p>抑郁的人通常会在思想、情绪、行为和身体四个方面发生消极的变化。</p>

<blockquote>
  <p>抑郁症患者通常在刚醒来时情绪处于最低潮，你躺在床上想着过去种种的失败，想着今天可能要面临的失败，假如你躺在床上不起身，这些失败的想法就像一床棉被一样把你包裹着，如果你爬起床，开始一天的活动，通常情绪会变好些。到了下午3点到6点，情绪又会低落下去。晚上通常是一天中最不抑郁的时间，清晨3点到5点，如果你没睡着，则是情绪最差的时候，情绪在一天中是有所变化的。</p>
</blockquote>

<p>看到这段话，惊得我一身冷汗，好像回到曾经大学宿舍那个冰冷的小屋。回想那段日子，只是觉着自己从悬崖边走过，今天找到了背后真正的含义。</p>

<h3 id="section-5">第5章 - 想法决定悲喜人生</h3>

<p>认知疗法有五种策略</p>

<ul>
  <li>学会去认识在情绪最低沉时自动冒出来的想法</li>
  <li>学会与这个自动冒出来的想法抗争</li>
  <li>学会用不同的解释——重新归因（reattribution）去对抗原有的想法</li>
  <li>学会如何把自己从抑郁的思绪中引开</li>
  <li>学会去认识并且质疑那些控制你并引起你抑郁的假设</li>
</ul>

<blockquote>
  <p>男人碰到事情会去做，而不会反复去想；而女人喜欢钻牛角尖，把事情翻来覆去的想——反刍（rumination），去分析它为什么是这样。女性看待事情的方式造成女性得抑郁症的比例是男性的两倍。</p>
</blockquote>

<h3 id="section-6">第6~11章 - 乐观的好处</h3>

<p>作者从个人事业、身体、孩子、体育赛事、企业组织、竞选几个角度阐释了，乐观的人相对表现更好。</p>

<blockquote>
  <p>你可能会想，谁会碰到较多不幸的事件呢？答案是悲观的人。因为他们比较被动，较少主动采取行动来避免不好的事，而且在事情发生之后也较少采取行动来终止这些事。</p>
</blockquote>

<p>但是我们需要找到平衡点，即『不盲目乐观』。</p>

<ul>
  <li>习惯性乐观不是教你自私、自大，让别人不能忍受，它要教你在遇到失败挫折时如何与自己对话。你要学会如何在收到打击时，从更具鼓励性的角度来考虑挫折或困境。</li>
  <li>使用乐观技术的基本原则是先问，在某一个特定情况下失败的代价是什么。如果失败的代价很高，那么就不应该乐观。</li>
</ul>

<h3 id="section-7">第6章 - 乐观奠定成功的事业</h3>

<p>之前的阅读，让我提出怀疑：自己暂时偏悲观的人格，一定是坏的吗？如果我是个乐观的人，会比现在活得更好吗？一直以来我要求自己『谦虚』和『客观』，但是这同样部分导致了我在测试中体现的悲观分数。</p>

<p>这一章的阅读可以回答我之前的疑问，主要有以下几个观点：</p>

<ul>
  <li>传统的成功观点并不完善。要成功，除了具备能力和动机之外，还需要坚持，遇到挫折也不放弃的坚持，而乐观的解释风格则是坚持的灵魂。</li>
  <li>成功的生活需要大部分时间的乐观和偶尔的悲观。我理解这个平衡点位于『不盲目乐观』。</li>
  <li>悲观不是一无是处，就像头脑特工队里试图阐释忧忧（sadness）存在的意义一样，悲观让我们更冷静、对事情有更清楚的判断。所以轻度悲观是可以接受的状态。</li>
</ul>

<p>这一章同样回答了心中另一个问题，国家动用百万资金支持心理研究，除了为解决各体的心理问题外，有什么更实际（物质层面）的意义？</p>

<p>由于销售是个时常遭受挫折的职业，公司花费大量的人力物力对新人进行培训，但是高离职率导致公司需要承担不菲的损失。大都会保险，就是这样一家企业。Seligman 博士帮助大都会筛选入职人员时，将乐观悲观的人格作为一项新的考量，降低了离职率，为公司在财务层面节省了不菲的资金。</p>

<h3 id="section-8">第7~8章 - 解释风格对孩子的影响</h3>

<ul>
  <li>孩子8岁时，乐观或悲观的解释风格基本定型了。</li>
  <li>孩子的解释风格会受到三种因素的影响：
    <ul>
      <li>孩子从父母身上学到的各种事件的因果分析，尤其是妈妈的</li>
      <li>孩子听到的批评方式，即如果这些批评是永久的、普遍的、内在的，那么他对自己的看法就会转向悲观</li>
      <li>孩子早期生活经验中的生离死别和巨大变故。如果这个事故是永久和普遍的，那么绝望的种子会深埋孩子心中；如果这些事件好转了，他会比较乐观。父母离异或经常争吵是最容易引发孩子抑郁的时间。</li>
    </ul>
  </li>
  <li>失去乐观，传统意义上的聪明才智对成功没有没有什么意义。</li>
</ul>

<h3 id="section-9">第12章 - 怎样习得乐观</h3>

<p>改变悲观的解释风格有两种方法：</p>

<ul>
  <li>转移注意。当不好的事情发生时，安排一个时间去想它；当消极的想法一出现，就立刻把它写下来。</li>
  <li>反驳。从长远来看，反驳更有效
    <ul>
      <li>保持距离。我们一般都会和别人无理的指责保持一个距离。但是要我们与自己的指责保持距离就很困难，因为我们会认为，如果这个指责来自内心，那么它一定是真的。大错特错！我们在遭受挫折时对自己说的话可能和不怀好意的人说的一样毫无根据。</li>
      <li>反驳的四个过程
        <ul>
          <li>寻找证据</li>
          <li>其他可能性</li>
          <li>暗示。即使我的消极想法是对的，那么这个想法的暗示是什么？</li>
          <li>用处。有时候，这些想法的后果比想法的真实性更重要。回问自己，这些想法是否有破坏性？</li>
        </ul>
      </li>
      <li>记录整个过程，找朋友说出自己的反驳，不断练习。</li>
    </ul>
  </li>
</ul>

<h3 id="section-10">第15章 - 乐观可以有弹性</h3>

<p>依作者观点，抑郁症在美国泛滥的机制是习惯性无助，主要原因则是：</p>

<ul>
  <li>个人主义的兴起，即『特大号』的自我。这是一个强调个人控制的时代，自我膨胀已经到了危险的地步，个体的无助需要被治疗。我们的欲望、奢求越来越多，失望、无助便随之而来。</li>
  <li>公共意识的消失。人类需要生活在意义和希望中。关于生命的无意义感，有意义的一个必要条件就是它必须依附到一个比自我更大的东西上去。你可以依附的东西越大，你所拥有的意义越多。而不断发生的政治事件削弱了人们对国家的期望，社会趋势也减弱了人们对神袛和家庭的依赖。公共意识即指对国家、神袛和家庭的看法。</li>
  <li>简要来说，即对自己的过度关怀和对团体的不够关心。</li>
</ul>

<p>出路何在：</p>

<ul>
  <li>找出特大号自我的优势，运用习惯性乐观。</li>
  <li>改变个人与团体之间的关系，寻找新的平衡点。</li>
</ul>

<p>如何实践，作者提到了一个词『道德慢跑』，基于这样的观点：我们慢跑是因为我们期望用用每一天的自我牺牲去换取长远的自我利益。同样，我们可以利用增加公共意识来平衡自我和团体的关系，做一场道德慢跑：</p>

<ul>
  <li>放弃一些享乐行为，把一周中的一个晚上用于从事一件对团体、社区有利的活动</li>
  <li>当你读到某个领你感动的事迹时，写信给那个人。写信去鼓励那些值得你尊敬的人。一个星期花三个小时来写这种信，惩恶扬善</li>
  <li>教导你的孩子如何施舍。叫他们把自己零用钱的1/4留下来捐出去，让他们自己去找值得捐的人或事情。</li>
</ul>

<blockquote>
  <p>如果你为社区、为团体服务得够久的话，你就会找到生命的意义，你会发现你越来越不容易抑郁，也变得不容易得感冒，你越来越喜欢参加团体的活动而不是关起门来独乐乐。更重要的是，你心灵中的那块空虚，那个个人主义所滋养的无意义感会被填的满满的。</p>
</blockquote>

<h3 id="section-11">总结</h3>

<p>女朋友发现我在看这本书，一脸坏笑，闪烁其词。『少年，你心理有病啊？』说实话，我确实觉着自己心理有点问题。我的常态是偏失落的，没有大喜大悲，但总是对自己不满。『读鸡汤文有用吗？』每个人看到的不一样吧。我相信，好多时候我们的行为都是处于”the zombie mode”，习惯的行为模式，或者说心理上的条件反射。不经过思考与剖析，有太多想法不可察觉。这本书至于我最大的意义在于提供了一个全新的角度，让我更加了解自己。它说服我让我真正相信乐观是一个优点，而不是一句口号。我也愿意自此调整，摆脱现在『中度悲观』的心理状态。作者最后给出的调节办法，我不觉着深刻有效，本质上还是在认可乐观的前提条件下，进行观察、反思、自我调节的良性循环。书中关于如何培养孩子的乐观心态，如何将乐观应用在企业管理以及预测总统等活动的事例，都非常耐人寻味。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Name Driven Development]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2016/05/26/name-driven-development/"/>
    <updated>2016-05-26T06:53:08-04:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2016/05/26/name-driven-development</id>
    <content type="html"><![CDATA[<blockquote>
  <p>“Any fool can write code that a computer can understand. Good programmers write code that humans can understand.” - Martin Fowler</p>
</blockquote>

<blockquote>
  <p>“There are only two hard things in Computer Science: cache invalidation and naming things.” — Phil Karlton</p>
</blockquote>

<p>“Name Driven Development”, this is a ghost topic you can’t find on wiki. I just use it to remind me how much importance a good name can give. Maybe it’s just another bad name😂.</p>

<p>In a nutshell, why naming matters a lot is that it’s so closely related to refactoring. Here are some basic ideas I conclude</p>

<ul>
  <li>Good name reveals intention, shows legibility, and keeps clarity.</li>
  <li>Keep refactoring, until the name reveals the intention in an easy way.</li>
  <li>Don’t bother about naming too much when developing. Let the test and implementation help reveal it’s purpose. Then make a good name.</li>
</ul>

<p>To tackle this non-existing topic, I’ve googled around, reading and thinking. Here are some notes I made (to be updated).</p>

<hr />

<blockquote>
  <p><a href="https://ilinkuo.wordpress.com/2013/05/07/whats-in-a-name/#more-137">What’s in a Name? - ilinkuo</a></p>
</blockquote>

<p>Your Names Tell a Story about Your Design</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/name-drive-development/your_names_tell_a_story_about_your_design.png" alt="your_names_tell_a_story_about_your_design" /></p>

<blockquote>
  <p><a href="http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882">Clean Code: Chapter 2, “Meaningful Names” - Uncle Bob</a></p>

  <p>The “definitive” guide</p>
</blockquote>

<p><em>Good</em></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/name-drive-development/meaningful_names_basic.png" alt="meaningful_names_basic" /></p>

<p><em>Better</em></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/name-drive-development/meaningful_names_advanced.png" alt="meaningful_names_advanced" /></p>

<blockquote>
  <p><a href="http://arlobelshee.com/good-naming-is-a-process-not-a-single-step/">Good naming is a process, not a single step - Arlo Belshee</a></p>

  <p>This serial posts provide a methodology, which explains the naming process in a clear and specific way. The first four steps aim at how to better name considering implementation, then move to thinking of intent, and domain abstraction.</p>
</blockquote>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/name-drive-development/good_naming_is_a_process.png" alt="good_naming_is_a_process" /></p>

<h3 id="summary">Summary</h3>

<ul>
  <li>Missing</li>
  <li>Nonsense</li>
  <li>Honest</li>
  <li>Honest and Complete</li>
  <li>Does the Right Thing</li>
  <li>Intent</li>
  <li>Domain Abstraction</li>
</ul>

<h3 id="why">Why</h3>

<p>The answer to that question lies at the heart of understanding, preventing, and paying off technical debt.</p>

<ul>
  <li>Indebted code is any code that is hard to scan.</li>
  <li>Technical debt is anything that increases the difficulty of reading code.</li>
</ul>

<p><em>Shouldn’t the definition of technical debt be something about the cost and risk of changing code?</em></p>

<p>It turns out that the largest single thing developers <strong>spend time doing is reading code</strong>. More than design, more than writing code, more than scanning, even more than meetings (well, probably).</p>

<p><strong>Bugs come from incomplete understanding</strong>. Incomplete understanding arises when the system is harder to understand than we can store in our heads at once.</p>

<p>So if our definition of technical debt is code that is difficult, expensive, or risky to change, then the root cause of that is code that is hard to scan. And how do we make code easy to scan? Use good names to encapsulate details.</p>

<h3 id="how">How</h3>

<p>If we want to make code more scannable, we need to increase the percentage of relevant information that it screams at you. Which also means hiding the irrelevant information.</p>

<p>The process of reducing debt is simple:</p>

<ul>
  <li>Look at something.</li>
  <li>Have an insight.</li>
  <li>Write it down.
    <ul>
      <li>Ccomment. But <strong>comments</strong> aren’t actually part of the code. They duplicate the code, which causes all the usual duplication problems.</li>
      <li>If your insight is structural then it belongs in a <strong>name</strong>. If it is a runtime insight then use an <strong>assertion</strong>.</li>
      <li>Assertions need to be easy to find. So don’t litter them around your core code. Express your insight as an example and write it down in a test. And name the test about the insight (not about what code it happens to execute).</li>
      <li>So, insights belong in names.</li>
    </ul>
  </li>
  <li>Check it in.
    <ul>
      <li>Express your intent by naming your commit using a message.</li>
    </ul>
  </li>
</ul>

<p>The insight loop is all there is</p>

<ul>
  <li>Refactoring legacy code is running this loop and writing stuff down in names.</li>
  <li>Understanding legacy code is running this loop and writing stuff down as examples in tests.</li>
  <li>TDD is running this loop three times:
    <ul>
      <li>First a loop where we look at the customer interview and we write it down as one example in a test.</li>
      <li>Second a loop where we look at the test and we write it down in names in the code.</li>
      <li>Third a loop of refactoring the (new) legacy code.</li>
    </ul>
  </li>
  <li>Design is a loop where the place you look is “how hard was it to write this test” and you write down insights by changing names (usually fixing the Does the Right Thing step).</li>
</ul>

<h3 id="steps">Steps</h3>

<p>Each transition is about refactoring.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/name-drive-development/good_naming_is_a_process_table.png" alt="good_naming_is_a_process_table" /></p>

<blockquote>
  <p><a href="https://stackoverflow.com/posts/422093/revisions">krosenvold</a> answer on <a href="https://stackoverflow.com/questions/421965/anyone-else-find-naming-classes-and-methods-one-of-the-most-difficult-part-in-pr/423140#423140">Stack Overflow - Anyone else find naming classes and methods one of the most difficult part in programming?</a></p>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">function programming_job(){
</span><span class="line">    while (i make classes){
</span><span class="line">         Give each class a name quickly; always fairly long and descriptive.
</span><span class="line">         Implement and test each class to see what they really are.
</span><span class="line">         while (not satisfied){
</span><span class="line">            Re-visit each class and make small adjustments
</span><span class="line">         }
</span><span class="line">    }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <p><a href="http://programmers.stackexchange.com/users/31260/gnat">gnat</a> answered on <a href="http://programmers.stackexchange.com/questions/129961/are-there-good-techniques-or-tests-for-naming-types">Stack Exchange - Are there good techniques or tests for naming types?</a></p>
</blockquote>

<p>For naming, there are six techniques that were proven to work for me:</p>

<ul>
  <li>spend a lot of time on inventing names</li>
  <li>use code reviews</li>
  <li>don’t hesitate to rename</li>
  <li>spend a lot of time on inventing names</li>
  <li>use code reviews</li>
  <li>don’t hesitate to rename</li>
</ul>

<blockquote>
  <p><a href="http://www.gameproducer.net/2008/11/11/the-7-worst-verbs-programmers-use-in-function-calls/">The 7 Worst Verbs Programmers Use In Function Calls - Juuso Hietalahti</a></p>
</blockquote>

<ul>
  <li>dispatch</li>
  <li>do</li>
  <li>resolve</li>
  <li>handle</li>
  <li>manage</li>
  <li>perform</li>
  <li>populate</li>
</ul>

<blockquote>
  <p><a href="http://objology.blogspot.com/2011/09/one-of-best-bits-of-programming-advice.html">One of the Best Bits of Programming Advice I ever Got</a></p>
</blockquote>

<p>Don’t make objects that end with ‘er’.</p>

<ul>
  <li>Managers - Every time I see one of these, I cringe. People will usually tell me what it does, long before they can tell me what it is. Is it a registry? Fine call it a registry. Is it a history or a log? Call it that. Is it a factory? Call it that.</li>
  <li>Controllers - Only good controller object I’ve made in the last 20 years was an interface to a BallastVoltageController that represented a real world object. The fact that every single MVC implementation in the world has had a different role for Controller ought to tell us something about how well that idea fit.</li>
  <li>Organizer (and many like them) - Focus is on what it does. This is a great example of how easy it is to turn many of these ‘ers’ into nouns. Call it an Organization. Now we’re focusing on what it is.</li>
  <li>Analyzer/Renderer/etc - Definitely examples of “worker” objects. What if they had been Analysis/Rendering/etc.</li>
  <li>Builder/Loader/Reader/Writer/etc - Remove the focus from the objects being manipulated, and tend assume to much responsibility themselves.</li>
</ul>

<blockquote>
  <p><a href="http://www.carlopescio.com/2011/04/your-coding-conventions-are-hurting-you.html">Your coding conventions are hurting you - Carlo Pescio</a></p>

  <p>Great article explaining four harmful conventions with obvious examples. There is a following post, <a href="http://www.carlopescio.com/2012/03/life-without-controller-case-1.html">Life without a controller</a></p>
</blockquote>

<p>From a distance, everything is object oriented, extra-cool, modern-flexible-etc, but as you get closer, you realize it’s just a thin veneer over procedural thinking (and don’t even get me started about being “modern”).</p>

<p>Fake OO names and harmful conventions</p>

<ul>
  <li>the -er suffix</li>
  <li>the -able suffix</li>
  <li>the -Object suffix</li>
  <li>the I- prefix</li>
</ul>

<p><strong>Manager, Helper, Handler…</strong></p>

<p>Good ol’ Peter Coad used to say: Challenge any class name that ends in “-er” (e.g. Manager or Controller). If it has no parts, change the name of the class to what each object is managing. If it has parts, put as much work in the parts that the parts know enough to do themselves (that was the “<strong>er-er Principle</strong>”).</p>

<ul>
  <li>Manager. When you need a Manager, it’s often a sign that the Managed are just plain old data structures, and that the Manager is the smart procedure doing the real work.</li>
  <li>Handler, again, is an obvious resurrection of procedural thinking. What is an handler if not a damn procedure?</li>
</ul>

<p><strong>Something-able</strong></p>

<p>It’s like calling a nail “Hammerable”, because you known, that’s what you do with a nail, you hammer it. It encourages procedural thinking, and leads to ineffective abstractions.</p>

<p><strong>Something-Object</strong></p>

<p>When you don’t know how to name something, pick some dominant trait and add Object to the end. Again, the problem is that the “dominant trait” is moving us away from the concept of an object. Object is dropped in just to avoid more careful thinking about the underlying concept.</p>

<p><strong>ISomething</strong></p>

<p>The problem is that it’s too easy to fall into the trap, and just take a concrete class name, put an I in front of it, and lo and behold!, you got an interface name. Sort of calling a concept IDollar instead of Currency.</p>

<p>Eg.</p>

<ul>
  <li>IList to RandomAccessContainer</li>
  <li>IEnumerable to Sequence.
    <ul>
      <li>A List is an IEnumerable (what??)</li>
      <li>A List is a Sequence (well, all right!)</li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>How to Name Things: the solution to the hardest problem in programming - Peter Hilton <a href="https://skillsmatter.com/skillscasts/5747-how-to-name-things-the-solution-to-the-hardest-problem-in-programming">video</a>, <a href="http://www.slideshare.net/pirhilton/how-to-name-things-the-hardest-problem-in-programming">slide</a></p>

  <p>Taking advice from writers, funny quotes, like Stephen King on refactoring, Hemingway on modelling with personas, .etc.</p>
</blockquote>

<p>Remember: “rename” is the simplest but most effective refactoring. Use it.</p>

<p><strong>Gater domain-specific vocabulary</strong>. Scan the domain model entities Wikipedia pages for names of related concepts. Read novels set in your customer’s domain to learn their jargon. Find out what they really mean.</p>

<p>Comments: the basics</p>

<ul>
  <li>Don’t say what the code does (because the code already says that)</li>
  <li>Don’t explain awkward logic (improve the code to make it clear)</li>
  <li>Don’t add too many comments (it’s messy and they’ll get out of date)</li>
  <li>Explain why the code exists
    <ul>
      <li>When should I use this code?</li>
      <li>When shouldn’t I use it?</li>
      <li>What are the alternatives to this code?</li>
    </ul>
  </li>
</ul>

<p>How to write good comments</p>

<ul>
  <li>Try to write good code first</li>
  <li>Try to write a one-sentence comment</li>
  <li>Refactor the code until the comment is easy to write</li>
  <li>Now write a good comment</li>
  <li>Don’t forget the rules of good writing. (eg. remove unnecessary comments)</li>
</ul>

<p>P.S. Peter also has several posts talking about commenting, check <a href="http://hilton.org.uk/blog/how-to-comment-code">How to comment code</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Concurrency Article Collection]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2016/02/16/ruby-concurrency-article-collection/"/>
    <updated>2016-02-16T07:04:50-05:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2016/02/16/ruby-concurrency-article-collection</id>
    <content type="html"><![CDATA[<p>This an article collection about concurrency in Ruby, which benefits me a lot and to be continued.</p>

<blockquote>
  <p><a href="http://www.jstorimer.com/blogs/workingwithcode/7766063-threads-not-just-for-optimizations">Threads, Not Just for Optimisations - Jesse Storimer</a></p>
</blockquote>

<p>Threads can help us organize our programs.</p>

<p>When a signal is delivered to a multithreaded process that has established a signal handler, the kernel arbitrarily selects one thread in the process to which to deliver the signal and invokes the handler in that thread. So Ruby uses a dedicated thread to handle incoming Unix signals. This has nothing to do with speeding things up, it’s just good programming practice.</p>

<p>When you spawn a new Unix process using fork, you really should either wait for it to finish using Process.wait, or detach from it using Process.detach. The reason is that when the process exits, it leaves behind some information about its exit status. This status info can’t be cleaned up until it’s been consumed by the parent process using Process.wait. When you use something like Process.spawn or backticks, Process.wait is called internally to cleanup the aforementioned status info. So Process.detach is just a thin wrapper around Process.wait, using a background thread to wait for the return value of Process.wait, while the main thread continues execution concurrently. Again, this has nothing to do with speed, but allows the proper housekeeping to be done without burdening the program with extra state.</p>

<blockquote>
  <p><a href="http://concur.rspace.googlecode.com/hg/talk/concur.html#title-slide">Concurrency is not Parallelism (it’s better) - Rob Pike</a></p>
</blockquote>

<p>Go provides</p>

<ul>
  <li>concurrent execution (coroutines. They’re a bit like threads, but they’re much cheaper. Goroutines are multiplexed onto OS threads as required. When a goroutine blocks, that thread blocks but no other goroutine blocks.)</li>
  <li>synchronization and messaging (channels)</li>
  <li>multi-way concurrent control (select)</li>
</ul>

<p>Concurrency vs. Paralelism</p>

<ul>
  <li>Concurrency is about dealing with lots of things at once.</li>
  <li>Parallelism is about doing lots of things at once.</li>
  <li>Not the same, but related.</li>
  <li>One is about structure (design), one is about execution.</li>
  <li>Concurrency provides a way to structure a solution to solve a problem that may (but not necessarily) be parallelizable.</li>
</ul>

<p>Concurrency plus communication</p>

<ul>
  <li>Concurrency is a way to structure a program by breaking it into pieces that can be executed independently.</li>
  <li>Communication is the means to coordinate the independent executions.</li>
  <li>This is the Go model and (like Erlang and others) it’s based on CSP (Communicating Sequential Processes)</li>
</ul>

<blockquote>
  <p><a href="https://blog.engineyard.com/2011/ruby-concurrency-and-you">Ruby, Concurrency, and You - Engine Yard</a></p>
</blockquote>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/RCAC-ruby_support.png" alt="RCAC-ruby_support.png" /></p>

<blockquote>
  <p><a href="https://github.com/jruby/jruby/wiki/Concurrency-in-jruby">Concurrency in JRuby</a></p>
</blockquote>

<p>In general, the safest path to writing concurrent code in JRuby is the same as on any other platform:</p>

<ul>
  <li>Don’t do it, if you can avoid it.</li>
  <li>If you must do it, don’t share data across threads.</li>
  <li>If you must share data across threads, don’t share mutable data.</li>
  <li>If you must share mutable data across threads, synchronize access to that data.</li>
</ul>

<p>Thread Safety refers to the ability to perform operations against a shared structure across multiple threads and know there will be no resulting errors or data integrity issues.</p>

<p>Volatility refers to the visibility of changes across threads on multi-core systems that may have thread or core-specific views of system memory.</p>

<p>Atomicity refers to the ability to perform a write to memory based on some view of that memory and to know the write happens before the view is invalid.</p>

<blockquote>
  <ul>
    <li><a href="http://www.jstorimer.com/blogs/workingwithcode/8085491-nobody-understands-the-gil%0A">Nobody understands the GIL - Part 1 - Jesse Storimer</a></li>
    <li><a href="http://www.jstorimer.com/blogs/workingwithcode/8100871-nobody-understands-the-gil-part-2-implementation">Nobody understands the GIL - Part 2: Implementation - Jesse Storimer</a></li>
    <li><a href="http://www.rubyinside.com/does-the-gil-make-your-ruby-code-thread-safe-6051.html">Does the GIL Make Your Ruby Code Thread-Safe? - Jesse Storimer</a></li>
  </ul>
</blockquote>

<p>It’s possible for all of the Ruby implementations to provide thread-safe data structures, but that requires extra overhead that would make single-threaded code slower.</p>

<p>For the MRI core team, the GIL protects the internal state of the system. With a GIL, they don’t require any locks or synchronization around the internal data structures. If two threads can’t be mutating the internals at the same time, then no race conditions can occur. For you, the developer, this will severely limit the parallelism you get from running your Ruby code on MRI.</p>

<p>All that the GIL guarantees is that MRI’s native C implementations of Ruby methods will be executed atomically (but even this has caveats). This behaviour can sometimes help us as Ruby developers, but the GIL is really there for the protection of MRI internals, not as a dependable API for Ruby developers. So the GIL doesn’t ‘solve’ thread-safety issues.</p>

<p>Don’t communicate by sharing state; share state by communicating.</p>

<blockquote>
  <p><a href="https://www.igvita.com/2008/11/13/concurrency-is-a-myth-in-ruby/">Parallelism is a Myth in Ruby - Ilya Grigorik</a></p>
</blockquote>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/RCAC-ruby_gil.png" alt="RCAC-ruby_gil.png" /></p>

<blockquote>
  <p><a href="https://github.com/jdantonio/Everything-You-Know-About-the-GIL-is-Wrong-RubyConf-2015">Everything You Know About GIL is Wrong - Jerry D’Antonio</a></p>
</blockquote>

<p>Summary</p>

<ul>
  <li>Concurrency is not parallelism</li>
  <li>The GIL protects Ruby’s internal state when the operating system context switches
    <ul>
      <li>The GIL does not provide thread safety guarantees to user code</li>
      <li>But it imposes an implicit memory model</li>
    </ul>
  </li>
  <li>The GIL prevents true parallelism in Ruby</li>
  <li>But Ruby is pretty good at multiplexing threads performing blocking I/O</li>
</ul>

<p>Concurrency vs. Parallelism</p>

<p>Non-concurrent programs gain no benefit from running on multiple processors. Concurrent programs get parallelism for free when the runtime supports it.</p>

<ul>
  <li>Parallelism requires two processor cores. No matter the language/runtime, a processor core can only execute one instruction at a time.</li>
  <li>Concurrency can happen when there is only one core. Concurrency is about design, improved performance is a side effect</li>
</ul>

<p>Ruby is selfish</p>

<ul>
  <li>Ruby is an interpreted language
    <ul>
      <li>Ruby is compiled to bytecode within the interpreter</li>
      <li>Ruby is free to optimize and reorder your code</li>
    </ul>
  </li>
  <li>Every Ruby operation is implemented in C</li>
  <li>The Ruby runtime is just another program; it is under the control of the compiler and the operating system
    <ul>
      <li>The C compiler is free to optimize and reorder instructions during compilation</li>
      <li>An operating system context switch can occur at any point in the running C code</li>
    </ul>
  </li>
  <li>The GIL protects Ruby, not your code</li>
</ul>

<p>Ruby is thread safe, your code isn’t.</p>

<ul>
  <li>Every individual read and write to memory is guaranteed to be thread-safe in Ruby
    <ul>
      <li>The GIL prevents interleaved access to memory used by the runtime</li>
      <li>The GIL prevents interleaved access to individual variables</li>
      <li>Ruby itself will never become corrupt</li>
    </ul>
  </li>
  <li>Ruby makes no guarantees about your code</li>
</ul>

<p><a href="https://www.wikiwand.com/en/Memory_model_(programming)">Memory model</a></p>

<ul>
  <li>“In computing, a memory model describes the interactions of threads through memory and their shared use of the data.” Wikipedia</li>
  <li>Defines visibility, volatility, atomicity, and synchronization barriers
    <ul>
      <li>Java’s current memory model was adopted in 2004 as part of Java</li>
      <li>The C and C++ memory models were adopted in 2011 with C11 and C++11</li>
      <li><a href="https://golang.org/ref/mem">The Go Memory Model</a></li>
    </ul>
  </li>
  <li>Ruby does NOT have a documented memory model. The GIL provides an implied memory model but no guarantees</li>
</ul>

<p>I/O</p>

<p>Ruby programs which perform significant I/O generally benefit from concurrency.</p>

<ul>
  <li>I/O in Ruby programs is blocking</li>
  <li>I/O within Ruby is asynchronous</li>
</ul>

<p>You can’t spell GIL without I/O. The GIL exists to maintain the internal consistency of the Ruby runtime. I/O operations are slow, which is why asynchronous I/O was invented. While I/O is in progress the Ruby thread is blocked so it cannot change the internal state, so Ruby allows other threads to do useful work. All Ruby I/O calls unlock the GIL, as do backtick and <code>system</code> calls. When Ruby thread is waiting on I/O it does not block other threads.</p>

<blockquote>
  <p><a href="http://merbist.com/2011/02/22/concurrency-in-ruby-explained/">Ruby concurrency explained - Matt Aimonetti</a></p>
</blockquote>

<p>The thing to keep in mind is that the concurrency models are often defined by the programming language you use. The advantage of the Java threaded approach is that the memory is shared between the threads so you are saving in memory (and startup time), each thread can easily talk to each other via the shared memory. The advantage of PHP is that you don’t have to worry about locks, deadlocks, threadsafe code and all that mess hidden behind threads.</p>

<p>Others programming languages like Erlang and Scala use a third approach: the actor model. The actor model is somewhat a bit of a mix of both solutions, the difference is that actors are a like threads which don’t share the same memory context. Communication between actors is done via exchanged messages ensuring that each actor handles its own state and therefore avoiding corrupt data (two threads can modify the same data at the same time, but an actor can’t receive two messages at the exact same time).</p>

<p>Actors/Fibers</p>

<p>Ruby 1.9, developers now have access to a new type of “lightweight” threads called Fibers. Fibers are not actors and Ruby doesn’t have a native Actor model implementation but some people wrote some actor libs on top of fibers. A fiber is like a simplified thread which isn’t scheduled by the VM but by the programmer. Fibers are like blocks which can be paused and resumed from the outside of from within themselves.</p>

<p>How do fibers help with concurrency? The answer is that they are part of a bigger solution. Ruby 1.9 gave us fibers which allow for a more granular control over the concurrency scheduling, combined with non-blocking IO, high concurrency can be achieved. Fiber allow developers to manually control the scheduling of “concurrent” code but also to have the code within the fiber to auto schedule itself.  Well, the only problem is that if you are doing any type of blocking IO in a fiber, the entire thread is blocked and the other fibers aren’t running. So avoid blocking IOs.</p>

<p>Non blocking IOs/Reactor pattern</p>

<p>The reactor pattern is quite simple to understand really. The heavy work of making blocking IO calls is delegated to an external service (reactor) which can receive concurrent requests. The service handler (reactor) is given callback methods to trigger asynchronously based on the type of response received.</p>

<p>When a request comes in and your code makes a DB query, you are blocking any other requests from being processed. To avoid that, we could wrap our request in a fiber, trigger an async DB call and pause the fiber so another request can get processed as we are waiting for the DB. Once the DB query comes back, it wakes up the fiber it was trigger from, which then sends the response back to the client. Technically, the server can still only send one response at a time, but now fibers can run in parallel and don’t block the main tread by doing blocking IOs (since it’s done by the reactor).</p>

<p>This is the approach used by Twisted, EventMachine and Node.js. Ruby developers can use EventMachine or an EventMachine based webserver like Thin as well as EM clients/drivers to make non blocking async calls.</p>

<blockquote>
  <p><a href="https://www.quora.com/Node-js/What-is-a-good-comparison-of-the-reactor-pattern-vs-actor-model">Node.js: What is a good comparison of the reactor pattern vs actor model? - Sean Byrnes</a></p>
</blockquote>

<p>The reactor model follows a purely event driven system where the entire system can be implemented as a single-threaded process with a series of event generators and event handlers. In most implementations there is a “event loop” that continues to run which takes all of the generated events, sends them to all registered event handles and then starts over again.</p>

<p>An actor model is a more abstract method of breaking up execution into different processes that interact with each other. While it is possible to do this similarly to the reactor model, I see this mostly as a series of processes running in different threads and exchanging information through messages or protocols.</p>

<blockquote>
  <p><a href="http://www.toptal.com/ruby/ruby-concurrency-and-parallelism-a-practical-primer?utm_source=rubyweekly&amp;utm_medium=email">Ruby Concurrency and Parallelism: A Practical Tutorial</a></p>
</blockquote>

<ul>
  <li>Ruby concurrency is when two tasks can start, run, and complete in overlapping time periods. It doesn’t necessarily mean, though, that they’ll ever both be running at the same instant (e.g., multiple threads on a single-core machine).</li>
  <li>Parallelism is when two tasks literally run at the same time.</li>
</ul>

<blockquote>
  <p><a href="http://oldmoe.blogspot.jp/2008/08/ruby-fibers-vs-ruby-threads.html">Ruby Fibers Vs Ruby Threads</a></p>
</blockquote>

<p>Fibers are much faster to create than threads, they eat much less memory too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Concurrency In Practice]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2016/02/16/ruby-concurrency-in-practice/"/>
    <updated>2016-02-16T06:58:54-05:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2016/02/16/ruby-concurrency-in-practice</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#guidance">Guidance</a>    <ul>
      <li><a href="#safest-path-to-concurrency">Safest path to concurrency</a></li>
      <li><a href="#writing-thread-safe-code">Writing Thread-safe Code</a></li>
    </ul>
  </li>
  <li><a href="#into-the-wild">Into the Wild</a></li>
</ul>

<h2 id="guidance">Guidance</h2>

<h3 id="safest-path-to-concurrency">Safest path to concurrency</h3>

<blockquote>
  <p>from <a href="https://github.com/jruby/jruby/wiki/Concurrency-in-jruby">JRuby wiki</a></p>
</blockquote>

<ol>
  <li>Don’t do it.</li>
  <li>If you must do it, don’t share data across threads.</li>
  <li>If you must share data across threads, don’t share mutable data.</li>
  <li>If you must share mutable data across threads, synchronize access to that data.</li>
</ol>

<p>Do not communicate by sharing data; instead, share data by communicating</p>

<h3 id="writing-thread-safe-code">Writing Thread-safe Code</h3>

<p><strong>Avoid mutating globals</strong></p>

<ul>
  <li>Constants</li>
  <li>The AST</li>
  <li>Class variables/methods</li>
</ul>

<p><strong>Create more objects, rather than sharing one</strong></p>

<ul>
  <li>Thread-locals</li>
  <li>Connection pools</li>
</ul>

<p><strong>Avoid lazy loading</strong></p>

<ul>
  <li>No autoload</li>
</ul>

<p><strong>Prefer data structures over mutexes</strong></p>

<p>Mutexes are notoriously hard to use correctly. For better or worse, you have a lot of things to decide when using a mutex.</p>

<ul>
  <li>How coarse or fine should this mutex be?</li>
  <li>Which lines of code need to be in the critical section?</li>
  <li>Is a deadlock possible here?</li>
  <li>Do I need a per-instance mutex? Or a global one?</li>
</ul>

<p>By leaning on a data structure, you remove the burden of correct synchronization from your code and depend on the semantics of the data structure to keep things consistent.</p>

<p><strong>Wrap your threads in an abstraction</strong></p>

<ul>
  <li>Actor model</li>
  <li>Reactor Pattern, event-driven I/O</li>
</ul>

<h2 id="into-the-wild">Into the Wild</h2>

<p><strong>Primitives</strong></p>

<ul>
  <li><a href="http://ruby-doc.org/core-2.2.2/Thread.html">Thread</a></li>
  <li><a href="http://ruby-doc.org/core-2.2.2/Mutex.html">Mutex</a></li>
  <li><a href="http://ruby-doc.org/core-2.2.2/ConditionVariable.html">ConditionVariable</a></li>
</ul>

<p><strong>Thread-safe Data Structure</strong></p>

<ul>
  <li><a href="https://github.com/hamstergem/hamster">hamster</a> - Efficient, Immutable, Thread-Safe Collection classes for Ruby</li>
  <li><a href="https://github.com/ruby-concurrency/thread_safe">thread_safe</a> - Thread-safe collections for Ruby</li>
  <li><a href="https://github.com/ruby-concurrency/atomic">atomic</a> - Atomic references for Ruby (merged with concurrent-ruby)</li>
  <li><a href="https://github.com/mperham/connection_pool">connection_pool</a> - Generic connection pooling for Ruby</li>
</ul>

<p><strong>Abstraction / Framework</strong></p>

<p><a href="https://github.com/celluloid/celluloid">celluloid</a></p>

<p>Actor-based concurrent object framework for Ruby.</p>

<ul>
  <li><a href="https://github.com/celluloid/reel/">Reel</a> - An “evented” web server based on Celluloid::IO</li>
  <li><a href="https://github.com/kenichi/angelo">angelo</a> - Sinatra-like DSL for Reel that supports WebSockets and SSE</li>
</ul>

<p><a href="https://github.com/eventmachine/eventmachine">eventmachine</a></p>

<p>EventMachine is an event-driven I/O and lightweight concurrency library for Ruby. It provides event-driven I/O using the Reactor pattern.</p>

<ul>
  <li><a href="http://code.macournoyer.com/thin/">Thin</a>, <a href="https://github.com/postrank-labs/goliath/">Goliath</a> - Scalable event-driven servers. Examples:</li>
  <li><a href="https://github.com/igrigorik/em-http-request">em-http-request</a> - Asynchronous HTTP Client (EventMachine + Ruby)</li>
  <li><a href="https://github.com/igrigorik/em-synchrony">em-synchrony</a> - Fiber aware EventMachine clients and convenience classes</li>
</ul>

<p><a href="https://github.com/puma/puma">puma</a></p>

<p>A ruby web server built for concurrency</p>

<p><a href="https://github.com/ruby-concurrency/concurrent-ruby">concurrent-ruby</a></p>

<p>Modern concurrency tools including agents, futures, promises, thread pools, supervisors, and more. Inspired by Erlang, Clojure, Scala, Go, Java, JavaScript, and classic concurrency patterns.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Concurrency In Theory]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2016/02/16/ruby-concurrency-in-theory/"/>
    <updated>2016-02-16T06:35:19-05:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2016/02/16/ruby-concurrency-in-theory</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#what-is-concurrency">What is concurrency?</a>    <ul>
      <li><a href="#concurrency-vs-paralelism">Concurrency vs. Paralelism</a></li>
      <li><a href="#concurrency-plus-communication">Concurrency plus communication</a></li>
    </ul>
  </li>
  <li><a href="#what-does-ruby-support">What does Ruby support?</a>    <ul>
      <li><a href="#gil">GIL</a></li>
      <li><a href="#ruby-support">Ruby Support</a></li>
      <li><a href="#fiber">Fiber</a></li>
    </ul>
  </li>
  <li><a href="#how-to-enhance-concurrency-by-ruby">How to enhance concurrency by Ruby?</a>    <ul>
      <li><a href="#basics">Basics</a></li>
      <li><a href="#concurrency-model-software-transactional-memory">Concurrency Model: Software Transactional Memory</a></li>
      <li><a href="#concurrency-model-actor-model">Concurrency Model: Actor Model</a></li>
    </ul>
  </li>
</ul>

<h2 id="what-is-concurrency">What is concurrency?</h2>

<h3 id="concurrency-vs-paralelism">Concurrency vs. Paralelism</h3>

<ul>
  <li>Concurrency is about dealing with lots of things at once.</li>
  <li>Parallelism is about doing lots of things at once.</li>
  <li>Not the same, but related.</li>
  <li>One is about structure (design), one is about execution.</li>
  <li>Concurrency provides a way to structure a solution to solve a problem that may (but not necessarily) be parallelizable.</li>
</ul>

<h3 id="concurrency-plus-communication">Concurrency plus communication</h3>

<ul>
  <li>Concurrency is a way to structure a program by breaking it into pieces that can be executed independently.</li>
  <li>Communication is the means to coordinate the independent executions.</li>
  <li>This is the Go model and (like Erlang and others) it’s based on CSP (Communicating Sequential Processes)</li>
</ul>

<p><em>Reference</em></p>

<ul>
  <li><a href="http://concur.rspace.googlecode.com/hg/talk/concur.html#title-slide">Concurrency is not Parallelism (it’s better) - Rob Pike</a></li>
</ul>

<h2 id="what-does-ruby-support">What does Ruby support?</h2>

<h3 id="gil">GIL</h3>

<p>A global interpreter lock (GIL) is a mutual-exclusion lock held by a programming language interpreter thread to avoid sharing code that is not thread-safe with other threads. In implementations with a GIL, there is always one GIL for each interpreter process.</p>

<p>Global interpreter lock (GIL) is a mechanism used in computer language interpreters to synchronize the execution of threads so that only one native thread can execute at a time. An interpreter that uses GIL always allows exactly one thread to execute at a time, even if run on a multi-core processor.</p>

<p><strong>Benefits</strong></p>

<ul>
  <li>increased speed of single-threaded programs (no necessity to acquire or release locks on all data structures separately)</li>
  <li>easy integration of C libraries that usually are not thread-safe</li>
  <li>ease of implementation</li>
</ul>

<p><strong>Drawbacks</strong></p>

<p>Limits the amount of parallelism reachable through concurrency of a single interpreter process with multiple threads. Hence a significant slowdown for CPU-bound thread.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/RCIT-native_threads.png" alt="RCIT-native_threads.png" /></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/RCIT-threads_with_GIL.png" alt="RCIT-threads_with_GIL.png" /></p>

<p><em>Reference</em></p>

<ul>
  <li><a href="https://en.wikipedia.org/wiki/Global_interpreter_lock">Global Interpreter Lock - Wikipedia</a></li>
</ul>

<h3 id="ruby-support">Ruby Support</h3>

<p>Ruby 1.8, uses only a single native thread and runs all Ruby threads within that one native thread. A single OS thread is allocated for the Ruby interpreter, a GIL lock is instantiated, and Ruby threads (‘Green Threads’), are spooled up by our program. This means that threads can never run in parallel, even on multicore CPUs.</p>

<p>Ruby 1.9, allocates a native thread for each Ruby thread. But because some of the C libraries used in this implementation are not themselves thread-safe. Ruby never allows more than one of its native threads to run at the same time. Now the GIL is the bottleneck, and Ruby will never take advantage of multiple cores!</p>

<p>Ruby 1.9, also provides Fiber.</p>

<p>Ruby concurrency without parallelism can still be very useful, though, for tasks that are IO-heavy (e.g., network I/O, disk I/O).  Ruby can release the lock on the GIL on that thread while it blocks on I/O. There is a reason threads were, after all, invented and used even before multi-core servers were common.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/RCIT-ruby_support.png" alt="RCIT-ruby_support.png" /></p>

<p><em>Reference</em></p>

<ul>
  <li><a href="https://blog.engineyard.com/2011/ruby-concurrency-and-you">Ruby, Concurrency, and You - Engine Yard</a></li>
</ul>

<h3 id="fiber">Fiber</h3>

<p>Fibers are primitives for implementing light weight cooperative concurrency in Ruby (think lightweight threads, minus the thread scheduler and less overhead). Basically they are a means of creating code blocks that can be paused and resumed, much like threads. A fiber is a unit of execution that must be manually scheduled by the application. Fibers run in the context of the threads that schedule them. Each thread can schedule multiple fibers.</p>

<p>As opposed to other stackless light weight concurrency models, each fiber comes with a small 4KB stack. This enables the fiber to be paused from deeply nested function calls within the fiber block.</p>

<p>Normal usage: start an async operation, yield the fiber, and then make the callback resume the fiber once the operation is complete.</p>

<p><strong>Compered to Thread</strong></p>

<p>Fibers are never preempted, the scheduling must be done by the programmer and not the VM.</p>

<p><strong>Why Fiber?</strong></p>

<p>In general, fibers do not provide advantages over a well-designed multithreaded application. However, using fibers can make it easier to port applications that were designed to schedule their own threads. The availability of Fibers allows Actor-style programming, without having to worry about overhead.</p>

<p><strong>Why Fiber is called a semi-coroutine?</strong></p>

<p>Coroutines (cooperative multitasking) are computer program components that generalize subroutines for nonpreemptive multitasking, by allowing multiple entry points for suspending and resuming execution at certain locations. Coroutines are well-suited for implementing more familiar program components such as cooperative tasks, exceptions, event loop, iterators, infinite lists and pipes.</p>

<p>Asymmetric Coroutines can only transfer control back to their caller, where Coroutines are free to transfer control to any other Coroutine, as long as they have a handle to it.</p>

<p>We may infer that Ruby encapsulate a Fiber::Core which supports coroutine, and only expose Fiber as a semi-coroutine data structure.</p>

<p><strong>What’s the performance of Fiber?</strong></p>

<p>Fibers are much faster to create than threads, they eat much less memory too.</p>

<p><em>Reference</em></p>

<ul>
  <li><a href="http://ruby-doc.org/core-2.2.2/Fiber.html">Fiber - Ruby Doc</a></li>
  <li><a href="http://www.infoq.com/news/2007/08/ruby-1-9-fibers">Ruby 1.9 adds Fibers for lightweight concurrency - Werner Schuster</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Coroutine#Implementations_for_Ruby">Coroutine - Wikipedia</a></li>
  <li><a href="http://oldmoe.blogspot.jp/2008/08/ruby-fibers-vs-ruby-threads.html">Ruby Fibers Vs Ruby Threads - oldmoe</a></li>
</ul>

<h2 id="how-to-enhance-concurrency-by-ruby">How to enhance concurrency by Ruby?</h2>

<h3 id="basics">Basics</h3>

<p><strong>How to provide more concurrency?</strong></p>

<ul>
  <li>Multi processing (parallelism), like Resque, Unicorn. Simply to fork a running process to multiply its processing power.</li>
  <li>Multi threading, like Sidekiq, Puma and Thin. Lighter than processes, requiring less overhead. At some point, you may find it necessary to use a thread pool.</li>
  <li>Background processing</li>
  <li>Rely on other concurrency models (event, actor, message-passing)</li>
</ul>

<p><strong>Multi-processing vs. Multi-threading</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/RCIT-multi_processing_vs_multi_threading.png" alt="RCIT-multi_processing_vs_multi_threading.png" /></p>

<p><strong>Thread Pooling</strong></p>

<p>A key configuration parameter for a thread pool is typically the number of threads in the pool. These threads can either be instantiated all at once (i.e., when the pool is created) or lazily (i.e., as needed until the maximum number of threads in the pool has been created).</p>

<p><code>Queue</code> and <code>SizedQueue</code> are thread-safe data structures in Ruby, maybe the only two.</p>

<p><a href="https://gist.github.com/ifyouseewendy/a8fc663ae575843f9e8f">demo snippet</a></p>

<p><em>Reference</em></p>

<ul>
  <li><a href="https://www.igvita.com/2010/08/18/multi-core-threads-message-passing/">Multi-core, Threads &amp; Message Passing - Ilya Grigorik</a></li>
  <li><a href="http://adam.herokuapp.com/past/2009/8/13/threads_suck/">Threads Suck -  Adam Wiggins</a></li>
  <li><a href="https://www.usenix.org/legacy/events/hotos03/tech/full_papers/vonbehren/vonbehren_html/index.html">Why Events Are A Bad Idea - Rob von Behren, Jeremy Condit and Eric Brewer</a></li>
</ul>

<h3 id="concurrency-model-software-transactional-memory">Concurrency Model: Software Transactional Memory</h3>

<p>Software transactional memory (STM) is a concurrency control mechanism analogous to database transactions for controlling access to shared memory in concurrent computing. It is an alternative to lock-based synchronization. STM is a strategy implemented in software, rather than as a hardware component.</p>

<ul>
  <li>A thread completes modifications to shared memory without regard for what other threads might be doing, recording every read and write that it is performing in a log.</li>
  <li>Instead of placing the onus on the writer to make sure it does not adversely affect other operations in progress, it is placed on the reader, who after completing an entire transaction verifies that other threads have not concurrently made changes to memory that it accessed in the past.</li>
  <li>This final operation, in which the changes of a transaction are validated and, if validation is successful, made permanent, is called a commit. A transaction may also abort at any time, causing all of its prior changes to be rolled back or undone. If a transaction cannot be committed due to conflicting changes, it is typically aborted and re-executed from the beginning until it succeeds.</li>
</ul>

<p>Clojure has STM support built into the core language.</p>

<p><em>Reference</em></p>

<ul>
  <li><a href="https://en.wikipedia.org/wiki/Software_transactional_memory">Software transactional memory - Wikipedia</a></li>
</ul>

<h3 id="concurrency-model-actor-model">Concurrency Model: Actor Model</h3>

<p>The actor model has its theoretical roots in concurrency modelling and message passing concepts.</p>

<p>The basic operation of an Actor is easy to understand: like a thread, it runs concurrently with other Actors. However, unlike threads it is not pre-emptable. Instead, each Actor has a mailbox and can call a routine named “receive” to check its mailbox for new messages. The “receive” routine takes a filter, and if no messages in an Actor’s mailbox matches the filter, the Actor sleeps until it receives new messages, at which time it’s rescheduled for execution.</p>

<p>Well, that’s a bit of a naive description. In reality the important part about Actors is that they cannot mutate shared state simultaneously. That means there are no race conditions or deadlocks because there are no mutexes, conditions, and semaphores, only messages and mailboxes.</p>

<p>Actors are an approach to concurrency which has proven remarkably successful in languages like Erlang and Scala. They emphasize message passing as the only means of exchanging state, as opposed to threaded approaches like mutexes, conditions, and semaphores which hopefully guard access and mutation of any shared state, emphasis on the hopefully. Using messaging eliminates several problems in multithreaded programming, including many types of race conditions and deadlocks which result from hope dying in the cold light of reality.</p>

<p><strong>Message Passing</strong></p>

<p>The fundamental idea of the actor model is to use actors as concurrent primitives that can act upon receiving messages in different ways:</p>

<ul>
  <li>Send a finite number of messages to other actors.</li>
  <li>Spawn a finite number of new actors.</li>
  <li>Change its own internal behavior, taking effect when the next incoming message is handled.</li>
</ul>

<p>For communication, the actor model uses asynchronous message passing. In particular, it does not use any intermediate entities such as channels. Instead, each actor possesses a mailbox and can be addressed. These addresses are not to be confused with identities, and each actor can have no, one or multiple addresses. When an actor sends a message, it must know the address of the recipient. In addition, actors are allowed to send messages to themselves, which they will receive and handle later in a future step.</p>

<p>Messages are sent asynchronously and can take arbitrarily long to eventually arrive in the mailbox of the receiver. Also, the actor models makes no guarantees on the ordering of messages. Queuing and dequeuing of messages in a mailbox are atomic operations, so there cannot be a race condition.</p>

<p>There is no shared state and the interaction between actors is purely based on asynchronous messages.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/RCIT-actor_message_passing.png" alt="RCIT-actor_message_passing.png" /></p>

<p><strong>Implementation</strong></p>

<ul>
  <li>Thread-based Actors - the actor is internally backed by a dedicated thread. This obviously limits scalability and requires the thread to suspend and block when waiting for new messages.</li>
  <li>Event-driven Actors - which does not directly couple actors to threads. Instead, a thread pool can be used for a number of actors. This approach uses a continuation closure to encapsulate the actor and its state. Conceptually, this implementation is very similar to an event loop backed by a threadpool.</li>
</ul>

<p><strong>Reactor Pattern</strong></p>

<p>The reactor design pattern is an event handling pattern for handling service requests delivered concurrently to a service handler by one or more inputs. The service handler then demultiplexes the incoming requests and dispatches them synchronously to the associated request handlers.</p>

<p>The reactor pattern completely separates application specific code from the reactor implementation, which means that application components can be divided into modular, reusable parts. Also, due to the synchronous calling of request handlers, the reactor pattern allows for simple coarse-grain concurrency while not adding the complexity of multiple threads to the system.</p>

<p><em>Reference</em></p>

<ul>
  <li><a href="https://en.wikipedia.org/wiki/Actor_model">Actor Model - Wikipedia</a></li>
  <li><a href="http://revactor.github.io/philosophy/">Philosophy - Revactor</a></li>
  <li><a href="http://on-ruby.blogspot.jp/2008/01/ruby-concurrency-with-actors.html">Ruby Concurrency with Actors - Pat Eyler</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Reactor_pattern">Reactor Pattern - Wikipedia</a></li>
  <li><a href="http://berb.github.io/diploma-thesis/original/054_actors.html#02">Actor-based Concurrency - Benjamin Erb</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Review] Working With Ruby Threads]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2016/02/16/review-working-with-ruby-threads/"/>
    <updated>2016-02-16T00:07:05-05:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2016/02/16/review-working-with-ruby-threads</id>
    <content type="html"><![CDATA[<table class="custom">
  <tbody>
    <tr>
      <td><strong>Book</strong></td>
      <td>Working With Ruby Threads</td>
    </tr>
    <tr>
      <td><strong>Author</strong></td>
      <td><a href="http://www.jstorimer.com/">Jesse Storimer</a></td>
    </tr>
    <tr>
      <td><strong>Link</strong></td>
      <td><a href="http://www.jstorimer.com/products/working-with-ruby-threads">www.jstorimer.com/products/working-with-ruby-threads</a></td>
    </tr>
  </tbody>
</table>

<ul id="markdown-toc">
  <li><a href="#concurrent--parallel">Concurrent != Parallel</a></li>
  <li><a href="#the-gil-and-mri">The GIL and MRI</a></li>
  <li><a href="#thread-execution">Thread Execution</a></li>
  <li><a href="#mutual-exclusion">Mutual Exclusion</a></li>
  <li><a href="#signaling-threads-with-condition-variables">Signaling Threads with Condition Variables</a></li>
  <li><a href="#thread-safe-data-structures">Thread-safe Data Structures</a></li>
  <li><a href="#writing-thread-safe-code">Writing Thread-safe Code</a></li>
  <li><a href="#wrap-your-threads-in-an-abstraction">Wrap Your Threads in an Abstraction</a></li>
  <li><a href="#into-the-wild">Into The Wild</a></li>
  <li><a href="#closing">Closing</a></li>
</ul>

<h2 id="concurrent--parallel">Concurrent != Parallel</h2>

<ul>
  <li>Making it execute in parallel is out of your hands. That responsibility is left to the underlying thread scheduler.</li>
  <li>Making it concurrent, you enable it to be parallelized when the underlying system allows it.</li>
</ul>

<p>Example</p>

<ol>
  <li>You could complete Project A today, then complete Project B tomorrow. (Serial)</li>
  <li>You could work on Project A for a few hours this morning, then switch to Project B for a few hours this afternoon, and then do the same thing tomorrow. Both projects will be finished at the end of the second day. (Concurrent)</li>
  <li>Your agency could hire another programmer. He could work on Project B and you could work on Project A. Both projects will be finished at the end of the first day. (Concurrent &amp;&amp; Parallel)</li>
</ol>

<h2 id="the-gil-and-mri">The GIL and MRI</h2>

<p><strong>MRI allows concurrent execution of Ruby code, but prevents parallel execution of Ruby code.</strong></p>

<p>The GIL prevents parallel execution of Ruby code, but it doesn’t prevent concurrent execution of Ruby code. Remember that concurrent code execution is possible even on a single core CPU by giving each thread a turn with the resources.</p>

<p>MRI doesn’t let a thread hog the GIL when it hits blocking IO. This is a no-brainer optimization for MRI. When a thread is blocked waiting for IO, it won’t be executing any Ruby code. Hence, when a thread is blocking on IO, it releases the GIL so another thread can execute Ruby code.</p>

<p>Example</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;open-uri&#39;</span>
</span><span class="line"><span class="mi">3</span><span class="o">.</span><span class="n">times</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span>
</span><span class="line">  <span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span><span class="line">    <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;http://zombo.com&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:value</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Thread A gets the GIL. It starts executing Ruby code. It gets down to Ruby’s Socket APIs and attempts to open a connection to zombo.com. At this point, while Thread A is waiting for its response, it releases the GIL. Now Thread B acquires the GIL and goes through the same steps.</p>

<p>Meanwhile, Thread A is still waiting for its response. Remember that the threads can execute in parallel, so long as they’re not executing Ruby code. So it’s quite possible for Thread A and Thread B to both have initiated their connections, and both be waiting for a response.</p>

<p>Under the hood, each thread is using a ppoll(2) system call to be notified when their connection attempt succeeds or fails. When the ppoll(2) call returns, the socket will have some data ready for consumption. At this point, the threads will need to execute Ruby code to process the data. So now the whole process starts over again.</p>

<p><strong>Why GIL Exists?</strong></p>

<p>MRI core developers have been calling the GIL a feature for some time now, rather than a bug. There are three reasons that the GIL exists:</p>

<ul>
  <li>To protect MRI internals from race conditions. The same issues that can happen in your Ruby code can happen in MRI’s C code. When it’s running in a multithreaded context, it will need to protect critical parts of the internals with some kind of synchronization mechanism.</li>
  <li>To facilitate the C extension API</li>
  <li>To reduce the likelihood of race conditions in your Ruby code. It’s important to note that the GIL only reduces entropy here; it can’t rule it out all together. It’s a bit like wearing fully body armour to walk down the street: it really helps if you get attacked, but most of the time it’s just confining.</li>
</ul>

<p><strong>MRI with blocking IO encourages a context switch while waiting for the thread to print to stdout</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="vi">@counter</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">
</span><span class="line"><span class="mi">5</span><span class="o">.</span><span class="n">times</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span>
</span><span class="line">  <span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span><span class="line">    <span class="n">temp</span> <span class="o">=</span> <span class="vi">@counter</span>
</span><span class="line">    <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line">    <span class="vi">@counter</span> <span class="o">=</span> <span class="n">temp</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:join</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nb">puts</span> <span class="vi">@counter</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>With no synchronization, even with a GIL, it’s possible that a context switch happens between incrementing temp and assigning it back to counter. If this is the case, it’s possible that two threads assign the same value to counter. In the end the result of this little snippet could be less than 5.</p>

<p>It’s rare to get an incorrect answer using MRI with this snippet, but almost guaranteed if you use JRuby or Rubinius. If you insert a puts in the middle of the block passed to Thread.new, then it’s very likely that MRI will produce an incorrect result. Its behaviour with blocking IO encourages a context switch while waiting for the thread to print to stdout.</p>

<p><strong>Compare to JRuby, and Rubinius</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/WWRT-multi_thread_prime_number_generation.png" alt="WWRT-multi_thread_prime_number_generation.png" /></p>

<p>GIL makes MRI run faster in single-threaded way, as no need to accquire or release locks for data structures. But also makes MRI run slower in multi-threaded way, as disabling on parellelism.</p>

<p>JRuby and Rubinius do indeed protect their internals from race conditions. But rather than wrapping a lock around the execution of all Ruby code, they protect their internal data structures with many fine-grained locks. Rubinius, for instance, replaced their GIL with about 50 fine-grained locks.</p>

<h2 id="thread-execution">Thread Execution</h2>

<p><strong>Threads in Ruby</strong></p>

<p>There’s always at least one: the main thread. The main thread has one special property that’s different from other threads. When the main thread exits, all other threads are immediately terminated and the Ruby process exits.</p>

<p>The most important concept to grasp is that threads have a shared address space. A race condition involves two threads racing to perform an operation on some shared state.</p>

<p><code>Thread#join</code></p>

<p>When one thread raises an unhandled exception, it terminates the thread where the exception was raised, but doesn’t affect other threads. Similarly, a thread that crashes from an unhandled exception won’t be noticed until another thread attempts to join it.</p>

<p><code>Thread#status</code></p>

<ul>
  <li>run: Threads currently running have this status.</li>
  <li>sleep: Threads currently sleeping, blocked waiting for a mutex, or waiting on IO, have this status.</li>
  <li>false: Threads that finished executing their block of code, or were successfully killed, have this status.</li>
  <li>nil: Threads that raised an unhandled exception have this status.</li>
  <li>aborting: Threads that are currently running, yet dying, have this status.</li>
</ul>

<p><code>Thread.stop</code></p>

<p>This method puts the current thread to sleep and tells the thread scheduler to schedule some other thread. It will remain in this sleeping state until its alternate, Thread#wakeup is invoked.</p>

<p><code>Thread.pass</code></p>

<p>It asks the thread scheduler to schedule some other thread. Since the current thread doesn’t sleep, it can’t guarantee that the thread scheduler will take the hint.</p>

<p>Avoid <code>Thread#raise</code> and <code>Thread#kill</code></p>

<p>It doesn’t properly respect ensure blocks, which can lead to nasty problems in your code.</p>

<p><strong>How Many Threads Are Too Many?</strong></p>

<p>It depends, there will be a sweet spot between utilizing available resources and context switching overhead.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/WWRT-io_bound.png" alt="WWRT-io_bound.png" />
<img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/WWRT-cpu_bound.png" alt="WWRT-cpu_bound.png" /></p>

<p>CPU-bound code is inherently bound by the rate at which the CPU can execute instructions. Creating more threads isn’t necessarily faster. On the other hand, introducing more threads improved performance in these two examples by anywhere between 100% and 600%. Finding that sweet spot is certainly worth it.</p>

<p><strong>Thread safety</strong></p>

<p>When your code isn’t thread-safe, the worst that can happen is that your underlying data becomes incorrect, yet your program continues as if it were correct.</p>

<p>The computer is unaware of thread-safety issues. The onus is on you to notice these problems and deal with them. This is one of the hardest problems when it comes to thread safety. There are no exceptions raised or alarm bells rung when the underlying data is no longer correct. Even worse, sometimes it takes a heavy load to expose a race condition like this.</p>

<p>Any concurrent modifications to the same object are not thread-safe.</p>

<h2 id="mutual-exclusion">Mutual Exclusion</h2>

<p><strong>Demo Snippet</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># This class represents an ecommerce order</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Order</span>
</span><span class="line">  <span class="kp">attr_accessor</span> <span class="ss">:amount</span><span class="p">,</span> <span class="ss">:status</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">amount</span><span class="p">,</span> <span class="n">status</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@amount</span><span class="p">,</span> <span class="vi">@status</span> <span class="o">=</span> <span class="n">amount</span><span class="p">,</span> <span class="n">status</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">pending?</span>
</span><span class="line">    <span class="n">status</span> <span class="o">==</span> <span class="s1">&#39;pending&#39;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">collect_payment</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s2">&quot;Collecting payment...&quot;</span>
</span><span class="line">    <span class="nb">self</span><span class="o">.</span><span class="n">status</span> <span class="o">=</span> <span class="s1">&#39;paid&#39;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Create a pending order for $100</span>
</span><span class="line"><span class="n">order</span> <span class="o">=</span> <span class="no">Order</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">100</span><span class="o">.</span><span class="mo">00</span><span class="p">,</span> <span class="s1">&#39;pending&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">mutex</span> <span class="o">=</span> <span class="no">Mutex</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Ask 5 threads to check the status, and collect</span>
</span><span class="line"><span class="c1"># payment if it&#39;s &#39;pending&#39;</span>
</span><span class="line"><span class="mi">5</span><span class="o">.</span><span class="n">times</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span>
</span><span class="line">  <span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span><span class="line">    <span class="n">mutex</span><span class="o">.</span><span class="n">synchronize</span> <span class="k">do</span>
</span><span class="line">      <span class="k">if</span> <span class="n">order</span><span class="o">.</span><span class="n">pending?</span>
</span><span class="line">        <span class="n">order</span><span class="o">.</span><span class="n">collect_payment</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:join</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The block of code inside of a <code>Mutex#synchronize</code> call is often called a critical section, pointing to the fact that this code accesses a shared resource and must be handled correctly.</p>

<p><strong>Memory Visibility (Volatility)</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># With this line, it&#39;s possible that another thread</span>
</span><span class="line"><span class="c1"># updated the status already and this value is stale</span>
</span><span class="line"><span class="n">status</span> <span class="o">=</span> <span class="n">order</span><span class="o">.</span><span class="n">status</span>
</span><span class="line">
</span><span class="line"><span class="c1"># With this line, it&#39;s guaranteed that this value is</span>
</span><span class="line"><span class="c1"># consistent with any changes in other threads</span>
</span><span class="line"><span class="n">status</span> <span class="o">=</span> <span class="n">mutex</span><span class="o">.</span><span class="n">synchronize</span> <span class="p">{</span> <span class="n">order</span><span class="o">.</span><span class="n">status</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The reason for this is due to low-level details. The kernel can cache in, for instance, L2 cache before it’s visible in main memory. It’s possible that after the status has been set to ‘paid,’ by one thread, another thread could still see the Order#status as ‘pending’ by reading the value from main memory before the change has propagated there.</p>

<p>The solution to this is something called a memory barrier. Mutexes are implemented with memory barriers, such that when a mutex is locked, a memory barrier provides the proper memory visibility semantics.</p>

<p>Scenarios around memory visibility are difficult to understand and reason about. That’s one reason other programming languages have defined something called a memory model, a well-defined specification describing how and when changes to memory are visible in other threads.</p>

<p>Ruby has no such specification yet, so situations like this are tricky to reason about and may even yield different results with different runtimes. That being said, <strong>mutexes carry an implicit memory barrier</strong>. So, if one thread holds a mutex to write a value, other threads can lock the same mutex to read it and they will see the correct, most recent value.</p>

<p><strong>Performance</strong></p>

<p>Mutexes inhibit parallelism. Restrict the critical section to be as small as possible, while still preserving the safety of your data.</p>

<p><strong>The dreaded deadlock</strong></p>

<p>The <code>try_lock</code> method attempts to acquire the mutex, just like the lock method. But unlike lock, try_lock will not wait if the mutex isn’t available. If another thread already owns the mutex, try_lock will return false. If it successfully acquires the mutex, try_lock will return true.</p>

<p>The downside to this approach is that another kind of issue can arise: <strong>livelocking</strong>. A livelock is similar to a deadlock in that the system is not progressing, but rather than threads stuck sleeping, they would be stuck in some loop with each other with none progressing.</p>

<p>A better solution is to define a mutex hierarchy. In other words, <strong>any time that two threads both need to acquire multiple mutexes, make sure they do it in the same order</strong>.</p>

<h2 id="signaling-threads-with-condition-variables">Signaling Threads with Condition Variables</h2>

<p>Condition variables provide an inter-thread control flow mechanism. A classic usage pattern is Producer-Consumer.</p>

<p><strong>Demo Snippet</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;thread&#39;</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;net/http&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">mutex</span>    <span class="o">=</span> <span class="no">Mutex</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="n">condvar</span>  <span class="o">=</span> <span class="no">ConditionVariable</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="n">results</span>  <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">
</span><span class="line"><span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span><span class="line">  <span class="mi">10</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class="line">    <span class="n">response</span> <span class="o">=</span> <span class="ss">Net</span><span class="p">:</span><span class="ss">:HTTP</span><span class="o">.</span><span class="n">get_response</span><span class="p">(</span><span class="s1">&#39;dynamic.xkcd.com&#39;</span><span class="p">,</span> <span class="s1">&#39;/random/comic/&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="n">random_comic_url</span> <span class="o">=</span> <span class="n">response</span><span class="o">[</span><span class="s1">&#39;Location&#39;</span><span class="o">]</span>
</span><span class="line">
</span><span class="line">    <span class="n">mutex</span><span class="o">.</span><span class="n">synchronize</span> <span class="k">do</span>
</span><span class="line">      <span class="n">results</span> <span class="o">&lt;&lt;</span> <span class="n">random_comic_url</span>
</span><span class="line">      <span class="nb">puts</span> <span class="s1">&#39;Produced result&#39;</span>
</span><span class="line">      <span class="n">condvar</span><span class="o">.</span><span class="n">signal</span> <span class="c1"># Signal the ConditionVariable</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">comics_received</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">
</span><span class="line"><span class="k">until</span> <span class="n">comics_received</span> <span class="o">&gt;=</span> <span class="mi">10</span>
</span><span class="line">  <span class="n">mutex</span><span class="o">.</span><span class="n">synchronize</span> <span class="k">do</span>
</span><span class="line">    <span class="k">while</span> <span class="n">results</span><span class="o">.</span><span class="n">empty?</span>
</span><span class="line">      <span class="n">condvar</span><span class="o">.</span><span class="n">wait</span><span class="p">(</span><span class="n">mutex</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="n">url</span> <span class="o">=</span> <span class="n">results</span><span class="o">.</span><span class="n">shift</span>
</span><span class="line">    <span class="nb">puts</span> <span class="s2">&quot;You should check out </span><span class="si">#{</span><span class="n">url</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="n">comics_received</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li><code>ConditionVariable#signal</code> will wake up exactly one thread that’s waiting on this ConditionVariable.</li>
  <li><code>ConditionVariable#broadcast</code> will wake up all threads currently waiting on this ConditionVariable.</li>
</ol>

<h2 id="thread-safe-data-structures">Thread-safe Data Structures</h2>

<p><strong>Implementing a thread-safe, blocking queue</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;thread&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">BlockingQueue</span>
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:queue</span><span class="p">,</span> <span class="ss">:mutex</span><span class="p">,</span> <span class="ss">:cv</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class="line">    <span class="vi">@queue</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">    <span class="vi">@mutex</span> <span class="o">=</span> <span class="no">Mutex</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">    <span class="vi">@cv</span>    <span class="o">=</span> <span class="no">ConditionVariable</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">push</span><span class="p">(</span><span class="n">ele</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@mutex</span><span class="o">.</span><span class="n">synchronize</span> <span class="k">do</span>
</span><span class="line">      <span class="vi">@queue</span><span class="o">.</span><span class="n">push</span> <span class="n">ele</span>
</span><span class="line">      <span class="vi">@cv</span><span class="o">.</span><span class="n">signal</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">pop</span>
</span><span class="line">    <span class="vi">@mutex</span><span class="o">.</span><span class="n">synchronize</span> <span class="k">do</span>
</span><span class="line">      <span class="k">while</span> <span class="vi">@queue</span><span class="o">.</span><span class="n">empty?</span>
</span><span class="line">        <span class="vi">@cv</span><span class="o">.</span><span class="n">wait</span><span class="p">(</span><span class="vi">@mutex</span><span class="p">)</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">
</span><span class="line">      <span class="vi">@queue</span><span class="o">.</span><span class="n">pop</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">bq</span> <span class="o">=</span> <span class="no">BlockingQueue</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">
</span><span class="line"><span class="n">bq</span><span class="o">.</span><span class="n">push</span> <span class="s1">&#39;a&#39;</span>
</span><span class="line"><span class="n">bq</span><span class="o">.</span><span class="n">push</span> <span class="s1">&#39;b&#39;</span>
</span><span class="line">
</span><span class="line"><span class="kp">loop</span> <span class="k">do</span>
</span><span class="line">  <span class="nb">puts</span> <span class="n">bq</span><span class="o">.</span><span class="n">pop</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Queue, from the standard lib</strong></p>

<p>This is the only thread-safe data structure that ships with Ruby. Queue is very useful because of its blocking behaviour. Typically, you would use a Queue to distribute workloads to multiple threads, with one thread pushing to the queue, and multiple threads popping.</p>

<p><strong>Array and Hash</strong></p>

<p>Ruby doesn’t ship with any thread-safe Array or Hash implementations. Thread-safety concerns would add overhead to their implementation, which would hurt performance for single-threaded use cases.</p>

<p>You might be thinking: “With all of the great concurrency support available to Java on the JVM, surely the JRuby Array and Hash are thread-safe?” They’re not. For the exact reason mentioned above, using a thread-safe data structure in a single-threaded context would reduce performance.</p>

<p><strong>Immutable data structures</strong></p>

<p>When you need to share objects between threads, share immutable objects. It’s very easy to pass out immutable objects to share, but if you need to have multiple threads modifying an immutable object you still need some form of synchronization.</p>

<p>Immutability is a nice guarantee to have, it’s the simplest path to thread safety when sharing objects.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;hamster/queue&#39;</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;atomic&#39;</span>
</span><span class="line">
</span><span class="line"><span class="vi">@queue_wrapper</span> <span class="o">=</span> <span class="no">Atomic</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">Hamster</span><span class="p">:</span><span class="ss">:Queue</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="mi">30</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class="line">  <span class="vi">@queue_wrapper</span><span class="o">.</span><span class="n">update</span> <span class="p">{</span> <span class="o">|</span><span class="n">queue</span><span class="o">|</span>
</span><span class="line">    <span class="n">queue</span><span class="o">.</span><span class="n">enqueue</span><span class="p">(</span><span class="nb">rand</span><span class="p">(</span><span class="mi">100</span><span class="p">))</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">consumers</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">
</span><span class="line"><span class="mi">3</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class="line">  <span class="n">consumers</span> <span class="o">&lt;&lt;</span> <span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span><span class="line">    <span class="mi">10</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class="line">      <span class="n">number</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class="line">      <span class="vi">@queue_wrapper</span><span class="o">.</span><span class="n">update</span> <span class="p">{</span> <span class="o">|</span><span class="n">queue</span><span class="o">|</span>
</span><span class="line">        <span class="n">number</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="n">head</span>
</span><span class="line">        <span class="n">queue</span><span class="o">.</span><span class="n">dequeue</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">
</span><span class="line">      <span class="nb">puts</span> <span class="s2">&quot;The cubed root of </span><span class="si">#{</span><span class="n">number</span><span class="si">}</span><span class="s2"> is </span><span class="si">#{</span><span class="no">Math</span><span class="o">.</span><span class="n">cbrt</span><span class="p">(</span><span class="n">number</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">consumers</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:join</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="writing-thread-safe-code">Writing Thread-safe Code</h2>

<p>Any guideline has exceptions, but it’s good to know when you’re breaking one, and why.</p>

<p>Idiomatic Ruby code is most often thread-safe Ruby code.</p>

<p><strong>Avoid mutating globals</strong></p>

<p>Any time there is only one shared instance (aka. singleton), it’s a global.</p>

<p>There are other things that fit this definition in Ruby:</p>

<ul>
  <li>Constants</li>
  <li>The AST</li>
  <li>Class variables/methods</li>
</ul>

<p>A slightly more nefarious example is the AST. Ruby, being such a dynamic language, allows you to change this at runtime. I don’t imagine this would be a common problem, but I saw it come up as an issue with the kaminari rubygem. Some part of the code was defining a method dynamically, then calling alias_method with that method, then removing it.</p>

<p>Again, this has to be a rare example, but it’s good to keep in mind that modifying the AST at runtime is almost always a bad idea, especially when multiple threads are involved. When I say ‘runtime’, I mean during the course of the lifecycle of the application. In other words, it’s expected that the AST will be modified at startup time, most Ruby libraries depend on this behaviour in some way. However, in the case of a Rails application, once it’s been initialized, changes to the AST shouldn’t happen at runtime, just as it’s rare to require new files in the midst of a controller action.</p>

<p><strong>Create more objects, rather than sharing one</strong></p>

<ul>
  <li>Thread-locals</li>
  <li>Connection pools</li>
</ul>

<p>A thread-local lets you define a variable that is global to the scope of the current thread. In other words, it’s a global variable that is locally scoped on a per-thread basis.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># Instead of</span>
</span><span class="line"><span class="vg">$redis</span> <span class="o">=</span> <span class="no">Redis</span><span class="o">.</span><span class="n">new</span>
</span><span class="line"><span class="c1"># use</span>
</span><span class="line"><span class="no">Thread</span><span class="o">.</span><span class="n">current</span><span class="o">[</span><span class="ss">:redis</span><span class="o">]</span> <span class="o">=</span> <span class="no">Redis</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It’s perfectly acceptable to tell users of your API that they should create one object for each thread, rather than trying to write difficult, thread-safe code that will increase your maintainenace costs.</p>

<p>This N:N connection mapping is fine for small numbers of threads, but gets out of hand when the number of threads starts to increase. For connections, a pool is often a better abstraction.</p>

<p>Resource pool still ensures that your threads aren’t sharing a single connection, but doesn’t require each thread to have its own. Implementing a connection pool is a good exercise in thread-safe programming, you’ll probably need to make use of both thread-locals and mutexes to do it safely.</p>

<p><strong>Avoid lazy loading</strong></p>

<p>A common idiom in Ruby on Rails applications is to lazily load constants at runtime, using something similar to Ruby’s <code>autoload</code>. But <code>autoload</code> in MRI is not thread-safe. It is thread-safe in recent versions of JRuby, but the best practice is simply to eager load files before spawning worker threads. This is done implicitly in Rails 4+, and can be enabled in Rails 3.x using the ` config.threadsafe!` configuration setting.</p>

<p><strong>Prefer data structures over mutexes</strong></p>

<p>Mutexes are notoriously hard to use correctly. For better or worse, you have a lot of things to decide when using a mutex.</p>

<ul>
  <li>How coarse or fine should this mutex be?</li>
  <li>Which lines of code need to be in the critical section?</li>
  <li>Is a deadlock possible here?</li>
  <li>Do I need a per-instance mutex? Or a global one?</li>
</ul>

<p>By leaning on a data structure, you remove the burden of correct synchronization from your code and depend on the semantics of the data structure to keep things consistent.</p>

<p>This only works if you choose not to share objects between threads directly. Rather than letting threads access shared objects and implementing the necessary synchronization, you pass shared objects through data structures.</p>

<p><strong>Finding bugs</strong></p>

<p>Like most bugs, if you can reproduce the issue, you can almost certainly track it down and fix it. However, some thread-safety issues may appear in production under heavy load, but can’t be reproduced locally. In this case, there’s no better solution than grokking the code.</p>

<p>Look at the code and assume that 2 threads will be accessing it simulatneously. Step through the possible scenarios. It can be helpful to jot these things down somewhere.</p>

<p><strong>Thread-safety on Rails</strong></p>

<ul>
  <li>Gem dependencies</li>
  <li>The request is the boundary. Don’t share objects between requests.</li>
</ul>

<p>A good example of this is something like a <code>User.current</code> reference.</p>

<p>If you really need a global reference, follow the guidelines from the last chapter. Try using a thread-local, or else a thread-aware object that will preserve data correctness.</p>

<p>The same heuristic is applicable to a background job processor. Each job will be handled by a separate thread. A thread may process multiple jobs in its lifetime, but a job will only be processed by a single thread in its lifecycle.</p>

<p>Again, the path to thread safety is clear: create the necessary objects that you need in the body of the job, rather than sharing any global state.</p>

<h2 id="wrap-your-threads-in-an-abstraction">Wrap Your Threads in an Abstraction</h2>

<p><strong>Single level of abstraction</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Enumerable</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">concurrent_each</span>
</span><span class="line">    <span class="n">threads</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line">    <span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">element</span><span class="o">|</span>
</span><span class="line">      <span class="n">threads</span> <span class="o">&lt;&lt;</span> <span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="k">end</span> <span class="k">yield</span> <span class="n">element</span> <span class="p">}</span>
</span><span class="line">      <span class="n">threads</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:join</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This is a simple wrapper around Enumerable#each that will spawn a thread for each element being iterated over. It wouldn’t be wise to use this code in production yet because it has no upper bound on the number of threads it will spawn.</p>

<p><strong>Actor model</strong></p>

<p>At a high level, an Actor is a long-lived ‘entity’ that communicates by sending messages.</p>

<p>In the Actor model, each Actor has an ‘address’. If you know the address of an Actor, you can send it a message. These messages go to the Actor’s mailbox, where they’re processed asynchronously when the Actor gets around to it.</p>

<p>What sets Celluloid apart is that it takes this conceptual idea of the Actor model and marries it to Ruby’s object model.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;celluloid/autostart&#39;</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;net/http&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">XKCDFetcher</span>
</span><span class="line">  <span class="kp">include</span> <span class="no">Celluloid</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">next</span>
</span><span class="line">    <span class="n">response</span> <span class="o">=</span> <span class="ss">Net</span><span class="p">:</span><span class="ss">:HTTP</span><span class="o">.</span><span class="n">get_response</span><span class="p">(</span><span class="s1">&#39;dynamic.xkcd.com&#39;</span><span class="p">,</span> <span class="s1">&#39;/random/comic/&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="n">random_comic_url</span> <span class="o">=</span> <span class="n">response</span><span class="o">[</span><span class="s1">&#39;Location&#39;</span><span class="o">]</span>
</span><span class="line">
</span><span class="line">    <span class="n">random_comic_url</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Including the Celluloid module into any Ruby class will turn instances of that class into full-fledged Celluloid actors. When you create a new actor, you immediately know its ‘address’. So long as you hold a reference to that object, you can send it messages. In Celluloid, sending messages to an actor equates to calling methods on an object.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># this spawns a new thread containing a Celluloid actor</span>
</span><span class="line"><span class="n">fetcher</span> <span class="o">=</span> <span class="no">XKCDFetcher</span><span class="o">.</span><span class="n">new</span>
</span><span class="line">
</span><span class="line"><span class="c1"># these behave like regular method calls</span>
</span><span class="line"><span class="n">fetcher</span><span class="o">.</span><span class="n">object_id</span>
</span><span class="line"><span class="n">fetcher</span><span class="o">.</span><span class="n">inspect</span>
</span><span class="line">
</span><span class="line"><span class="c1"># this will fire the `next` method without</span>
</span><span class="line"><span class="c1"># waiting for its result</span>
</span><span class="line"><span class="n">fetcher</span><span class="o">.</span><span class="n">async</span><span class="o">.</span><span class="n">next</span>
</span><span class="line"><span class="n">fetcher</span><span class="o">.</span><span class="n">async</span><span class="o">.</span><span class="n">next</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Celluloid kicks off that method asynchronously and returns you a Celluloid::Future object.</span>
</span><span class="line"><span class="n">futures</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class="line"><span class="mi">10</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class="line">  <span class="n">futures</span> <span class="o">&lt;&lt;</span> <span class="n">fetcher</span><span class="o">.</span><span class="n">future</span><span class="o">.</span><span class="n">next</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Calling #value on that future object will block until the value has been computed.</span>
</span><span class="line"><span class="n">futures</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">future</span><span class="o">|</span>
</span><span class="line">  <span class="nb">puts</span> <span class="s2">&quot;You should check out </span><span class="si">#{</span><span class="n">future</span><span class="o">.</span><span class="n">value</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="into-the-wild">Into The Wild</h2>

<p><strong>How Sidekiq Uses Celluloid</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/WWRT-how_sidekiq_uses_celluloid.png" alt="WWRT-how_sidekiq_uses_celluloid.png" /></p>

<p>The most obvious difference I see between the Sidekiq codebase and a more traditional Ruby codebase is the lack of dependence upon return values.</p>

<p><strong>Puma’s Thread Pool Implementation</strong></p>

<p>At Puma’s multi-threaded core is a thread pool implementation. Once initialized, the pool is responsible for receiving work and feeding it to an available worker thread. The ThreadPool also has an auto-trimming feature, whereby the number of active threads is kept to a minimum, but more threads can be spawned during times of high load. Afterwards, the thread pool would be trimmed down to the minimum again.</p>

<h2 id="closing">Closing</h2>

<p>The safest path to concurrency: (from JRuby wiki)</p>

<ol>
  <li>Don’t do it.</li>
  <li>If you must do it, don’t share data across threads.</li>
  <li>If you must share data across threads, don’t share mutable data.</li>
  <li>If you must share mutable data across threads, synchronize access to that data.</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[辞职半年记]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2016/02/05/ci-zhi-ban-nian-ji/"/>
    <updated>2016-02-05T02:10:31-05:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2016/02/05/ci-zhi-ban-nian-ji</id>
    <content type="html"><![CDATA[<blockquote>
  <p>2012年7月19日，在友盟入职。
2015年7月20日，辞职回家。</p>
</blockquote>

<p>今天，2016年2月5日，第199天。半年时间，转瞬即逝。每过一个月，自己都会写篇很长的日记作为回顾。今天，把这些拼凑在一起，作为这半年的辞职后记。</p>

<h3 id="section">工作</h3>

<p>上半年答应了家里亲戚的外包工作，八月份开始着手准备。本来以为一两个月可以搞定，结果直到昨天才算全部完成，俨然成了我整个假期的噩梦。这是自己第一次从头到尾完成一个相对复杂成熟的 Web 产品，回首整个过程全是血泪。从前知道的那些所谓道理，这次全部切身体会。</p>

<p>对需求、对时间的错误预估。因为抱着帮别人、无论如何要把事情完成好的态度，没有对最开始的需求有细致的分析。拿着客户给的文档，以为就是全部。对着大框预估时间，抱着『两个月后肯定能干完』的傻逼心理，结果每次面对一块新功能，都能看到一棵苍天大树从文档拔地而起，枝繁叶茂搞得我焦头烂额。延期，不断地延期，耽误了自己太多计划，到最终完成花了我 124 个工作日，以及数不清多少焦虑的时光。年少无知， simple naive。临近尾声，我又浏览了一遍最初的文档，好像幽默故事，只是眼中带泪。</p>

<p>整体时间的错误安排。之前有读到过，如果计划半年的软件开发周期，那比较合理的时间安排为三个月确定需求，一个月系统设计，一个月开发编码，一个月测试上线。而我在需求尚不完善明确的情况下，手痒开始编码。结果不断了解，不断改进，不断明确需求，不断推倒重写。粗略预估，我多花了一倍的时间和心思在不必要的代码上。毫不谦虚的说，我写了一手屎代码。</p>

<p>沟通的困难。怎么跟客户有效沟通，从他们支离破碎的描述中找到产品的需求点？如何建立一套有效的反馈机制，让客户和自己的时间互不打扰又保证沟通顺畅？如何有效地表达情绪，而不是带着情绪表达？我在一步步摸索，但始终找不到 best practice。对于本来内向的我，好多时候我选择用多付出来代替少沟通，多么错误的做法，我已深有体会。</p>

<p>有债必还，但是我们该怎么去定义债？有些时候，在设计和编码的过程，脑中闪过一种边界情况，因为不在需求之中，就把它暂且放下。但是需求的不断变化，或者说我们对需求不断有新的认识，这种边界情况又会蹦出来亟待解决。那么问题回到最初，要不要将这种情况一并解决？我暂时认可的答案是，不解决，满足当下的需求即可，但要为需求变动做『适当』的预留。我们都知道过度优化是万恶之源，但是过度与适当也仅仅一念之差。可能只是留下 placeholder，一个 NotImplementError 即可让未来不那么狼狈，但是面对相对根基的设计层面的问题，又该为未来做多少保留呢？</p>

<p>还有些问题，我也一直抱有怀疑。</p>

<p>是否需要让客户付出一定的认知来了解系统设计？努力做到傻瓜化操作，Don’t let them think，还是对基础的设计做简单的讲解，让客户面对特殊情况自行灵活解决。</p>

<p>最终完成的产品要对客户需求支持到什么程度？客户往往想要的是 elixer，一个万能的产品，既符合他们原本的思路，又能解决所有问题。而现实往往是，我们定下条条框框来保证流程、数据的准确，但总会出现特殊情况。当最终交付产品时，到底该对特殊情况做多大程度的支持？并且，我越发认识到一个残酷的事实，从时间的角度看，只需花费 20% 的时间就能完成 80% 的标准功能，而 80% 的时间都被用去应对那些碾压一切的特殊处理。</p>

<p>回首整个工作过程，面对不断的延期，推迟原有的其他计划，让我面对很大的压力。每隔一段时间都会不由自主的焦虑，陷入深深的恐慌。好不容易得到一段假期，结果只是从一个坑跳到另一个坑。说好的 Gap Year 自己出去走一圈，结果被圈在了自己家里。朋友都以为我逍遥自在，放了大假，只有我自己深知这其中的苦涩。时间紧迫不停歇，这是我最大的难过。如何克制不让自己计算时间成本，如何蒙骗自己以期望在低收效的工作中也能得到些许经验，如何让自己保持积极态度，纵使心里再急行动也不能着急，只能点滴去做，过好每天然后默默等待。这一碗碗傻逼鸡汤，熬啊熬，我干的痛快。</p>

<p>本来假期开始，对自己最大的期望是能够利用好时间多看些技术书籍，为自己积累一些量变。让工作带动自己的状态，留下空余时间多看书学习。但是，超出预期的工作时间，在十二月彻底爆发，忙绿、焦虑，让我彻底淹没在工作中。没能在技术上有所突破让我懊悔不已。整个半年的时间，粗略估计只有 1/5 的时间花在了技术学习上。认真看了《Operating Systems Three Easy Pieces》，《HTTP - The Definitive Guide》，以及几个 Udacity 上的 Web 课程。标记了一堆想看的书籍课程，但也只能接受这最终差强人意的完成度。</p>

<p><strong>总结与反思</strong></p>

<p>如果非要总结这个过程自己得到什么宝贵经验，那除了上面的思考，在时间的催促下，我需要不断反思工作过程，想方设法提高工作效率。十二月初的时候，看到知乎这篇<a href="http://www.zhihu.com/question/37167038">你的每日私人成长暗器是什么？</a>，连同自己的个人实践，制定了一份个人计划。</p>

<blockquote>
  <p>每日计划（GTD）</p>
</blockquote>

<ul>
  <li>每天开始时，指定任务列表；结束时，审阅已完成事项，延期未完成工作</li>
  <li>完成度的标准，不在于清空任务列表，而在于是否达到工作时长</li>
</ul>

<p>从前我经常面对这样的情况，睡前整理任务列表，看着一两条刺眼的未完成计划，伴着无奈与失望睡去。我确信，这是让我不快乐的重要因素。但是我慢慢认识到，如果努力还是完不成计划，多数情况只是对计划的错误预估。已然尽力去做了，就不必埋怨自己。起初我也怀疑，这是不是在降低标准企图原谅自己。我的结论是，不。这是对自己能力的正确认识，保持好的心态去完成更多的事情。所以，我现在将任务的完成度标准定义为，是否达到预定的工作时长。如果保持高效的完成了工作时间，但最终还是剩下一两条刺眼的未完成计划，我会责无旁贷把它们推迟到明天，然后给自己一个肯定的鼓励。</p>

<blockquote>
  <p>习惯养成</p>
</blockquote>

<p>习惯列表要融入到每天的时间安排中，日积月累</p>

<ul>
  <li>坚持写日记做总结</li>
  <li>一周 4-5 次健身</li>
  <li>每天 1 点前睡觉</li>
  <li>坚持读书 1h</li>
</ul>

<blockquote>
  <p>时间安排（工作日）</p>
</blockquote>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/weekday_calender.png" alt="weekday_calendar" /></p>

<p>汇总</p>

<ul>
  <li>睡眠 8.5 h，预留 1 h 缓冲（翻手机，睡不着等）</li>
  <li>每天三餐固定时间 1 h</li>
  <li>三段工作时间，每段 2.5 h。注意要保证工作专注度，使用番茄工作法。</li>
  <li>健身时间 2 h</li>
  <li>自由时间 3h</li>
</ul>

<p>时间的调配上，<em>尽量</em>按照时间表。如有特殊情况（提前使用自由时间等），可自行调配，保证时间完成度即可。</p>

<blockquote>
  <p>时间安排（周末）</p>
</blockquote>

<p>不严格按照工作日的时间安排，但需要保证</p>

<ul>
  <li>就某个 topic 总结一篇 evernote，积累一定程度完成 blog</li>
  <li>清空邮件列表</li>
</ul>

<blockquote>
  <p>工具</p>
</blockquote>

<p>善用工具辅助自己追踪记录工作状况：</p>

<ol>
  <li>Omnifocus，GTD 任务列表。这个 App 灵活到基本可以满足任何自定义需求。我自己的工作流程是，保持两个窗口 Inbox 和 Project。Inbox 作为 quick entry 等待归结整理到某个 Project。整体上通过 Due Date 来做时间把控。</li>
  <li>Focus，时间记录，让自己做一名快乐的树农。这个 App 因为时间可变，不用教条的遵循番茄工作法，远离手机是拒绝一切诱惑的开始。另外，记录工作时间对我的意义相对更大。起初我以为一整天随时都在工作，但是精确计算才发现，净时间只有四到五个小时。不断反思工作过程、合理安排时间，慢慢，巅峰时候可以把自己推到每天九到十个小时。清楚知道时间都去了哪，才能想办法做出提高。</li>
</ol>

<h3 id="section-1">旅行</h3>

<p>带爸妈去泰国玩了一圈是这假期最骄傲的事情。辞职前就想安排这样一次旅行，九月份终于成行。我要自私的承认，整个过程自己不是最快乐的，前期的准备，出去每天的安排，好多时候不想面对麻烦就只能多花钱，但是这个过程也单单不是为自己的。我不会记得哪里的景色特别漂亮，只是老妈时不时洋溢幸福表情，老爸回来后开始每天学习英语，让我盼望着下一次的开始。</p>

<p>半年的时间，去了一次上海，和大学女友重归于好；去了一次北京，在占东和小鸡家熟悉的排骨和鸡翅（俨然成了地陪标配）；去了一次沈阳两次长春，跟每年只能过年见面的好友，在某个平常的周末相聚，这感觉太好。</p>

<p>本来说好的青岛、厦门、重庆因为工作未能成行，希望年后还有机会。</p>

<h3 id="section-2">生活</h3>

<p>这两年最常思考的一个问题就是如何做到坚持。某种程度，我把坚持当作通往成功的万能钥匙。任何事情，唯有坚持是最难一关，也唯有坚持才是最踏实办法。自从看完《习惯的力量》，我愿意相信习惯养成是坚持最有效的手段，我也愿意把习惯当做一种投资，在时间撒下种子，静候它生根发芽。</p>

<p>假期开始，给自己定下一些关于习惯的目标。回过头来，这些达成的习惯也成了我这半年最大的收获。</p>

<ul>
  <li>睡前日记。因为手里握有大把时间，很怕在松懈与不自知中让时间悄然流逝。虽然好多日子只是记了些水账，但重要的是能让自己停下来回想这一天发生了什么，接下去要做什么。这是我坚持最好的习惯，一天没有落下，所以我清楚知道今天是回家第199天。</li>
  <li>健身，总共完成了91天。这个过程相对艰辛，总会被各种事情打断，例如心情、天气、午饭吃撑等等。说到底，还是惰性。从开始看书学习，根据自身指定计划，到不断亲身试验总结反思，这是一个不断改进的历程，自己也总结出一些经验：所有可考虑因素中都基于最重要一点，得去。战胜自己比技巧重要。了解并承认自己的惰性，才能指定更现实的计划。整个过程最难的是开始，和隔一段时间后重新捡起。连续的去和不去都很容易带出惯性。最好的健身房不是器械好暖和可以洗澡，而是人少。瓶颈很快会来，短期内努力基本看不到效果。承认慢功夫，让时间检验。饮食可以控制，但拒绝阶段性饮食改变，要找到长期可依赖的饮食方式。肌肉有个觉醒的过程，需要一定积累才能找到正确的发力。最美好的一天总在不经意间出现，杠铃多加两片重量，熬出变化便不再痛苦。我刚刚走到这一步，健身房今天开始关门了，一个礼拜后才开，麻痹。</li>
  <li>早睡早起。从大学开始到上班三年，作息基本保持在凌晨两点到早上十点。回家后将目标定在一点前睡，后来逐步调整为十二点半，嗯，伟大的一小步。慢慢发现，因为晚睡可以晚起，某种程度便失去早睡的动力。所以，最近一个多月已将起床时间锁死在八点。要让自己承担晚睡的后果，想到第二天起来后神情疲惫、睡眼惺忪，那十一点半就必须结束工作，十二点看了一半的美剧也必须关掉，十二点半只能停止刷手机。在睡前享受疲惫、犒劳自己是一天的美好时光，残忍地结束这一切才是最难的。逐步，我已经把每天的高效时间挪到了上午，制定一天计划，思考相对困难的问题，剩下的只是去做就好。</li>
</ul>

<p>在这个过程使用了一些 App 作为辅助，在此推荐：</p>

<ol>
  <li>Day One - 日记，稍微有点贵。开始时候在哪写根本不重要，只有当确定自己会一直这么记下去后，这个 App 才是值得的。</li>
  <li>Productive - 签到，习惯养成，统计完成度</li>
  <li>Sleep Better - 追踪睡眠质量</li>
</ol>

<h3 id="section-3">尾声</h3>

<p>我不确定这半年的休假时间是否值得，足够有意义。可能错过了一些好的工作机会，我也懊悔自己没能看足够的书籍让自己的技术有所长进，一些预定计划也在变化中没能实现。但不管怎样，我确信自己是在努力让这个过程变得值得，有意义。对于过往的发生，我没办法改变，只能抱着积极的心态，用心总结，然后面对，想方设法把之后做好。过年的时间是一段终结，Github 的 Streak 也在今天断掉，我要乐于接受这段空白的休息。之后怎样我还在思考，但不断努力，不断改进，让自己变好才是最终的希望。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Review] Concurrency - Operating Systems Three Easy Pieces]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2015/12/25/review-concurrency-operating-systems-three-easy-pieces/"/>
    <updated>2015-12-25T22:33:57-05:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2015/12/25/review-concurrency-operating-systems-three-easy-pieces</id>
    <content type="html"><![CDATA[<table class="custom">
  <tbody>
    <tr>
      <td><strong>Book</strong></td>
      <td>Operating Systems: Three Easy Pieces</td>
    </tr>
    <tr>
      <td><strong>Author</strong></td>
      <td><a href="http://www.cs.wisc.edu/~remzi">Remzi H. Arpaci-Dusseau</a> and <a href="http://www.cs.wisc.edu/~dusseau">Andrea C. Arpaci-Dusseau</a></td>
    </tr>
    <tr>
      <td><strong>Link</strong></td>
      <td><a href="http://pages.cs.wisc.edu/~remzi/OSTEP/">pages.cs.wisc.edu/~remzi/OSTEP</a></td>
    </tr>
  </tbody>
</table>

<ul id="markdown-toc">
  <li><a href="#concurrency">Concurrency</a>    <ul>
      <li><a href="#chapter-26---introduction">Chapter 26 - Introduction</a></li>
      <li><a href="#chapter-27---interlude-thread-api">Chapter 27 - Interlude: Thread API</a></li>
      <li><a href="#chapter-28---locks">Chapter 28 - Locks</a></li>
      <li><a href="#chapter-29---lock-based-concurrent-data-structures">Chapter 29 - Lock-based Concurrent Data Structures</a></li>
      <li><a href="#chapter-30---condition-variables">Chapter 30 - Condition Variables</a></li>
      <li><a href="#chapter-31---semaphores">Chapter 31 - Semaphores</a></li>
      <li><a href="#chapter-32---common-concurrency-problems">Chapter 32 - Common Concurrency Problems</a></li>
      <li><a href="#chapter-33---event-based-concurrency-advanced">Chapter 33 - Event-based Concurrency (Advanced)</a></li>
    </ul>
  </li>
</ul>

<h1 id="concurrency">Concurrency</h1>

<h2 id="chapter-26---introduction">Chapter 26 - Introduction</h2>

<p><strong>Background</strong></p>

<p>With time sharing, we can take a single physical CPU and turn it into multiple virtual CPUs, thus enabling the illusion of multiple programs running at the same time, through time sharing.</p>

<p>With paging (base and bounds, segmentation), we can create the illusion of a large, private virtual memory for each process; this abstraction of the address space enables each program to behave as if it has its own memory when indeed the OS is secretly multiplexing address spaces across physical memory (and sometimes, disk).</p>

<p>But the abstraction of running program we use along is the process, and it’s a classic view of a single point of execution within a program. Now we introduce a new abstraction, thread. And  a <strong>multi-threaded</strong> program has more than one point of execution.</p>

<p>Perhaps another way to think of this is that each thread is very much like a separate process, except for one difference: they share the same address space and thus ca access the same data.</p>

<p><strong>Thread vs. Process</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-thread_vs_process.png" alt="os-thread_vs_process.png" /></p>

<p>Address space</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-thread_address_space.png" alt="os-thread_address_space.png" /></p>

<p><strong>Advantage</strong></p>

<p>Efficiency, as they share the same address space.</p>

<ul>
  <li>Save storage</li>
  <li>Easy context switching (no need to change page)</li>
</ul>

<p><strong>Issues</strong></p>

<ul>
  <li><strong>Sharing data</strong>, that of accessing shared variables and the need to support atomicity for critical sections.</li>
  <li><strong>Waiting for another</strong>, sleeping and waking interaction, where one thread must wait for another to complete some action before it continues.</li>
</ul>

<p><strong>Shared Data</strong></p>

<p>The heart of the problem is <strong>uncontrolled scheduling</strong>.</p>

<p>It is a wonderful and hard problem, and should make your mind hurt (a bit). If it doesn’t, then you don’t understand! Keep working until your head hurts; you then know you’re headed in the right directinn.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-thread_sharing_data.png" alt="os-thread_sharing_data.png" /></p>

<p><strong>Key Concurrency Terms</strong> (from Edsger Dijkstra)</p>

<p>A <strong>critical section</strong> is a piece of code that accesses a shared resource, usually a variable or data structure.</p>

<p>A <strong>race condition</strong> arises if multiple threads of execution enter the critical section at roughly the same time; both attempt to update the shared data structure, leading to a surprising (and perhaps un- desirable) outcome. The results depend on the timing execution of the code.</p>

<p>An <strong>indeterminate</strong> program consists of one or more races onditions; the output of the program varies from run to run, depending on which threads ran when. The outcome is thus not deterministic, something we usually expect from computer systems.</p>

<p>To avoid these problems, threads should use some kind of <strong>mutual exclusion primitives</strong>; doing so guarantees that only a single thread ever enters a critical section, thus avoiding racoes, and resulting in deterministic program outputs.</p>

<p><strong>Atomic</strong></p>

<p>Atomic operations are one of the most powerful underlying techniques in building computer systems.</p>

<p>The idea behind making a series of actions <strong>atomic</strong> is simply expressed with the phrase “all or nothing”; it should either appear as if all of the actions you wish to group together occurred, or that none of them occurred, with no in-between state visible. Sometimes, the grouping of many actions into a single atomic action is called a <strong>transaction</strong>.</p>

<p>In our theme of exploring concurrency, we’ll be using synchronization primitives to turn short sequences of instructions into atomic blocks of execution.</p>

<p><strong>The Wish For Atomicity</strong></p>

<p>Hardware guarantees the instructions is atomic, and provide a general set we call <strong>synchronisation primitives</strong> to ensure atomicity.</p>

<p>Hardware guarantees that the instructions execute atomically. It could not be interrupted mid-instruction, because that is precisely the guarantee we receive from the hardware: when an interrupt occurs, either the instruction has not run at all, or it has run to completion; there is no in-between state.</p>

<p>But, would we really want the hardware to support an “atomic update of B-tree” instruction?</p>

<p>No. Thus, what we will instead do is ask the hardware for a few useful instructions upon which we can build a general set of what we call <strong>synchronization primitives</strong>. By using these hardware synchronization primitives, in combination with some help from the operating system, we will be able to build multi-threaded code that accesses critical sections in a synchronized and controlled manner, and thus reliably produces the correct result despite the challenging nature of concurrent execution.</p>

<p><strong>Why in OS Class?</strong></p>

<p>“History” is the one-word answer; the OS was the first concurrent program, and many techniques were created for use within the OS. Later, with multi-threaded processes, application programmers also had to consider such things.</p>

<p>OS designers, from the very beginning of the introduction of the interrupt, had to worry about how the OS updates internal structures. Not surprisingly, page tables, process lists, file system structures, and virtually every kernel data structure has to be carefully accessed, with the proper synchronization primitives, to work correctly.</p>

<h2 id="chapter-27---interlude-thread-api">Chapter 27 - Interlude: Thread API</h2>

<p><strong>Guidelines</strong></p>

<p>There are a number of small but important things to remember when you use the POSIX thread library.</p>

<ul>
  <li><strong>Keep it simple</strong>. Above all else, any code to lock or signal between threads should be as simple as possible. Tricky thread interactions lead to bugs.</li>
  <li>Minimize thread interactions. Try to keep the number of ways in which threads interact to a minimum.</li>
  <li><strong>Each thread has its own stack</strong>. If you have a locally-allocated variable inside of some function a thread is exe- cuting, it is essentially private to that thread; no other thread can (easily) access it. To share data between threads, the values must be in the heap or otherwise some locale that is globally accessible.</li>
  <li><strong>Be careful with how you pass arguments to, and return values from, threads.</strong> In particular, any time you are passing a reference to a variable allocated on the stack, you are probably doing something wrong.</li>
  <li><strong>Check your return codes.</strong> Of course, in any C and UNIX program- ming you do, you should be checking each and every return code, and it’s true here as well.</li>
  <li><strong>Always use condition variables to signal between threads.</strong> While it is often tempting to use a simple flag, don’t do it.</li>
  <li><strong>Initialize locks and condition variables.</strong> Failure to do so will lead to code that sometimes works and sometimes fails in very strange ways.</li>
  <li><strong>Use the manual pages.</strong> On Linux, in particular, the pthread man pages (man -k pthread) are highly informative and discuss much of the nuances pre- sented here, often in even more detail.</li>
</ul>

<p><strong>Thread Creation</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#include &lt;pthread.h&gt;</span>
</span><span class="line"><span class="kt">int</span> <span class="nf">pthread_create</span><span class="p">(</span><span class="n">pthread_t</span> <span class="o">*</span> <span class="kr">thread</span><span class="p">,</span>
</span><span class="line">                     <span class="k">const</span> <span class="n">pthread_attr_t</span> <span class="o">*</span>  <span class="n">attr</span><span class="p">,</span>
</span><span class="line">                     <span class="kt">void</span> <span class="o">*</span> <span class="p">(</span><span class="o">*</span><span class="n">start_routine</span><span class="p">)(</span><span class="kt">void</span><span class="o">*</span><span class="p">),</span>
</span><span class="line">                     <span class="kt">void</span> <span class="o">*</span>  <span class="n">arg</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li><code>thread</code>, is a pointer to a structure of type pthread t; we’ll use this structure to interact with this thread</li>
  <li><code>attr</code>, is used to specify any attributes this thread might have. Some examples include setting the stack size or perhaps in- formation about the scheduling priority of the thread.</li>
  <li>The third argument is the most complex, but is really just asking: which function should this thread start running in? In C, we call this a function pointer, and this one tells us the following is expected: a function name (<code>start routine</code>), which is passed a single argument of type void * (as indicated in the parentheses after start routine), and which returns a value of type void * (i.e., a void pointer).</li>
  <li><code>arg</code>, is exactly the argument to be passed to the function where the thread begins execution.</li>
</ul>

<p><strong><em>Why do we need these void pointers?</em></strong></p>

<p>Having a void pointer as an argument to the function start routine allows us to pass in any type of argument; having it as a return value allows the thread to return any type of result.</p>

<p><strong>Thread Completion</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span> <span class="nf">pthread_join</span><span class="p">(</span><span class="n">pthread_t</span> <span class="kr">thread</span><span class="p">,</span> <span class="kt">void</span> <span class="o">**</span><span class="n">value_ptr</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li><code>thread</code> is used to specify which thread to wait for</li>
  <li><code>value_ptr</code> is a pointer to the return value you expect to get back. Because the routine can return anything, it is defined to return a pointer to void; because the pthread join() routine changes the value of the passed in argument, you need to pass in a pointer to that value, not just the value itself.</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-thread_waiting_demo.png" alt="os-thread_waiting_demo.png" /></p>

<p>Note that one has to be extremely careful with how values are returned from a thread. In particular, never return a pointer which refers to something allocated on the thread’s call stack.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-thread_waiting_demo_wrong.png" alt="os-thread_waiting_demo_wrong.png" /></p>

<p>However, when it returns, the value is automatically deallocated (that’s why the stack is so easy to use, after all!), and thus, passing back a pointer to a now deallocated variable will lead to all sorts of bad results.</p>

<p>Not all code that is multi-threaded uses the join routine. For example, a multi-threaded web server might create a number of worker threads, and then use the main thread to accept requests and pass them to the workers, indefinitely. Such long-lived programs thus may not need to join.</p>

<p><strong>Locks</strong></p>

<p>Providing mutual exclusion to a critical section via locks.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span> <span class="nf">pthread_mutex_lock</span><span class="p">(</span><span class="n">pthread_mutex_t</span> <span class="o">*</span><span class="n">mutex</span><span class="p">);</span>
</span><span class="line"><span class="kt">int</span> <span class="nf">pthread_mutex_unlock</span><span class="p">(</span><span class="n">pthread_mutex_t</span> <span class="o">*</span><span class="n">mutex</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>When you have a region of code you realize is a critical section, and thus needs to be pro- tected by locks in order to operate as desired.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">pthread_mutex_t</span> <span class="n">lock</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="n">Pthread_mutex_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="n">Pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">);</span>
</span><span class="line"><span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// or whatever your critical section is</span>
</span><span class="line"><span class="n">Pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">olock</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Always check for failure</span>
</span><span class="line"><span class="kt">void</span> <span class="nf">Pthread_mutex_init</span><span class="p">(</span><span class="n">pthread_mutex_t</span> <span class="o">*</span><span class="n">mutex</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">rc</span> <span class="o">=</span> <span class="n">pthread_mutex_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span> <span class="c1">// dynamic initialisation, or PTHREAD_MUTEX_INITIALIZER</span>
</span><span class="line">    <span class="n">assert</span><span class="p">(</span><span class="n">rc</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span> <span class="c1">// always check success!</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="kt">void</span> <span class="nf">Pthread_mutex_lock</span><span class="p">(</span><span class="n">pthread_mutex_t</span> <span class="o">*</span><span class="n">mutex</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">rc</span> <span class="o">=</span> <span class="n">pthread_mutex_lock</span><span class="p">(</span><span class="n">mutex</span><span class="p">);</span>
</span><span class="line">    <span class="n">assert</span><span class="p">(</span><span class="n">rc</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="kt">void</span> <span class="nf">Pthread_mutex_unlock</span><span class="p">(</span><span class="n">pthread_mutex_t</span> <span class="o">*</span><span class="n">mutex</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">rc</span> <span class="o">=</span> <span class="n">pthread_mutex_unlock</span><span class="p">(</span><span class="n">mutex</span><span class="p">);</span>
</span><span class="line">    <span class="n">assert</span><span class="p">(</span><span class="n">rc</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>Condition Variables</strong></p>

<p>Condition variables are useful when some kind of signaling must take place between threads, if one thread is waiting for another to do something before it can continue.</p>

<p>To use a condition variable, one has to in addition have a lock that is associated with this condition. When calling either of the above routines, this lock should be held.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span> <span class="nf">pthread_cond_wait</span><span class="p">(</span><span class="n">pthread_cond_t</span> <span class="o">*</span><span class="n">cond</span><span class="p">,</span> <span class="n">pthread_mutex_t</span> <span class="o">*</span><span class="n">mutex</span><span class="p">);</span>
</span><span class="line"><span class="kt">int</span> <span class="nf">pthread_cond_signal</span><span class="p">(</span><span class="n">pthread_cond_t</span> <span class="o">*</span><span class="n">cond</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>pthread_cond_wait(), puts the calling thread to sleep, ad thus waits for some other thread to signal it, usually when something in the program has changed that the now-sleeping thread might care about.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">pthread_mutex_t</span> <span class="n">lock</span> <span class="o">=</span> <span class="n">PTHREAD_MUTEX_INITIALIZER</span><span class="p">;</span>
</span><span class="line"><span class="n">pthread_cond_t</span>  <span class="n">cond</span> <span class="o">=</span> <span class="n">PTHREAD_COND_INITIALIZER</span><span class="p">;</span>
</span><span class="line"><span class="n">Pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">);</span>
</span><span class="line"><span class="k">while</span> <span class="p">(</span><span class="n">ready</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class="line">    <span class="n">Pthread_cond_wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cond</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">lock</span><span class="p">);</span>
</span><span class="line"><span class="n">Pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>After initialization of the relevant lock and condition, a thread checks to see if the variable ready has yet been set to something other than zero. If not, the thread simply calls the wait routine in order to sleep until some other thread wakes it.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">Pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">);</span>
</span><span class="line"><span class="n">ready</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="n">Pthread_cond_signal</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cond</span><span class="p">);</span>
</span><span class="line"><span class="n">Pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Notice 1</p>

<p>When signaling (as well as when modifying the global variable ready), we always make sure to have the lock held. This ensures that we don’t accidentally introduce a race condition into our code.</p>

<p>Notice 2</p>

<p>Notice that the wait call takes a lock as its second parameter, whereas the signal call only takes a condition. The reason for this difference is that the wait call, in addition to putting the calling thread to sleep, releases the lock when putting said caller to sleep.</p>

<p>Imagine if it did not: how could the other thread acquire the lock and signal it to wake up? However, before returning after being woken, the pthread_cond_wait() re-acquires the lock, thus ensuring that any time the waiting thread is running between the lock acquire at the beginning of the wait sequence, and the lock release at the end, it holds the lock.</p>

<p>Notice 3</p>

<p>The waiting thread re-checks the condition in a while loop, instead of a simple if statement. Although it rechecks the condition (perhaps adding a little overhead), there are some pthread implementations that could spuriously wake up a waiting thread; in such a case, without rechecking, the waiting thread will continue thinking that the condition has changed even though it has not.</p>

<p>Notice 4</p>

<p>Don’t ever use these ad hoc synchronisations.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="c1">// waitingnwhile (ready == 0)</span>
</span><span class="line">    <span class="p">;</span> <span class="c1">// spin</span>
</span><span class="line">
</span><span class="line"><span class="c1">// signaling</span>
</span><span class="line"><span class="n">ready</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>First, it performs poorly in many cases (spinning for a long time just wastes CPU cycles). Second, it is error prone.</p>

<p><strong>Others</strong></p>

<p>On the link line, you must also explicitly link with the pthreads library, by adding the -pthread flag.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">prompt&gt; gcc -o main main.c -Wall -pthread
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="chapter-28---locks">Chapter 28 - Locks</h2>

<p><strong>The Basic Idea</strong></p>

<p>Programmers annotate source code with locks, putting them around critical sections, and thus ensure that any such critical section executes as if it were a single atomic instruction.</p>

<p>This lock variable (or just “lock” for short) holds the state of the lock at any instant in time. It is either available (or unlocked or free) and thus no thread holds the lock, or acquired (or locked or held), and thus exactly one thread holds the lock and presumably is in a critical section.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-lock_demo.png" alt="os-lock_demo.png" /></p>

<p>In general, we view thre
ads as entities created by the programmer but scheduled by the OS, in any fashion that the OS chooses. Locks yield some of that control back to the programmer; by putting a lock around a section of code, the programmer can guarantee that no more than a single thread can ever be active within that code.</p>

<p>The name that the <strong>POSIX</strong> library uses for a lock is a <strong>mutex</strong>, as it is used to provide <strong>mutual exclusion</strong> between threads.</p>

<p><strong>Building A Lock</strong></p>

<p>Some hardware support (in the form of a more powerful instruction) plus some operating system support (e.g., in the form of park() and unpark() primitives on Solaris, or futex on Linux).</p>

<p><strong>Evaluating Locks</strong></p>

<ul>
  <li>The first is whether the lock does its basic task, which is to provide <strong>mutual exclusion</strong>. Basically, does the lock work, preventing multiple threads from entering a critical section?</li>
  <li>The second is <strong>fairness</strong>. Does each thread contending for the lock get a fair shot at acquiring it once it is free?</li>
  <li>The final criterion is <strong>performance</strong>, specifically the time overheads added by using the lock.</li>
</ul>

<p><strong>Controlling Interrupts</strong></p>

<p>Turning off interrupts is only used in limited contexts as a mutual-exclusion primitive. For example, in some cases an operating system itself will use interrupt masking to guarantee atomicity when accessing its own data structures, or at least to prevent certain messy interrupt handling situations from arising. This usage makes sense, as the trust issue disappears inside the OS, which always trusts itself to perform privileged operations anyhow.</p>

<p><strong>Plain Solution</strong></p>

<p>Without hardware support, just use a flag.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-lock_plain_solution.png" alt="os-lock_plain_solution.png" /></p>

<p>The core issue is that the testing and setting part can be interrupted by context switch, and both thread enters the critical section.</p>

<p>You should get used to this thinking about concurrent programming. Maybe pretend yourself as a <strong>malicious scheduler</strong> to understand the concurrent execution.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-lock_no_mutal_exclusion.png" alt="os-lock_no_mutal_exclusion.png" /></p>

<p><strong>Test And Set (Atomic Exchange)</strong></p>

<p>Let hardware provides a transaction-like instrument to ensure the sequence of operations is performed <strong>atomically</strong>.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-lock_test_and_set.png" alt="os-lock_test_and_set.png" /></p>

<p>The key, of course, is that this sequence of operations is performed atomically. The reason it is called “test and set” is that it enables you to “test” the old value (which is what is returned) while simultaneously “setting” the memory location to a new value; as it turns out, this slightly more powerful instruction is enough to build a simple spin lock</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-lock_spin_lock_by_test_and_set.png" alt="os-lock_spin_lock_by_test_and_set.png" /></p>

<p>By making both the test (of the old lock value) and set (of the new value) a single atomic operation, we ensure that only one thread acquires the lock.</p>

<p><strong>Compare-And-Swap</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-lock_compare_and_swap.png" alt="os-lock_compare_and_swap.png" />
<img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-lock_spin_lock_by_compare_and_swap.png" alt="os-lock_spin_lock_by_compare_and_swap.png" /></p>

<p>compare-and-swap is a more powerful instruction than test-and-set. We will make some use of this power in the future when we briefly delve into <strong>wait-free synchronisation</strong>.</p>

<p><strong>Load-Linked and Store-Conditional</strong></p>

<p>Some platforms provide a pair of instructions that work in concert to help build critical sections. On the MIPS architecture, for example, the load-linked and store-conditional instructions can be used in tandem to build locks and other concurrent structures.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-lock_load_linked_store_conditional.png" alt="os-lock_load_linked_store_conditional.png" />
<img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-lock_spin_lock_by_load_linked_store_conditional.png" alt="os-lock_spin_lock_by_load_linked_store_conditional.png" /></p>

<p><strong>Fetch-And-Add</strong></p>

<p>Fetch-and-add atomically increments a value while returning the old value at a particular address.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-lock_fetch_and_add.png" alt="os-lock_fetch_and_add.png" /></p>

<p>Fetch-and-add could build a <em>ticket lock</em>, this solution uses a ticket and turn variable in combination to build a lock. The basic operation is pretty simple: when a thread wishes to acquire a lock, it first does an atomic fetch-and-add on the ticket value; that value is now considered this thread’s “turn” (myturn). The globally shared lock-&gt;turn is then used to determine which thread’s turn it is; when (myturn == turn) for a given thread, it is that thread’s turn to enter the critical section. It has the advantage of the fairness, ensures progress for all threads. Once a thread is assigned its ticket value, it will be scheduled at some point in the future</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-lock_ticket_lock_by_fetch_and_add.png" alt="os-lock_ticket_lock_by_fetch_and_add.png" /></p>

<p><strong>Spin Lock</strong></p>

<p>We use a while loop to endlessly check the value of a flag, this technique is known as <strong>spin-waiting</strong>. Spin-waiting wastes time waiting for another thread to release a lock. The waste is exceptionally high on a uniprocessor, where the thread that the waiter is waiting for cannot even run (at least, until a context switch occurs)!</p>

<p><strong>Spin lock</strong> is the simplest type of lock to build, and simply spins, using CPU cycles, until the lock becomes available. To work correctly on a single processor, it requires a <strong>preemptive scheduler</strong>. (Remember that SJF is non-preemptive, but STCF is preemptive, which means permitting one thread to be interrupted).</p>

<p>Evaluating</p>

<ul>
  <li>√ correctness, the spin lock only allows a single thread to enter the critical section at a time.</li>
  <li>X fairness, spin locks don’t provide any fairness guarantees. Indeed, a thread spinning may spin forever, under contention. Spin locks are not fair and may lead to starvation.</li>
  <li>X performance, bad in the single CPU case. The problem gets worse with N threads contending for a lock; N − 1 time slices may be wasted in a similar manner, simply spinning and waiting for a single thread to release the lock.</li>
</ul>

<p><strong>Avoid Spinning by Yield</strong></p>

<blockquote>
  <p>“just yield, baby!”</p>
</blockquote>

<p>Hardware support alone cannot solve the problem. We’ll need OS support too! Assume an operating system primitive <strong>yield()</strong> which a thread can call when it wants to give up the CPU and let another thread run. A thread can be in one of three states (running, ready, or blocked); yield is simply a system call that moves the caller from the <strong>running</strong> state to the <strong>ready</strong> state, and thus promotes another thread to running. Thus, the yielding process essentially <strong>deschedules</strong> itself.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-lock_with_test_and_set_and_yield.png" alt="os-lock_with_test_and_set_and_yield.png" /></p>

<p>This approach eliminates the spinning time, but still costly when context switching. And we have not tackled the starvation problem at all. A thread may get caught in an endless yield loop while other threads repeatedly enter and exit the critical section.</p>

<p><strong>Avoid Spnning by Queues</strong></p>

<p>The scheduler determines which thread runs next; if the scheduler makes a bad choice, a thread runs that must either spin waiting for the lock (our first approach), or yield the CPU immediately (our second approach). Either way, there is potential for waste and no prevention of starvation.</p>

<p>Thus, we must explicitly exert some control over who gets to acquire the lock next after the current holder releases it.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-lock_with_test_and_set_and_yield_and_queue.png" alt="os-lock_with_test_and_set_and_yield_and_queue.png" /></p>

<p>This approach thus doesn’t avoid spin-waiting entirely; a thread might be interrupted while acquiring or releasing the lock, and thus cause other threads to spin-wait for this one to run again. However, the time spent spinning is quite limited (just a few instructions inside the lock and unlock code, instead of the user-defined critical section), and thus this approach may be reasonable.</p>

<p>With just the wrong timing, a thread will be about to park, assuming that it should sleep until the lock is no longer held. A switch at that time to another thread (say, a thread holding the lock) could lead to trouble, for example, if that thread then released the lock. The subsequent park by the first thread would then sleep forever (potentially). This problem is sometimes called the <strong>wakeup/waiting race</strong>.</p>

<p>Solaris solves this problem by adding a third system call: <strong>setpark()</strong>. By calling this routine, a thread can indicate it is about to park. If it then happens t be interrupted and another thread calls unpark before park is actually called, the subsequent park returns immediately instead of sleeping.</p>

<p>You might also notice the interesting fact that the flag does not get set back to 0 when another thread gets woken up. Why is this? Well, it is not an error, but rather a necessity! When a thread is woken up, it will be as if it is returning from park(); however, it does not hold the guard at that point in the code and thus cannot even try to set the flag to 1. Thus, we just pass the lock directly from the thread releasing the lock to the next thread acquiring it; flag is not set to 0 in-between.</p>

<p><strong>Linux Support</strong></p>

<p>Linux provides something called a <strong>futex</strong> which is similar to the Solaris interface but provides a bit more in-kernel functionality. Specifically, each futex has associated with it a specific physical memory location; associated with each such memory location is an in-kernel queue.</p>

<ul>
  <li><code>futex_wait(address, expected)</code> puts the calling thread to sleep, assouming the value at address is equal to expected. If it is not equal, the call returns immediately.</li>
  <li><code>futex_wake(address)</code> wakes one thread that is wait- ing on the queue.</li>
</ul>

<p>Linux approach has the flavor of an old approach that has been used on and off for years, , and is now referred to as a <strong>two-phase lock</strong>. A two-phase lock realizes that spinning can be useful, particularly if the lock is about to be released. So in the first phase, the lock spins for a while, hoping that it can acquire the lock. However, if the lock is not acquired during the first spin phase, a second phase is entered, where the caller is put to sleep, and only woken up when the lock becomes free later.</p>

<h2 id="chapter-29---lock-based-concurrent-data-structures">Chapter 29 - Lock-based Concurrent Data Structures</h2>

<p><strong>Background</strong></p>

<p>Adding locks to a data structure to make it usable by threads makes the structure <strong>thread safe</strong>. There is always a standard method to make a concurrent data structure: add a big lock. But sometimes we need to ensure the scalability.</p>

<p>To evaluate the concurrent data structures, theres are two factors to concern:</p>

<ul>
  <li>Correctness</li>
  <li>Performance. MORE CONCURRENCY ISN’T NECESSARILY FASTER. If the scheme you design adds a lot of overhead (for example, by acquiring and releasing locks frequently, instead of once), the fact that it is more concurrent may not be important. Build both alternatives (simple but less concurrent, and complex but more concurrent) and measure how they do.</li>
</ul>

<p>Ideally, you’d like to see the threads complete just as quickly on multiple processors as the single thread does on one. Achieving this end is called <strong>perfect scaling</strong>.</p>

<p><strong>Guidelines</strong></p>

<ul>
  <li>Be careful with acquisition and release of locks around control flow changes</li>
  <li>Enabling more concurrency does not necessarily increase performance</li>
  <li>Performance problems should only be remedied once they exist, avoiding premature optimization, is central to any performance-minded developer</li>
  <li>There is no value in making something faster if doing so will not improve the overall performance of the application.</li>
</ul>

<p><strong>Concurrent Counters</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-lock_performance_concurrent_counters.png" alt="os-lock_performance_concurrent_counters.png" /></p>

<p>Traditional Counter</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-lock_traditional_counter.png" alt="os-lock_traditional_counter.png" /></p>

<p>In this manner, it is similar to a data structure built with <strong>monitors</strong>, where locks are acquired and released automatically as you call and return from object methods.</p>

<p>The performance of the synchronized counter scales poorly.</p>

<p>Sloppy Counter</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-lock_sloppy_counter.png" alt="os-lock_sloppy_counter.png" /></p>

<p>The sloppy counter works by representing a single logical counter via numerous local physical counters, one per CPU core, as well as a single global counter.
When a thread running on a given core wishes to increment the counter, it increments its local counter; access to this local counter is synchronized via the corresponding local lock.
How often this local-to-global transfer occurs is determined by a threshold, which we call S here (for sloppiness). The smaller S is, the more the counter behaves like the non-scalable counter above; the bigger S is, the more scalable the counter, but the further off the global value might be from the actual count.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-lock_sloppy_counter_scaling.png" alt="os-lock_sloppy_counter_scaling.png" /></p>

<p><strong>Concurrent Linked Lists</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-lock_concurrent_link_list.png" alt="os-lock_concurrent_link_list.png" /></p>

<p>One small tricky issue arises if malloc() happens to fail (a rare case); in this case, the code must also release the lock before failing the insert. This kind of exceptional control flow has been shown to be quite error prone; a recent study of Linux kernel patches found that a huge fraction of bugs (nearly 40%) are found on such rarely-taken code paths.</p>

<p>BE WARY OF LOCKS AND CONTROL FLOW</p>

<p>Many functions will begin by acquiring a lock, allocating some memory, or doing other similar stateful operations, when errors arise, the code has to undo all of the state before returning, which is error-prone. Thus, it is best to structure code to minimize this pattern.</p>

<p>Specifically, we can rearrange the code a bit so that the lock and release only surround the actual critical section in the insert code, and that a common exit path is used in the lookup code.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-lock_concurrent_link_list_optimized.png" alt="os-lock_concurrent_link_list_optimized.png" /></p>

<p>Once again we are in a situation where it does not scale particularly well. One technique that researchers have explored to enable more concurrency within a list is something called <strong>hand-over-hand locking</strong> (a.k.a. <strong>lock coupling</strong>).</p>

<p>Instead of having a single lock for the entire list, you instead add a lock per node of the list. When traversing the list, the code first grabs the next node’s lock and then releases the current node’s lock.</p>

<p>It enables a high degree of concurrency in list operations. However, in practice, it is hard to make such a structure faster than the simple single lock approach, as the overheads of acquiring and releasing locks for each node of a list traversal is prohibitive. Perhaps some kind of hybrid (where you grab a new lock every so many nodes) would be worth investigating.</p>

<p><strong>Concurrent Queues</strong></p>

<p>Look at a slightly more concurrent queue designed by Michael and Scott.</p>

<p>There are two locks, one for the head of the queue, and one for the tail. The goal of these two locks is to enable concurrency of enqueue and dequeue operations. One trick used by the Michael and Scott is to add a dummy node (allocated in the queue initialization code); this dummy enables the separation of head and tail operations.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-lock_concurrent_queue.png" alt="os-lock_concurrent_queue.png" /></p>

<p><strong>Concurrent Hash Table</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-lock_concurrent_hash_table.png" alt="os-lock_concurrent_hash_table.png" /></p>

<p>This concurrent hash table is straightforward, is built using the concurrent lists we developed earlier, and works incredibly well. The reason for its good performance is that instead of having a single lock for the entire structure, it uses a lock per hash bucket.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-lock_scaling_hash_table.png" alt="os-lock_scaling_hash_table.png" /></p>

<p>AVOID PREMATURE OPTIMIZATION (KNUTH’S LAW)</p>

<blockquote>
  <p>“Premature optimization is the root of all evil.”</p>
</blockquote>

<p>Many operating systems utilized a single lock when first transitioning to multiprocessors, including Sun OS and Linux. In the latter, this lock even had a name, the <strong>big kernel lock (BKL)</strong>. When multi-CPU systems became the norm, only allowing a single active thread in the kernel at a time became a performance bottleneck. Thus, it was finally time to add the optimization of improved concurrency to these systems. Within Linux, the more straightforward approach was taken: replace one lock with many. Within Sun, a more radical decision was made: build a brand new operating system, known as Solaris, that incorporates concurrency more fundamentally from day one.</p>

<h2 id="chapter-30---condition-variables">Chapter 30 - Condition Variables</h2>

<p><strong>Background</strong></p>

<p>There are many cases where a thread wishes to check whether a condition is true before continuing its execution. For example, a parent thread might wish to check whether a child thread has completed before continuing (this is often called a <code>join()</code>).</p>

<p>In multi-threaded programs, it is often useful for a thread to wait for some conditio to become true before proceeding. The simple approach, of just spinning until the condition becomes true, is grossly inefficient and wastes CPU cycles, and in some cases, can be incorrect.</p>

<p><strong>Definition and Routines</strong></p>

<p>To wait for a condition to become true, a thread can make use of what is known as a condition variable. A <strong>condition variable</strong> is an explicit queue that threads can put themselves on when some state of execution (i.e., some condition) is not as desired (by <strong>waiting</strong> on the condition); some other thread, when it changes said state, can then wake one (or more) of those waiting threads and thus allow them to continue (by <strong>signaling</strong> on the condition).</p>

<p>By allowing threads to sleep when some program state is not as desired, CVs enable us to neatly solve a number of important synchronization problems, including the famous (and still important) producer/consumer problem, as well as covering conditions.</p>

<p>A condition variable has two operations associated with it: <strong>wait()</strong> and <strong>signal()</strong>.</p>

<ul>
  <li>The <strong>wait()</strong> call is executed when a thread wishes to put itself to sleep</li>
  <li>The <strong>signal()</strong> call is executed when a thread has changed something in the program and thus wants to wake a sleeping thread waiting on this condition.</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-cv_waiting_demo.png" alt="os-cv_waiting_demo.png" /></p>

<p><strong><em>Is the state variable <code>done</code> necessary?</em></strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-cv_waiting_demo_2.png" alt="os-cv_waiting_demo_2.png" /></p>

<p>Yes. Imagine the case where the child runs immediately and calls thr exit() immediately; in this case, the child will signal, but there is no thread asleep on the condition. When the parent runs, it will simply call wait and be stuck; no thread will ever wake it. From this example, you should appreciate the importance of the state variable done; it records the value the threads are interested in knowing. The sleeping, waking, and locking all are built around it.</p>

<p><strong><em>Is there a need to hold the lock while singaling?</em></strong></p>

<p>Although it is strictly not necessary in all cases, it is likely simplest and best to hold the lock while signaling when using condition variables. The generalization of this tip is correct: hold the lock when calling signal or wait, and you will always be in good shape.</p>

<p><strong>Producer/Consumer (Bounded Buffer)</strong></p>

<p>The producer/consumer problem, or sometimes as the bounded buffer problem, which was first posed by Dijkstra. Indeed, it was this very producer/consumer problem that led Dijkstra and his co-workers to invent the generalized <strong>semaphore</strong> (which can be used as either a lock or a condition variable).</p>

<p>A bounded buffer is also used when you pipe the output of one program into another, e.g.,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">// grep process is the producer
</span><span class="line">// wc process is the consumer
</span><span class="line">// between them is an in-kernel bounded buffer
</span><span class="line">grep foo file.txt | wc -l
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Basic operations: <code>put()</code> and <code>get()</code></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-cv_put_and_get_v1.png" alt="os-cv_put_and_get_v1.png" /></p>

<p><strong>Plain Solution</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-cv_producer_and_consumer_v1.png" alt="os-cv_producer_and_consumer_v1.png" /></p>

<p><strong>Single CV and If</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-cv_producer_and_consumer_single_cv_and_if.png" alt="os-cv_producer_and_consumer_single_cv_and_if.png" /></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-cv_producer_and_consumer_single_cv_and_if_trace.png" alt="os-cv_producer_and_consumer_single_cv_and_if_trace.png" /></p>

<p><strong>Single CV and While</strong></p>

<p>Signaling a thread only wakes them up; it is thus a hint that the state of the world has changed (in this case, that a value has been placed in the buffer), but there is no guarantee that when the woken thread runs, the state will still be as desired. This interpretation of what a signal means is often referred to as <strong>Mesa semantics</strong>, after the first research that built a condition variable in such a manner. Virtually every system ever built employs Mesa semantincs.</p>

<p>Thanks to Mesa semantics, a simple rule to remember with condition variables is to <strong>always use while loops</strong>.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-cv_producer_and_consumer_single_cv_and_while.png" alt="os-cv_producer_and_consumer_single_cv_and_while.png" /></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-cv_producer_and_consumer_single_cv_and_while_trace.png" alt="os-cv_producer_and_consumer_single_cv_and_while_trace.png" /></p>

<p><strong>Two CVs and While</strong></p>

<p>Signaling is clearly needed, but must be more directed. <strong>A consumer should not wake other consumers, only producers</strong>, and vice-versa.</p>

<p>Use two condition variables, instead of one, in order to properly signal which type of thread should wake up when the state of the system changes. Producer threads wait on the condition empty, and signals fill. Conversely, consumer threads wait on fill and signal empty.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-cv_producer_and_consumer_single_two_cv_and_while.png" alt="os-cv_producer_and_consumer_single_two_cv_and_while.png" /></p>

<p><strong>Final Solution</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-cv_producer_and_consumer_final_solution.png" alt="os-cv_producer_and_consumer_final_solution.png" /></p>

<p><strong>Covering Conditions</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-cv_producer_and_consumer_covering_conditions.png" alt="os-cv_producer_and_consumer_covering_conditions.png" /></p>

<p>Assume there are zero bytes free; thread Ta calls <code>allocate(100)</code>, followed by thread Tb which asks for less memory by calling <code>allocate(10)</code>. Both Ta and Tb thus wait on the condition and go to sleep; there aren’t enough free bytes to satisfy either of these requests. At that point, assume a third thread, Tc, calls <code>free(50)</code>. Unfortunately, when it calls signal to wake a waiting thread, it might not wake the correct waiting thread, Tb, which is waiting for only 10 bytes to be freed; Ta should remain waiting, as not enough memory is yet free. Thus, the code in the figure does not work, as the thread waking other threads does not know which thread (or threads) to wake up.</p>

<p>The solution suggested by Lampson and Redell is straightforward: replace the <code>pthread_cond_signal()</code> call in the code above with a call to <code>pthread_cond_broadcast()</code>, which wakes up all waiting threads. Those threads will simply wake up, re-check the condition, and then go immediately back to sleep.</p>

<p>Lampson and Redell call such a condition a <strong>covering condition</strong>, as it covers all the cases where a thread needs to wake up (conservatively); the cost, is that too many threads might be woken.</p>

<p>In general, if you find that your program only works when you change your signals to broadcasts (but you don’t think it should need to), you probably have a bug; fix it! But in cases like the memory allocator above, broadcast may be the most straightforward solution available.</p>

<h2 id="chapter-31---semaphores">Chapter 31 - Semaphores</h2>

<p><strong>Background</strong></p>

<p>As we know now, one needs both locks and condition variables to solve a broad range of relevant and interesting concurrency problems. One of the first people to realize this years ago was Edsger Dijkstra. Dijkstra and colleagues invented the semaphore as a single primitive for all things related to synchronization; as you will see, one can use semaphores as both locks and condition variables.</p>

<p><strong>Definition</strong></p>

<p>A semaphore is an object with an integer value that we can manipulate with two routines; in the POSIX standard, these routines are sem <code>wait()</code> and sem <code>post()</code>. The initial value of the semaphore determines its behaviour.</p>

<p>Semaphores are a powerful and flexible primitive for writing concurrent programs. Some programmers use them exclusively, shunning locks and condition variables, due to their simplicity and utility.</p>

<p>In my view, semaphore is an primitive, which can be made by locks and condition variables, also can’t be used as locks and condition variables.</p>

<p>Initialization</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-semaphore_init.png" alt="os-semaphore_init.png" /></p>

<p>Usage
<img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-semaphore_definition.png" alt="os-semaphore_definition.png" /></p>

<ul>
  <li><code>sem_wait()</code> will either return right away (because the value of the semaphore was one or higher when we called <code>sem_wait()</code>), or it will cause the caller to suspend execution waiting for a subsequent post.</li>
  <li><code>sem_post()</code> does not wait for some particular condition to hold like <code>sem_wait()</code> does. Rather, it simply increments the value of the semaphore and then, if there is a thread waiting to be woken, wakes one of them up.</li>
  <li>The value of the semaphore, when negative, is equal to the number of waiting threads</li>
</ul>

<p><strong>Semaphores As Locks</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-semaphore_as_locks.png" alt="os-semaphore_as_locks.png" /></p>

<p>Because locks only have two states (held and not held), this usage is sometimes known as a <strong>binary semaphore</strong>.</p>

<p><strong>Semaphores As Condition Variables</strong></p>

<p>Semaphores are also useful when a thread wants to halt its progress waiting for a
 condition to become true. In this pattern of usage, we often find a thread waiting for something to happen, and a different thread making that something happen and then signaling that it has happened, thus waking the waiting thread.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-semaphore_as_cv.png" alt="os-semaphore_as_cv.png" /></p>

<p><strong>Producer/Consumer (Bounded Buffer)</strong></p>

<p>Plain Solution</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-semaphore_producer_and_consumer_plain.png" alt="os-semaphore_producer_and_consumer_plain.png" /></p>

<p>The condition variable (semaphore based) controls the execution order, which can let multiple threads enter the critical section at the same time. It still needs a lock.</p>

<p>Adding Mutual Exclusion</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-semaphore_producer_and_consumer_add_mutex.png" alt="os-semaphore_producer_and_consumer_add_mutex.png" /></p>

<p>The consumer holds the mutex and is waiting for the someone to signal full. The producer could si!gnal full but is waiting for the mutex. Thus, the producer and consumer are each stuck waiting for each other: a classic deadlock.</p>

<p>To avoid the deadlock, we can simply move the mutex acquire and release to be just around the critical section. The result is a simple and working bounded buffer, a commonly-used pattern in multi-threaded programs.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-semaphore_producer_and_consumer_add_mutex_correctly.png" alt="os-semaphore_producer_and_consumer_add_mutex_correctly.png" /></p>

<p><strong>Reader-Writer Locks</strong></p>

<p>Another classic problem stems from the desire for a more flexible <strong>locking primitive</strong> that admits that different data structure accesses might require different kinds of locking.</p>

<p>Imagine a number of concurrent list operations, including inserts and simple lookups. While inserts change the state of the list (and thus a traditional critical section makes sense), lookups simply read the data structure; as long as we can guarantee that no insert is on-going, we can allow many lookups to proceed concurrently. The special type of lock we will now develop to support this type of operation is known as a <strong>reader-writer lock</strong>.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-semaphore_reader_writer_lock.png" alt="os-semaphore_reader_writer_lock.png" /></p>

<p>Once a reader has acquired a read lock, more readers will be allowed to acquire the read lock too; however, any thread that wishes to acquire the write lock will have to wait until all readers are finished; the last one to exit the critical section calls sem <code>post()</code> on “writelock” and thus enables a waiting writer to acquire the lock.</p>

<p>This approach works (as desired), but does have some negatives, especially when it comes to fairness. In particular, it would be relatively easy for readers to starve writers. It should be noted that reader-writer locks should be used with some caution. They often add more overhead (especially with more sophisticated implementations), and thus do not end up speeding up performance as compared to just using simple and fast locking primitives.</p>

<p>SIMPLE AND DUMB CAN BE BETTER (HILL’S LAW)</p>

<p>You should never underestimate the notion that the simple and dumb approach can be the best one. Always try the simple and dumb approach first.</p>

<p><strong>The Dining Philosophers</strong></p>

<p>One of the most famous concurrency problems posed, and solved, by Dijkstra, is known as the dining philosopher’s problem.</p>

<p>There are five “philosophers” sitting around a table. Between each pair of philosophers is a single fork (and thus, five total). The philosophers each have times where they think, and don’t need any forks, and times where they eat. In order to eat, a philosopher needs two forks, both the one on their left and the one on their right. The contention for these forks, and the synchronization problems that ensue, are what makes this a problem we study in concurrent programming.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-semaphore_dinning_philosophers.png" alt="os-semaphore_dinning_philosophers.png" /></p>

<p>Broken Solution</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-semaphore_dinning_philosophers_deadlock_solution.png" alt="os-semaphore_dinning_philosophers_deadlock_solution.png" /></p>

<p>The problem is deadlock. If each philosopher happens to grab the fork on their left before any philosopher can grab the fork on their right, each will be stuck holding one fork and waiting for another, forever.</p>

<p>A Solution: Breaking The Dependency</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-semaphore_dinning_philosophers_solution.png" alt="os-semaphore_dinning_philosophers_solution.png" /></p>

<p><strong>Implement Semaphores</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-semaphore_implementation.png" alt="os-semaphore_implementation.png" /></p>

<h2 id="chapter-32---common-concurrency-problems">Chapter 32 - Common Concurrency Problems</h2>

<p><strong>Background</strong></p>

<p>Lu et al has made a study, which analyzes a number of popular concurrent applications in great detail to understand what types of bugs arise in practice.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-concurrency_bugs.png" alt="os-concurrency_bugs.png" /></p>

<p><strong>Non-Deadlock Bugs</strong></p>

<ul>
  <li>Atomicity violation bugs. The desired serializability among multiple memory accesses is violated (i.e. a code region is intended to be atomic, but the atomicity is not enforced during execution). Solve by locks.</li>
  <li>Order violation bugs. The desired order between two (groups of) memory accesses is flipped (i.e., A should always be executed before B, but the order is not enforced during execution). Solve by condition variables.</li>
</ul>

<p><strong>Deadlock Bugs</strong></p>

<p>Deadlock occurs, for example, when a thread (say Thread 1) is holding a lock (L1) and waiting for another one (L2); unfortunately, the thread (Thread 2) that holds lock L2 is waiting for L1 to be released.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-concurrency_deadlock_dependency.png" alt="os-concurrency_deadlock_dependency.png" /></p>

<p><strong>Caused by</strong></p>

<p>One reason is that in large code bases, complex dependencies arise between cmponents. The design of locking strategies in large systems must be carefully done to avoid deadlock in the case of <strong>circular dependencies</strong> that may occur naturally in the code.</p>

<p>Another reason is due to the nature of <strong>encapsulation</strong>. As software developers, we are taught to hide details of implementations and thus make software easier to build in a modular way.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-concurrency_deadlock_by_encapsulation.png" alt="os-concurrency_deadlock_by_encapsulation.png" /></p>

<p><strong>Conditions for Deadlock</strong></p>

<ul>
  <li><strong>Mutual exclusion</strong>: Threads claim exclusive control of resources that they require (e.g., a thread grabs a lock).</li>
  <li><strong>Hold-and-wait</strong>: Threads hold resources allocated to them (e.g.,locks that they have already acquired) while waiting for additional resources (e.g., locks that they wish to acquire).</li>
  <li><strong>No preemption (hold)</strong>: Resources (e.g., locks) cannot be forcibly removed from threads that are holding them.</li>
  <li><strong>Circular wait (wait)</strong>: There exists a coircular chain of threads such that each thread holds one more resources (e.g., locks) that are being requested by the next thread in the chain.</li>
</ul>

<p><strong>Prevention Based on Four Conditions</strong></p>

<p>Mutual Exclusion</p>

<p>To avoid the need for mutual exclusion at all. Herlihy had the idea that one could design various data structures to be <strong>wait-free</strong>. The idea here is simple: using powerful hardware instructions, you can build data structures in a manner that does not require explicit locking.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-concurrency_deadlock_wait_free.png" alt="os-concurrency_deadlock_wait_free.png" /></p>

<p>However, this will fail if some other thread successfully swapped in a new head in the meanwhile, causing this thread to retry again with the new head.</p>

<p>Hold-and-wait</p>

<p>The hold-and-wait requirement for deadlock can be avoided by acquiring all locks at once, atomically.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-concurrency_deadlock_hold_and_wait.png" alt="os-concurrency_deadlock_hold_and_wait.png" /></p>

<p>By first grabbing the lock prevention, this code guarantees that no untimely thread switch can occur in the midst of lock acquisition and thus deadlock can once again be avoided.</p>

<p>Note that the solution is problematic for a number of reasons. As before, encapsulation works against us: when calling a routine, this approach requires us to know exactly which locks must be held and to acquire them ahead of time. This technique also is likely to decrease concurrency as all locks must be acquired early on (at once) instead of when they are truly needed.</p>

<p>No Preemption</p>

<p>Because we generally view locks as held until unlock is called, multiple lock acquisition often gets us into trouble because when waiting for one lock we are holding another. Many thread libraries provide a more flexible set of interfaces to help avoid this situation. Specifically, a <code>trylock()</code> routine will grab the lock (if it is available) or return -1 indicating that the lock is held right now and that you should try again later if you want to grab that lock.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-concurrency_deadlock_no_preemption.png" alt="os-concurrency_deadlock_no_preemption.png" /></p>

<p>One new problem does arise, however: <strong>livelock</strong>. It is possible (though perhaps unlikely) that two threads could both be repeatedly attempting this sequence and repeatedly failing to acquire both locks. In this case, both systems are running through this code sequence over and over again (and thus it is not a deadlock), but progress is not being made, hence the name lovelock. One could add a random delay before looping back and trying the entire thing over again, thus decreasing the odds of repeated interference among competing threads.</p>

<p>Another issues arises due to encapsulation: if one of these locks is buried in some routine that is getting called, the jump back to the beginning becomes more complex to implement.</p>

<p>Circular Wait</p>

<p>The best solution in practice is to be careful, develop a lock acquisition order, and thus prevent deadlock from occurring in the first place.</p>

<ul>
  <li>The most straightforward way to do that is to provide a <strong>total ordering</strong> on lock acquisition. For example, if there are only two locks in the system (L1 and L2), you can prevent deadlock by always acquiring L1 before L2. Such strict ordering ensures that no cyclical wait arises; hence, no deadlock.</li>
  <li>A <strong>partial ordering</strong> can be a useful way to structure lock acquisition so as to avoid deadlock.</li>
</ul>

<p><strong>Avoidance via Scheduling</strong></p>

<p>Instead of deadlock prevention, in some scenarios deadlock avoidance is preferable. Avoidance requires some global knowledge of which locks various threads might grab during their execution, and subsequently schedules said threads in a way as to guarantee no deadlock can occur.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-concurrency_deadlock_avoid_via_scheduling.png" alt="os-concurrency_deadlock_avoid_via_scheduling.png" /></p>

<p>Unfortunately, they are only useful in very limited environments, for example, in an embedded system where one has full knowledge of the entire set of tasks that must be run and the locks that they need. Further, such approaches can limit concurrency. Thus, avoidance of deadlock via scheduling is not a widely-used general-purpose solution</p>

<p><strong>Detect and Recover</strong></p>

<p>One final general strategy is to allow deadlocks to occasionally occur, and then take some action once such a deadlock has been detected.</p>

<p>Many database systems employ deadlock detection and recovery techniques. A deadlock detector runs periodically, building a resource graph and checking it for cycles. In the event of a cycle (deadlock), the system needs to be restarted.</p>

<p>DON’T ALWAYS DO IT PERFECTLY (TOM WEST’S LAW)</p>

<p>Tom West says famously, “Not everything worth doing is worth doing well”, which is a terrific engineering maxim. If a bad thing happens rarely, certainly one should not spend a great deal of effort to prevent it, particularly if the cost of the bad thing occurring is small.</p>

<p><strong>Others</strong></p>

<p>Perhaps the best solution is to develop new concurrent programming models: in systems such as <strong>MapReduce</strong> (from Google), programmers can describe certain types of parallel computations without any locks whatsoever.</p>

<h2 id="chapter-33---event-based-concurrency-advanced">Chapter 33 - Event-based Concurrency (Advanced)</h2>

<p><strong>Background</strong></p>

<p>A different style of concurrent programming is often used in both GUI-based applications as well as some types of internet servers. This style, known as event-based concurrency, has become popular in some modern systems, including server-side frameworks such as node.js, but its roots are found in C/UNIX systems that we’ll discuss below.</p>

<p>Event-based servers give control of scheduling to the application itself, but do so at some cost in complexity and difficulty of integration with other aspects of modern systems (e.g., paging). Because of these challenges, no single approach has emerged as best; thus, both threads and events are likely to persist as two different approaches to the same concurrency problem for many years to come.</p>

<p>The problem that event-based concurrency addresses is two-fold.</p>

<ul>
  <li>The first is that managing concurrency correctly in multi-threaded applications can be challenging.</li>
  <li>The second is that in a multi-threaded application, the developer has little or no control over what is scheduled at a given moment in time; rather, the programmer simply creates threads and then hopes that the underlying OS schedules them in a reasonable manner across available CPUs.</li>
</ul>

<p><strong>The Basic Idea: An Event Loop</strong></p>

<p>The approach is quite simple: you simply wait for something (i.e., an “event”) to occur; when it does, you check what type of  event it is and do the small amount of work it requires (which may include issuing I/O requests, or scheduling other events for future handling, etc.). That’s it!</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-event_loop.png" alt="os-event_loop.png" /></p>

<p>Importantly, when a handler processes an event, it is the only activity taking place in the system; thus, deciding which event to handle ext is equivalent to scheduling. This explicit control over scheduling is one of the fundamental advantages of the event- based approach.</p>

<p>But there is a big question: how exactly does an event-based server determine which events are taking place, in particular with regards to network and disk I/O? Specifically, how can an event server tell if a message has arrived for it?</p>

<p><strong>An Important API: select() (or poll())</strong></p>

<p>In most systems, a basic API is available, via either the <strong>select()</strong> or <strong>poll()</strong> system calls. Either way, these basic primitives give us a way to build a non-blocking event loop, which simply checks for incoming packets, reads from sockets with messages upon them, and replies as needed.</p>

<p>What these interfaces enable a program to do is simple: check whether there is any incoming I/O that should be attended to.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-event_select_api.png" alt="os-event_select_api.png" /></p>

<p>First, note that it lets you check whether descriptors can be reand from as well as written to; the former lets a server determine that a new packet has arrived and is in need of processing, whereas the latter lets the service know when it is OK to reply (i.e., the outbound queue is not full).</p>

<p>Second, note the timeout argument. One common usage here is to set the timeout to <code>NULL</code>, which causes <code>select()</code> to block indefinitely, until some descriptor is ready. However, more robust servers will usually specify some kind of timeout; one common technique is to set the timeout to zero, and thus use the call to <code>select()</code> to return immediately.</p>

<p>Now linux uses <strong>epoll</strong>, FreeBSD (Mac OS) uses <strong>kqueue</strong>, and Windows uses <strong>IOCP</strong>.</p>

<p>BLOCKING VS. NON-BLOCKING INTERFACES</p>

<ul>
  <li>Blocking (or synchronous) interfaces do all of their work before returning to the caller. The usual culprit in blocking calls is I/O of some kind.</li>
  <li>Non-blocking (or asynchronous) interfaces begin some work but return immediately, thus letting whatever work that needs to be done get done in the background. Non-blocking interfaces can be used in any style of programming (e.g., with threads), but are essential in the event-based approach, as a call that blocks will halt all progress.</li>
</ul>

<p>DON’T BLOCK IN EVENT-BASED SERVERS</p>

<p>Event-based servers enable fine-grained control over scheduling of tasks. However, to maintain such control, no call that blocks the execution the caller can ever be made; failing to obey this design tip will result in a blocked event-based server.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-event_select_code_demo.png" alt="os-event_select_code_demo.png" /></p>

<p>Advantage</p>

<p>With a single CPU and an event-based application, the problems found in concurrent programs are no longer present. Specifically, because only one event is being handled at a time, there is no need to acquire or release locks; the event-based server cannot be interrupted by another thread because it is decidedly single threaded. Thus, concurrency bugs common in threaded programs do not manifest in the basic event-based approach.</p>

<p><strong>Issue: Blocking System Calls</strong></p>

<p>For example, imagine a request comes from a client into a server to read a file from disk and return its contents to the requesting client (much like a simple HTTP request). Both the open() and read() calls may issue I/O requests to the storage system (when the needed metadata or data is not in memory already), and thus may take a long time to service.</p>

<p>With a thread-based server, this is no issue: while the thread issuing the I/O request suspends (waiting for the I/O to complete), other threads can run, thus enabling the server to make progress. Indeed, this natural <strong>overlap</strong> of I/O and other computation is what makes thread-based programming quite natural and straight-forward.</p>

<p>With an event-based approach, however, there are no other threads to run: just the main event loop. And this implies that if an event handler issues a call that blocks, the entire server will do just that: block until the call completes.</p>

<p>We thus have a rule that must be obeyed in event-based systems: no blocking calls are allowed.</p>

<p>Solution: Asynchronous I/O</p>

<p>To overcome this limit, many modern operating systems have intro- duced new ways to issue I/O requests to the disk system, referred to generically as asynchronous I/O. These interfaces enable an application to issue an I/O request and return control immediately to the caller, before the I/O has completed; additional interfaces enable an application to determine whether various I/Os have completed.</p>

<p>The APIs revolve around a basic structure, the struct aiocb or <strong>AIO control block</strong> in common terminology.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-event_aio_control_block.png" alt="os-event_aio_control_block.png" /></p>

<ul>
  <li>An application can periodically poll the system via a call to aio error() to determine whether said I/O has yet completed.</li>
  <li>Some systems provide an approach based on the interrupt. This method uses UNIX signals to inform applications when an asynchronous I/O completes, thus removing the need to repeatedly ask the system.</li>
</ul>

<p>In systems without asynchronous I/O, the pure event-based approach cannot be implemented. However, clever researchers have derived methods that work fairly well in their place. For example, Pai et al describe a hybrid approach in which events are used to process network packets, and a thread pool is used to manage outstanding I/Os.</p>

<p>UNIX SIGNALS</p>

<p>A huge and fascinating infrastructure known as <strong>signals</strong> is present in all mod ern UNIX variants. At its simplest, signals provide a way to communicate with a process. Specifically, a signal can be delivered to an application; doing so stops the application from whatever it is doing to run a <strong>signal handler</strong>, i.e., some code in the application to handle that signal. When finished, the process just resumes its previous behaviour. A program can be configured to catch that signal. Or when a signal is sent to a process not config- ured to handle that signal, some default behavior is enacted; for SEGV, the process is killed.</p>

<p><strong>Issue: State Management</strong></p>

<p>When an event handler issues an asynchronous I/O, it must package up some program state for the next event handler to use when the I/O finally completes; this additional work is not needed in thread-based programs, as the state the program needs is on the stack of the thread. Adya et al. call this work <strong>manual stack management</strong>, and it is fundamental to event-based programming.</p>

<p>Solution: Continuation</p>

<p>Use an old programming language construct known as a <strong>continuation</strong>. Though it sounds complicated, the idea is rather simple: basically, record the needed information to finish processing this event in some data structure; when the event happens (i.e., when the disk I/O completes), look up the needed information and process the event.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-event_state_management.png" alt="os-event_state_management.png" /></p>

<p>Record the socket descriptor (sd) in some kind of data structure (e.g., a hash table), indexed by the file descriptor (fd). When the disk I/O completes, the event handler would use the file descriptor to look up the continuation, which will return the value of the socket descriptor to the caller.</p>

<p><strong>What Is Still Difficult With Events</strong></p>

<p>Multiple CPUS. When systems moved from a single CPU to multiple CPUs, some of the simplicity of the event-based approach disappeared. Specifically, in order to utilize more than one CPU, the event server has to run multiple event handlers in parallel; when doing so, the usual synchronization problems (e.g., critical sections) arise, and the usual solutions (e.g., locks) must be employed. Thus, on modern multicore systems, simple event handling without locks is no longer possible.</p>

<p>Implicit blocking. It does not integrate well with certain kinds of systems activity, such as paging. For example, if an event-handler page faults, it will block, and thus the server will not make progress until the page fault completes. Even though the server has been structured to avoid explicit blocking, this type of implicit blocking due to page faults is hard to avoid and thus can lead to large performance problems when prevalent.</p>

<p>API changes all the time. That event-based code can be hard to manage over time, as the exact semantics of various routines changes]. For example, if a routine changes from non-blocking to blocking, the event handler that calls that routine must also change to accommodate its new nature, by ripping itself into two pieces. Because blocking is so disastrous for event-based servers, a programmer must always be on the lookout for such changes in the semantics of the APIs each event uses.</p>

<p>Async network I/O. Though asynchronous disk I/O is now possible on most platforms, it has taken a long time to get there, and it never quite integrates with asynchronous network I/O in as simple and uniform a manner as you might think. For example, while one would simply like to use the select() interface to manage all outstanding I/Os, usually some combination of select() for networking and the AIO calls for disk I/O are required.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Review] Website Performance Optimization]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2015/12/19/web-performance-optimization/"/>
    <updated>2015-12-19T02:21:58-05:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2015/12/19/web-performance-optimization</id>
    <content type="html"><![CDATA[<p>After several years working, I’ve learned many lessons like how to write HTML, how to minify and compress CSS and JavaScript files, where to put the CSS and JavaScript reference, how to do the cache control and etc.. But all the knowledge are scattered, and the real mechanism, like the HTML rendering, seems like a mysterious process to me. So I spent some time digging and learning, the things finally got clear.</p>

<p><strong><em>For short, what’s the basic idea of web performance optimization?</em></strong></p>

<ul>
  <li>Minimize the number of critical resources, like optimizing CSS (inline, or specify media query), and optimizing JavaScript (defer execution).</li>
  <li>Minimize the number of critical bytes, like optimizing content efficiency, minify, compress and HTTP cache control.</li>
  <li>Minimize the critical path length, like preload scanner.</li>
</ul>

<p><strong>Materials</strong></p>

<ul>
  <li><a href="https://www.udacity.com/course/website-performance-optimization--ud884">Udacity - Website Performance Optimization</a></li>
  <li><a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/?hl=en">Google Developer - Critical Rendering Path</a></li>
</ul>

<p><strong>TOC</strong></p>

<ul id="markdown-toc">
  <li><a href="#optimizing-content-efficiency">Optimizing content efficiency</a>    <ul>
      <li><a href="#eliminating-unnecessary-downloads">Eliminating unnecessary downloads</a></li>
      <li><a href="#optimizing-encoding-and-transfer-size-of-text-based-assets">Optimizing encoding and transfer size of text-based assets</a></li>
      <li><a href="#image-optimization">Image optimization</a></li>
      <li><a href="#web-font-optimization">Web font optimization</a></li>
      <li><a href="#http-caching">HTTP caching</a></li>
    </ul>
  </li>
  <li><a href="#critical-rendering-path">Critical Rendering Path</a>    <ul>
      <li><a href="#critical-rendering-path-1">Critical Rendering Path</a></li>
      <li><a href="#analysing-critical-rendering-path-performance">Analysing Critical Rendering Path Performance</a></li>
      <li><a href="#optimizing-the-critical-rendering-path">Optimizing the critical rendering path</a></li>
    </ul>
  </li>
  <li><a href="#browser-rendering-optimization">Browser Rendering Optimization</a></li>
</ul>

<h2 id="optimizing-content-efficiency">Optimizing content efficiency</h2>

<ul>
  <li>Apply content-specific optimizations first: CSS, JS, and HTML minifiers.</li>
  <li>Apply GZIP to compress the minified output.</li>
</ul>

<h3 id="eliminating-unnecessary-downloads">Eliminating unnecessary downloads</h3>

<p>The fastest and best optimized resource is a resource not sent.</p>

<ul>
  <li>Inventory all own and third party assets on your pages</li>
  <li>Measure the performance of each asset: its value and its technical performance</li>
  <li>Determine if the resources are providing sufficient value</li>
</ul>

<p>For best results you should periodically inventory and revisit these questions for each and every asset on your pages.</p>

<h3 id="optimizing-encoding-and-transfer-size-of-text-based-assets">Optimizing encoding and transfer size of text-based assets</h3>

<p><strong>Data Compression</strong></p>

<p>Compression is the process of encoding information using fewer bits. Eliminating unnecessary data always yields the best results.</p>

<p><strong>Minification: preprocessing &amp; context-specific optimizations</strong></p>

<ul>
  <li>Remove comments</li>
  <li>Remove inefficient ways of defining CSS rules</li>
  <li>Strip out all the whitespaces (tabs and spaces).</li>
</ul>

<p>We can keep the original page as our “development version” and then apply the steps above whenever we are ready to release the page on our website.</p>

<blockquote>
  <p>Case in point, the uncompressed development version of the JQuery library is now approaching ~300KB. The same library, but minified (removed comments, etc.) is about 3x smaller: ~100KB.</p>
</blockquote>

<p><strong>Text compression with GZIP</strong></p>

<p>GZIP is a generic compressor that can be applied to any stream of bytes. In practice, GZIP performs best on text-based content, often achieving compression rates of as high as 70-90% for larger files.</p>

<p>All modern browsers support and automatically negotiate GZIP compression for all HTTP requests.</p>

<p>A quick and simple way to see GZIP in action is to open Chrome DevTools and inspect the “Size / Content” column in the Network panel: “Size” indicates the transfer size of the asset, and “Content” the uncompressed size of the asset.</p>

<ul>
  <li><a href="http://www.whatsmyip.org/http-compression-test/">HTTP Compression Test</a></li>
  <li><a href="https://github.com/h5bp/server-configs-nginx">Nginx HTTP server boilerplate configs</a></li>
</ul>

<h3 id="image-optimization">Image optimization</h3>

<ul>
  <li>Prefer vector formats: vector images are resolution and scale independent, which makes them a perfect fit for the multi-device and high-resolution world.</li>
  <li>Minify and compress SVG assets: XML markup produced by most drawing applications often contains unnecessary metadata which can be removed; ensure that your servers are configured to apply GZIP compression for SVG assets.</li>
  <li>Pick best raster image format: determine your functional requirements and select the one that suits each particular asset.</li>
  <li>Experiment with optimal quality settings for raster formats: don’t be afraid to dial down the “quality” settings, the results are often very good and byte savings are significant.</li>
  <li>Remove unnecessary image metadata: many raster images contain unnecessary metadata about the asset: geo information, camera information, and so on. Use appropriate tools to strip this data.</li>
  <li>Serve scaled images: resize images on the server and ensure that the “display” size is as close as possible to the “natural” size of the image. Pay close to attention to large images in particular, as they account for largest overhead when resized!</li>
  <li>Automate, automate, automate: invest into automated tools and infrastructure that will ensure that all of your image assets are always optimized.</li>
</ul>

<p><strong>Eliminating and replacing images</strong></p>

<ul>
  <li>Eliminate unnecessary image resources</li>
  <li>Leverage CSS3 effects where possible</li>
  <li>Use web fonts instead of encoding text in images</li>
</ul>

<p><strong>Vector vs. Raster images</strong></p>

<ul>
  <li>Vector images are ideal for images that consist of geometric shapes</li>
  <li>Vector images are zoom and resolution-independent</li>
  <li>Raster images should be used for complex scenes with lots of irregular shapes and details</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/vector_vs_raster_image.png" alt="vector_vs_raster_image.png" /></p>

<ul>
  <li>Vector graphics use lines, points, and polygons to represent an image.</li>
  <li>Raster graphics represent an image by encoding the individual values of each pixel within a rectangular grid.</li>
</ul>

<p><strong>Implications of high-resolution screens</strong></p>

<ul>
  <li>High resolution screens have multiple device pixels per CSS pixel</li>
  <li>High resolution images require significantly higher number of pixels and bytes</li>
  <li>Image optimization techniques are the same regardless of resolution</li>
</ul>

<p>High resolution screens also require high-resolution images: prefer vector images whenever possible as they are resolution independent and always deliver sharp results, and if a raster image is required, deliver and optimize multiple variants of each imagewith the help of srcset and picture.</p>

<p><strong>Optimizing vector images</strong></p>

<ul>
  <li>SVG is an XML-based image format</li>
  <li>SVG files should be minified to reduce their size</li>
  <li>SVG files should be compressed with GZIP</li>
</ul>

<p>All modern browsers support Scalable Vector Graphics (SVG), which is an XML-based image format for two-dimensional graphics: we can embed the SVG markup directly on the page, or as an external resource.</p>

<p><strong>Optimizing raster images</strong></p>

<p>Image optimization boils down to two criteria: optimizing the number of bytes used to encode each image pixel, and optimizing the total number of pixels: the filesize of the image is simply the total number of pixels times the number of bytes used to encode each pixel.</p>

<ul>
  <li>A raster image is a grid of pixels</li>
  <li>Each pixel encodes color and transparency information</li>
  <li>Image compressors use a variety of techniques to reduce the number of required bits per pixel to reduce file size of the image</li>
</ul>

<p>A raster image is simply a 2-dimensional grid of individual “pixels” - e.g. a 100x100 pixel image is a sequence of 10,000 pixels. In turn, each pixel stores the “RGBA” values: (R) red channel, (G) green channel, (B) blue channel, and (A) alpha (transparency) channel.</p>

<p>Internally, the browser allocates 256 values (shades) for each channel, which translates to 8 bits per channel (2 ^ 8 = 256), and 4 bytes per pixel (4 channels x 8 bits = 32 bits = 4 bytes).</p>

<p>So, a 100 x 100px image, is 39 KB size without losing any information.</p>

<blockquote>
  <p>100 x 100px image is composed of 10,000 pixels<br />
10,000 pixels x 4 bytes = 40,000 bytes<br />
40,000 bytes / 1024 = 39 KB  </p>
</blockquote>

<p><strong>Lossless vs lossy image compression</strong></p>

<ul>
  <li>Due to how our eyes work, images are great candidates for lossy compression</li>
  <li>Image optimization is a function of lossy and lossless compression</li>
  <li>Differences in image formats are due to the difference in how and which lossy and lossless algorithms are used to optimize the image</li>
  <li>There is no single best format or “quality setting” for all images: each combination of particular compressor and image contents produce a unique output</li>
</ul>

<p>In fact, the difference between various image formats, such as GIF, PNG, JPEG, and others, is in the combination of the specific algorithms they use (or omit) when applying the lossy and lossless steps.</p>

<p><strong><em>What is the “optimal” configuration of lossy and lossless optimization?</em></strong></p>

<p>The answer depends on the image contents and your own criteria such as the tradeoff between filesize and artifacts introduced by lossy compression.</p>

<p><strong>Selecting the right image format</strong></p>

<ul>
  <li>Start by selecting the right universal format: GIF, PNG, JPEG</li>
  <li>Experiment and select the best settings for each format: quality, palette size, etc.</li>
  <li>Consider adding WebP and JPEG XR assets for modern clients</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/select_the_right_image.png" alt="select_the_right_image.png" /></p>

<ul>
  <li><strong>GIF</strong> limits the color palette to at most 256 colors, which makes it a poor choice for most images.</li>
  <li><strong>PNG</strong> does not apply any lossy compression algorithms beyond the choice of the size of the color palette. As a result, it will produce the highest quality image, but at a cost of significantly higher filesize than other formats. Use judiciously.</li>
  <li>If the image asset contains imagery composed of geometric shapes, consider converting it to a vector (<strong>SVG</strong>) format!</li>
  <li>If the image asset contains text, stop and reconsider. Text in images is not selectable, searchable, or “zoomable”. If you need to convey a custom look (for branding or other reasons), use a <strong>web font</strong> instead.</li>
  <li><strong>JPEG</strong> uses a combination of lossy and lossless optimization to reduce filesize of the image asset.</li>
  <li>Also consider adding an additional variant encoded in <strong>WebP</strong> and <strong>JPEG XR</strong>. WebP delivers a 30% filesize decrease over a comparable JPEG image.</li>
</ul>

<p><strong>Tools and parameter tuning</strong></p>

<ul>
  <li><a href="http://www.lcdf.org/gifsicle/">gifsicle</a>, create and optimize GIF images</li>
  <li><a href="http://jpegclub.org/jpegtran/">jpegqran</a>, optimize JPEG images</li>
  <li><a href="http://optipng.sourceforge.net/">optpng</a>, lossless PNG optimization</li>
  <li><a href="http://pngquant.org/">pngquant</a>, lossy PNG optimization</li>
</ul>

<p><strong>Delivering scaled image assets</strong></p>

<p>One of the simplest and most effective image optimization techniques is to ensure that we are not shipping any more pixels than needed to display the asset at its intended size in the browser. Most pages fail this test for many of their image assets: typically, they ship larger assets and rely on the browser to rescale them - which also consumes extra CPU resources - and display them at a lower resolution.</p>

<p>You should ensure that the number of unnecessary pixels is minimal, and that your large assets in particular are delivered as close as possible to their display size.</p>

<h3 id="web-font-optimization">Web font optimization</h3>

<p>Use of webfonts does not need to delay page rendering or have negative impact on other performance metrics. Well optimized use of fonts can deliver a much better overall user experience:</p>

<ul>
  <li>Audit and monitor your font use: do not use too many fonts on your pages, and for each font, minimize the number of used variants. This will assist in delivering a more consistent and a faster experience for your users.</li>
  <li>Subset your font resources: many fonts can be subset, or split into multiple unicode-ranges to deliver just the glyphs required by a particular page - this reduces the filesize and improves download speed of the resource. However, when defining the subsets be careful to optimize for font re-use - e.g. you don’t want to download a different but overlapping set of characters on each page. A good practice is to subset based on script - e.g. Latin, Cyrillic, and so on.</li>
  <li>Deliver optimized font formats to each browser: each font should be provided in WOFF2, WOFF, EOT, and TTF formats. Make sure to apply GZIP compression to EOT and TTF formats, as they are not compressed by default.</li>
  <li>Specify revalidation and optimal caching policies: fonts are static resources that are infrequently updated. Make sure that your servers provide a long-lived max-age timestamp, and a revalidation token, to allow for efficient font re-use between different pages.</li>
  <li>Use Font Loading API to optimize the Critical Rendering Path: default lazyloading behavior may result in delayed text rendering. Font Loading API allows us to override this behavior for particular fonts, and to specify custom rendering and timeout strategies for different content on the page. For older browsers that do not support the API, you can use the webfontloader JavaScript library or use the CSS inlining strategy.</li>
</ul>

<p><strong>Anatomy of a webfont</strong></p>

<p>A webfont is a collection of glyphs, and each glyph is a vector shape that describes a letter or symbol. As a result, the size of a particular font file is determined by two simple variables:</p>

<ul>
  <li>the complexity of the vector paths of each glyph</li>
  <li>the number of glyphs in a particular font</li>
</ul>

<p>Today there are four font container formats in use on the web: EOT, TTF, WOFF, and WOFF2.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/fonts.png" alt="fonts.png" /></p>

<p>Consider using <a href="http://en.wikipedia.org/wiki/Zopfli">Zopfli compression</a> for EOT, TTF, and WOFF formats. Zopfli is a zlib compatible compressor that delivers ~5% filesize reduction over gzip.</p>

<p><strong>Defining font family with @font-face</strong></p>

<p>format selection</p>

<p>A “full” webfont that includes all stylistic variants, which we may not need, plus all the glyphs, which may go unused, can easily result in a multi-megabyte download. To address this, the @font-face CSS rule is specifically designed to allow us to split the font family into a collection of resources: unicode subsets, distinct style variants, and so on.</p>

<p>The @font-face CSS at-rule allows us to define the location of a particular font resource, its style characteristics, and the Unicode codepoints for which it should be used. A combination of such @font-face declarations can be used to construct a “font family”, which the browser will use to evaluate which font resources need to be downloaded and applied to the current page.</p>

<p>Each @font-face declaration provides the name of the font family, which acts as a logical group of multiple declarations, font properties such as style, weight, and stretch, and the src descriptor that specifies a prioritized list of locations for the font resource.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/font_face_1.png" alt="font_face_1.png" /></p>

<p>The browser figures out which resources are required and will select the optimal format on our behalf.</p>

<p>Unicode-range subsetting</p>

<p>In addition to font properties such as style, weight, and stretch, the @font-face rule allows us to define a set of Unicode codepoints supported by each resource. This enables us to split a large Unicode font into smaller subsets (e.g. Latin, Cyrillic, Greek subsets) and only download the glyphs required to render the text on a particular page.</p>

<p>The use of unicode range subsets, and separate files for each stylistic variant of the font allows us to define a composite font family that is both faster and more efficient to download - the visitor will only download the variants and subsets it needs, and they are not forced to download subsets that they may never see or use on the page.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/font_face_2.png" alt="font_face_2.png" /></p>

<p>Unicode-range subsetting is particularly important for Asian languages, where the number of glyphs is much larger than in western languages and a typical ‘full’ font is often measured in megabytes, instead of tens of kilobytes!</p>

<p>There is one small gotcha with unicode-range: <a href="http://caniuse.com/#feat=font-unicode-range">not all browser support it</a>. We have to fallback to providing a single font resource that contains all necessary subsets, and hide the rest from the browser. We can use the open-source <a href="https://github.com/behdad/fonttools/blob/master/Lib/fontTools/subset.py#L16">pyftsubset</a> tool to subset and optimize your fonts.</p>

<p>Font selection and synthesis</p>

<p>Each font family is composed of multiple stylistic variants (regular, bold, italic) and multiple weights for each style, each of which, in turn, may contain very different glyph shapes - e.g. different spacing, sizing, or a different shape altogether.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/font_size.png" alt="font_size.png" /></p>

<p>All other in-between variants (indicated in gray) are automatically mapped to the closest variant by the browser. Similar logic applies to italic variants. it’s a good idea to keep the number of variants small!</p>

<p>What happens if one of our CSS rules specifies a different font weight, or sets the font-style property to italic?</p>

<ul>
  <li>If an exact font match is not available the browser will substitute the closest match.</li>
  <li>If no stylistic match is found (e.g. we did not declare any italic variants in example above), then the browser will <strong>synthesize</strong> its own font variant.</li>
</ul>

<p>For best consistency and visual results you should not rely on font synthesis. Instead, minimize the number of used font variants and specify their locations, such that the browser can download them when they are used on the page.</p>

<p><strong>Optimizing loading and rendering</strong></p>

<p>Font requests are delayed until the render tree is constructed, which can result in delayed text rendering.</p>

<p>Lazy loading of fonts carries an important hidden implication that may delay text rendering: the browser must construct the render tree, which is dependent on the DOM and CSSOM trees, before it will know which font resources it will need to render the text. As a result, font requests are delayed well after other critical resources, and the browser may be blocked from rendering text until the resource is fetched.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/font_rendering.png" alt="font_rendering.png" /></p>

<p>Font requests are dispatched once render tree indicates which font variants are needed to render the specified text on the page</p>

<p>The “race” between the first paint of page content, which can be done shortly after the render tree is built, and the request for the font resource is what creates the “blank text problem” where the browser may render page layout but omits any text.</p>

<ul>
  <li>Safari hold text rendering until the font download is complete.</li>
  <li>Chrome and Firefox hold font rendering for up to 3 seconds, after which they use a fallback font, and once the font download has finished they re-render the text once more with the downloaded font.</li>
  <li>IE immediately renders with the fallback font if the request font is not yet available, and re-renders it once the font download is complete.</li>
</ul>

<p>Optimizing font rendering with the Font Loading API</p>

<p>Font Loading API provides a scripting interface to define and manipulate CSS font faces, track their download progress, and override their default lazyload behavior.</p>

<p>If we’re certain that a particular font variant will be required, we can define it and tell the browser to initiate an immediate fetch of the font resource:</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/font_loading_api.png" alt="font_loading_api.png" /></p>

<ul>
  <li>We can hold all text rendering until the font is available.</li>
  <li>We can implement a custom timeout for each font.</li>
  <li>We can use the fallback font to unblock rendering and inject a new style that uses desired font once the font is available.</li>
</ul>

<p>Optimizing font rendering with inlining</p>

<p>To inline the font contents into a CSS stylesheet:</p>

<ul>
  <li>CSS stylesheets with matching media queries are automatically downloaded by the browser with high priority as they are required to construct the CSSOM.</li>
  <li>Inlining the font data into CSS stylesheet forces the browser to download the font with high priority and without waiting for the render tree - i.e. this acts as a manual override to the default lazyload behavior.</li>
</ul>

<p>Optimizing font reuse with HTTP Caching</p>

<p>Font resources are, typically, static resources that don’t see frequent updates. As a result, they are ideally suited for a long max-age expiry.</p>

<p>There is no need to store fonts in localStorage or via other mechanisms - each of those has their set of performance gotchas. The browser’s HTTP cache, in combination with Font Loading API or the webfontloader library, provides the best and most robust mechanism to deliver font resources to the browser.</p>

<h3 id="http-caching">HTTP caching</h3>

<p>The combination of ETag, Cache-Control, and unique URLs allows us to deliver the best of all worlds: long-lived expiry times, control over where the response can be cached, and on-demand updates.</p>

<ul>
  <li>Use consistent URLs: if you serve the same content on different URLs, then that content will be fetched and stored multiple times. Tip: note that URLs are case sensitive!</li>
  <li>Ensure the server provides a validation token (ETag): validation tokens eliminate the need to transfer the same bytes when a resource has not changed on the server.</li>
  <li>Identify which resources can be cached by intermediaries: those with responses that are identical for all users are great candidates to be cached by a CDN and other intermediaries.</li>
  <li>Determine the optimal cache lifetime for each resource: different resources may have different freshness requirements. Audit and determine the appropriate max-age for each one.</li>
  <li>Determine the best cache hierarchy for your site: the combination of resource URLs with content fingerprints, and short or no-cache lifetimes for HTML documents allows you to control how quickly updates are picked up by the client.</li>
  <li>Minimize churn: some resources are updated more frequently than others. If there is a particular part of resource (e.g. JavaScript function, or set of CSS styles) that are often updated, consider delivering that code as a separate file. Doing so allows the remainder of the content (e.g. library code that does not change very often), to be fetched from cache and minimizes the amount of downloaded content whenever an update is fetched.</li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/http_caching.png" alt="http_caching.png" /></p>

<p><strong>Validating cached responses with ETags</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/http_caching_with_ETags.png" alt="http_caching_with_ETags.png" /></p>

<ul>
  <li>Validation token is communicated by the server via the ETag HTTP header</li>
  <li>Validation token enables efficient resource update checks: no data transfer if the resource has not changed.</li>
</ul>

<p><strong>Cache-Control</strong></p>

<ul>
  <li>Each resource can define its caching policy via Cache-Control HTTP header</li>
  <li>Cache-Control directives control who can cache the response, under which conditions, and for how long</li>
</ul>

<p>Cache-Control header was defined as part of the HTTP/1.1 specification and supersedes previous headers (e.g. Expires) used to define response caching policies. All modern browsers support Cache-Control, hence that is all we will need.</p>

<p>“no-cache” indicates that the returned response cannot be used to satisfy a subsequent request to the same URL without first checking with the server if the response has changed. As a result, if a proper validation token (ETag) is present, no-cache will incur a roundtrip to validate the cached response, but can eliminate the download if the resource has not changed.</p>

<p>“no-store” is much simpler, as it simply disallows the browser and all intermediate caches to store any version of the returned response - e.g. one containing private personal or banking data.</p>

<p>If the response is marked as “public” then it can be cached, even if it has HTTP authentication associated with it, and even when the response status code isn’t normally cacheable. Most of the time, “public” isn’t necessary, because explicit caching information (like “max-age”) indicates that the response is cacheable anyway.</p>

<p>“private” responses can be cached by the browser but are typically intended for a single user and hence are not allowed to be cached by any intermediate cache - e.g. an HTML page with private user information can be cached by that user’s browser, but not by a CDN.</p>

<p>“max-age” specifies the maximum time in seconds that the fetched response is allowed to be reused for from the time of the request.</p>

<p><strong>Defining optimal Cache-Control policy</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/http_cache_control_policy.png" alt="http_cache_control_policy.png" /></p>

<p><strong>Invalidating and updating cached responses</strong></p>

<p>What if we want to update or invalidate a cached response? For example, let’s say we’ve told our visitors to cache a CSS stylesheet for up to 24 hours (max-age=86400), but our designer has just committed an update that we would like to make available to all users. How do we notify all the visitors with what is now a “stale” cached copy of our CSS to update their caches? It’s a trick question - we can’t, at least not without changing the URL of the resource.</p>

<p>Simple, we can change the URL of the resource and force the user to download the new response whenever its content changes. Typically, this is done by embedding a fingerprint of the file, or a version number, in its filename - e.g. style.x234dff.css.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/http_update_cache_by_fingerprints.png" alt="http_update_cache_by_fingerprints.png" /></p>

<p>The ability to define per-resource caching policies allows us to define “cache hierarchies” that allow us to control not only how long each is cached for, but also how quickly new versions are seen by visitor.</p>

<p>The HTML is marked with “no-cache”, which means that the browser will always revalidate the document on each request and fetch the latest version if the contents change. Also, within the HTML markup we embed fingerprints in the URLs for CSS and JavaScript assets: if the contents of those files change, then the HTML of the page will change as well and new copy of the HTML response will be downloaded.</p>

<h2 id="critical-rendering-path">Critical Rendering Path</h2>

<h3 id="critical-rendering-path-1">Critical Rendering Path</h3>

<p>Optimizing for performance is all about understanding what happens in these intermediate steps between receiving the HTML, CSS, and JavaScript bytes and the required processing to turn them into rendered pixels - that’s the critical rendering path.</p>

<p>By optimizing the critical rendering path we can significantly improve the time to first render of our pages. Further, understanding the critical rendering path will also serve as a foundation for building well performing interactive applications. It turns out, the process for processing interactive updates is the same, just done in a continuous loop and ideally at 60 frames per second!</p>

<ul>
  <li>Process HTML markup and build the <strong>DOM tree</strong>.</li>
  <li>Process CSS markup and build the <strong>CSSOM tree</strong>.</li>
  <li>Combine the DOM and CSSOM into a <strong>render tree</strong>.</li>
  <li>Run <strong>layout</strong> on the render tree to compute geometry of each node.</li>
  <li><strong>Paint</strong> the individual nodes to the screen.</li>
</ul>

<p>Optimizing the critical rendering path is the process of minimizing the total amount of time spent in steps 1 through 5 in the above sequence. Doing so enables us to render content to the screen as soon as possible and also to reduces the amount of time between screen updates after the initial render.</p>

<p><strong>DOM</strong></p>

<p>The Document Object Model (DOM) is an application programming interface (API) for valid HTML and well-formed XML documents. It defines the logical structure of documents and the way a document is accessed and manipulated.</p>

<p>from <a href="http://www.w3.org/TR/DOM-Level-2-Core/introduction.html">http://www.w3.org/TR/DOM-Level-2-Core/introduction.html</a></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/dom_construction.png" alt="dom_construction.png" /></p>

<p>Every time the browser has to process HTML markup it has to step through all of the steps above: convert bytes to characters, identify tokens, convert tokens to nodes, and build the DOM tree.</p>

<p><strong>CSSOM</strong></p>

<p>The DOM tree captures the properties and relationships of the document markup, but it does not tell us anything about how the element should look when rendered. That’s the responsibility of the CSSOM.</p>

<p>The CSS bytes are converted into characters, then to tokens and nodes, and finally are linked into a tree structure known as the “CSS Object Model”, or CSSOM for short:</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/cssom_construction.png" alt="cssom_construction.png" /></p>

<p><strong><em>Is this the complete CSSOM?</em></strong></p>

<p>No. Note that the above tree is not the complete CSSOM tree and only shows the styles we decided to
override in our stylesheet. Every browser provides a default set of styles also known as “user agent styles” – that’s what we see when we don’t provide any of our own – and our styles simply override these defaults.</p>

<p><strong><em>Why does the CSSOM have a tree structure?</em></strong></p>

<p>When computing the final set of styles for any object on the page, the browser starts with the most general rule applicable to that node (e.g. if it is a child of body element, then all body styles apply) and then recursively refines the computed styles by applying more specific rules - i.e. the rules “cascade down”.</p>

<p><strong><em>Curious to know how long the CSS processing took?</em></strong></p>

<p>Record a timeline in DevTools and look for “Recalculate Style” event: unlike DOM parsing, the timeline doesn’t show a separate “Parse CSS” entry, and instead captures parsing and CSSOM tree construction, plus the recursive calculation of computed styles under this one event.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/css_render_timeline.png" alt="css_render_timeline.png" /></p>

<p><strong><em>Why we say that CSS is render blocking?</em></strong></p>

<p>Review the rendering process, DOM and CSSOM construct the render tree, then calculate layout, and paint. So CSS is a rendering blocking resource which blocks on rendering process.</p>

<p><strong><em>Why do browsers match CSS selectors from right to left?</em></strong></p>

<p>It sounds like that it is done this way to avoid having to look at all the children of parent (which could be many) rather than all the parents of a child which must be one. Even if the DOM is deep it would only look at one node per level rather than multiple in the RTL matching. </p>

<p>from <a href="http://stackoverflow.com/questions/5797014/why-do-browsers-match-css-selectors-from-right-to-left">Why do browsers match CSS selectors from right to left?</a></p>

<p><strong>Render Blocking CSS</strong></p>

<ul>
  <li>Get it down to the client as soon and as quickly as possible to optimize the time to first render</li>
  <li>Use media types and queries to unblock rendering</li>
</ul>

<p>By default CSS is treated as a render blocking resource, which means that the browser will hold rendering of any processed content until the CSSOM is constructed. Note that “render blocking” only refers to whether the browser will have to hold the initial rendering of the page on that resource. In either case, the CSS asset is still downloaded by the browser, albeit with a lower priority for non-blocking resources (like images).</p>

<p><strong><em>How to make it non-blocking?</em></strong></p>

<p>By using media queries, our presentation can be tailored to specific use cases such as display vs. print, and also to dynamic conditions such as changes in screen orientation, resize events, and more. When declaring your stylesheet assets, pay close attention to the media type and queries, as they will have big performance impact on the critical rendering path!</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;style.css&quot;</span>    <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span><span class="nt">&gt;</span>
</span><span class="line"><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;style.css&quot;</span>    <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">media=</span><span class="s">&quot;all&quot;</span><span class="nt">&gt;</span>
</span><span class="line"><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;portrait.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">media=</span><span class="s">&quot;orientation:portrait&quot;</span><span class="nt">&gt;</span>
</span><span class="line"><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;print.css&quot;</span>    <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">media=</span><span class="s">&quot;print&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The third declaration has a dynamic media query which will be evaluated when the page is being loaded. Depending on the orientation of the device when the page is being loaded, portrait.css may or may not be render blocking.</p>

<p>The last declaration is only applied when the page is being printed, hence it is not render blocking when the page is first loaded in the browser.</p>

<p><strong>Render Tree</strong></p>

<p>The CSSOM and DOM trees are combined into a render tree, which is then used to</p>

<ul>
  <li>compute the layout of each visible element</li>
  <li>serves as an input to the paint process which renders the pixels to screen</li>
</ul>

<p>Render tree contains only the nodes required to render the page.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/render_tree_construction.png" alt="render_tree_construction.png" /></p>

<p><strong>Layout Stage</strong></p>

<p>The layout stage calculates the exact position and size within the viewport of the device.</p>

<p>The output of the layout process is a “box model” which precisely captures the exact position and size of each element within the viewport: all of the relative measures are converted to absolute pixels positions on the screen, and so on.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/layout_timeline.png" alt="layout_timeline.png" /></p>

<p><strong>Painting Stage</strong></p>

<p>Now that we know which nodes are visible, their computed styles, and geometry, we can finally pass this information to our final stage which will convert each node in the render tree to actual pixels on the screen - this step is often referred to as “painting” or “rasterizing.”</p>

<p><strong><em>Can painting happen in the meantime dom is parsing?</em></strong></p>

<p>This is a gradual process: browsers won’t wait until all HTML is parsed. Parts of the content will be parsed and displayed, while the process continues with the rest of the contents that keeps coming from the network.</p>

<p>from <a href="http://stackoverflow.com/questions/34269416/when-does-parsing-html-dom-tree-happen">pesla’s answer</a> in SO</p>

<p><strong>Image</strong></p>

<p>Not all resources are critical to deliver the fast first paint. Images do not block the initial render of the page - although, of course, we should try to make sure that we get the images painted as soon as possible also.</p>

<p>Image don’t block on domContentLoaded, but blocks “load” event.</p>

<p><strong>Javascript</strong></p>

<ul>
  <li>The location of the script in the document is significant.</li>
  <li>JavaScript can query and modify DOM and CSSOM.</li>
  <li>JavaScript execution blocks on CSSOM.</li>
  <li>JavaScript blocks DOM construction unless explicitly declared as async or defer</li>
</ul>

<p>The location of the script in the document is significant. The script is executed at the exact point where it is inserted in the document. When the HTML parser encounters a script tag, it pauses its process of constructing the DOM and yields control over to the JavaScript engine; once the JavaScript engine has finished running, the browser then picks up from where it left off and resumes the DOM construction.</p>

<p><strong><em>Why we say that JavaScript is parser blocking?</em></strong></p>

<p>It means JavaScript will block the DOM tree parsing process. And also, as it has dependency on CSSOM, so the total process is, DOM parsing blocks on JavaScript execution, and JavaScript execution blocks on CSSOM construction. That’s why we put the CSS link ref in head, and put the JavaScript link just before the close body tag.</p>

<p><strong><em>What if the browser hasn’t finished downloading and building the CSSOM when we want to run our script?</em></strong></p>

<p>The browser will delay script execution until it has finished downloading and constructing the CSSOM, and while we’re waiting, the DOM construction is also blocked!</p>

<p><strong><em>What’s the difference between inline script and external script?</em></strong></p>

<p>Javascript is the same as the CSS and images, being a resource of the HTML, which all need a process of downloading and executing.</p>

<p>The inline script has no extra downloading time, compared to external script, but has the same execution time.</p>

<p><strong><em>Where is the best place to put JavaScript?</em></strong></p>

<p>Library may place in the head, and application logic js is better placed right before closing body tag.</p>

<p>You don’t improve the total parsing time by including <code>&lt;script&gt;</code> at the end of the document. It does enhance the user experience, as the process of parsing and painting isn’t interrupted by <code>&lt;script&gt;</code> that need to be executed.</p>

<p><strong>Navigation Timing API</strong> (Measuring the Critical Rendering Path)</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/navigation_timing_api.png" alt="navigation_timing_api.png" /></p>

<ul>
  <li><em>domLoading</em>: this is the starting timestamp of the entire process, the browser is about to start parsing the first received bytes of the HTML document.</li>
  <li><em>domInteractive</em>: marks when DOM is ready.</li>
  <li><em>domContentLoaded</em>: marks the point when both the DOM is ready and there are no stylesheets that are blocking JavaScript execution - meaning we can now (potentially) construct the render tree. Typically marks when both the DOM and CSSOM are ready. The sooner the domContentLoaded event fires, the sooner other application logic can begin executing. jQuery’s $(document).ready() is hooked on domContentLoaded.</li>
  <li><em>loadEvent</em>: as a final step in every page load the browser fires an onload event which can trigger additional application logic.</li>
</ul>

<h3 id="analysing-critical-rendering-path-performance">Analysing Critical Rendering Path Performance</h3>

<ul>
  <li><strong>Critical Resource</strong>: resource that may block initial rendering of the page.</li>
  <li><strong>Critical Path Length</strong>: number of roundtrips, or the total time required to fetch all of the critical resources.</li>
  <li><strong>Critical Bytes</strong>: total amount of bytes required to get to first render of the page, which is the sum of the transfer filesizes of all critical resources. Our first example with a single HTML page contained a single critical resource (the HTML document), the critical path length was also equal to 1 network roundtrip (assuming file is small), and the total critical bytes was just the transfer size of the HTML document itself.</li>
</ul>

<p><strong>Without Javascript and CSS</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/without_js_and_css_timeline.png" alt="without_js_and_css_timeline.png" /></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/without_js_and_css_crp_diagram.png" alt="without_js_and_css_crp_diagram.png" /></p>

<ul>
  <li>1 critical resource</li>
  <li>1 roundtrip</li>
  <li>5 KB of critical bytes</li>
</ul>

<p><strong>With Only CSS</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/with_only_css_crp_diagram.png" alt="with_only_css_crp_diagram.png" /></p>

<ul>
  <li>2 critical resources</li>
  <li>2 or more roundtrips for the minimum critical path length</li>
  <li>9 KB of critical bytes</li>
</ul>

<p><strong>With JavaScript and CSS</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/with_js_and_css_timeline.png" alt="with_js_and_css_timeline.png" /></p>

<p>As Javascript blocks the DOM construction, also depends on the CSSOM, so the domContentLoaded event is blocked until the CSS file is downloaded and parsed.</p>

<p>I’m confusing on the image for a long long time! Finally, when I’m making this note, I get things through. Watch closely to the blue and red line. Blue line fires when the CSSOM has been created. And then Javascript executes, image downloads over, there fires the red line.</p>

<p>Remember, what does domContentLoaded mean? Marks the point when both the DOM is ready and there are no stylesheets that are blocking JavaScript execution - meaning we can now (potentially) construct the render tree. Typically marks when both the DOM and CSSOM are ready.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/with_js_and_css_crp_diagram.png" alt="with_js_and_css_crp_diagram.png" /></p>

<ul>
  <li>3 critical resources</li>
  <li>2 or more roundtrips for the minimum critical path length</li>
  <li>11 KB of critical bytes</li>
</ul>

<p><strong>With JavaScript (inline) and CSS</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/with_js_inline_and_css_timeline.png" alt="with_js_inline_and_css_timeline.png" /></p>

<p>Same time as the external Javascript, only without downloading process.</p>

<p><strong>With Javascript (inline) and CSS (inline)</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/with_js_inline_and_css_inline_timeline.png" alt="with_js_inline_and_css_inline_timeline.png" /></p>

<p><strong>With JavaScript (async) and CSS</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/with_js_async_and_css_timeline.png" alt="with_js_async_and_css_timeline.png" /></p>

<p>Much better! The domContentLoaded event fires shortly after the HTML is parsed: the browser knows not to block on JavaScript and since there are no other parser blocking scripts the CSSOM construction can also proceed in parallel.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/with_js_async_and_css_crp_diagram.png" alt="with_js_async_and_css_crp_diagram.png" /></p>

<ul>
  <li>2 critical resources (HTML and CSS)</li>
  <li>2 or more roundtrips for the minimum critical path length</li>
  <li>9 KB of critical bytes</li>
</ul>

<p><strong>With Javascript (async) and CSS (non-blocking)</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/with_js_async_and_css_non_block_crp_diagram.png.png" alt="with_js_async_and_css_non_block_crp_diagram.png.png" /></p>

<ul>
  <li>1 critical resource</li>
  <li>1 or more roundtrips for the minimum critical path length</li>
  <li>5 KB of critical bytes</li>
</ul>

<p>Demo and CRP diagram</p>

<p>Code from <a href="https://github.com/igrigorik/udacity-webperf/blob/master/assets/ex2-diagram.html">https://github.com/igrigorik/udacity-webperf/blob/master/assets/ex2-diagram.html</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;html&gt;</span>
</span><span class="line">  <span class="nt">&lt;head&gt;</span>
</span><span class="line">    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=device-width&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;style.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;print.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">media=</span><span class="s">&quot;print&quot;</span><span class="nt">&gt;</span>
</span><span class="line">  <span class="nt">&lt;/head&gt;</span>
</span><span class="line">  <span class="nt">&lt;body&gt;</span>
</span><span class="line">    <span class="nt">&lt;p&gt;</span>
</span><span class="line">      Hello <span class="nt">&lt;span&gt;</span>web performance<span class="nt">&lt;/span&gt;</span> students!
</span><span class="line">    <span class="nt">&lt;/p&gt;</span>
</span><span class="line">    <span class="nt">&lt;div&gt;&lt;img</span> <span class="na">src=</span><span class="s">&quot;awesome-photo.jpg&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class="line">    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;app.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line">    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;analytics.js&quot;</span> <span class="na">async</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class="line">  <span class="nt">&lt;/body&gt;</span>
</span><span class="line"><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>CRP diagram by <a href="https://discussions.udacity.com/t/quiz-crp-diagrams/16162/11?u=ifyouseewendy">connie_273453529</a></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/demo_crp_diagram_by_connie.png" alt="demo_crp_diagram_by_connie.png" /></p>

<ul>
  <li>3 critical resources</li>
  <li>total (HTML file + style.css + app.js) critical bytes</li>
  <li>2 roundtrip for the minimum critical path length</li>
</ul>

<h3 id="optimizing-the-critical-rendering-path">Optimizing the critical rendering path</h3>

<p><strong>Basic idea</strong></p>

<ul>
  <li>Minimize the number of critical resources.</li>
  <li>Minimize the number of critical bytes.</li>
  <li>Minimize the critical path length.</li>
</ul>

<p>To reduce the number of bytes we can reduce the number of resources (eliminate them or make them non-critical), and also ensure that we minimize the transfer size by compressing and optimizing each resource.</p>

<p>The fewer of these resources there are on the page, the less work the browser has to do to get content on the screen, and the less contention there is for CPU and other resources.</p>

<p>The critical path length is a function of the dependency graph between all the critical resources required by the page and their bytesize: some resource downloads can only be initiated once a previous resource has been processed, and the larger the resource the more roundtrips it will take us to download it.</p>

<p>The general sequence of steps to optimize the critical rendering path is:</p>

<ul>
  <li>Analyze and characterize your critical path: number of resources, bytes, length.</li>
  <li>Minimize number of critical resources: eliminate them, defer their download, mark them as async, etc.</li>
  <li>Optimize the order in which the remaining critical resources are loaded: you want to download all critical assets as early as possible to shorten the critical path length.</li>
  <li>Optimize the number of critical bytes to reduce the download time (number of roundtrips).</li>
</ul>

<p>The cardinal rule of web performance is, measure first, then optimize.</p>

<p><strong>Optimize JavaScript Use</strong></p>

<ul>
  <li>Prefer async JavaScript resources</li>
  <li>Defer parsing JavaScript</li>
  <li>Avoid synchronous server calls</li>
  <li>Avoid long running JavaScript</li>
</ul>

<p>Any initialization logic and functionality that is non-essential for the first render should be deferred until later. If a long initialization sequence needs to be run, consider splitting it into several stages to allow the browser to process other events in between.</p>

<p>async vs. defer</p>

<p>from <a href="http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html">async vs defer attributes</a></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/web-performance-optimization/async_vs_defer.png" alt="async_vs_defer.png" /></p>

<p><strong>Optimize CSS Use</strong></p>

<ul>
  <li>Put CSS in the document head</li>
  <li>Avoid CSS imports. CSS import (@import) directive enables one stylesheet to import rules from another stylesheet file. However, these directives should be avoided because they introduce additional roundtrips into the critical path: the imported CSS resources are discovered only after the CSS stylesheet with the @import rule itself has been received and parsed.</li>
  <li>Inline render-blocking CSS</li>
</ul>

<p><strong>The Preload Scanner</strong></p>

<p>from <a href="http://andydavies.me/blog/2013/10/22/how-the-browser-pre-loader-makes-pages-load-faster/">How the Browser Pre-loader Makes Pages Load Faster</a></p>

<p>Internet Explorer, WebKit and Mozilla all implemented pre-loaders in 2008 as a way of overcoming the low network utilisation while waiting for scripts to download and execute.</p>

<p>When the browser is blocked on a script, a second lightweight parser scans the rest of the markup looking for other resources e.g. stylesheets, scripts, images etc., that also need to be retrieved.</p>

<p>The pre-loader then starts retrieving these resources in the background with the aim that by the time the main HTML parser reaches them they may have already been downloaded and so reduce blocking later in the page.</p>

<p><strong>Others</strong></p>

<ul>
  <li><a href="http://www.stevesouders.com/blog/2009/05/18/flushing-the-document-early/">Flushing the Document Early</a></li>
  <li><a href="http://blog.cowchimp.com/chunk-scatter-http-chunked-response-analysis-tool/">Chunk Scatter, a fantastic tool for visualizing chunked HTTP responses</a></li>
  <li><a href="https://developer.chrome.com/devtools/docs/timeline">Performance profiling with the Timeline</a></li>
  <li><a href="http://www.webpagetest.org/forums/showthread.php?tid=10990">Record a Chrome dev tools timeline by webpagetest</a></li>
</ul>

<p><strong><em>Why should I profile the site on my phone?</em></strong></p>

<p>Chances are, you are developing your site on a fast laptop or a desktop machine. Mobile phones on the other hand are much more resource constrained: slower CPUs, less RAM and GPU memory, higher connection latencies, and so on. As a result, you should always try to profile and debug your site on mobile hardware to get a better and closer picture of how your users will experience your site on their handset.</p>

<h2 id="browser-rendering-optimization">Browser Rendering Optimization</h2>

<blockquote>
  <p>TODO <a href="https://www.udacity.com/course/browser-rendering-optimization--ud860">https://www.udacity.com/course/browser-rendering-optimization–ud860</a></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Hash Tricks in Ruby]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2015/11/30/some-hash-tricks-in-ruby/"/>
    <updated>2015-11-30T03:17:38-05:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2015/11/30/some-hash-tricks-in-ruby</id>
    <content type="html"><![CDATA[<blockquote>
  <p>from <a href="http://blog.honeybadger.io/advanced-ruby-hash-techniques/">http://blog.honeybadger.io/advanced-ruby-hash-techniques/</a></p>
</blockquote>

<h3 id="strict-fetching">Strict fetching</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">h</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="o">|</span><span class="nb">hash</span><span class="p">,</span> <span class="n">key</span><span class="o">|</span> <span class="k">raise</span> <span class="no">ArgumentError</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;No hash key: </span><span class="si">#{</span> <span class="n">key</span> <span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line"><span class="n">h</span><span class="o">[</span><span class="ss">:a</span><span class="o">]=</span><span class="mi">1</span>
</span><span class="line"><span class="n">h</span><span class="o">[</span><span class="ss">:a</span><span class="o">]</span> <span class="c1"># 1</span>
</span><span class="line"><span class="n">h</span><span class="o">[</span><span class="ss">:x</span><span class="o">]</span> <span class="c1"># raises ArgumentError: No hash key: x</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="modifying-defaults-after-initialization">Modifying defaults after initialization</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">h</span><span class="o">=</span><span class="p">{}</span>
</span><span class="line"><span class="n">h</span><span class="o">[</span><span class="ss">:a</span><span class="o">]</span> <span class="c1"># nil</span>
</span><span class="line"><span class="n">h</span><span class="o">.</span><span class="n">default</span> <span class="o">=</span> <span class="s2">&quot;new default&quot;</span>
</span><span class="line"><span class="n">h</span><span class="o">[</span><span class="ss">:a</span><span class="o">]</span> <span class="c1"># &quot;new default&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">h</span><span class="o">.</span><span class="n">default_proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">to_i</span> <span class="p">}</span>
</span><span class="line"><span class="n">h</span><span class="o">[</span><span class="ss">:a</span><span class="o">]</span> <span class="c1"># 1435684014</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="factorial-using-hash">Factorial using Hash</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">factorial</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">{</span><span class="o">|</span><span class="n">h</span><span class="p">,</span><span class="n">k</span><span class="o">|</span> <span class="n">k</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">?</span> <span class="n">h</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="n">h</span><span class="o">[</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="o">]*</span><span class="n">k</span> <span class="p">:</span> <span class="n">h</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class="line"><span class="no">Factorail</span><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="c1"># =&gt; 24</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="a-game-of-lazily-infinite-nested-hashes">A game of lazily infinite nested hashes</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">generator</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="nb">hash</span><span class="p">,</span> <span class="n">key</span><span class="o">|</span>
</span><span class="line">  <span class="nb">hash</span><span class="o">[</span><span class="n">key</span><span class="o">]</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">&amp;</span><span class="n">generator</span><span class="p">)</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span> <span class="o">[</span><span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;s&#39;</span><span class="p">,</span> <span class="s1">&#39;e&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="o">][</span><span class="nb">rand</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">]</span> <span class="o">=&gt;</span> <span class="s1">&#39;You found me&#39;</span> <span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line"><span class="n">dungeon</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span> <span class="o">&amp;</span><span class="n">generator</span>
</span><span class="line"><span class="n">dungeon</span><span class="o">[</span><span class="s1">&#39;n&#39;</span><span class="o">]</span>            <span class="c1"># =&gt; { &quot;s&quot; =&gt; &quot;You found me&quot; }</span>
</span><span class="line"><span class="n">dungeon</span><span class="o">[</span><span class="s1">&#39;n&#39;</span><span class="o">][</span><span class="s1">&#39;w&#39;</span><span class="o">]</span>       <span class="c1"># =&gt; { &quot;e&quot; =&gt; &quot;You found me&quot; }</span>
</span><span class="line"><span class="n">dungeon</span><span class="o">[</span><span class="s1">&#39;n&#39;</span><span class="o">][</span><span class="s1">&#39;w&#39;</span><span class="o">][</span><span class="s1">&#39;e&#39;</span><span class="o">]</span>  <span class="c1"># =&gt; &quot;You found me&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <p>from <a href="https://endofline.wordpress.com/2010/12/24/hash-tricks/">https://endofline.wordpress.com/2010/12/24/hash-tricks</a></p>
</blockquote>

<h3 id="hash-returns-hashes-to-build-a-tree-structure">Hash returns hashes, to build a tree structure</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">tree_block</span> <span class="o">=</span> <span class="o">-&gt;</span><span class="p">(</span><span class="nb">hash</span><span class="p">,</span><span class="n">k</span><span class="p">){</span> <span class="nb">hash</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tree_block</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line"><span class="n">opts</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tree_block</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">opts</span><span class="o">[</span><span class="s1">&#39;dev&#39;</span><span class="o">][</span><span class="s1">&#39;db&#39;</span><span class="o">][</span><span class="s1">&#39;host&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;localhost:2828&quot;</span>
</span><span class="line"><span class="n">opts</span><span class="o">[</span><span class="s1">&#39;dev&#39;</span><span class="o">][</span><span class="s1">&#39;db&#39;</span><span class="o">][</span><span class="s1">&#39;user&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;me&quot;</span>
</span><span class="line"><span class="n">opts</span><span class="o">[</span><span class="s1">&#39;dev&#39;</span><span class="o">][</span><span class="s1">&#39;db&#39;</span><span class="o">][</span><span class="s1">&#39;password&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;secret&quot;</span>
</span><span class="line"><span class="n">opts</span><span class="o">[</span><span class="s1">&#39;test&#39;</span><span class="o">][</span><span class="s1">&#39;db&#39;</span><span class="o">][</span><span class="s1">&#39;host&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;localhost:2828&quot;</span>
</span><span class="line"><span class="n">opts</span><span class="o">[</span><span class="s1">&#39;test&#39;</span><span class="o">][</span><span class="s1">&#39;db&#39;</span><span class="o">][</span><span class="s1">&#39;user&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;test_user&quot;</span>
</span><span class="line"><span class="n">opts</span><span class="o">[</span><span class="s1">&#39;test&#39;</span><span class="o">][</span><span class="s1">&#39;db&#39;</span><span class="o">][</span><span class="s1">&#39;password&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;test_secret&quot;</span>
</span><span class="line"><span class="n">opts</span>
</span><span class="line"><span class="c1"># =&gt; {</span>
</span><span class="line">  <span class="s2">&quot;dev&quot;</span>  <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class="line">    <span class="s2">&quot;db&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class="line">      <span class="s2">&quot;host&quot;</span>     <span class="o">=&gt;</span> <span class="s2">&quot;localhost:2828&quot;</span><span class="p">,</span>
</span><span class="line">      <span class="s2">&quot;user&quot;</span>     <span class="o">=&gt;</span> <span class="s2">&quot;me&quot;</span><span class="p">,</span>
</span><span class="line">      <span class="s2">&quot;password&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;secret&quot;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">},</span>
</span><span class="line">  <span class="s2">&quot;test&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class="line">    <span class="s2">&quot;db&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class="line">      <span class="s2">&quot;host&quot;</span>     <span class="o">=&gt;</span> <span class="s2">&quot;localhost:2828&quot;</span><span class="p">,</span>
</span><span class="line">      <span class="s2">&quot;user&quot;</span>     <span class="o">=&gt;</span> <span class="s2">&quot;test_user&quot;</span><span class="p">,</span>
</span><span class="line">      <span class="s2">&quot;password&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;test_secret&quot;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="use-hash-as-a-method">Use hash as a method</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;net/http&#39;</span>
</span><span class="line"><span class="n">http</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">h</span><span class="p">,</span><span class="n">k</span><span class="o">|</span>
</span><span class="line">  <span class="n">h</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="ss">Net</span><span class="p">:</span><span class="ss">:HTTP</span><span class="o">.</span><span class="n">get_response</span><span class="p">(</span><span class="no">URI</span><span class="p">(</span><span class="n">k</span><span class="p">))</span><span class="o">.</span><span class="n">body</span>
</span><span class="line">  <span class="n">h</span><span class="o">.</span><span class="n">delete</span> <span class="n">h</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">first</span> <span class="k">if</span> <span class="n">h</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">3</span> <span class="c1"># a caching layer</span>
</span><span class="line">  <span class="n">h</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <p>from Amadan posted on <a href="https://www.reddit.com/r/ruby/comments/29hr4x/whats_youre_favorite_ruby_trick_or_quirk_thata">https://www.reddit.com/r/ruby/comments/29hr4x/whats_youre_favorite_ruby_trick_or_quirk_thata</a></p>
</blockquote>

<h3 id="autovivifying-hashes-are-cool">Autovivifying hashes are cool</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">autohash</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="o">|</span><span class="n">h</span><span class="p">,</span> <span class="n">k</span><span class="o">|</span> <span class="n">h</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">&amp;</span><span class="n">h</span><span class="o">.</span><span class="n">default_proc</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line"><span class="n">autohash</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">2</span><span class="o">][</span><span class="mi">3</span><span class="o">][</span><span class="mi">4</span><span class="o">][</span><span class="mi">5</span><span class="o">][</span><span class="mi">6</span><span class="o">][</span><span class="mi">7</span><span class="o">]</span> <span class="o">=</span> <span class="mi">8</span>
</span><span class="line"><span class="n">autohash</span> <span class="c1"># =&gt; {1=&gt;{2=&gt;{3=&gt;{4=&gt;{5=&gt;{6=&gt;{7=&gt;8}}}}}}}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <p>from The Buckblog <a href="http://weblog.jamisbuck.org/2015/11/14/little-things-refactoring-with-hashes.html">http://weblog.jamisbuck.org/2015/11/14/little-things-refactoring-with-hashes.html</a></p>
</blockquote>

<h3 id="refactor-case-statement">Refactor case statement</h3>

<p>before</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">klass</span> <span class="o">=</span> <span class="k">case</span> <span class="n">params</span><span class="o">[</span><span class="ss">:student_level</span><span class="o">]</span>
</span><span class="line">  <span class="k">when</span> <span class="ss">:freshman</span><span class="p">,</span> <span class="ss">:sophomore</span> <span class="k">then</span>
</span><span class="line">    <span class="ss">Student</span><span class="p">:</span><span class="ss">:Underclassman</span>
</span><span class="line">  <span class="k">when</span> <span class="ss">:junior</span><span class="p">,</span> <span class="ss">:senior</span> <span class="k">then</span>
</span><span class="line">    <span class="ss">Student</span><span class="p">:</span><span class="ss">:Upperclassman</span>
</span><span class="line">  <span class="k">when</span> <span class="ss">:graduate</span>
</span><span class="line">    <span class="ss">Student</span><span class="p">:</span><span class="ss">:Graduate</span>
</span><span class="line">  <span class="k">else</span>
</span><span class="line">    <span class="ss">Student</span><span class="p">:</span><span class="ss">:Unregistered</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="n">student</span> <span class="o">=</span> <span class="n">klass</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">birthdate</span><span class="p">,</span> <span class="n">address</span><span class="p">,</span> <span class="n">phone</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>after</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">STUDENT_LEVELS</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">Student</span><span class="p">:</span><span class="ss">:Unregistered</span><span class="p">)</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span>
</span><span class="line">  <span class="ss">freshman</span><span class="p">:</span> <span class="ss">Student</span><span class="p">:</span><span class="ss">:Underclassman</span><span class="p">,</span>
</span><span class="line">  <span class="ss">sophomore</span><span class="p">:</span> <span class="ss">Student</span><span class="p">:</span><span class="ss">:Underclassman</span><span class="p">,</span>
</span><span class="line">  <span class="ss">junior</span><span class="p">:</span>    <span class="ss">Student</span><span class="p">:</span><span class="ss">:Upperclassman</span><span class="p">,</span>
</span><span class="line">  <span class="ss">senior</span><span class="p">:</span>    <span class="ss">Student</span><span class="p">:</span><span class="ss">:Upperclassman</span><span class="p">,</span>
</span><span class="line">  <span class="ss">graduate</span><span class="p">:</span>  <span class="ss">Student</span><span class="p">:</span><span class="ss">:Graduate</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">klass</span> <span class="o">=</span> <span class="no">STUDENT_LEVELS</span><span class="o">[</span><span class="n">params</span><span class="o">[</span><span class="ss">:student_level</span><span class="o">]]</span>
</span><span class="line"><span class="n">student</span> <span class="o">=</span> <span class="n">klass</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">birthdate</span><span class="p">,</span> <span class="n">address</span><span class="p">,</span> <span class="n">phone</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Review] Virtualization - Operating Systems Three Easy Pieces]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2015/11/22/review-virtualization-operating-systems-three-easy-pieces/"/>
    <updated>2015-11-22T00:44:38-05:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2015/11/22/review-virtualization-operating-systems-three-easy-pieces</id>
    <content type="html"><![CDATA[<table class="custom">
  <tbody>
    <tr>
      <td><strong>Book</strong></td>
      <td>Operating Systems: Three Easy Pieces</td>
    </tr>
    <tr>
      <td><strong>Author</strong></td>
      <td><a href="http://www.cs.wisc.edu/~remzi">Remzi H. Arpaci-Dusseau</a> and <a href="http://www.cs.wisc.edu/~dusseau">Andrea C. Arpaci-Dusseau</a></td>
    </tr>
    <tr>
      <td><strong>Link</strong></td>
      <td><a href="http://pages.cs.wisc.edu/~remzi/OSTEP/">pages.cs.wisc.edu/~remzi/OSTEP</a></td>
    </tr>
  </tbody>
</table>

<ul id="markdown-toc">
  <li><a href="#introduction">Introduction</a></li>
  <li><a href="#cpu-virtualisation">CPU Virtualisation</a>    <ul>
      <li><a href="#process">Process</a>        <ul>
          <li><a href="#chapter-4---the-abstraction-the-process">Chapter 4 - The Abstraction: The Process</a></li>
          <li><a href="#chapter-5---interlude-process-api">Chapter 5 - Interlude: Process API</a></li>
        </ul>
      </li>
      <li><a href="#mechanism">Mechanism</a>        <ul>
          <li><a href="#chapter-6---mechanism-limited-direct-execution">Chapter 6 - Mechanism: Limited Direct Execution</a></li>
        </ul>
      </li>
      <li><a href="#scheduling">Scheduling</a>        <ul>
          <li><a href="#chapter-7---scheduling-introduction">Chapter 7 - Scheduling: Introduction</a></li>
          <li><a href="#chapter-8---scheduling-the-multi-level-feedback-queue">Chapter 8 - Scheduling: The Multi-Level Feedback Queue</a></li>
          <li><a href="#chapter-9---scheduling-proportional-share">Chapter 9 - Scheduling: Proportional Share</a></li>
          <li><a href="#chapter-10---multiprocessor-scheduling">Chapter 10 - Multiprocessor Scheduling</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#memory-virtualisation">Memory Virtualisation</a>    <ul>
      <li><a href="#address-space">Address Space</a>        <ul>
          <li><a href="#chapter-13---the-abstraction-address-spaces">Chapter 13 - The Abstraction: Address Spaces</a></li>
          <li><a href="#chapter-14---interlude-memory-api">Chapter 14 - Interlude: Memory API</a></li>
        </ul>
      </li>
      <li><a href="#dynamic-allocation-and-segmentation">Dynamic Allocation and Segmentation</a>        <ul>
          <li><a href="#chapter-15---mechanism-address-translation">Chapter 15 - Mechanism: Address Translation</a></li>
          <li><a href="#chapter-16-segmentation">Chapter 16 Segmentation</a></li>
          <li><a href="#chapter-17---free-space-management">Chapter 17 - Free-Space Management</a></li>
        </ul>
      </li>
      <li><a href="#paging">Paging</a>        <ul>
          <li><a href="#chapter-18---paging-introduction">Chapter 18 - Paging: Introduction</a></li>
          <li><a href="#chapter-19---paging-faster-translations-tlbs">Chapter 19 - Paging: Faster Translations (TLBs)</a></li>
          <li><a href="#note-on-cache-management">Note on Cache Management</a></li>
          <li><a href="#chapter-20---paging-smaller-tables">Chapter 20 - Paging: Smaller Tables</a></li>
        </ul>
      </li>
      <li><a href="#beyond-physical-memory">Beyond Physical Memory</a>        <ul>
          <li><a href="#chapter-21---beyond-physical-memory-mechanisms">Chapter 21 - Beyond Physical Memory: Mechanisms</a></li>
          <li><a href="#chapter-22---beyond-physical-memory-policies">Chapter 22 - Beyond Physical Memory: Policies</a></li>
          <li><a href="#chapter-23---the-vaxvms-virtual-memory-system">Chapter 23 - The VAX/VMS Virtual Memory System</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h1 id="introduction">Introduction</h1>

<p><strong>The Crux of the whole book</strong></p>

<p>How does the operating system virtualize resources?
What mechanisms and policies are implemented by the OS to attain virtualization?
How does the OS do so efficiently?</p>

<p><strong>The Von Neumann model of computing</strong></p>

<p>Many millions (and these days, even billions) of times every second, the processor <strong>fetches</strong> an instruction from memory, <strong>decodes</strong> it (i.e., figures out which instruction this is), and <strong>executes</strong> it.</p>

<p><strong>The OS is sometimes known as a resource manager</strong></p>

<p>The primary way the OS does this is through a general technique that we call virtualization. That is, the OS takes a physical resource (such as the processor, or memory, or a disk) and transforms it into a more general, powerful, and easy-to-use virtual form of itself. Thus, we sometimes refer to the operating system as a <strong>virtual machine</strong>.</p>

<p><strong>Virtualizing the CPU</strong></p>

<p>Turning a single CPU (or small set of them) into a seemingly infinite number of CPUs and thus allowing many programs to seemingly run at once is what we call virtualizing the CPU.</p>

<p><strong>Virtualizing the Memory</strong></p>

<p>Memory is just an array of bytes; to <strong>read</strong> memory, one must specify an <strong>address</strong> to be able to access the data stored there; to <strong>write</strong> (or update) memory, one must also specify the data to be written to the given address.</p>

<p>The OS is virtualizing memory. Each process accesses its own private <strong>virtual address space</strong> (sometimes just called its address space)</p>

<p><strong>Concurrency</strong></p>

<p>Three instructions: one to <strong>load</strong> the value of the counter from memory into a register, one to <strong>increment</strong> it, and one to <strong>store</strong> it back into memory. Because these three instructions do not execute atomically (all at once), strange things can happen.</p>

<p><strong>Persistence</strong></p>

<p>The software in the operating system that usually manages the disk is called the <strong>file system</strong>; it is thus responsible for storing any files the user creates in a reliable and efficient manner on the disks of the system.</p>

<p>For performance reasos, most file systems first <strong>delay</strong> such writes for a while, hoping to batch them into larger groups. To handle the problems of system crashes during writes, most file systems incorporate some kind of intricate write protocol, such as <strong>journaling</strong> or <strong>copy-on-write</strong>, carefully ordering writes to disk to ensure that if a failure occurs during the write sequence, the system can recover to reasonable state afterwards.</p>

<p><strong>Design Goals</strong></p>

<p>What an OS actually does: it takes physical <strong>resources</strong>, such as a CPU, memory, or disk, and <strong>virtualizes</strong> them. It handles tough and tricky issues related to <strong>concurrency</strong>. And it stores files <strong>persistently</strong>, thus making them safe over the long-term.</p>

<ol>
  <li>To build up some <strong>abstractions</strong> in order to make the system convenient and easy to use.</li>
  <li>To provide high <strong>performance</strong>, another way to say this is our goal is to minimize the overheads of the OS.</li>
  <li>To provide <strong>protection</strong> between applications, as well as between the OS and applications. Protection is at nthe heart of one of the main principles underlying an operating system, which is that of <strong>isolation</strong>; isolating processes from one another is the key to protection and thus underlies much of what an OS must do.</li>
</ol>

<p><strong>Some History</strong></p>

<ol>
  <li>Early Operating Systems: Just Libraries.  This mode of computing was known as <strong>batch</strong> processing.</li>
  <li>Beyond Libraries: Protection. The idea of a system call was invented. The key difference between a <strong>system call</strong> and a <strong>procedure call</strong> is that a system call transfers control (i.e., jumps) into the OS while simultaneously raising the hardware privilege level. User applications run in what is referred to as user mode which means the hardware restricts what applications can do; When a system call is initiated (usually through a special hardware instruction called a trap), the hardware transfers control to a pre-specified trap handler (that the OS set up previously) and simultaneously raises the privilege level to kernel mode.</li>
  <li>The Era of Multiprogramming by minicomputer. In particular, multiprogramming became commonplace due to the desire to make better use of machine resources. One of the major practical advances of the time was the introduction of the <strong>UNIX</strong> operating system, primarily thanks to <strong>Ken Thompson</strong> (and <strong>Dennis Ritchie</strong>) at Bell Labs (yes, the phone company). <strong>Bill Joy</strong>, made a wonderful distribution (the Berkeley Systems Distribution, or <strong>BSD</strong>) which had some advanced virtual memory, file system, and networking subsystems. Joy later co-founded Sun Microsystems.</li>
  <li>The Modern Era by PC with DOS, Mac OS.</li>
</ol>

<h1 id="cpu-virtualisation">CPU Virtualisation</h1>

<h2 id="process">Process</h2>

<h3 id="chapter-4---the-abstraction-the-process">Chapter 4 - The Abstraction: The Process</h3>

<p><strong>Process</strong></p>

<p>The definition of a process, informally, is quite simple: it is a running program.</p>

<p><strong>How to provide the illusion of many CPUs?</strong></p>

<p>This basic technique, known as <strong>time sharing</strong> of the CPU, allows users to run as many concurrent processes as they would like; the potential cost is performance, as each will run more slowly if the CPU(s) must be shared.</p>

<p><strong>Mechanisms</strong></p>

<p>Mechanisms are low-level methods or protocols that implement a needed piece of functionality.</p>

<p><strong>Policies</strong></p>

<p>On top of these mechanisms resides some of the intelligence in the OS, in the form of policies.</p>

<p><strong>Tip: Separate policy and mechanism</strong></p>

<p>In many operating systems, a common design paradigm is to separate high-level policies from their low-level mechanisms. You can think of the mechanism as providing the answer to a <strong>how</strong> question about a system; for example, how does an operating system perform a context switch? The policy provides the answer
 to a <strong>which</strong> question; for example, which process should the operating system run right now?</p>

<p><strong>Machine State</strong></p>

<p>To understand what constitutes a process, we thus have to understand its <strong>machine state</strong>: what a program can read or update when it is running. At any given time, what parts of the machine are important to the execution of this program?</p>

<ol>
  <li>Memory. The memory that the process can address (called its <strong>address space</strong>) is part of the process.</li>
  <li>Registry. There are some particularly special registers that form part of this machine state. For example, the <strong>program counter</strong> (PC) (sometimes called the instruction pointer or IP). similarly a stack pointer and associated <strong>frame pointer</strong> are used to manage the stack for function parameters, local variables, and return addresses.</li>
  <li>I/O information. Programs often access persistent storage devices too. Such I/O information might include a list of the files the process currently has open.</li>
</ol>

<p><strong>Process API</strong></p>

<ol>
  <li>Create</li>
  <li>Destroy</li>
  <li>Wait</li>
  <li>Miscellaneous Control (suspend, resume)</li>
  <li>Status</li>
</ol>

<p><strong>How does the OS get a program up and running?</strong></p>

<ol>
  <li>To <strong>load</strong> its code and any static data (e.g., initialized variables) into memory, into the <strong>address space</strong> of the process. In early (or simple) operating systems, the loading process is done <strong>eagerly</strong>; modern OSes perform the process <strong>lazily</strong>, i.e., by loading pieces of code or data only as they are needed during program execution. To truly understand how lazy loading of pieces of code and data works, you’ll have to understand more about the machinery of <strong>paging</strong> and <strong>swapping</strong>.</li>
  <li>Once the code and static data are loaded into memory, there are a few other things the OS needs to do before running the process. Some memory must be allocated for the program’s <strong>run-time stack</strong> (or just stack). As you should likely already know, C programs use the stack for local variables, function parameters, and return addresses; the OS allocates this memory and gives it to the process.</li>
  <li>The OS may also allocate some memory for the program’s <strong>heap</strong>. In C programs, the heap is used for explicitly requested dynamically-allocated data; programs request such space by calling malloc() and free it explicitly by calling free(). The heap is needed for data structures such as linked lists, hash tables, trees, and other interesting data structures.</li>
  <li>The OS will also do some other initialization tasks, particularly as related to input/output (I/O). For example, in UNIX systems, each process by default has three open <strong>file descriptors</strong>.</li>
  <li>To start the program running at the entry point, namely main(), the OS transfers control of the CPU to the newly-created process, and thus the program begins its execution.</li>
</ol>

<p><strong>Process States</strong></p>

<ol>
  <li>Running</li>
  <li>Ready</li>
  <li>Blocked</li>
</ol>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-process_state_transitions.png" alt="os-process_state_transitions.png" /></p>

<p><strong>Data Structures</strong></p>

<p>To track the state of each process, for example, the OS likely will keep some kind of <strong>process list</strong> for all processes that are ready, as well as some additional information to track which process is currently running.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-the_xv6_proc_structure.png" alt="os-the_xv6_proc_structure.png" /></p>

<p>The <strong>register context</strong> will hold, for a stopped process, the contents of its registers. When a process is stopped, its registers will be saved to this memory location; by restoring these registers (i.e., placing their values back into the actual physical registers), the OS can resume running the process.</p>

<p>Sometimes people refer to the individual structure that stores information about a process as a <strong>Process Control Block (PCB)</strong>.</p>

<h3 id="chapter-5---interlude-process-api">Chapter 5 - Interlude: Process API</h3>

<p>UNIX presents one of the most intriguing ways to create a new process with a pair of system calls:</p>

<p><strong>fork()</strong></p>

<p>The newly-created process (called the <strong>child</strong>, in contrast to the creating <strong>parent</strong>) desn’t start running at main(), like you might expect (note, the “hello, world” message only got printed out once); rather, it just comes into life as if it had called fork() itself. You might have noticed: the child isn’t an exact copy. Specifically, al- though it now has its own copy of the address space (i.e., its own private memory), its own registers, its own PC, and so forth, the value it returns to the caller of fork() is different.</p>

<p>The output is <strong>not deterministic</strong>. When the child process is created, there are now two active processes in the system that we care about: the parent and the child.</p>

<p><strong>wait()</strong></p>

<p>Adding a wait() call to the code above makes the output <strong>deterministic</strong>.</p>

<p><strong>exec()</strong></p>

<p>It does not create a new process; rather, it transforms the currently running program (formerly p3) into a different running program (wc). After the exec() in the child, it is almost as if p3.c never ran; a successful call to exec() never returns.</p>

<p><strong>Why? Motivating The API</strong></p>

<p>Why would we build sucho an odd interface to what should be the simple act of creating a new process? Well, as it turns out, the separation of fork() and exec() is essential in building a UNIX shell, because it lets the shell run code after the call to fork() but before the call to exec(); this code can alter the environment of the about-to-be-run program, and thus enables a variety of interesting features to be readily built.</p>

<p><strong>How Does Shell Utilise The API?</strong></p>

<p>The shell is just a user program.</p>

<ol>
  <li>It shows you a prompt and then waits for you to type something into it.</li>
  <li>You then type a command (i.e., the name of an executable program, plus any arguments) into it;</li>
  <li>In most cases, the shell then figures out where in the file system the executable resides</li>
  <li>calls fork() to create a new child process to run the command</li>
  <li>calls some variant of exec() to run the command</li>
  <li>waits for the command to complete by calling wait().</li>
  <li>When the child completes, the shell returns from wait() and prints out a prompt again, ready for your next command.</li>
</ol>

<p>eg. prompt&gt; wc p3.c &gt; newfile.txt</p>

<p>When the child is created, before calling exec(), the shell closes standard output and opens the file newfile.txt.</p>

<h2 id="mechanism">Mechanism</h2>

<h3 id="chapter-6---mechanism-limited-direct-execution">Chapter 6 - Mechanism: Limited Direct Execution</h3>

<p><strong>The Crux</strong></p>

<ul>
  <li>performance: how can we implement virtualization without adding excessive overhead to the system?</li>
  <li>control: how can we run processes efficiently while retaining control over the CPU?</li>
</ul>

<p>Attaining performance while maintaining control is thus one of the central challenges in building an operating system.</p>

<p><strong>Basic Technique: Limited Direct Execution</strong></p>

<p>The basic idea is straightforward: just run the program you want to run on the CPU, but first make sure to set up the hardware so as to limit what the process can do without OS assistance.</p>

<p>In an analogous manner, the OS “baby proofs” the CPU, by first (during boot time) setting up the <strong>trap handlers</strong> and starting an <strong>interrupt timer</strong>, and then by only running processes in a restricted mode. By doing so, the OS can feel quite assured that processes can run efficiently, only requir- ing OS intervention to perform privileged operations or when they have monopolized the CPU for too long and thus need to be switched out.</p>

<p><strong>Problem #1: Restricted Operations</strong></p>

<p>Use Protected Control Transfer</p>

<p>The hardware assists the OS by providing different modes of execution. In <strong>user mode</strong>, applications do not have full access to hardware resources. In <strong>kernel mode</strong>, the OS has access to the full resources of the machine. When the user process wants to perform some kinds of privileged operation, it can perform a <strong>system call</strong>.</p>

<p><strong>System Call</strong></p>

<p>To execute a system call, a program must execute a special <strong>trap</strong> instruction. This instruction simultaneously jumps into the kernel and raises the privilege level to kernel mode; once in the kernel, the system can now per- form whatever privileged operations are needed (if allowed), and thus do the required work for the calling process. When finished, the OS calls a special <strong>return-from-trap</strong> instruction</p>

<p><strong>Why System Calls Look Like Procedure Calls?</strong></p>

<p>It is a procedure call, but hidden inside that procedure call is the famous trap instruction. More specifically, when you call open() (for example), you are executing a procedure call into the C library. The parts of the C library that make system calls are hand-coded in assembly, as they need to carefully follow convention in order to process arguments and return values correctly, as well as execute the hardware-specific trap instruction. And now you know why you personally don’t have to write assembly code to trap into an OS; somebody has already written that assembly for you.</p>

<p><strong>How does the trap know which code to run inside the OS?</strong></p>

<p>The kernel does so by setting up a <strong>trap table</strong> at boot time. When the machine boots up, it does so in privileged (kernel) mode, and thus is free to configure machine hardware as need be. The OS informs the hardware of the locations of these <strong>trap handlers</strong>.</p>

<p><strong>Limited Direct Execution Protocol</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-limited_directed_execution_protocol.png" alt="os-limited_directed_execution_protocol.png" /></p>

<p>There are two phases in the LDE protocol:</p>

<p>In the first (at boot time), the kernel initializes the <strong>trap table</strong>, and the CPU remembers its location for subsequent use.</p>

<p>In the second (when running a process), the kernel sets up a few things (e.g., allocating a node on the process list, allocating memory) before using a <strong>return-from-trap</strong> instruction to start the execution of the process; this switches the CPU to user mode and begins running the process.</p>

<p>Normal flow:</p>

<p>When the process wishes to issue a system call, it traps back into the OS, which handles it and once again returns control via a return-from-trap to the process. The process then completes its work, and returns from main(); this usually will return into some stub code which will properly exit the program (say, by calling the exit() system call, which traps into the OS).</p>

<p><strong>Problem #2: Switching Between Processes</strong></p>

<p>How can the operating system regain control of the CPU so that it can switch between processes?</p>

<p>In a <strong>cooperative</strong> scheduling system, the OS regains control of the CPU by waiting for a system call or an illegal operation of some kind to take place.</p>

<p>How can the OS gain control of the CPU even if processes are not being cooperative? What can the OS do to ensure a rogue process does not take over the machine?</p>

<p><strong>Timer Interrupt</strong></p>

<p>A timer device can be programmed to raise an interrupt every so many milliseconds; when the interrupt is raised, the currently running process is halted, and a pre-configured interrupt handler in the OS runs. At this point, the OS has regained control of the CPU, and thus can do what it pleases: stop the current process, and start a different one.</p>

<p>The OS must inform the hardware of which code to run when the timer interrupt occurs; thus, at boot time, the OS does exactly that. Second, also during the boot sequence, the OS must start the timer, which is of course a privileged operation.</p>

<p><strong>Scheduler</strong></p>

<p>Whether to continue running the currently-running process, or switch to a different one. This decision is made by a part of the operating system known as the scheduler.</p>

<p>If the decision is made to switch, the OS then executes a low-level piece of code which we refer to as a <strong>context switch</strong>. A context switch is conceptually simple: all the OS has to do is save a few register values for the currently-executing process (onto its kernel stack, for example) and restore a few for the soon-to-be-executing process (from its kernel stack).</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-timer_interrupt.png" alt="os-timer_interrupt.png" /></p>

<h2 id="scheduling">Scheduling</h2>

<h3 id="chapter-7---scheduling-introduction">Chapter 7 - Scheduling: Introduction</h3>

<p><strong>Scheduling Metrics</strong></p>

<ul>
  <li>performance
    <ul>
      <li>turnaround = T(completion) - T(arrival)</li>
      <li>responsive time = T(first run) - T(arrival)</li>
    </ul>
  </li>
  <li>fairness</li>
</ul>

<p>Performance and fairness are often at odds in scheduling.</p>

<p>The introduction of time-shared machines changed all that. Now users would sit at a terminal and demand interactive performance from the system as well. And thus, a new metric was born: response time.</p>

<p><strong>Assumption</strong></p>

<ol>
  <li>Each job runs for the same amount of time.</li>
  <li>All jobs arrive at the same time.</li>
  <li>Once started, each job runs to completion.</li>
  <li>All jobs only use the CPU (i.e., they perform no I/O)</li>
  <li>The run-time (length) of each job is known.</li>
</ol>

<p><strong>Policy 1-1 FIFO</strong></p>

<p>under assumption: 1,2,3,4,5</p>

<p>Given our assumptions about jobs all arriving at the same time, we could prove that SJF is indeed an optimal scheduling algorithm.</p>

<p><strong>Policy 1-2 SJF (Shortest Job First)</strong></p>

<p>under assumption: <del>1,</del>2,3,4,5</p>

<p>Why is FIFO not good?</p>

<p>If Assumption(1) is false, there will be the <strong>convoy effect</strong>, where a number of relatively-short potential consumers of a resource get queued behind a heavyweight resource consumer.</p>

<p>Is SJF preemptive?</p>

<p>No, it’s <strong>non-preemptive</strong>. In the old days of batch computing, a number of non-preemptive scheulers were developed; such systems would run each job to completi before considering whether to run a new job. Virtually all modern schedulers are <strong>preemptive</strong>, and quite willing to stop one process from running in order to run another.</p>

<p><strong>Policy 1-3 STCF (Shortest Time-to-Completion First) or PSJF (Preemptive Shortest Job First)</strong></p>

<p>under assumption: <del>1,2,3,</del>4,5</p>

<p>Notice that there a significant difference between SJF and STCF. As SJF is non-preemptive, system would run each job to completion before running other jobs. But STCF prefers the shortest time-to-completion jobs, which should preempt CPU to make sense. That’s why STCF also has another name, PSFJ, Preemptive Shortest Job First.</p>

<p><strong>Policy 2 RR (Round-Robin)</strong></p>

<p>The basic idea is simple: instead of running jobs to completion, RR runs a job for a <strong>time slice</strong> (sometimes called a scheduling quantum) and then switches to the next job in the run queue.</p>

<p>The length of the time slice is critical for RR. The shorter it is, the better the performance of RR under the response-time metric. However, making the time slice too short is problematic: suddenly the cost of context switching will dominate overall performance. Thus, de- ciding on the length of the time slice presents a trade-off to a system de- signer, making it long enough to amortize the cost of switching without making it so long that the system is no longer responsive.</p>

<p>RR, with a reonasonable time slice, is thus an excellent scheduler if response time is our only metric. It is not surprising, then, that RR is indeed one of the worst policies if turnaround time is our metric.</p>

<p><strong>Policy 1 vs. Policy 2</strong></p>

<p>There is an inherent trade-off: if you are willing to be unfair, you can run shorter jobs to com- pletion, but at the cost of response time; if you instead value fairness, response time is lowered, but at the cost of turnaround time. This type of trade-off is common in systems</p>

<p><strong>Incorporate I/O by overlap</strong></p>

<p>under assumption: 4</p>

<p>We see how a scheduler might incorporate I/O. By treating each CPU burst as a job, the scheduler makes sure processes that are “interactive” get run frequently. While those interactive jobs are performing I/O, other CPU-intensive jobs run, thus better utilizing the processor.</p>

<h3 id="chapter-8---scheduling-the-multi-level-feedback-queue">Chapter 8 - Scheduling: The Multi-Level Feedback Queue</h3>

<p><strong>MLFQ</strong></p>

<p>it has <strong>multiple levels of queues</strong>, and <strong>uses feedback to determine the priority</strong> of a given job.</p>

<p>Instead of demanding a priori knowledge of the nature of a job, it observes the execution of a job and prioritizes it accordingly. In this way, it manages to achieve the best of both worlds: it can deliver excellent overall performance (similar to SJF/STCF) for short-running interactive jobs, and is fair and makes progress for long-running CPU-intensive workloads.</p>

<p><em>Multi-Level</em></p>

<p>The MLFQ has a number of distinct queues, each assigned a different <strong>priority level</strong>. At any given time, a job that is ready to run is on a single queue. MLFQ uses priorities to decide which job should run at a given time: a job with higher priority (i.e., a job on a higher queue) is chosen to run. Of course, more than one job may be on a given queue, and thus have the same priority. In this case, we will just use round-robin scheduling among those jobs.</p>

<p><em>Feedback</em></p>

<p>Thus, the key to MLFQ scheduling lies in how the scheduler sets priorities. Rather than giving a fixed priority to each job, MLFQ varies the priority of a job based on its observed behavior.</p>

<p><strong>How To Change Priority</strong></p>

<p>Rule 3: When a job enters the system, it is placed at the highest priority (the topmost queue).
Rule 4a: If a job uses up an entire time slice while running, its priority is reduced (i.e., it moves down one queue).
Rule 4b: If a job gives up the CPU before the time slice is up, it stays at the same priority level.</p>

<p><em>Problems</em></p>

<ol>
  <li>Starvation</li>
  <li>Smart user could rewrite their program to game the scheduler.</li>
  <li>A program may change its behavior over time; what was CPU-bound may transition to a phase of interactivity.</li>
</ol>

<p><strong>How to prevent gaming of our scheduler?</strong></p>

<p>Rules 4a and 4b, let a job retain its priority by relinquishing the CPU before the time slice expires. The solution here is to perform better <strong>accounting</strong> of CPU time at each level of the MLFQ. Instead of forgetting how much of a time slice a process used at a given level, the scheduler should keep track; once a process has used its allotment, it is demoted to the next priority queue.</p>

<p>Rule 4: Once a job uses up its time allotment at a given level (regardless of how many times it has given up the CPU), its priority is reduced (i.e., it moves down one queue).</p>

<p><strong>Priority Boost</strong></p>

<p>The simple idea here is to periodically boost the priority of all the jobs in system.</p>

<p>Rule 5: After some time period S, move all the jobs in the system to the topmost queue.</p>

<p><strong>Tuning MLFQ</strong></p>

<p>One big question is how to <strong>parameterize</strong> such a scheduler.</p>

<ul>
  <li>How many queues should there be?</li>
  <li>How big should the time slice be per queue?</li>
  <li>How often should priority be boosted in order to avoid starvation and account for changes in behavior?</li>
</ul>

<p><em>Some Variants</em></p>

<p>Most MLFQ variants allow for <strong>varying time-slice length</strong> across different queues. The high-priority queues are usually given short time slices; the low-priority queues, in contrast, contain long-running jobs that are CPU-bound; hence, longer time slices work well.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-lower_priority_longer_quanta.png" alt="os-lower_priority_longer_quanta.png" /></p>

<p>The FreeBSD scheduler (version 4.3) uses a formula to calculate the current priority level of a job, basing it on how much CPU the process has used.</p>

<p>Some schedulers reserve the highest priority levels for operating system work; thus typical user jobs can never obtain the highest levels of priority in the system. Some systems also allow some user advice to help set priorities; for example, by using the command-line utility nice.</p>

<p><strong>Refined Rules</strong></p>

<ul>
  <li>Rule 1: If Priority(A) &gt; Priority(B), A runs (B doesn’t).</li>
  <li>Rule 2: If Priority(A) = Priority(B), A &amp; B run in RR.</li>
  <li>Rule 3: When a job enters the system, it is placed at the highest priority (the topmost queue).</li>
  <li>Rule 4: Once a job uses up its time allotment at a given level (re- gardless of how many times it has given up the CPU), its priority is reduced (i.e., it moves down one queue).</li>
  <li>Rule 5: After some time period S, move all the jobs in the system to the topmost queue.</li>
</ul>

<h3 id="chapter-9---scheduling-proportional-share">Chapter 9 - Scheduling: Proportional Share</h3>

<p><strong>0. Basic Idea</strong></p>

<p><strong>Proportional-share scheduler</strong>, also sometimes referred to as a <strong>fair-share scheduler</strong>. Proportional-share is based around a simple concept: instead of optimizing for turnaround or response time, a scheduler might instead try to guarantee that each job obtain a certain percentage of CPU time.</p>

<p><strong>Implementations</strong></p>

<ul>
  <li><strong>lottery</strong> scheduling, lottery uses randomness in a clever way to achieve proportional share</li>
  <li><strong>stride</strong> scheduling, stride does so deterministically</li>
</ul>

<p><strong>Application</strong></p>

<p>One is that such approaches do not particularly mesh well with I/O [AC97]; another is that they leave open the hard problem of ticket assignment, i.e., how do you know how many tickets your browser should be allocated?</p>

<p>As a result, proportional-share schedulers are more useful in domains where some of these problems (such as assignment of shares) are rela- tively easy to solve. For example, in a virtualized data centre.</p>

<p><strong>1. Lottery Scheduling</strong></p>

<p>The basic idea is quite simple: every so often, hold a lottery to determine which process should get to run next; processes that should run more often should be given more chances to win the lottery. One of the most beautiful aspects of lottery scheduling is its use of randomness.</p>

<p><strong>Advantage</strong></p>

<ul>
  <li>randomness
    <ul>
      <li>First, random often avoids strange corner-case behaviors that a more traditional algorithm may have trouble handling.</li>
      <li>Second, random also is lightweight, requiring little state to track alternatives.</li>
      <li>Finally, random can be quite fast.</li>
    </ul>
  </li>
  <li>simplicity of implementation</li>
  <li>no global state</li>
</ul>

<p><strong>Disadvantage</strong></p>

<ul>
  <li>Hard to assign tickets to jobs</li>
  <li>Not deterministic. Only as the jobs run for a significant number of time slices does the lottery scheduler approach the desired outcome.</li>
</ul>

<p><strong>Ticket</strong></p>

<p>Tickets, which are used to represent the share of a resource that a process (or user or whatever) should receive. The percent of tickets that a process has represents its share of the system resource in question.</p>

<p><strong>Ticket Mechanisms</strong></p>

<p>Lottery scheduling also provides a number of mechanisms to manipulate tickets in different and sometimes useful ways.</p>

<ul>
  <li>ticket currency</li>
  <li>ticket transfer</li>
  <li>ticket inflation</li>
</ul>

<p><strong>Implementation</strong></p>

<p>Probably the most amazing thing about lottery scheduling is the simplicity of its implementation.</p>

<ul>
  <li>a good random number generator to pick the winning ticket</li>
  <li>a data structure to track the processes of the system (e.g., a list)</li>
  <li>the total number of tickets.</li>
</ul>

<p><strong>2. Stride Scheduling</strong></p>

<p>a <strong>deterministic</strong> fair-share scheduler.</p>

<p>Respectively, we can compute the stride of each by dividing some large number by the number of tickets each process has been assigned. We call this value the <strong>stride</strong> of each process.</p>

<p>Jobs A, B, and C, with 100, 50, and 250 tickets. if we divide 10,000 by each of those ticket values, we obtain the following stride values for A, B, and C: 100, 200, and 40.</p>

<p>Every time a process runs, we will increment a counter for it (called its <strong>pass</strong> value) by its stride to track its global progress. The scheduler then uses the stride and pass to determine which process should run next.</p>

<p>The basic idea is simple: at any given time, pick the process to run that has the lowest pass value so far; when you run a process, increment its pass counter by its stride.</p>

<p><strong>Advantage</strong></p>

<p>Lottery scheduling achieves the proportions probabilistically over time; stride scheduling gets them exactly right at the end of each scheduling cycle.</p>

<p><strong>Disadvantage</strong></p>

<p>Well, lottery scheduling has one nice property that stride scheduling does not: no global state. Imagine a new job enters in the middle of our stride scheduling example above; what should its pass value be? Should it be set to 0? If so, it will monopolize the CPU. With lottery scheduling, there is no global state per process; we simply add a new process with whatever tickets it has, update the single global variable to track how many total tickets we have, and go from there. In this way, lottery makes it much easier to incorporate new processes in a sensible manner.</p>

<h3 id="chapter-10---multiprocessor-scheduling">Chapter 10 - Multiprocessor Scheduling</h3>

<p><em>TODO after reading Concurrency</em></p>

<h1 id="memory-virtualisation">Memory Virtualisation</h1>

<h2 id="address-space">Address Space</h2>

<h3 id="chapter-13---the-abstraction-address-spaces">Chapter 13 - The Abstraction: Address Spaces</h3>

<p><strong>Multiprogramming</strong> (多道程序), in which multiple processes were ready to run at a given time, and the OS would switch between them.</p>

<p><strong>Time sharing</strong>, One way to implement time sharing would be to run one process for a short while, giving it full access to all memory, then stop it, save all of its state to some kind of disk (including all of physical memory), load some other process’s state, run it for a while, and thus implement some kind of crude sharing of the machine. Unfortunately, this approach has a big problem: it is way too slow, particularly as memory grows.</p>

<p><strong>Address space</strong></p>

<p>Address space, easy to use abstraction of physical memory, and it is the running program’s view of memory in the system. Understanding this fundamental OS ab- straction of memory is key to understanding how memory is virtualized.</p>

<p>When the OS does this, we say the OS is <strong>virtualizing memory</strong>.</p>

<p><strong>Goals</strong></p>

<p>The VM system is responsible for providing the illusion of a large, sparse, private address space to programs, which hold all of their instructions and data therein.</p>

<ul>
  <li>transparency</li>
  <li>efficiency</li>
  <li>protection (isolation)</li>
</ul>

<p><strong>EVERY ADDRESS YOU SEE IS VIRTUAL</strong></p>

<p>Any address you can see as a programmer of a user-level program is a virtual address, if you print out an address in a program, it’s a virtual one.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-every_address_you_see_is_virtual.png" alt="os-every_address_you_see_is_virtual.png" /></p>

<h3 id="chapter-14---interlude-memory-api">Chapter 14 - Interlude: Memory API</h3>

<p><strong>Types of Memory</strong></p>

<ul>
  <li><strong>stack memory</strong>, allocations and deallocations of it are managed implicitly by the compiler for you, the programmer.</li>
  <li><strong>heap memory</strong>, it is this need for long-lived memory, where all allocations and deallocations are explicitly handled by you, the programmer.</li>
</ul>

<p>Example</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">func</span><span class="p">()</span> <span class="p">{</span>     <span class="kt">int</span> <span class="o">*</span><span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>     <span class="p">...</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>First, you might no- tice that both stack and heap allocation occur on this line: first the com- piler knows to make room for a pointer to an integer when it sees your declaration of said pointer (int *x); subsequently, when the program calls malloc(), it requests space for an integer on the heap; the routine returns the address of such an integer (upon success, or NULL on failure), which is then stored on the stack for use by the program.</p>

<p><strong>API</strong></p>

<ul>
  <li><strong>malloc()</strong></li>
  <li><strong>free()</strong></li>
</ul>

<p>There are really two levels of memory management in the system. The first is level of memory management is performed by the OS, which hands out memory to processes when they run, and takes them back when processes exit (or otherwise die). The second level of management is within each process, for example within the heap when you call malloc() and free().</p>

<p>They are not system calls, but rather library calls. Thus the malloc library manages space within your virtual address space, but itself is built on top of some system calls.</p>

<ul>
  <li><strong>mmap()</strong></li>
</ul>

<p>You can also obtain memory from the operating system via the <code>mmap()</code> call. By passing in the correct arguments, mmap() can create an anonymous memory region within your program — a region which is not associated with any particular file but rather with swap space. This memory can then also be treated like a heap and managed as such.</p>

<ul>
  <li><strong>calloc()</strong></li>
</ul>

<p>Allocates memory and also zeroes it before returning; this prevents some errors where you assume that memory is zeroed and forget to initialize it yourself.</p>

<ul>
  <li><strong>realloc()</strong></li>
</ul>

<p>when you’ve allocated space for something (say, an array), and then need to add something to it: realloc() makes a new larger region of memory, copies the old region into it, and returns the pointer to the new region.</p>

<p><strong>Common Errors</strong></p>

<ul>
  <li>Forgetting To Allocate Memory - <strong>segmentation fault</strong>, which is a fancy term for YOU DID SOMETHING WRONG WITH MEMORY YOU FOOLISH PROGRAMMER AND I AM ANGRY. Forget to allocate memory.</li>
  <li>Not Allocating Enough Memory - <strong>buffer overflow</strong></li>
  <li>Forgetting to Initialize Allocated Memory - <strong>uninitialized read</strong></li>
  <li>Forgetting To Free Memory - <strong>memory leak</strong></li>
  <li>Freeing Memory Before You Are Done With It - <strong>dangling pointer</strong></li>
  <li>Freeing Memory Repeatedly - <strong>double free</strong></li>
</ul>

<p><strong>Tools</strong></p>

<ul>
  <li><strong>gdb</strong>, add -g flag to gcc, then run it with gdb. eg. gcc -g null.c -o null -Wall &amp;&amp; gdb null</li>
  <li><strong>valgrind</strong>, eg. valgrind —leak-check=yes null</li>
</ul>

<h2 id="dynamic-allocation-and-segmentation">Dynamic Allocation and Segmentation</h2>

<h3 id="chapter-15---mechanism-address-translation">Chapter 15 - Mechanism: Address Translation</h3>

<p><strong>hardware-based address translation</strong></p>

<p>With address translation, the hardware transforms each memory access (e.g., an instruction fetch, load, or store), changing the <strong>virtual</strong> address provided by the instruction to a <strong>physical</strong> address where the desired information is actually located.</p>

<p>Transforming a virtual address into a physical address is exactly the technique we refer to as address translation.</p>

<p>Key to the efficiency of this technique is hardware support, which performs the translation quickly for each access, turning virtual addresses (the process’s view of memory) into physical ones (the actual view).</p>

<p><strong>Static (Software-based) Relocation</strong></p>

<p>A piece of software known as the loader takes an executable that is about to be run and rewrites its addresses to the desired offset in physical memory.</p>

<p><strong>Dynamic (Hardware-based) Relocation</strong></p>

<p>The <strong>base and bounds</strong> technique is also referred to as dynamic relocation. With dynamic relocation, a little hardware goes a long way. Namely, a <strong>base</strong> register is used to transform virtual addresses (generated by the program) into physical addresses. A <strong>bounds</strong> (or <strong>limit</strong>) register ensures that such addresses are within the confines of the address space. Together they provide a simple and efficient virtualization of memory.</p>

<p>Because this relocation of the address happens at runtime, and because we can move address spaces even after the process has started running, the technique is often referred to as dynamic relocation.</p>

<p>We should note that the base and bounds registers are hardware stru tures kept on the chip (one pair per CPU). Sometimes people call the part of the processor that helps with address translation the <strong>memory management unit (MMU)</strong>.</p>

<p><strong>Disadvantage</strong></p>

<p>The simple approach of using a base and bounds register pair to virtualize memory is wasteful. It also makes it quite hard to run a program when the entire address space doesn’t fit into memory; thus, base and bounds is not as flexible as we would like.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-base_and_bounds.png" alt="os-base_and_bounds.png" /></p>

<p><strong>Hardware Support</strong></p>

<p>The hardware should provide special instructions to modify the base and bounds registers, allowing the OS to change them when different processes run. These instructions are privileged; only in kernel (or privileged) mode can the registers be modified.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-dynaimic_relocation_hardware_requirement.png" alt="os-dynaimic_relocation_hardware_requirement.png" /></p>

<p><strong>Operating System Support</strong></p>

<p>The combination of hardware support and OS management leads to the implementation of a simple virtual memory.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-dynamic_relocation_os_responsibility.png" alt="os-dynamic_relocation_os_responsibility.png" /></p>

<p><strong>Limited Direct Execution Protocol (Dynamic Relocation)</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-dynamic_relocation_LDE.png" alt="os-dynamic_relocation_LDE.png" /></p>

<h3 id="chapter-16-segmentation">Chapter 16 Segmentation</h3>

<p><strong>Segmentation: Generalized Base/Bounds</strong></p>

<p>Considering the disadvantage of the simple base and bounds, instead of having just one base and bounds pair in our <strong>MMU</strong>, why not <strong>have a base and bounds pair per logical segment of the address space</strong>? A segment is just a contiguous portion of the address space of a particular length, and in our canonical address space, we have three logically-different segments: code, stack, and heap.</p>

<p>The hardware structure in our <strong>MMU</strong> required to support segmenta- tion is just what you’d expect: in this case, a set of three base and bounds register pairs.</p>

<p><strong>Advantage</strong></p>

<p>Remove the Inner Fragmentation.</p>

<p>What segmentation allows the OS to do is to place each one of those segments in different parts of physical memory, and thus avoid filling physical memory with unused virtual address space.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-segmentation.png" alt="os-segmentation.png" /></p>

<p><strong>THE SEGMENTATION FAULT</strong></p>

<p>The term segmentation fault or violation arises from a memory access on a segmented machine to an illegal address. Humorously, the term persists, even on machines with no support for segmentation at all. Or not so humorously, if you can’t figure why your code keeps faulting</p>

<p><strong>Implementation</strong></p>

<p>One common approach, sometimes referred to as an explicit approach, is to chop up the address space into segments based on the top few bits of the virtual address.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-segmentation_implementation.png" alt="os-segmentation_implementation.png" /></p>

<p><strong>Hardware Support</strong></p>

<p>Negative growth for stack, and protection bits for code sharing. (to save memory, sometimes it is useful to share certain memory segments between address spaces. In particular, <strong>code sharing</strong> is common and still in use in systems today.)</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-segmentation_register_with_protection.png" alt="os-segmentation_register_with_protection.png" /></p>

<p><strong>Fine-grained vs. Coarse-grained Segmentation</strong></p>

<ul>
  <li>Coarse-grained, with just a few segments (i.e., code, stack, heap).</li>
  <li>Fine-grained, to consist of a large number smaller segments, with (further hardware support) a <strong>segment table</strong> of some kind stored in memory.</li>
</ul>

<p><strong>Disadvantage</strong></p>

<p>The general problem that arises is that physical memory quickly becomes full of little holes of free space, making it difficult to allocate new segments, or to grow existing ones. We call this problem <strong>external fragmentation</strong>.</p>

<p>Because segments are variablesized, free memory gets chopped up into odd-sized pieces, and thus satisfying a memory-allocation request can be difficult. One can try to use smart algorithms or periodically compact memory, but the problem is fundamental and hard to avoid. (compact physical memory by rearranging the existing segments, is memory-intensive and generally uses a fair amount of processor time.)</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-segmentation_compact_memory.png" alt="os-segmentation_compact_memory.png" /></p>

<p>Segmentation still isn’t flexible enough to support our fully generalized, sparse address space.</p>

<h3 id="chapter-17---free-space-management">Chapter 17 - Free-Space Management</h3>

<p>Managing free space can certainly be easy, as we will see when we discuss the concept of paging. It is easy when the space you are managing is divided into fixed-sized units; in such a case, you just keep a list of these fixed-sized units; when a client requests one of them, return the first entry.</p>

<p>Where free-space management becomes more difficult (and interesting) is when the free space you are managing consists of variable-sized units; this arises in a user-level memory-allocation library (as in malloc() and free()) and in an OS managing physical memory when using segmentation to implement virtual memory. In either case, the problem that exists is known as <strong>external fragmentation</strong>: the free space gets chopped into little pieces of different sizes and is thus fragmented; subsequent requests may fail because there is no single contiguous space that can satisfy the request, even though the total amount of free space exceeds the size of the request.</p>

<p><strong>Target</strong></p>

<p>The more you know about the exact workload presented to an <strong>allocator</strong>, the more you could do to tune it to work better for that workload.</p>

<p><strong>Assumptions</strong></p>

<p>Focus on the great history of allocators found in user-level memory-allocation libraries. The space that this library manages is known historically as the heap, and the geeric data structure used to manage free space in the heap is some kind of <strong>free list</strong>. This structure contains references to all of the free chunks of space in the managed region of memory.</p>

<p>Example</p>

<p>void free(void *ptr) takes a pointer and frees the corresponding chunk. Note the implication of the interface: the user, when freeing the space, does not inform the library of its size; thus, the library must be able to figure out how big a chunk of memory is when handed just a pointer to it.</p>

<p><strong>Splitting and Coalescing</strong></p>

<ul>
  <li>The split is commonly used in allocators when requests are smaller than the size of any particular free chunk.</li>
  <li>Coalesce free space when a chunk of memory is freed.</li>
</ul>

<p><strong>Tracking The Size Of Allocated Regions</strong></p>

<p>To accomplish this task, most allocators store a little bit of extra information in a <strong>header</strong> block which is kept in memory, usually just before the handed-out chunk of memory.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewenndy.github.io/raw/source/image-repo/os-free_space_management_non_coalesced_free_list.png" alt="os-free_space_management_non_coalesced_free_list.png" /></p>

<h2 id="paging">Paging</h2>

<h3 id="chapter-18---paging-introduction">Chapter 18 - Paging: Introduction</h3>

<p><strong>Background</strong></p>

<p>The operating system takes one of two approaches when solving most any space-management problem.</p>

<ol>
  <li>The first approach is to chop things up into <strong>variable-sized</strong> pieces, as we saw with segmenta- tion in virtual memory.</li>
  <li>To chop up space into <strong>fixed-sized</strong> pieces. In virtual memory, we call this idea paging.</li>
</ol>

<p><strong>Page vs. Page Frame</strong></p>

<ul>
  <li>From perspective of address space, the fixed-sized unit is called page.</li>
  <li>From perspective of physical space, the fixed-sized unit is called page frame.</li>
</ul>

<p>So, the address translation is to translate page to relevant page frame.</p>

<p><strong>32 bits vs. 64 bits</strong></p>

<p>Sometimes we say the OS is 32 bits or 64 bits, we may infer that</p>

<ul>
  <li>32 bits OS has 4GB address space</li>
  <li>64 bits OS has 10mGB address space</li>
</ul>

<p><strong>Advantage</strong></p>

<ul>
  <li>First, it does not lead to external fragmentation, as paging (by design) divides memory into fixed-sized units.</li>
  <li>Second, it is quite flexible, enabling the sparse use of virtual address spaces.</li>
</ul>

<p><strong>Translation</strong></p>

<p>To translate this virtual address that the process generated, we have to first split it into two components: the <strong>virtual page number (VPN)</strong>, and the <strong>offset</strong> within the page.</p>

<p>With our virtual page number, we can now index our page table, to get the <strong>physical frame number (PFN)</strong> (also sometimes called the <strong>physical page number or PPN</strong>).</p>

<p>Note the offset stays the same (i.e., it is not translated), because the offset just tells us which byte within the page we want.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-paging_address_translation_process.png" alt="os-paging_address_translation_process.png" /></p>

<p><strong>Page Table</strong></p>

<p>The operating system usually keeps a per-process data structure known as a page table.</p>

<p>One of the most important data structures in the memory management subsystem of a modern OS is the page table. In general, a page table stores virtual-to-physical address translations</p>

<p>The page table is just a data structure that is used to map virtual addresses (or really, virtual page numbers) to physical addresses (physical frame numbers). The OS indexes the array by the virtual page number (VPN), and looks up the page-table entry (PTE) at that index in order to find the desired physical frame number (PFN).</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-paging_page_table.png" alt="os-paging_page_table.png" /></p>

<p><strong>Storage</strong></p>

<p>Because page tables are so big, we don’t keep any special on-chip hard- ware in the MMU to store the page table of the currently-running process. Instead, we store the page table for each process in memory somewhere.</p>

<p><strong>Page Table Entry (PTE)</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-paging_x86_pte_example.png" alt="os-paging_x86_pte_example.png" /></p>

<p><strong>Page Table Base Register (PTBR)</strong></p>

<p>PTBR contains the physical address of the starting location of the page table.</p>

<p>Code Example</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-paging_access_memory_code_demo.png" alt="os-paging_access_memory_code_demo.png" /></p>

<h3 id="chapter-19---paging-faster-translations-tlbs">Chapter 19 - Paging: Faster Translations (TLBs)</h3>

<p><strong>Background</strong></p>

<p>Using paging as the core mechanism to support virtual memory can lead to high performance overheads. By chopping the address space into small, fixed-sized units (i.e., pages), paging requires a large amount of mapping information. Going to memory for translation information before every instruction fetch or explicit load or store is prohibitively slow.</p>

<p><strong>Translation Lookaside Buffer (TLB)</strong></p>

<p>To speed address translation, we are going to add what is called (for historical reasons) a <strong>translation-lookaside buffer</strong>, or <strong>TLB</strong>. A TLB is part of the chip’s <strong>memory-management unit (MMU)</strong>, and is simply a hardware cache of popular virtual-to-physical address translations; thus, a better name would be an <strong>address-translation cache</strong>.</p>

<p><strong>Advantage</strong></p>

<p>By providing a small, dedicated on-chip TLB as an address-translation cache, most memory references will hopefully be handled without having to access the page table in main memory.</p>

<p><strong>Algorithm</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-paging_tlb_control_flow.png" alt="os-paging_tlb_control_flow.png" /></p>

<p>Goal is to improve the TLB <strong>hit rate</strong>.</p>

<p><strong>TLB Content</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-paging_tlb_content.png" alt="os-paging_tlb_content.png" /></p>

<p>TLB contains both VPN and PFN in each entry, in hardware terms, the TLB is known as a <strong>fully-associative</strong> cache.</p>

<p><strong>TLB Miss Handling</strong></p>

<p>Two answers are possible: the hardware, or the software (OS).</p>

<p>A modern system that uses <strong>software-managed TLBs</strong>. On a TLB miss, the hardware simply raises an exception, which pauses the current instruction stream, raises the privilege level to kernel mode, and jumps to a trap handler. As you might guess, this trap handler is code within the OS that is written with the express purpose of handling TLB misses.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-paging_tlb_control_flow_os_handled.png" alt="os-paging_tlb_control_flow_os_handled.png" /></p>

<p><strong>Performance Matters</strong></p>

<p>Like any cache, TLBs rely upon both spatial and temporal locality for success, which are program properties. The idea behind hardware caches is to take advantage of <strong>locality</strong> in instruction and data references. Hardware caches, whether for instructions, data, or address translations (as in our TLB) take advantage of locality by keeping copies of memory in small, fast on-chip memory.</p>

<ol>
  <li><strong>spatial locality</strong>, the idea is that if a program accesses memory at address x, it will likely soon access memory near x.</li>
  <li><strong>temporal locality</strong>, the idea is that an instruction or data item that has been recently accessed will likely be re-accessed soon in the future.</li>
  <li>page size, why don’t we just make bigger caches and keep all of our data in them? Because any large cache by definition is slow, and thus defeats the purpose.</li>
</ol>

<p><strong>Issue 1: Context Switch</strong></p>

<p>Specifically, the TLB contains virtual-to-physical translations that are only valid for the currently running process; these translations are not meaningful for other processes. As a result, when switching from one process to another, the hardware or OS (or both) must be careful to ensure that the about-to-be-run process does not accidentally use translations from some previously run process.</p>

<ol>
  <li><strong>flush</strong> the TLB on context switches, thus emptying it before running the next process. But there is a cost: each time a process runs, it must incur TLB misses as it touches its data and code pages. If the OS switches between processes frequently, this cost may be high.</li>
  <li><strong>address space identifier (ASID)</strong>, which you can think of the ASID as a process identifier (PID), to enable sharing of the TLB across context switches.</li>
</ol>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-paging_tlb_with_asid.png" alt="os-paging_tlb_with_asid.png" /></p>

<p><strong>Issue 2: Replacement Policy</strong></p>

<p>When we are installing a new entry in the TLB, we have to replace an old one, which one to replace?</p>

<ul>
  <li><strong>least-recently-used (LRU)</strong></li>
  <li><strong>random policy</strong></li>
</ul>

<p>LRU tries to take advantage of locality in the memory-reference stream, and what the random policy exists for?</p>

<p>Random policy is useful due to its simplicity and ability to avoid corner-case behaviors; for example, a “reasonable” policy such as LRU behaves quite unreasonably when a program loops over n + 1 pages with a TLB of size n; in this case, LRU misses upon every access, whereas random does much better.</p>

<p><strong>Disadvantage</strong></p>

<ol>
  <li>
    <p>Exceeding the TLB coverage, and it can be quite a problem for certain programs. Support for large pages is often exploited by programs such as a database management system (a DBMS), which have certain data structures that are both large and randomly-accessed.</p>

    <p><strong>RAM isn’t always RAM</strong>. Sometimes randomly accessing your address space, particular if the number of pages accessed exceeds the TLB coverage, can lead to severe performance penalties. Because one of our advisors, David Culler, used to always point to the TLB as the source of many performance problems, we name this law in his honor: <strong>Culler’s Law</strong>.</p>
  </li>
  <li>
    <p>TLB access can easily become a bottleneck in the CPU pipeline, in particular with what is called a <strong>physically-indexed cache</strong>. With such a cache, address translation has to take place before the cache is accessed, which can slow things down quite a bit. A <strong>virtually-indexed cach</strong>e solves some performance problems, but introduces new issues into hardware design as well.</p>
  </li>
</ol>

<h3 id="note-on-cache-management">Note on Cache Management</h3>

<p>Define cache miss and hit, and goal is to improve the cache rate. Normally, better <strong>replacement policy</strong> lead to higher cache rate.</p>

<p><strong>Find the best replacement policy</strong></p>

<ul>
  <li>Find the optimal</li>
  <li>Find the easiest</li>
  <li>Improve toward optimal, considering Principle of Locality</li>
  <li>Think about corner case</li>
</ul>

<p><strong>Reference: Optimal Replacement Policy</strong></p>

<p>Although optimal is not very practical as a real policy, it is incredibly useful as a comparison point in simulation or other studies.</p>

<ul>
  <li>It makes your improvement meaningful, comparing to optimal policy</li>
  <li>It can show you how much improvement still possible</li>
  <li>It can tell you when to stop making your policy better, because it is close enough to the ideal</li>
</ul>

<p><strong>Reference: Easiest Replacement Policy</strong></p>

<p>Random policy, with an extraordinary advantage, can avoid corner case.</p>

<p><strong>Reference: Principle of Locality</strong></p>

<p>Programs tend to access certain code sequences (e.g., in a loop) and data structures (e.g., an array accessed by the loop) quite frequently.</p>

<ul>
  <li>spatial locality</li>
  <li>temporal locality, e.g., LRU</li>
  <li>operation expense, e.g., When swapping out pages, dirty pages are much more expensive</li>
</ul>

<p><strong>Reference: Types of Cache Misses</strong></p>

<p>In the computer architecture world, architects sometimes find it useful to characterize misses by type, into one of three categories, sometimes called the Three C’s.</p>

<ul>
  <li><strong>Compulsory miss</strong> (cold-start miss) occurs because the cache is empty to begin with and this is the first reference to the item.</li>
  <li><strong>Capacity miss</strong> occurs because the cache ran out of space and had to evict an item to bring a new item into the cache.</li>
  <li><strong>Conflict miss</strong> arises in hardware because of limits on where an item can be placed in a hardware cache, due to something known as set-associativity; it does not arise in the OS page cache because such caches are always fully-associative, i.e., there are no restrictions on where in memory a page can be placed.</li>
</ul>

<h3 id="chapter-20---paging-smaller-tables">Chapter 20 - Paging: Smaller Tables</h3>

<p><strong>Crux</strong></p>

<p>How to get rid of all those invalid regions in the page table instead of keeping them all in memory?</p>

<p><strong>Background</strong></p>

<p>Page tables are t big and thus consume too much memory.</p>

<p>Assume again a 32-bit address space (2^32 bytes), with 4KB (2^12 byte) pages and a 4-byte page-table entry. An address space thus has roughly one million virtual pages in it ( 2^20 ); multiply by the page-table entry size and you see that our page table is 4MB in size. Recall also: we usually have one page table for every process in the system! With a hundred active processes (not uncommon on a modern system), we will be allocating hundreds of megabytes of memory just for page tables!</p>

<p><strong>Solution 1 - Bigger Pages</strong></p>

<p>Big pages lead to waste within each page, a problem known as internal fragmentation. Thus, most systems use relatively small page sizes in the common case: 4KB (as in x86).</p>

<p><strong>Solution 2 - Hybrid Approach: Paging and Segments</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-paging_tlb_hybrid_approach.png" alt="os-paging_tlb_hybrid_approach.png" /></p>

<p><strong>Algorithm</strong></p>

<p>Instead of having a single page table for the entire address soopace of the process, have one per logical segment. In this example, we might thus have three page tables.</p>

<p>Remember with segmentation, we had a <strong>base</strong> register that told us where each segment lived in physical memory, and a <strong>bound</strong> or limit register that told us the size of said segment.</p>

<ol>
  <li>Each logical segment (code, stack, and heap) has one page table.</li>
  <li>Each segment has one pair of base and bounds resisters.</li>
  <li>Base register points to the page table of the segment, and bounds is used to indicate the end of the page table.</li>
</ol>

<p><strong>Advantage</strong></p>

<p>In this manner, our hybrid approach realizes a significant memory savings compared to the linear page table; unallocated pages between the stack and the heap no longer take up space in a page table (just to mark them as not valid).</p>

<p><strong>Disadvantage</strong></p>

<ol>
  <li>It still requires us to use segmentation, as it assumes a certain usage pattern of the address space; if we have a large but sparsely-used heap, for example, we can still end up with a lot of page table waste.</li>
  <li>This hybrid causes external fragmentation to arise again. While most of memory is managed in page-sized units, page tables now can be of arbitrary size (in multiples of PTEs). Thus, finding free space for them in memory is more complicated.</li>
</ol>

<p><strong>Solution 3 - Multi-level Page Tables</strong></p>

<p>It turns the linear page table into something like a tree (<strong>page directory</strong>). This approach is so effective that many modern systems employ it (e.g., x86).</p>

<p><strong>Algorithm</strong></p>

<p>First, chop up the page table into page-sized units; if an entire page of page-table entries (PTEs) is invalid, don’t allocate that page of the page table at all. To track whether a page of the page table is valid (and if valid, where it is in memory), use a new structure, called the page directory. The page directory thus either can be used to tell you where a page of the page table is, or that the entire page of the page table contains no valid pages.</p>

<p>The page directory, in a simple two-level table, contains one entry per page of the page table. It consists of a number of <strong>page directory entries (PDE)</strong>. A PDE (minimally) has a <strong>valid bit</strong> <strong>and a page frame number (PFN)</strong>, similar to a PTE.</p>

<p>VA contains VPN and offset, and VPN can be splitted into <strong>page directory index</strong> and <strong>page table index</strong>.</p>

<ol>
  <li>Use <strong>page directory index</strong> to search page directory, to get <strong>page directory entry</strong>, to get <strong>page frame number</strong>, to get the specific <strong>page table</strong>.</li>
  <li>Use <strong>page table index</strong> to search the page table, to get <strong>page table entry</strong>, to get the real <strong>physical frame number</strong>.</li>
</ol>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-paging_multi_level_page_table_demo.png" alt="os-paging_multi_level_page_table_demo.png" /></p>

<p>Demo code</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-paging_multi_level_page_table_demo_code.png" alt="os-paging_multi_level_page_table_demo_code.png" /></p>

<p><strong>Advantage</strong></p>

<ol>
  <li>The multi-level table only allocates page-table space in proportion to the amount of address space you are usig; thus it is generally compact and supports sparse address spaces.</li>
  <li>
    <p>If carefully constructed, each portion of the page table fits neatly within a page, making it easier to manage memory; the OS can simply grab the next free page when it needs to allocate or grow a page table.</p>

    <p>Contrast this to a simple (non-paged) linear page table, for a large page table (say 4MB), finding such a large chunk of unused contiguous free physical memory can be quite a challenge. With a multi-level structure, the indirection allows us to place page-table pages wherever we would like in physical memory.</p>
  </li>
</ol>

<p><strong>Disadvantage</strong></p>

<ol>
  <li>Time-space trade-off. It should be noted that there is a cost to multi-level tables; on a TLB miss, two loads from memory will be required to get the right translation information from the page table (one for the page directory, and one for the PTE itself).</li>
  <li>Another obvious negative is complexity. Whether it is the hardware or OS handling the page-table lookup (on a TLB miss), doing so is undoubt- nedly more involved than a simple linear page-table lookup.</li>
</ol>

<p><strong>Example</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-paging_multi_level_page_table_example.png" alt="os-paging_multi_level_page_table_example.png" /></p>

<p>Virtual Address format</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-paging_multi_level_page_table_example_va.png" alt="os-paging_multi_level_page_table_example_va.png" /></p>

<p>Explanation</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-paging_multi_level_page_table_example_explanation.png" alt="os-paging_multi_level_page_table_example_explanation.png" /></p>

<p><strong>Issues</strong></p>

<p><strong><em>What if the page directory gets too big?</em></strong></p>

<p>Make it more than two levels, add index to page directory index.</p>

<p><strong><em>How to make it extreme space savings?</em></strong></p>

<p>Inverted page tables. Instead of having many page tables (one per process of the system), we keep a single page table that has an entry for each physical page of the system. The entry tells us which process is using this page, and which virtual page of that process maps to this physical page.</p>

<p>A hash table is often built over the base structure to speed lookups.</p>

<p><strong><em>How to choose page table size?</em></strong></p>

<p>In a memory-constrained system (like many older systems), small structures make sense; in a system with a reasonable amount of memory and with workloads that actively use a large number of pages, a bigger table that speeds up TLB misses might be the right choice.</p>

<p><strong><em>What if the page tables are too big to fit into memory all at once?</em></strong></p>

<p>Thus far, we have assumed that page tables reside in kernel-owned physical memory. Some systems place such page tables in <strong>kernel virtual memory</strong>, thereby allowing the system to swap some of these page tables to disk when memory pressure gets a little tight.</p>

<h2 id="beyond-physical-memory">Beyond Physical Memory</h2>

<h3 id="chapter-21---beyond-physical-memory-mechanisms">Chapter 21 - Beyond Physical Memory: Mechanisms</h3>

<p><strong>Background</strong></p>

<p>In fact, we’ve been assuming that every address space of every running process fits into memory. We will now relax these big assumptions, and assume that we wish to support many concurrently-running large address spaces.</p>

<p>To support large address spaces, the OS will need a place to stash away portions of address spaces that currently aren’t in great demand. In modern systems, this role is usually served by a hard disk drive.</p>

<p><strong>Mechanism</strong></p>

<p>To do so requires more complexity in page-table structures, as a <strong>present bit</strong> (of some kind) must be included to tell us whether the page is present in memory or not. When not, the operating system <strong>page-fault handler</strong> runs to service the <strong>page fault</strong>, and thus arranges for the transfer of the desired page from disk to memory, perhaps first replacing some pages in memory to make room for those soon to be swapped in.</p>

<p><strong>Swap Space</strong></p>

<p>To reserve some space on the disk for moving pages back and forth. We will simply assume that the OS can read from and write to the swap space, in page-sized units. To do so, the OS will need to remember the <strong>disk address</strong> of a given page (PTE).</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-swap_example.png" alt="os-swap_example.png" /></p>

<p>The size of the swap space is important, as ultimately it determines the <strong>maximum number of memory pages</strong> that can be in use by a system at a given time.</p>

<p>We should note that swap space is not the only on-disk location for swapping traffic.</p>

<blockquote>
  <p>For example, assume you are running a program binary (e.g., ls, or your own compiled main program). The code pages from this binary are initially found on disk, and when the program runs, they are loaded into memory (either all at once when the program starts execution, or, as in modern systems, one page at a time when needed). However, if the system needs to make room in physical memory for other needs, it can safely re-use the memry space for these code pages, knowing that it can later swap them in again from the on-disk binary in the file system.</p>
</blockquote>

<p><strong>Present Bit</strong></p>

<p>OS use this piece of information in each page-table entry to flag if the page is in physical memory or swap space.</p>

<p>If the present bit is set to one, it means the page is present in physical memory and everything proceeds as above; if it is set to zero, the page is not in memory but rather on disk somewhere.</p>

<p><strong>Page Faut</strong></p>

<p>The act of accessing a page that is not in physical memory is commonly referred to as a <strong>page fault</strong> (it should be called a <strong>page miss</strong>. But when something the hardware doesn’t know how to handle occurs, the hardware simply transfers control to the OS. In perspective of the hardware it is a page fault).</p>

<p><strong>Page Fault Handler</strong></p>

<p>Upon a page fault, the OS is invoked to service the page fault. A particular piece of code, known as a <strong>page-fault handler</strong>, runs, and must service the page fault.</p>

<p>The appropriately-named <strong>OS page-fault handler</strong> runso to determine what to do. Virtually all systems handle page faults in software; even with a hardware-managed TLB, the hardware trusts the OS to manage this important duty.</p>

<p><strong>Page Fault Control Flow</strong></p>

<p>Hardware</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-swap_page_fault_control_flow.png" alt="os-swap_page_fault_control_flow.png" /></p>

<p>Software</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-swap_page_fault_control_flow_software.png" alt="os-swap_page_fault_control_flow_software.png" /></p>

<p>How to handle or how will the OS know where to find the desired page?</p>

<ol>
  <li>The OS could use the bits in the PTE normally used for data such as the PFN of the page for a disk address. When the OS receives a page fault for a page, it looks in the PTE to find the address, and issues the request to disk to fetch the page into memory.</li>
  <li>When the disk I/O completes, the OS will then update the page table to mark the page as present, update the PFN field of the page-table entry (PTE) to record the in-memory location of the newly-fetched page, and retry the instruction.</li>
  <li>Then generate a TLB miss, which would then be serviced and update the TLB with the translation (one could alternately update the TLB when servicing the page fault to avoid this step)</li>
  <li>Finally, a last restart would find the translation in the TLB and thus proceed to fetch the desired data or instruction from memory at the translated physical address.</li>
</ol>

<p>Note that while the I/O is in flight, the process will be in the blocked state. Thus, the OS will be free to run other ready processes while the page fault is being serviced.</p>

<p><strong><em>What If Memory Is Full?</em></strong></p>

<p>OS might like to first page out one or more pages to make room for the new page(s) the OS is about to bring in. The process of picking a page to kick out, or replace is known as the <strong>page-replacement policy</strong>.</p>

<p><strong><em>When Replacements Really Occur?</em></strong></p>

<p>There are many reasons for the OS to keep a small portion of memory free more proactively. To keep a small amount of memory free, most operating systems thus have some kind of <strong>high watermark (HW)</strong> and <strong>low watermark (LW)</strong> to help decide when to start evicting pages from memory.</p>

<p>When the OS notices that there are fewer than LW pages available, a background thread that is responsible for freeing memory runs. The thread evicts pages until there are HW pages available. The background thread, sometimes called the <strong>swap daemon</strong> or <strong>page daemon</strong>, then goes to sleep, happy that it has freed some memory for running processes and the OS to use.</p>

<p>So, instead of performing a replacement directly, the algorithm would instead simply check if there are any free pages available. If not, it would inform the <strong>page daemon</strong> that free pages are needed; when the thread frees up some pages, it would re-awaken the original thread, which could then page in the desired page and go about its work.</p>

<p><strong><em>How To Make Replacement Efficient?</em></strong></p>

<p>Many systems will cluster or group a number of pages and write them out at once to the swap partition, thus increasing the efficiency of the disk.</p>

<h3 id="chapter-22---beyond-physical-memory-policies">Chapter 22 - Beyond Physical Memory: Policies</h3>

<p><strong>Background</strong></p>

<p>In such a case, this memory pressure forces the OS to start <strong>paging out</strong> pages to make room for actively-used pages. Deciding which page (or pages) to evict is encapsulated within the <strong>replacement policy</strong> of the OS.</p>

<p><strong>Cache Management</strong></p>

<p>Given that main memory holds some subset of all the pages in the system, it can rightly be viewed as a cache for virtual memory pages in the system. And our goal as maximizing the number of <strong>cache hits</strong>.</p>

<p>Knowing the number of cache hits and misses let us calculate the <strong>average memory access time (AMAT)</strong> for a program.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-replacement_amat.png" alt="os-replacement_amat.png" /></p>

<p>Example</p>

<p>Suppose T(M) = 100ns (10^-7), T(D) = 10ms (10^-2)</p>

<ul>
  <li>P(Hit) = 90%, P(Miss) = 10%, AMAT = 1ms + 90ns</li>
  <li>P(Hit) = 99.9%, P(Miss) = 0.1%, AMAT = 0.01ms + 99.9ns</li>
</ul>

<p>The cost of disk access is so high in modern systems that even a tiny miss rate will quickly dominate the overall AMAT of running programs.</p>

<p><strong>Polices</strong></p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-replacement_summary.png" alt="os-replacement_summary.png" /></p>

<p><strong>Policy 1. Optimal Replacement Policy</strong></p>

<p>Replaces the page that will be accessed furthest in the future is the optimal policy, resulting in the fewest-possible cache misses.</p>

<p>In the development of scheduling policies, the future is not generally known; you can’t build the optimal policy for a general-purpose operating system.</p>

<p>Although optimal is not very practical as a real policy, it is incredibly useful as a comparison point in simulation or other studies.</p>

<ul>
  <li>It makes your improvement meaningful, comparing to optimal policy</li>
  <li>It can show you how much improvement still possible</li>
  <li>It can tell you when to stop making your policy better, because it is close enough to the ideal</li>
</ul>

<p><strong>Policy 2. FIFO</strong></p>

<p>Normal efficiency, easy to implement, and has corner case.</p>

<p>In some cases, when increasing the cache size, hit rate may get lower. This odd behavior is generally referred to as <strong>Belady’s Anomaly</strong>.</p>

<p><strong>Policy 3. Random</strong></p>

<p>Normal efficiency, easy to implement, but remember, it can avoid corner case.</p>

<p><strong>Policy 4. LRU</strong></p>

<p>LRU has what is known as a stack property. When increasing the cache size, hit rate will either stay the same or improve.</p>

<p><strong>Comparison with Workload</strong></p>

<p>No locality workload</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-replacement_no_locality_workload.png" alt="os-replacement_no_locality_workload.png" /></p>

<p>The 80-20 Workload, 80% of the references are made to 20% of the pages (the “hot” pages).</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-replacement_80_20_workload.png" alt="os-replacement_80_20_workload.png" /></p>

<p>The Looping-Sequential Workload</p>

<p>Looping sequential workload, as in it, we refer to 50 pages in sequence, starting at 0, then 1, …, up to page 49, and then we lp, repeating those accesses.</p>

<p>It represents a worst-case for both LRU and FIFO, but no influence on Random. Turns out that random has some nice properties; one such property is not having weird corner-case behaviors.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-replacement_looping_sequential_workload.png" alt="os-replacement_looping_sequential_workload.png" /></p>

<p><strong>Implementation - Approximating LRU</strong></p>

<p>To keep track of which pages have been least- and most-recently used, the system has to do some accounting work on every memory reference. Unfortunately, as the number of pages in a system grows, scanning a huge array of times just to find the absolute least-recently-used page is prohibitively expensive.</p>

<p>Idea</p>

<p>Approximating LRU is more feasible from a computational-overhead standpoint, and indeed it is what many modern systems do. The idea requires some hardware support, in the form of a <strong>use bit</strong> (sometimes called the <strong>reference bit</strong>).</p>

<ul>
  <li>Whenever a page is referenced (i.ooe., read or written), the use bit is set by hardware to 1.</li>
  <li>The hardware never clears the bit, though (i.e., sets it to 0); that is the responsibility of the OS.</li>
</ul>

<p>Implementation by Clock Algorithm</p>

<ul>
  <li>Imagine all the pages of the system arranged in a circular list. A clock hand points to some particular page to begin with.</li>
  <li>When a replacement must occur, the OS iterating the circular list checking on use bit.
    <ul>
      <li>If 1, clear use bit to 0, and find next</li>
      <li>If 0, use it</li>
    </ul>
  </li>
</ul>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-replacement_80_20_workload_with_clock.png" alt="os-replacement_80_20_workload_with_clock.png" /></p>

<p><strong>Considering Dirty Pages</strong></p>

<p>Consider the locality by the expense on swapping out pages.</p>

<ul>
  <li>If a page has been <strong>modified</strong> and is thus <strong>dirty</strong>, it must be written back to disk to evict it, which is expensive.</li>
  <li>If it has not been modified (and is thus clean), the eviction is free; the physical frame can simply be reused for other purposes without additional I/O.
Idea</li>
</ul>

<p>To support this behavior, the hardware should include a <strong>modified bit</strong> (a.k.a. <strong>dirty bit</strong>).</p>

<p>Implementation by Clock Algorithm</p>

<p>The clock algorithm, for example, could be changed to scan for pages that are both unused and clean to evict first; failing to find those, then for unused pages that are dirty, and so forth.</p>

<p><strong>Other VM Policies</strong></p>

<p><strong><em>When the OS bring a page into memory?</em></strong></p>

<p>Page selection policy. The OS simply uses <strong>demand paging</strong>, which means the OS brings the page into memory when it is accessed, “on demand” as it were. Of course, the OS could guess that a page is about to be used, and thus bring it in ahead of time; this behavior is known as <strong>prefetching</strong>.</p>

<p><strong><em>How the OS writes pages out to disk?</em></strong></p>

<p>Any systems instead collect a number of pending writes together in memory and write them to disk in one (more efficient) write. This behavior is usually called <strong>clustering</strong> or simply <strong>grouping</strong> of writes, and is effective because of the nature of disk drives.</p>

<p><strong><em>What about
 the memory demands of the set of running processes simply exceeds the available physical memory? (condition sometimes referred to as thrashing)</em></strong></p>

<p>Given a set of processes, a system could decide not to run a subset of processes, with the hope that the reduced set of processes working sets (the pages that they are using actively) fit in memory and thus can make progress. This approach, generally known as <strong>admission control</strong>, states that it is sometimes better to do less work well than to try to do everything at once poorly.</p>

<p>Some versions of Linux run an <strong>out-of-memory killer</strong> when memory is oversubscribed; this daemon chooses a memory- intensive process and kills it, thus reducing memory in a none-too-subtle manner.</p>

<h3 id="chapter-23---the-vaxvms-virtual-memory-system">Chapter 23 - The VAX/VMS Virtual Memory System</h3>

<p><strong>Background</strong></p>

<p>The VAX-11 minicomputer architecture was introduced in the late 1970’s by Digital Equipment Corporation (DEC).</p>

<p>As an additional issue, VMS is an excellent example of software innovations used to hide some of the inheret flaws of the architecture.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/os-vax_vms_address_space.png" alt="os-vax_vms_address_space.png" /></p>

<p><strong>Reduce Page Table Pressure</strong></p>

<p>First, by segmenting the user address space into two, the VAX-11 provides a page table for each of these regions (P0 and P1) per process; thus, no page-table space is needed for the unused portion of the address space between the stack and the heap.</p>

<p>Second, the OS reduces memory pressure even further by placing user page tables (for P0 and P1, thus two per process) in kernel virtual memory. Thus, when allocating or growing a page table, the kernel allocates space out of its own virtual memory, in segment S. If memory comes undersevere pressure, the kernel can swap pages of these page tables out to disk, thus making physical memory available for other uses.</p>

<p><strong>Replacement policy: Segmented FIFO with Page Clustering</strong></p>

<p>Each process has a maximum number of pages it can keep in memory, known as its <strong>residentn set size (RSS)</strong>. Each of these pages is kept on a FIFO list; when a process exceeds its RSS, the “first-in” page is evicted. FIFO clearly does not need any support from the hardware (no use bit), and is thus easy to implement.</p>

<p>To improve FIFO’s performance, VMS introduced two <strong>second-chance lists</strong> where pages are placed before getting evicted from memory, specifically a global clean-page free list and dirty-page list. The bigger these global second-chance lists are, the closer the segmented FIFO algorithm performs to LRU.</p>

<p>Clustering is used in most modern systems, as the freedom to place pages anywhere within swap space lets the OS group pages, perform fewer and bigger writes, and thus improve performance.</p>

<p><strong>Optimisation: Be Lazy</strong></p>

<p>Laziness can put off work until later, which is beneficial within an OS for a number of reasons.</p>

<ul>
  <li>First, putting off work might reduce the latency of the current operation, thus improving responsiveness; for example, operating systems often report that writes to a file succeeded immediately, and only write them to disk later in the background.</li>
  <li>Second, and more importantly, laziness sometimes obviates the need to do the work at all; for example, delaying a write until the file is deleted removes the need to do the write at all.</li>
</ul>

<p><strong>Lazy Optimisation: Demanding Zero</strong></p>

<p>With demand zeroing, the OS instead does very little work when the page is added to your address space; it puts an entry in the page table that marks the page inaccessible. If the process then reads or writes the page, a trap into the OS takes place. When handling the trap, the OS notices that this is actually a demand-zero page; at this point, the OS then does the needed work of finding a physical page, zeroing it, and mapping it into the process’s address space. If the process never accesses the page, all of this work is avoided, and thus the virtue of demand zeroing.</p>

<p><strong>Lazy Optimisation: Copy-on-write</strong></p>

<p>When the OS needs to copy a page from one address space to another, instead of copying it, it can map it into the target address space and mark it read-only in both address spaces.</p>

<ul>
  <li>If both address spaces only read the page, no further action is taken, and thus the OS has realized a fast copy without actually moving any data.</li>
  <li>If, however, one of the address spaces does indeed try to write to the page, it will trap into the OS. The OS will then notice that the page is a COW page, and thus (lazily) allocate a new page, fill it with the data, and map this new page into the address space of the faulting process. The process then continues and now has its own private copy of the page.</li>
</ul>

<p>In UNIX systems, COW is even more critical, due to the semantics of <code>fork()</code> and <code>exec()</code>. <code>fork()</code> creates an exact copy of the address space of the caller; with a large address space, making such a copy is slow and data intensive. Even worse, most of the address space is immediately over-written by a subsequent call to <code>exec()</code>, which overlays the calling process’s address space with that of the soon-to-be-exec’d program. By instead performing a copy-on-write <code>fork()</code>, the OS avoids much of the needless copying and thus retains the correct semantics while improving performance.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[preload, eager_load, includes, references, and joins in Rails]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2015/11/11/preload-eager_load-includes-references-joins/"/>
    <updated>2015-11-11T10:25:17-05:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2015/11/11/preload-eager_load-includes-references-joins</id>
    <content type="html"><![CDATA[<p>There is always a confusion about these query methods. And after some digging, I’ve made my conclusion here: <code>includes</code> is the outstanding one.</p>

<p>Here comes the demonstation.</p>

<p><strong>Preparation</strong></p>

<p>Environment</p>

<ul>
  <li>Ruby: 2.2.2</li>
  <li>Rails: 4.2.2</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># model and reference</span>
</span><span class="line"><span class="k">class</span> <span class="nc">Blog</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="n">has_many</span> <span class="ss">:posts</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># t.string   &quot;name&quot;</span>
</span><span class="line">  <span class="c1"># t.string   &quot;author&quot;</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class="line">  <span class="n">belongs_to</span> <span class="ss">:blog</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># t.string   &quot;title&quot;</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="c1"># seed</span>
</span><span class="line"><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">3</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">b_id</span><span class="o">|</span>
</span><span class="line">  <span class="n">blog</span> <span class="o">=</span> <span class="no">Blog</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;Blog </span><span class="si">#{</span><span class="n">b_id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="ss">author</span><span class="p">:</span> <span class="s1">&#39;someone&#39;</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">5</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">p_id</span><span class="o">|</span> <span class="n">blog</span><span class="o">.</span><span class="n">posts</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Post </span><span class="si">#{</span><span class="n">b_id</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="n">p_id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="preload">preload</h3>

<p>Always firing two separate queries.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">&gt; Blog.preload<span class="o">(</span>:posts<span class="o">)</span>
</span><span class="line">  Blog Load <span class="o">(</span>3.2ms<span class="o">)</span>  SELECT <span class="s2">&quot;blogs&quot;</span>.* FROM <span class="s2">&quot;blogs&quot;</span>
</span><span class="line">  Post Load <span class="o">(</span>1.2ms<span class="o">)</span>  SELECT <span class="s2">&quot;posts&quot;</span>.* FROM <span class="s2">&quot;posts&quot;</span> WHERE <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> IN <span class="o">(</span>1, 2, 3<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="eagerload">eager_load</h3>

<ul>
  <li>One query, LEFT OUTER JOINed in any query rather than loaded separately.</li>
  <li>JOIN first, then query by where clause. So you can query on referenced table, without an iteration of  <code>Enumerable#select</code>.</li>
  <li>Works just the same as <code>includes</code> + <code>references</code>.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">&gt; Blog.eager_load<span class="o">(</span>:posts<span class="o">)</span>
</span><span class="line">  SQL <span class="o">(</span>0.4ms<span class="o">)</span>  SELECT <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;id&quot;</span> AS t0_r0, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;name&quot;</span> AS t0_r1, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;author&quot;</span> AS t0_r2, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;created_at&quot;</span> AS t0_r3, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;updated_at&quot;</span> AS t0_r4, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;id&quot;</span> AS t1_r0, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;title&quot;</span> AS t1_r1, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;created_at&quot;</span> AS t1_r2, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;updated_at&quot;</span> AS t1_r3, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> AS t1_r4 FROM <span class="s2">&quot;blogs&quot;</span> LEFT OUTER JOIN <span class="s2">&quot;posts&quot;</span> ON <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;id&quot;</span>
</span><span class="line">
</span><span class="line">&gt; Blog.eager_load<span class="o">(</span>:posts<span class="o">)</span>.where<span class="o">(</span>name: <span class="s1">&#39;Blog 1&#39;</span><span class="o">)</span>
</span><span class="line">  SQL <span class="o">(</span>0.4ms<span class="o">)</span>  SELECT <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;id&quot;</span> AS t0_r0, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;name&quot;</span> AS t0_r1, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;author&quot;</span> AS t0_r2, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;created_at&quot;</span> AS t0_r3, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;updated_at&quot;</span> AS t0_r4, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;id&quot;</span> AS t1_r0, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;title&quot;</span> AS t1_r1, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;created_at&quot;</span> AS t1_r2, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;updated_at&quot;</span> AS t1_r3, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> AS t1_r4 FROM <span class="s2">&quot;blogs&quot;</span> LEFT OUTER JOIN <span class="s2">&quot;posts&quot;</span> ON <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;id&quot;</span> WHERE <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;name&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;name&quot;</span>, <span class="s2">&quot;Blog 1&quot;</span><span class="o">]]</span>
</span><span class="line">
</span><span class="line">&gt; Blog.eager_load<span class="o">(</span>:posts<span class="o">)</span>.where<span class="o">(</span>name: <span class="s1">&#39;Blog 1&#39;</span><span class="o">)</span>.where<span class="o">(</span>posts: <span class="o">{</span>title: <span class="s1">&#39;Post 1-1&#39;</span><span class="o">})</span>
</span><span class="line">  SQL <span class="o">(</span>0.4ms<span class="o">)</span>  SELECT <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;id&quot;</span> AS t0_r0, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;name&quot;</span> AS t0_r1, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;author&quot;</span> AS t0_r2, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;created_at&quot;</span> AS t0_r3, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;updated_at&quot;</span> AS t0_r4, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;id&quot;</span> AS t1_r0, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;title&quot;</span> AS t1_r1, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;created_at&quot;</span> AS t1_r2, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;updated_at&quot;</span> AS t1_r3, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> AS t1_r4 FROM <span class="s2">&quot;blogs&quot;</span> LEFT OUTER JOIN <span class="s2">&quot;posts&quot;</span> ON <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;id&quot;</span> WHERE <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;name&quot;</span> <span class="o">=</span> ? AND <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;title&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;name&quot;</span>, <span class="s2">&quot;Blog 1&quot;</span><span class="o">]</span>, <span class="o">[</span><span class="s2">&quot;title&quot;</span>, <span class="s2">&quot;Post 1-1&quot;</span><span class="o">]]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="includes">includes</h3>

<p>Behaves based on situations, intelligent!</p>

<p>Situation 1, just like <code>preload</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">&gt; Blog.includes<span class="o">(</span>:posts<span class="o">)</span>
</span><span class="line">  Blog Load <span class="o">(</span>2.8ms<span class="o">)</span>  SELECT <span class="s2">&quot;blogs&quot;</span>.* FROM <span class="s2">&quot;blogs&quot;</span>
</span><span class="line">  Post Load <span class="o">(</span>0.7ms<span class="o">)</span>  SELECT <span class="s2">&quot;posts&quot;</span>.* FROM <span class="s2">&quot;posts&quot;</span> WHERE <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> IN <span class="o">(</span>1, 2, 3<span class="o">)</span>
</span><span class="line">
</span><span class="line">&gt; Blog.includes<span class="o">(</span>:posts<span class="o">)</span>.where<span class="o">(</span>name: <span class="s1">&#39;Blog 1&#39;</span><span class="o">)</span>
</span><span class="line">  Blog Load <span class="o">(</span>0.7ms<span class="o">)</span>  SELECT <span class="s2">&quot;blogs&quot;</span>.* FROM <span class="s2">&quot;blogs&quot;</span> WHERE <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;name&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;name&quot;</span>, <span class="s2">&quot;Blog 1&quot;</span><span class="o">]]</span>
</span><span class="line">  Post Load <span class="o">(</span>0.3ms<span class="o">)</span>  SELECT <span class="s2">&quot;posts&quot;</span>.* FROM <span class="s2">&quot;posts&quot;</span> WHERE <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> IN <span class="o">(</span>1<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Situation 2, just like <code>eager_load</code>, <strong>fired by querying referenced table</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">&gt; Blog.includes<span class="o">(</span>:posts<span class="o">)</span>.where<span class="o">(</span>name: <span class="s1">&#39;Blog 1&#39;</span><span class="o">)</span>.where<span class="o">(</span>posts: <span class="o">{</span>title: <span class="s1">&#39;Post 1-1&#39;</span><span class="o">})</span>
</span><span class="line">  SQL <span class="o">(</span>0.2ms<span class="o">)</span>  SELECT <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;id&quot;</span> AS t0_r0, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;name&quot;</span> AS t0_r1, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;author&quot;</span> AS t0_r2, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;created_at&quot;</span> AS t0_r3, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;updated_at&quot;</span> AS t0_r4, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;id&quot;</span> AS t1_r0, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;title&quot;</span> AS t1_r1, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;created_at&quot;</span> AS t1_r2, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;updated_at&quot;</span> AS t1_r3, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> AS t1_r4 FROM <span class="s2">&quot;blogs&quot;</span> LEFT OUTER JOIN <span class="s2">&quot;posts&quot;</span> ON <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;id&quot;</span> WHERE <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;name&quot;</span> <span class="o">=</span> ? AND <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;title&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;name&quot;</span>, <span class="s2">&quot;Blog 1&quot;</span><span class="o">]</span>, <span class="o">[</span><span class="s2">&quot;title&quot;</span>, <span class="s2">&quot;Post 1-1&quot;</span><span class="o">]]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong><em><code>includes</code> or <code>eager_load</code></em></strong></p>

<p>Consider this snippet:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">&gt; Blog.includes<span class="o">(</span>:posts<span class="o">)</span>.each<span class="o">{</span>|blog| puts blog.posts.map<span class="o">(</span>&amp;:title<span class="o">)</span>.join<span class="o">(</span><span class="s1">&#39;,&#39;</span><span class="o">)</span> <span class="o">}</span>
</span><span class="line">  Blog Load <span class="o">(</span>0.3ms<span class="o">)</span>  SELECT <span class="s2">&quot;blogs&quot;</span>.* FROM <span class="s2">&quot;blogs&quot;</span>
</span><span class="line">  Post Load <span class="o">(</span>0.3ms<span class="o">)</span>  SELECT <span class="s2">&quot;posts&quot;</span>.* FROM <span class="s2">&quot;posts&quot;</span> WHERE <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> IN <span class="o">(</span>1, 2, 3<span class="o">)</span>
</span><span class="line">
</span><span class="line">&gt; Blog.eager_load<span class="o">(</span>:posts<span class="o">)</span>.each<span class="o">{</span>|blog| puts blog.posts.map<span class="o">(</span>&amp;:title<span class="o">)</span>.join<span class="o">(</span><span class="s1">&#39;,&#39;</span><span class="o">)</span> <span class="o">}</span>                                                                                                                    SQL <span class="o">(</span>0.9ms<span class="o">)</span>
</span><span class="line">  SELECT <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;id&quot;</span> AS t0_r0, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;name&quot;</span> AS t0_r1, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;author&quot;</span> AS t0_r2, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;created_at&quot;</span> AS t0_r3, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;updated_at&quot;</span> AS t0_r4, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;id&quot;</span> AS t1_r0, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;title&quot;</span> AS t1_r1, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;created_at&quot;</span> AS t1_r2, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;updated_at&quot;</span> AS t1_r3, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> AS t1_r4 FROM <span class="s2">&quot;blogs&quot;</span> LEFT OUTER JOIN <span class="s2">&quot;posts&quot;</span> ON <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;id&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Both expressions return the same result, so should we prefer two seperated queries by <code>includes</code> (also <code>preload</code>) or the LEFT OUTER JOINed query by <code>eager_load</code>?</p>

<p>There is a <a href="http://www.akitaonrails.com/2008/5/26/rolling-with-rails-2-1-the-first-full-tutorial-part-2">blog post</a> by Fabio Akita talks about the change of Rails 2.1 (see the section entitled “Optimized Eager Loading”). Here are some references:</p>

<blockquote>
  <p>For some situations, the monster outer join becomes slower than many smaller queries.
The bottom line is: generally it seems better to split a monster join into smaller ones, as you’ve seen in the above example. This avoid the cartesian product overload problem.</p>
</blockquote>

<p>Example for SQL data returned from LEFT OUTER JOIN query</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">sqlite&gt;  SELECT <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;id&quot;</span> AS t0_r0, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;name&quot;</span> AS t0_r1, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;author&quot;</span> AS t0_r2, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;created_at&quot;</span> AS t0_r3, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;updated_at&quot;</span> AS t0_r4, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;id&quot;</span> AS t1_r0, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;title&quot;</span> AS t1_r1, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;created_at&quot;</span> AS t1_r2, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;updated_at&quot;</span> AS t1_r3, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> AS t1_r4 FROM <span class="s2">&quot;blogs&quot;</span> LEFT OUTER JOIN <span class="s2">&quot;posts&quot;</span> ON <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;id&quot;</span>;
</span><span class="line">1|Blog 1|someone|2015-11-11 15:22:35.015095|2015-11-11 15:22:35.015095|1|Post 1-1|2015-11-11 15:22:35.053689|2015-11-11 15:22:35.053689|1
</span><span class="line">1|Blog 1|someone|2015-11-11 15:22:35.015095|2015-11-11 15:22:35.015095|2|Post 1-2|2015-11-11 15:22:35.058113|2015-11-11 15:22:35.058113|1
</span><span class="line">1|Blog 1|someone|2015-11-11 15:22:35.015095|2015-11-11 15:22:35.015095|3|Post 1-3|2015-11-11 15:22:35.062776|2015-11-11 15:22:35.062776|1
</span><span class="line">1|Blog 1|someone|2015-11-11 15:22:35.015095|2015-11-11 15:22:35.015095|4|Post 1-4|2015-11-11 15:22:35.065994|2015-11-11 15:22:35.065994|1
</span><span class="line">1|Blog 1|someone|2015-11-11 15:22:35.015095|2015-11-11 15:22:35.015095|5|Post 1-5|2015-11-11 15:22:35.069632|2015-11-11 15:22:35.069632|1
</span><span class="line">2|Blog 2|someone|2015-11-11 15:22:35.072871|2015-11-11 15:22:35.072871|6|Post 2-1|2015-11-11 15:22:35.078644|2015-11-11 15:22:35.078644|2
</span><span class="line">2|Blog 2|someone|2015-11-11 15:22:35.072871|2015-11-11 15:22:35.072871|7|Post 2-2|2015-11-11 15:22:35.081845|2015-11-11 15:22:35.081845|2
</span><span class="line">2|Blog 2|someone|2015-11-11 15:22:35.072871|2015-11-11 15:22:35.072871|8|Post 2-3|2015-11-11 15:22:35.084888|2015-11-11 15:22:35.084888|2
</span><span class="line">2|Blog 2|someone|2015-11-11 15:22:35.072871|2015-11-11 15:22:35.072871|9|Post 2-4|2015-11-11 15:22:35.087778|2015-11-11 15:22:35.087778|2
</span><span class="line">2|Blog 2|someone|2015-11-11 15:22:35.072871|2015-11-11 15:22:35.072871|10|Post 2-5|2015-11-11 15:22:35.090781|2015-11-11 15:22:35.090781|2
</span><span class="line">3|Blog 3|someone|2015-11-11 15:22:35.093902|2015-11-11 15:22:35.093902|11|Post 3-1|2015-11-11 15:22:35.097479|2015-11-11 15:22:35.097479|3
</span><span class="line">3|Blog 3|someone|2015-11-11 15:22:35.093902|2015-11-11 15:22:35.093902|12|Post 3-2|2015-11-11 15:22:35.103512|2015-11-11 15:22:35.103512|3
</span><span class="line">3|Blog 3|someone|2015-11-11 15:22:35.093902|2015-11-11 15:22:35.093902|13|Post 3-3|2015-11-11 15:22:35.108775|2015-11-11 15:22:35.108775|3
</span><span class="line">3|Blog 3|someone|2015-11-11 15:22:35.093902|2015-11-11 15:22:35.093902|14|Post 3-4|2015-11-11 15:22:35.112654|2015-11-11 15:22:35.112654|3
</span><span class="line">3|Blog 3|someone|2015-11-11 15:22:35.093902|2015-11-11 15:22:35.093902|15|Post 3-5|2015-11-11 15:22:35.117601|2015-11-11 15:22:35.117601|3
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <p>The longer and more complex the result set, the more this matters because the more objects Rails would have to deal with. Allocating and deallocating several hundreds or thousands of small duplicated objects is never a good deal.</p>
</blockquote>

<p>As <code>includes</code> can behave the same as <code>eager_load</code> in one case, but better in the other case. My conclusion is, <strong>prefer <code>includes</code> over <code>eager_load</code></strong>.</p>

<h3 id="references">references</h3>

<ul>
  <li>Works only with <code>includes</code>, makes <code>includes</code> behaves like <code>eager_load</code></li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">&gt; Blog.includes<span class="o">(</span>:posts<span class="o">)</span>.where<span class="o">(</span>name: <span class="s1">&#39;Blog 1&#39;</span><span class="o">)</span>.references<span class="o">(</span>:posts<span class="o">)</span>
</span><span class="line">  SQL <span class="o">(</span>0.2ms<span class="o">)</span>  SELECT <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;id&quot;</span> AS t0_r0, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;name&quot;</span> AS t0_r1, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;author&quot;</span> AS t0_r2, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;created_at&quot;</span> AS t0_r3, <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;updated_at&quot;</span> AS t0_r4, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;id&quot;</span> AS t1_r0, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;title&quot;</span> AS t1_r1, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;created_at&quot;</span> AS t1_r2, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;updated_at&quot;</span> AS t1_r3, <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> AS t1_r4 FROM <span class="s2">&quot;blogs&quot;</span> LEFT OUTER JOIN <span class="s2">&quot;posts&quot;</span> ON <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;id&quot;</span> WHERE <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;name&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;name&quot;</span>, <span class="s2">&quot;Blog 1&quot;</span><span class="o">]]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="joins">joins</h3>

<p><em>INNER JOIN</em>, compared to <code>eager_load</code> (<em>LEFT OUTER JOIN</em>).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">&gt; Blog.joins<span class="o">(</span>:posts<span class="o">)</span>
</span><span class="line">  Blog Load <span class="o">(</span>0.2ms<span class="o">)</span>  SELECT <span class="s2">&quot;blogs&quot;</span>.* FROM <span class="s2">&quot;blogs&quot;</span> INNER JOIN <span class="s2">&quot;posts&quot;</span> ON <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;id&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>compared to <code>eager_load</code></strong></p>

<p>Query by <code>joins</code> just returns the raw data, whereas the data from <code>eager_load</code> is filtered by Rails.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">&gt; Blog.joins<span class="o">(</span>:posts<span class="o">)</span>.count
</span><span class="line">   <span class="o">(</span>0.3ms<span class="o">)</span>  SELECT COUNT<span class="o">(</span>*<span class="o">)</span> FROM <span class="s2">&quot;blogs&quot;</span> INNER JOIN <span class="s2">&quot;posts&quot;</span> ON <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;id&quot;</span>
</span><span class="line"> <span class="o">=</span>&gt; 15
</span><span class="line">&gt; Blog.eager_load<span class="o">(</span>:posts<span class="o">)</span>.count
</span><span class="line">   <span class="o">(</span>0.4ms<span class="o">)</span>  SELECT COUNT<span class="o">(</span>DISTINCT <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;id&quot;</span><span class="o">)</span> FROM <span class="s2">&quot;blogs&quot;</span> LEFT OUTER JOIN <span class="s2">&quot;posts&quot;</span> ON <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;id&quot;</span>
</span><span class="line"> <span class="o">=</span>&gt; 3
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>So you need to take caution about iteration on <code>joins</code> query.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">&gt; Blog.joins<span class="o">(</span>:posts<span class="o">)</span>.each <span class="k">do</span> |blog|
</span><span class="line">&gt;   puts blog.posts.map<span class="o">(</span>&amp;:title<span class="o">)</span>.join<span class="o">(</span><span class="s1">&#39;, &#39;</span><span class="o">)</span>
</span><span class="line">&gt; end
</span><span class="line">  Blog Load <span class="o">(</span>0.2ms<span class="o">)</span>  SELECT <span class="s2">&quot;blogs&quot;</span>.* FROM <span class="s2">&quot;blogs&quot;</span> INNER JOIN <span class="s2">&quot;posts&quot;</span> ON <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> <span class="s2">&quot;blogs&quot;</span>.<span class="s2">&quot;id&quot;</span>
</span><span class="line">  Post Load <span class="o">(</span>0.3ms<span class="o">)</span>  SELECT <span class="s2">&quot;posts&quot;</span>.* FROM <span class="s2">&quot;posts&quot;</span> WHERE <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;blog_id&quot;</span>, 1<span class="o">]]</span>
</span><span class="line">Post 1-1, Post 1-2, Post 1-3, Post 1-4, Post 1-5
</span><span class="line">  Post Load <span class="o">(</span>0.1ms<span class="o">)</span>  SELECT <span class="s2">&quot;posts&quot;</span>.* FROM <span class="s2">&quot;posts&quot;</span> WHERE <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;blog_id&quot;</span>, 1<span class="o">]]</span>
</span><span class="line">Post 1-1, Post 1-2, Post 1-3, Post 1-4, Post 1-5
</span><span class="line">  Post Load <span class="o">(</span>0.1ms<span class="o">)</span>  SELECT <span class="s2">&quot;posts&quot;</span>.* FROM <span class="s2">&quot;posts&quot;</span> WHERE <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;blog_id&quot;</span>, 1<span class="o">]]</span>
</span><span class="line">Post 1-1, Post 1-2, Post 1-3, Post 1-4, Post 1-5
</span><span class="line">  Post Load <span class="o">(</span>0.1ms<span class="o">)</span>  SELECT <span class="s2">&quot;posts&quot;</span>.* FROM <span class="s2">&quot;posts&quot;</span> WHERE <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;blog_id&quot;</span>, 1<span class="o">]]</span>
</span><span class="line">Post 1-1, Post 1-2, Post 1-3, Post 1-4, Post 1-5
</span><span class="line">  Post Load <span class="o">(</span>0.1ms<span class="o">)</span>  SELECT <span class="s2">&quot;posts&quot;</span>.* FROM <span class="s2">&quot;posts&quot;</span> WHERE <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;blog_id&quot;</span>, 1<span class="o">]]</span>
</span><span class="line">Post 1-1, Post 1-2, Post 1-3, Post 1-4, Post 1-5
</span><span class="line">  Post Load <span class="o">(</span>0.1ms<span class="o">)</span>  SELECT <span class="s2">&quot;posts&quot;</span>.* FROM <span class="s2">&quot;posts&quot;</span> WHERE <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;blog_id&quot;</span>, 2<span class="o">]]</span>
</span><span class="line">Post 2-1, Post 2-2, Post 2-3, Post 2-4, Post 2-5
</span><span class="line">  Post Load <span class="o">(</span>0.1ms<span class="o">)</span>  SELECT <span class="s2">&quot;posts&quot;</span>.* FROM <span class="s2">&quot;posts&quot;</span> WHERE <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;blog_id&quot;</span>, 2<span class="o">]]</span>
</span><span class="line">Post 2-1, Post 2-2, Post 2-3, Post 2-4, Post 2-5
</span><span class="line">  Post Load <span class="o">(</span>0.1ms<span class="o">)</span>  SELECT <span class="s2">&quot;posts&quot;</span>.* FROM <span class="s2">&quot;posts&quot;</span> WHERE <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;blog_id&quot;</span>, 2<span class="o">]]</span>
</span><span class="line">Post 2-1, Post 2-2, Post 2-3, Post 2-4, Post 2-5
</span><span class="line">  Post Load <span class="o">(</span>0.1ms<span class="o">)</span>  SELECT <span class="s2">&quot;posts&quot;</span>.* FROM <span class="s2">&quot;posts&quot;</span> WHERE <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;blog_id&quot;</span>, 2<span class="o">]]</span>
</span><span class="line">Post 2-1, Post 2-2, Post 2-3, Post 2-4, Post 2-5
</span><span class="line">  Post Load <span class="o">(</span>0.1ms<span class="o">)</span>  SELECT <span class="s2">&quot;posts&quot;</span>.* FROM <span class="s2">&quot;posts&quot;</span> WHERE <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;blog_id&quot;</span>, 2<span class="o">]]</span>
</span><span class="line">Post 2-1, Post 2-2, Post 2-3, Post 2-4, Post 2-5
</span><span class="line">  Post Load <span class="o">(</span>0.1ms<span class="o">)</span>  SELECT <span class="s2">&quot;posts&quot;</span>.* FROM <span class="s2">&quot;posts&quot;</span> WHERE <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;blog_id&quot;</span>, 3<span class="o">]]</span>
</span><span class="line">Post 3-1, Post 3-2, Post 3-3, Post 3-4, Post 3-5
</span><span class="line">  Post Load <span class="o">(</span>0.2ms<span class="o">)</span>  SELECT <span class="s2">&quot;posts&quot;</span>.* FROM <span class="s2">&quot;posts&quot;</span> WHERE <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;blog_id&quot;</span>, 3<span class="o">]]</span>
</span><span class="line">Post 3-1, Post 3-2, Post 3-3, Post 3-4, Post 3-5
</span><span class="line">  Post Load <span class="o">(</span>0.1ms<span class="o">)</span>  SELECT <span class="s2">&quot;posts&quot;</span>.* FROM <span class="s2">&quot;posts&quot;</span> WHERE <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;blog_id&quot;</span>, 3<span class="o">]]</span>
</span><span class="line">Post 3-1, Post 3-2, Post 3-3, Post 3-4, Post 3-5
</span><span class="line">  Post Load <span class="o">(</span>0.1ms<span class="o">)</span>  SELECT <span class="s2">&quot;posts&quot;</span>.* FROM <span class="s2">&quot;posts&quot;</span> WHERE <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;blog_id&quot;</span>, 3<span class="o">]]</span>
</span><span class="line">Post 3-1, Post 3-2, Post 3-3, Post 3-4, Post 3-5
</span><span class="line">  Post Load <span class="o">(</span>0.1ms<span class="o">)</span>  SELECT <span class="s2">&quot;posts&quot;</span>.* FROM <span class="s2">&quot;posts&quot;</span> WHERE <span class="s2">&quot;posts&quot;</span>.<span class="s2">&quot;blog_id&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;blog_id&quot;</span>, 3<span class="o">]]</span>
</span><span class="line">Post 3-1, Post 3-2, Post 3-3, Post 3-4, Post 3-5
</span></code></pre></td></tr></table></div></figure></notextile></div>

<hr />

<p><strong>Reference</strong></p>

<ul>
  <li><a href="http://blog.diatomenterprises.com/remove-n1-queries-in-your-ruby-on-rails-app/?utm_source=rubyweekly&amp;utm_medium=email">Remove N+1 queries in your Ruby on Rails app</a></li>
  <li><a href="http://stackoverflow.com/questions/1208636/rails-include-vs-joins?rq=1">Rails :include vs. :joins</a></li>
  <li><a href="http://blog.bigbinary.com/2013/07/01/preload-vs-eager-load-vs-joins-vs-includes.html">Preload, Eagerload, Includes and Joins</a></li>
  <li><a href="http://www.akitaonrails.com/2008/5/26/rolling-with-rails-2-1-the-first-full-tutorial-part-2">Rolling with Rails 2.1 - The First Full Tutorial - Part 2</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Types in Rails]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2015/08/10/data-types-in-rails/"/>
    <updated>2015-08-10T05:45:53-04:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2015/08/10/data-types-in-rails</id>
    <content type="html"><![CDATA[<p><strong><em>Have you ever got annoyed with data types when you are creating Rails migrations?</em></strong></p>

<p><strong><em>What’s the full list of data types in Rails? Does it differ from MySQL to PostgreSQL?</em></strong></p>

<p><strong><em>When adding a <code>title</code> field to <code>Post</code> table, should we use <code>title</code> as a <code>string</code> or <code>text</code>? Same answer with MySQL and PostgreSQL?</em></strong></p>

<p>You may want to check the Rails guides of <a href="http://edgeguides.rubyonrails.org/active_record_migrations.html">Active Record Migrations</a>, but all you get is disappointment because its lacking of essential information about data types.</p>

<p>Here is a quick entry about data types which I extracts from Rails API and Stack Overflow.</p>

<h2 id="general-data-type">General Data Type</h2>

<blockquote>
  <p>From <a href="http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-column">ActiveRecord::ConnectionAdapters::TableDefinition#column</a></p>
</blockquote>

<p>Instantiates a new column for the table. The type parameter is normally one of the migrations native types, which is one of the following: </p>

<ul>
  <li><code>:primary_key</code></li>
  <li><code>:string</code></li>
  <li><code>:text</code></li>
  <li><code>:integer</code></li>
  <li><code>:float</code></li>
  <li><code>:decimal</code></li>
  <li><code>:datetime</code></li>
  <li><code>:time</code></li>
  <li><code>:date</code></li>
  <li><code>:binary</code></li>
  <li><code>:boolean</code></li>
</ul>

<h2 id="specific-dbms-data-type">Specific DBMS Data Type</h2>

<blockquote>
  <p>From Psylone’s answer on <a href="http://stackoverflow.com/a/17279395/1331774">Where is the documentation page for ActiveRecord data types?</a></p>
</blockquote>

<p>Check the specific DB adaptor in source code.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>MySQL Data Types</span><a href="https://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb#L244-L256">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">NATIVE_DATABASE_TYPES</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">  <span class="ss">:primary_key</span> <span class="o">=&gt;</span> <span class="s2">&quot;int(11) auto_increment PRIMARY KEY&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="ss">:string</span>      <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;varchar&quot;</span><span class="p">,</span> <span class="ss">:limit</span> <span class="o">=&gt;</span> <span class="mi">255</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">:text</span>        <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;text&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">:integer</span>     <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;int&quot;</span><span class="p">,</span> <span class="ss">:limit</span> <span class="o">=&gt;</span> <span class="mi">4</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">:float</span>       <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;float&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">:decimal</span>     <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;decimal&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">:datetime</span>    <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;datetime&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">:time</span>        <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;time&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">:date</span>        <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;date&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">:binary</span>      <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;blob&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">:boolean</span>     <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;tinyint&quot;</span><span class="p">,</span> <span class="ss">:limit</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>PostgreSQL Data Types</span><a href="https://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb#L77-L112">link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="no">NATIVE_DATABASE_TYPES</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">  <span class="n">primary_key</span><span class="p">:</span> <span class="s2">&quot;serial primary key&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="ss">bigserial</span><span class="p">:</span> <span class="s2">&quot;bigserial&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="ss">string</span><span class="p">:</span>      <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;character varying&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">text</span><span class="p">:</span>        <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;text&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">integer</span><span class="p">:</span>     <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;integer&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">float</span><span class="p">:</span>       <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;float&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">decimal</span><span class="p">:</span>     <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;decimal&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">datetime</span><span class="p">:</span>    <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;timestamp&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">time</span><span class="p">:</span>        <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;time&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">date</span><span class="p">:</span>        <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;date&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">daterange</span><span class="p">:</span>   <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;daterange&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">numrange</span><span class="p">:</span>    <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;numrange&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">tsrange</span><span class="p">:</span>     <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;tsrange&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">tstzrange</span><span class="p">:</span>   <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;tstzrange&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">int4range</span><span class="p">:</span>   <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;int4range&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">int8range</span><span class="p">:</span>   <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;int8range&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">binary</span><span class="p">:</span>      <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;bytea&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">boolean</span><span class="p">:</span>     <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;boolean&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">bigint</span><span class="p">:</span>      <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;bigint&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">xml</span><span class="p">:</span>         <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;xml&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">tsvector</span><span class="p">:</span>    <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;tsvector&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">hstore</span><span class="p">:</span>      <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;hstore&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">inet</span><span class="p">:</span>        <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;inet&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">cidr</span><span class="p">:</span>        <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;cidr&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">macaddr</span><span class="p">:</span>     <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;macaddr&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">uuid</span><span class="p">:</span>        <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;uuid&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">json</span><span class="p">:</span>        <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;json&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">jsonb</span><span class="p">:</span>       <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;jsonb&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">ltree</span><span class="p">:</span>       <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;ltree&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">citext</span><span class="p">:</span>      <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;citext&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">point</span><span class="p">:</span>       <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;point&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">bit</span><span class="p">:</span>         <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;bit&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="n">bit_varying</span><span class="p">:</span> <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;bit varying&quot;</span> <span class="p">},</span>
</span><span class="line">  <span class="ss">money</span><span class="p">:</span>       <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;money&quot;</span> <span class="p">},</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Or, use <code>ActiveRecord::Base.connection.native_database_types.keys</code> to get all valid data types based on your database adaptor.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># PostgreSQL</span>
</span><span class="line"><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">native_database_types</span><span class="o">.</span><span class="n">keys</span>
</span><span class="line"><span class="o">[</span>
</span><span class="line">  <span class="o">[</span> <span class="mi">0</span><span class="o">]</span> <span class="ss">:primary_key</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span> <span class="mi">1</span><span class="o">]</span> <span class="ss">:bigserial</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span> <span class="mi">2</span><span class="o">]</span> <span class="ss">:string</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span> <span class="mi">3</span><span class="o">]</span> <span class="ss">:text</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span> <span class="mi">4</span><span class="o">]</span> <span class="ss">:integer</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span> <span class="mi">5</span><span class="o">]</span> <span class="ss">:float</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span> <span class="mi">6</span><span class="o">]</span> <span class="ss">:decimal</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span> <span class="mi">7</span><span class="o">]</span> <span class="ss">:datetime</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span> <span class="mi">8</span><span class="o">]</span> <span class="ss">:time</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span> <span class="mi">9</span><span class="o">]</span> <span class="ss">:date</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">10</span><span class="o">]</span> <span class="ss">:daterange</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">11</span><span class="o">]</span> <span class="ss">:numrange</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">12</span><span class="o">]</span> <span class="ss">:tsrange</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">13</span><span class="o">]</span> <span class="ss">:tstzrange</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">14</span><span class="o">]</span> <span class="ss">:int4range</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">15</span><span class="o">]</span> <span class="ss">:int8range</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">16</span><span class="o">]</span> <span class="ss">:binary</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">17</span><span class="o">]</span> <span class="ss">:boolean</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">18</span><span class="o">]</span> <span class="ss">:bigint</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">19</span><span class="o">]</span> <span class="ss">:xml</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">20</span><span class="o">]</span> <span class="ss">:tsvector</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">21</span><span class="o">]</span> <span class="ss">:hstore</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">22</span><span class="o">]</span> <span class="ss">:inet</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">23</span><span class="o">]</span> <span class="ss">:cidr</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">24</span><span class="o">]</span> <span class="ss">:macaddr</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">25</span><span class="o">]</span> <span class="ss">:uuid</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">26</span><span class="o">]</span> <span class="ss">:json</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">27</span><span class="o">]</span> <span class="ss">:jsonb</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">28</span><span class="o">]</span> <span class="ss">:ltree</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">29</span><span class="o">]</span> <span class="ss">:citext</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">30</span><span class="o">]</span> <span class="ss">:point</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">31</span><span class="o">]</span> <span class="ss">:bit</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">32</span><span class="o">]</span> <span class="ss">:bit_varying</span><span class="p">,</span>
</span><span class="line">  <span class="o">[</span><span class="mi">33</span><span class="o">]</span> <span class="ss">:money</span>
</span><span class="line"><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>There is another guide about <a href="http://edgeguides.rubyonrails.org/active_record_postgresql.html">Active Record and PostgreSQL</a>.</p>

<blockquote>
  <p>From gotqn’s answer on <a href="http://stackoverflow.com/a/25702629/1331774">Rails 4 datatypes?</a></p>
</blockquote>

<p>Rails data types mapping to different DB data types:</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/data_types_1.png" alt="Data Types 1" />
<img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/data_types_2.png" alt="Data Types 2" /></p>

<h2 id="data-type-shortcut-when-generating-model">Data Type Shortcut When Generating Model</h2>

<blockquote>
  <p>From tomascharad’s answer on <a href="http://stackoverflow.com/questions/17918117/rails-4-datatypes">Rails 4 datatypes?</a></p>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>rails generate model -h
</span><span class="line">
</span><span class="line">Available field types:
</span><span class="line">
</span><span class="line">    Just after the field name you can specify a <span class="nb">type </span>like text or boolean.
</span><span class="line">    It will generate the column with the associated SQL type. For instance:
</span><span class="line">
</span><span class="line">        <span class="sb">`</span>rails generate model post title:string body:text<span class="sb">`</span>
</span><span class="line">
</span><span class="line">    will generate a title column with a varchar <span class="nb">type </span>and a body column with a text
</span><span class="line">    type. If no <span class="nb">type </span>is specified the string <span class="nb">type </span>will be used by default.
</span><span class="line">    You can use the following types:
</span><span class="line">
</span><span class="line">        integer
</span><span class="line">        primary_key
</span><span class="line">        decimal
</span><span class="line">        float
</span><span class="line">        boolean
</span><span class="line">        binary
</span><span class="line">        string
</span><span class="line">        text
</span><span class="line">        date
</span><span class="line">        <span class="nb">time</span>
</span><span class="line"><span class="nb">        </span>datetime
</span><span class="line">
</span><span class="line">    You can also consider <span class="sb">`</span>references<span class="sb">`</span> as a kind of type. For instance, <span class="k">if </span>you run:
</span><span class="line">
</span><span class="line">        <span class="sb">`</span>rails generate model photo title:string album:references<span class="sb">`</span>
</span><span class="line">
</span><span class="line">    It will generate an <span class="sb">`</span>album_id<span class="sb">`</span> column. You should generate these kinds of fields when
</span><span class="line">    you will use a <span class="sb">`</span>belongs_to<span class="sb">`</span> association, <span class="k">for </span>instance. <span class="sb">`</span>references<span class="sb">`</span> also supports
</span><span class="line">    polymorphism, you can <span class="nb">enable </span>polymorphism like this:
</span><span class="line">
</span><span class="line">        <span class="sb">`</span>rails generate model product supplier:references<span class="o">{</span>polymorphic<span class="o">}</span><span class="sb">`</span>
</span><span class="line">
</span><span class="line">    For integer, string, text and binary fields, an integer in curly braces will
</span><span class="line">    be <span class="nb">set </span>as the limit:
</span><span class="line">
</span><span class="line">        <span class="sb">`</span>rails generate model user pseudo:string<span class="o">{</span>30<span class="o">}</span><span class="sb">`</span>
</span><span class="line">
</span><span class="line">    For decimal, two integers separated by a comma in curly braces will be used
</span><span class="line">    <span class="k">for </span>precision and scale:
</span><span class="line">
</span><span class="line">        <span class="sb">`</span>rails generate model product <span class="s1">&#39;price:decimal{10,2}&#39;</span><span class="sb">`</span>
</span><span class="line">
</span><span class="line">    You can add a <span class="sb">`</span>:uniq<span class="sb">`</span> or <span class="sb">`</span>:index<span class="sb">`</span> suffix <span class="k">for </span>unique or standard indexes
</span><span class="line">    respectively:
</span><span class="line">
</span><span class="line">        <span class="sb">`</span>rails generate model user pseudo:string:uniq<span class="sb">`</span>
</span><span class="line">        <span class="sb">`</span>rails generate model user pseudo:string:index<span class="sb">`</span>
</span><span class="line">
</span><span class="line">    You can combine any single curly brace option with the index options:
</span><span class="line">
</span><span class="line">        <span class="sb">`</span>rails generate model user username:string<span class="o">{</span>30<span class="o">}</span>:uniq<span class="sb">`</span>
</span><span class="line">        <span class="sb">`</span>rails generate model product supplier:references<span class="o">{</span>polymorphic<span class="o">}</span>:index<span class="sb">`</span>
</span><span class="line">
</span><span class="line">    If you require a <span class="sb">`</span>password_digest<span class="sb">`</span> string column <span class="k">for </span>use with
</span><span class="line">    has_secure_password, you should specify <span class="sb">`</span>password:digest<span class="sb">`</span>:
</span><span class="line">
</span><span class="line">        <span class="sb">`</span>rails generate model user password:digest<span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="should-you-choose-string-or-text">Should you choose string or text?</h2>

<p>In <strong>MySQL</strong></p>

<blockquote>
  <p>From tjeezy’s answer and Omar Qureshi’s comment on <a href="http://stackoverflow.com/a/3354452/1331774">Difference between string and text in rails?</a></p>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">:string |                   VARCHAR                | :limit <span class="o">=</span>&gt; 1 to 255 <span class="o">(</span><span class="nv">default</span> <span class="o">=</span> 255<span class="o">)</span>
</span><span class="line">:text   | TINYTEXT, TEXT, MEDIUMTEXT, or LONGTEXT2 | :limit <span class="o">=</span>&gt; 1 to 4294967296 <span class="o">(</span><span class="nv">default</span> <span class="o">=</span> 65536<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>So you’d better specify the <code>:limit</code> as a reminder to yourself that there is a limit and you should have a validation in the model to ensure that the limit is not exceeded.</p>

<p>And, you can have indexes on <code>varchars</code>, you cannot on <code>text</code>.</p>

<p>In <strong>Postgresql</strong></p>

<blockquote>
  <p>From PostgreSQL Manual <a href="http://www.postgresql.org/docs/9.3/interactive/datatype-character.html">Character Types</a></p>
</blockquote>

<p>There is no performance difference among these three types, apart from increased storage space when using the blank-padded type, and a few extra CPU cycles to check the length when storing into a length-constrained column. While <code>character(n)</code> has performance advantages in some other database systems, there is no such advantage in PostgreSQL; in fact <code>character(n)</code> is usually the slowest of the three because of its additional storage costs. In most situations <code>text</code> or <code>character</code> varying should be used instead.</p>

<blockquote>
  <p>From Omar Qureshi’s answer on <a href="http://stackoverflow.com/questions/3354330/difference-between-string-and-text-in-rails">Difference between string and text in rails?</a></p>
</blockquote>

<p>If you are using postgres use <code>text</code> wherever you can, unless you have a size constraint since there is no performance penalty for <code>text</code> vs <code>varchar</code>.</p>

<blockquote>
  <p>From mu is too short’s answer on <a href="http://stackoverflow.com/questions/8129776/rails-3-postgres-how-long-is-a-string-if-you-dont-apply-limit-in-schema">rails 3/postgres - how long is a string if you don’t apply :limit in schema</a> and <a href="http://stackoverflow.com/questions/8694273/changing-a-column-type-to-longer-strings-in-rails/8694483#8694483">Changing a column type to longer strings in rails</a></p>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">:string | character varying <span class="o">(</span>255<span class="o">)</span>
</span><span class="line">:text   | text
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>There’s no reason to use <code>:string</code> (AKA <code>varchar</code>) at all, the database treats <code>text</code> and <code>varchar(n)</code> the same internally except for the extra length constraints for <code>varchar(n)</code>; you should only use <code>varchar(n)</code> (AKA <code>:string</code>) if you have an external constrain on the column size.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Float Point Arithmetic and Truncation]]></title>
    <link href="http://blog.ifyouseewendy.com/blog/2015/04/11/ruby-float-point-arithmetic-and-truncation/"/>
    <updated>2015-04-11T09:17:56-04:00</updated>
    <id>http://blog.ifyouseewendy.com/blog/2015/04/11/ruby-float-point-arithmetic-and-truncation</id>
    <content type="html"><![CDATA[<p><strong><em>How to keep precision on float point arithmetic?</em></strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="mi">190000</span> <span class="o">*</span> <span class="p">(</span> <span class="mi">783</span><span class="o">.</span><span class="mi">0</span> <span class="o">/</span> <span class="mi">10000</span> <span class="p">)</span>
</span><span class="line"><span class="c1"># =&gt; 14876.999999999998</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span> <span class="mi">190000</span> <span class="o">*</span> <span class="mi">783</span><span class="o">.</span><span class="mi">0</span> <span class="p">)</span> <span class="o">/</span> <span class="mi">10000</span>
</span><span class="line"><span class="c1"># =&gt; 14877.0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong><em>How to make a 2 point truncation instead of rounding?</em></strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="mi">195555</span> <span class="o">*</span> <span class="mi">0</span><span class="o">.</span><span class="mo">07</span><span class="mi">83</span>
</span><span class="line"><span class="c1"># =&gt; 15311.956499999998</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span> <span class="mi">195555</span> <span class="o">*</span> <span class="mi">0</span><span class="o">.</span><span class="mo">07</span><span class="mi">83</span> <span class="p">)</span><span class="o">.</span><span class="n">round</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line"><span class="c1"># =&gt; 15311.96</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="plain-solution">Plain Solution</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># Public: A calculator aims handling Float operation precision and</span>
</span><span class="line"><span class="c1"># saving the result with truncated 2 point Float.</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1"># Examples</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1">#   190000 * 0.0783</span>
</span><span class="line"><span class="c1">#   # =&gt; 14876.999999999998</span>
</span><span class="line"><span class="c1">#   190000 * 783 / 10000</span>
</span><span class="line"><span class="c1">#   # =&gt; 14877</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1">#   cal = RateCalculator.new(190000, 0.0783)</span>
</span><span class="line"><span class="c1">#   cal.run</span>
</span><span class="line"><span class="c1">#   # =&gt; 14877.0</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1">#   195555 * 0.0783</span>
</span><span class="line"><span class="c1">#   # =&gt; 15311.956499999998</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1">#   cal = RateCalculator.new(195555, 0.0783)</span>
</span><span class="line"><span class="c1">#   # =&gt; 15311.95</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1"># Returns a Float</span>
</span><span class="line"><span class="k">class</span> <span class="nc">RateCalculator</span>
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:base</span><span class="p">,</span> <span class="ss">:rate</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># Internal: Handles 6 point rate.</span>
</span><span class="line">  <span class="no">MAGNIFIER</span> <span class="o">=</span> <span class="mi">1000000</span>
</span><span class="line">
</span><span class="line">  <span class="c1"># Public: Initialization</span>
</span><span class="line">  <span class="c1">#</span>
</span><span class="line">  <span class="c1"># base - Integer</span>
</span><span class="line">  <span class="c1"># rate - Numeric</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="n">rate</span><span class="p">)</span>
</span><span class="line">    <span class="k">raise</span> <span class="s2">&quot;#initialize: &lt;base&gt; needs to be Integer&quot;</span> <span class="k">unless</span> <span class="n">base</span><span class="o">.</span><span class="n">is_a?</span> <span class="nb">Integer</span>
</span><span class="line">
</span><span class="line">    <span class="vi">@base</span> <span class="o">=</span> <span class="n">base</span>
</span><span class="line">    <span class="vi">@rate</span> <span class="o">=</span> <span class="n">rate</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">run</span>
</span><span class="line">    <span class="n">truncate_2_point</span> <span class="no">MAGNIFIER</span><span class="o">*</span><span class="n">rate</span><span class="o">*</span><span class="n">base</span><span class="o">/</span><span class="no">MAGNIFIER</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="kp">private</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">truncate_2_point</span><span class="p">(</span><span class="n">float</span><span class="p">)</span>
</span><span class="line">      <span class="p">(</span><span class="n">float</span> <span class="o">*</span> <span class="mi">100</span><span class="p">)</span><span class="o">.</span><span class="n">to_i</span> <span class="o">/</span> <span class="mi">100</span><span class="o">.</span><span class="mi">0</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It works, but with so many worries about the unknown conditions.</p>

<h3 id="bigdecimal">BigDecimal</h3>

<p>First, what the hell happens on the precision of float point arithmetic?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="mi">0</span><span class="o">.</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">0</span><span class="o">.</span><span class="mi">2</span>
</span><span class="line"><span class="c1"># =&gt; 0.30000000000000004</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>According to <a href="http://floating-point-gui.de/">What Every Programmer Should Know About Floating-Point Arithmetic</a>, the answer is the binary fraction issue.</p>

<p><img src="https://github.com/ifyouseewendy/ifyouseewendy.github.io/raw/source/image-repo/binary_fraction.png" alt="Binary Fraction" /></p>

<blockquote>
  <p>Specifically, binary can only represent those numbers as a finite fraction where the denominator is a power of 2. Unfortunately, this does not include most of the numbers that can be represented as finite fraction in base 10, like 0.1.</p>
</blockquote>

<p>To get through the precision problem, Ruby provides the <strong>Arbitrary-Precision Decimal</strong> shipped by <code>BigDecimal</code>. And so sweet, <code>BigDecimal</code> supports several rounding modes, including <code>:truncate</code>.</p>

<p>Here is the final solution.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;bigdecimal&#39;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># Public: A calculator aims handling arithmatic precision and</span>
</span><span class="line"><span class="c1"># saving the result with 2 points truncated decimal.</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1"># Examples</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1">#   190000 * 0.0783</span>
</span><span class="line"><span class="c1">#   # =&gt; 14876.999999999998</span>
</span><span class="line"><span class="c1">#   190000 * 783 / 10000</span>
</span><span class="line"><span class="c1">#   # =&gt; 14877</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1">#   cal = RateCalculator.new(190000, 0.0783).run</span>
</span><span class="line"><span class="c1">#   # =&gt; 14877.0</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1">#   195555 * 0.0783</span>
</span><span class="line"><span class="c1">#   # =&gt; 15311.956499999998</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1">#   cal = RateCalculator.new(195555, 0.0783).run</span>
</span><span class="line"><span class="c1">#   # =&gt; 15311.95</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1"># Returns a BigDecimal</span>
</span><span class="line"><span class="k">class</span> <span class="nc">RateCalculator</span>
</span><span class="line">  <span class="kp">attr_reader</span> <span class="ss">:base</span><span class="p">,</span> <span class="ss">:rate</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="n">rate</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@base</span> <span class="o">=</span> <span class="no">BigDecimal</span><span class="p">(</span><span class="n">base</span><span class="o">.</span><span class="n">to_s</span><span class="p">)</span>
</span><span class="line">    <span class="vi">@rate</span> <span class="o">=</span> <span class="no">BigDecimal</span><span class="p">(</span><span class="n">rate</span><span class="o">.</span><span class="n">to_s</span><span class="p">)</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="nf">run</span>
</span><span class="line">    <span class="no">BigDecimal</span><span class="o">.</span><span class="n">save_rounding_mode</span> <span class="k">do</span>
</span><span class="line">      <span class="no">BigDecimal</span><span class="o">.</span><span class="n">mode</span><span class="p">(</span><span class="ss">BigDecimal</span><span class="p">:</span><span class="ss">:ROUND_MODE</span><span class="p">,</span> <span class="ss">:truncate</span><span class="p">)</span>
</span><span class="line">      <span class="p">(</span><span class="n">base</span><span class="o">*</span><span class="n">rate</span><span class="p">)</span><span class="o">.</span><span class="n">round</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="reference">Reference</h4>

<ul>
  <li><a href="http://floating-point-gui.de/">Float Point Guide</a></li>
  <li><a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/bigdecimal/rdoc/BigDecimal.html">Ruby Doc BigDecimal</a></li>
  <li><a href="http://makandracards.com/makandra/1178-bigdecimal-arithmetic-in-ruby">BigDecimal arithmetic in Ruby</a></li>
  <li><a href="http://makandracards.com/makandra/1505-invoices-how-to-properly-round-and-calculate-totals">Invoices: How to properly round and calculate totals</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
